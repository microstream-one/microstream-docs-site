antoraSearch.initSearch(lunr, {"index":{"version":"2.3.9","fields":["title","name","text","component"],"fieldVectors":[["title/1-1",[0,57.12]],["name/1-1",[]],["text/1-1",[]],["component/1-1",[]],["title/1-2",[1,37.258,2,34.766]],["name/1-2",[]],["text/1-2",[]],["component/1-2",[]],["title/1",[3,32.112,4,23.978]],["name/1",[3,1.531,4,1.143]],["text/1",[1,2.415,2,2.253,5,2.003,6,1.518,7,0.807,8,4.291,9,2.438,10,1.484,11,1.495,12,4.951,13,2.522,14,2.492,15,2.953,16,6.012,17,4.554,18,6.033,19,2.303,20,1.333,21,4.003,22,4.554,23,3.62,24,3.62,25,4.554,26,4.942,27,2.858,28,2.945,29,4.942,30,1.917,31,2.076,32,2.415,33,4.274,34,1.392,35,1.923,36,2.754,37,4.635,38,1.682,39,1.968,40,2.026,41,2.095,42,2.953,43,2.378,44,3.62,45,1.842,46,1.254,47,2.886,48,2.139,49,1.822,50,2.662,51,3.066,52,1.877,53,3.623,54,1.53,55,2.856,56,2.506,57,3.066,58,1.605,59,3.62,60,1.675,61,3.204,62,2.438,63,2.513,64,0.901,65,2.902,66,1.77,67,1.579,68,3.62,69,5.218,70,1.861,71,2.528,72,2.185,73,2.826,74,2.253,75,4.003,76,2.953,77,3.62,78,2.253]],["component/1",[79,0.574]],["title/2-1",[80,70.023]],["name/2-1",[]],["text/2-1",[]],["component/2-1",[]],["title/2-2",[37,31.597,81,27.639,82,28.688]],["name/2-2",[]],["text/2-2",[]],["component/2-2",[]],["title/2-3",[12,50.872]],["name/2-3",[]],["text/2-3",[]],["component/2-3",[]],["title/2-4",[16,50.872]],["name/2-4",[]],["text/2-4",[]],["component/2-4",[]],["title/2-5",[8,29.944]],["name/2-5",[]],["text/2-5",[]],["component/2-5",[]],["title/2-6",[53,45.447]],["name/2-6",[]],["text/2-6",[]],["component/2-6",[]],["title/2",[8,29.944]],["name/2",[83,2.18]],["text/2",[3,1.683,7,1.323,8,4.436,12,2.127,13,2.877,19,0.74,28,3.229,31,2.531,36,1.908,37,5.43,40,2.195,43,1.247,48,3.506,49,0.955,52,2.288,53,3.064,56,1.314,60,1.354,62,1.972,63,2.033,64,1.987,72,2.85,84,1.391,85,2.388,86,2.388,87,1.582,88,1.448,89,3.012,90,2.17,91,2.591,92,2.809,93,1.9,94,2.441,95,1.953,96,2.927,97,2.927,98,2.591,99,2.809,100,2.821,101,2.591,102,1.953,103,2.033,104,1.343,105,2.38,106,2.101,107,2.241,108,1.445,109,1.706,110,2.927,111,1.894,112,2.533,113,2.591,114,2.662,115,1.46,116,2.591,117,2.388,118,1.694,119,1.404,120,1.917,121,1.547,122,2.241,123,1.385,124,1.883,125,1.564,126,2.962,127,2.156,128,1.717,129,2.927,130,1.729,131,2.591,132,3.636,133,3.211,134,3.12,135,1.953,136,1.63,137,2.733,138,1.915,139,1.742,140,2.927,141,1.62,142,3.786,143,1.62,144,1.354,145,1.438,146,1.706,147,3.012,148,2.388,149,1.767,150,1.651,151,1.953,152,1.822,153,4.721,154,4.107,155,2.591,156,3.39,157,2.127,158,3.609,159,1.78,160,2.48,161,1.822,162,2.927,163,2.388,164,2.127,165,1.661,166,1.601,167,1.694,168,1.103,169,1.373,170,2.733,171,1.972]],["component/2",[79,0.574]],["title/3-1",[172,70.023]],["name/3-1",[]],["text/3-1",[]],["component/3-1",[]],["title/3-2",[173,38.757]],["name/3-2",[]],["text/3-2",[]],["component/3-2",[]],["title/3-3",[174,70.023]],["name/3-3",[]],["text/3-3",[]],["component/3-3",[]],["title/3-4",[173,38.757]],["name/3-4",[]],["text/3-4",[]],["component/3-4",[]],["title/3-5",[175,59.322]],["name/3-5",[]],["text/3-5",[]],["component/3-5",[]],["title/3-6",[176,28.397]],["name/3-6",[]],["text/3-6",[]],["component/3-6",[]],["title/3-7",[173,38.757]],["name/3-7",[]],["text/3-7",[]],["component/3-7",[]],["title/3-8",[177,33.718,178,34.228]],["name/3-8",[]],["text/3-8",[]],["component/3-8",[]],["title/3-9",[179,50.27]],["name/3-9",[]],["text/3-9",[]],["component/3-9",[]],["title/3-10",[180,43.937]],["name/3-10",[]],["text/3-10",[]],["component/3-10",[]],["title/3-11",[19,17.696]],["name/3-11",[]],["text/3-11",[]],["component/3-11",[]],["title/3-12",[8,29.944]],["name/3-12",[]],["text/3-12",[]],["component/3-12",[]],["title/3-13",[88,17.088]],["name/3-13",[]],["text/3-13",[]],["component/3-13",[]],["title/3-14",[181,57.12]],["name/3-14",[]],["text/3-14",[]],["component/3-14",[]],["title/3-15",[176,28.397]],["name/3-15",[]],["text/3-15",[]],["component/3-15",[]],["title/3-16",[173,38.757]],["name/3-16",[]],["text/3-16",[]],["component/3-16",[]],["title/3-17",[177,33.718,178,34.228]],["name/3-17",[]],["text/3-17",[]],["component/3-17",[]],["title/3-18",[182,70.023]],["name/3-18",[]],["text/3-18",[]],["component/3-18",[]],["title/3-19",[176,28.397]],["name/3-19",[]],["text/3-19",[]],["component/3-19",[]],["title/3-20",[173,38.757]],["name/3-20",[]],["text/3-20",[]],["component/3-20",[]],["title/3-21",[177,33.718,178,34.228]],["name/3-21",[]],["text/3-21",[]],["component/3-21",[]],["title/3-22",[183,70.023]],["name/3-22",[]],["text/3-22",[]],["component/3-22",[]],["title/3-23",[173,38.757]],["name/3-23",[]],["text/3-23",[]],["component/3-23",[]],["title/3-24",[184,60.586]],["name/3-24",[]],["text/3-24",[]],["component/3-24",[]],["title/3-25",[176,28.397]],["name/3-25",[]],["text/3-25",[]],["component/3-25",[]],["title/3-26",[173,38.757]],["name/3-26",[]],["text/3-26",[]],["component/3-26",[]],["title/3-27",[177,33.718,178,34.228]],["name/3-27",[]],["text/3-27",[]],["component/3-27",[]],["title/3-28",[185,61.99]],["name/3-28",[]],["text/3-28",[]],["component/3-28",[]],["title/3-29",[176,28.397]],["name/3-29",[]],["text/3-29",[]],["component/3-29",[]],["title/3-30",[173,38.757]],["name/3-30",[]],["text/3-30",[]],["component/3-30",[]],["title/3-31",[177,33.718,178,34.228]],["name/3-31",[]],["text/3-31",[]],["component/3-31",[]],["title/3-32",[186,61.99]],["name/3-32",[]],["text/3-32",[]],["component/3-32",[]],["title/3-33",[176,28.397]],["name/3-33",[]],["text/3-33",[]],["component/3-33",[]],["title/3-34",[173,38.757]],["name/3-34",[]],["text/3-34",[]],["component/3-34",[]],["title/3-35",[177,33.718,178,34.228]],["name/3-35",[]],["text/3-35",[]],["component/3-35",[]],["title/3",[187,57.12]],["name/3",[187,3.384]],["text/3",[1,0.436,2,0.407,3,0.376,4,0.281,7,2.145,8,2.002,13,0.409,14,0.757,19,1.598,20,0.652,27,0.274,28,1.035,30,0.608,31,0.659,34,0.477,35,0.347,36,0.501,37,0.445,38,0.577,39,0.355,40,1.022,41,1.558,43,1.754,45,0.333,46,0.43,47,1.014,48,0.733,49,1.953,50,0.481,52,0.596,54,0.952,55,0.516,56,0.557,58,0.55,60,1.042,64,0.862,66,0.607,70,1.159,71,1.219,73,0.897,78,0.407,82,0.766,83,0.344,84,1.28,85,0.533,86,0.533,88,2.124,89,0.792,90,0.985,92,0.389,94,0.338,95,0.828,98,0.579,99,1.602,103,0.454,104,0.3,105,0.262,108,1.528,109,0.381,111,0.262,114,0.999,115,1.342,117,0.533,119,0.85,121,0.656,123,1.274,124,1.14,125,0.349,127,0.299,128,0.728,132,0.401,133,0.844,136,0.691,138,0.265,141,0.362,146,3.143,147,0.417,149,1.36,150,0.999,152,1.103,154,1.102,159,0.755,160,0.554,161,2.156,167,0.718,168,0.849,171,0.44,173,1.247,176,0.265,177,1.625,178,1.381,179,0.469,180,1.414,181,0.533,185,0.579,186,0.579,188,2.236,189,5.451,190,0.594,191,0.654,192,1.241,193,0.654,194,0.654,195,2.369,196,0.891,197,0.902,198,0.61,199,1.369,200,1.392,201,1.511,202,1.099,203,0.654,204,0.654,205,0.579,206,0.654,207,0.723,208,0.395,209,0.459,210,0.585,211,1.241,212,1.43,213,0.401,214,0.454,215,0.501,216,1.657,217,0.366,218,0.401,219,1.792,220,2.033,221,0.888,222,1.251,223,0.262,224,0.63,225,0.508,226,0.63,227,0.979,228,0.773,229,0.464,230,0.844,231,0.533,232,0.533,233,0.407,234,1.198,235,1.241,236,0.836,237,1.257,238,0.654,239,0.459,240,2.526,241,0.436,242,1.815,243,1.099,244,0.902,245,0.875,246,0.349,247,0.654,248,0.871,249,0.654,250,0.533,251,2.747,252,1.121,253,1.499,254,1.121,255,0.533,256,0.421,257,1.241,258,1.995,259,3.955,260,0.95,261,0.654,262,0.654,263,0.579,264,1.599,265,0.654,266,1.602,267,0.654,268,4.64,269,1.703,270,0.902,271,0.881,272,0.654,273,1.287,274,0.654,275,0.579,276,0.654,277,0.975,278,0.454,279,0.654,280,0.902,281,0.654,282,0.579,283,0.902,284,0.654,285,0.979,286,0.654,287,1.012,288,0.533,289,0.654,290,0.516,291,0.654,292,0.902,293,1.241,294,0.766,295,2.616,296,0.654,297,0.654,298,0.533,299,0.654,300,1.16,301,0.579,302,0.654,303,0.533,304,0.654,305,0.61,306,0.654,307,0.533,308,0.654,309,1.356,310,0.654,311,0.501,312,0.783,313,0.783,314,0.783,315,0.783,316,0.783,317,0.783,318,0.783,319,0.783,320,0.783,321,0.783,322,0.783,323,0.783,324,0.783,325,0.783,326,0.783,327,0.783,328,0.783,329,0.783,330,0.783,331,0.783,332,0.783,333,0.783,334,0.783,335,0.783,336,0.783,337,0.783,338,0.783,339,0.783,340,0.783,341,0.783,342,0.783,343,0.783,344,0.783,345,0.783,346,0.783,347,0.783,348,0.783,349,0.783,350,0.783,351,0.783,352,0.783,353,0.783,354,0.783,355,0.783,356,0.783,357,0.783,358,0.783,359,0.783,360,0.783,361,0.783,362,0.783,363,0.783,364,0.783,365,0.783,366,0.783,367,0.783,368,0.783,369,0.783,370,0.783,371,0.783,372,0.783,373,0.783,374,0.783,375,0.783,376,0.783,377,0.783,378,0.783,379,0.783,380,0.783,381,0.445,382,1.241,383,1.241,384,1.241,385,0.579,386,0.579,387,0.579,388,0.501,389,0.61,390,1.763,391,0.61,392,0.61,393,0.61,394,0.554,395,0.61,396,0.554,397,0.331,398,0.723,399,0.554,400,0.695,401,0.533,402,0.61,403,0.475,404,0.785,405,0.61,406,0.654,407,0.579,408,1.917,409,0.654,410,0.749,411,0.654,412,0.95,413,0.579,414,0.579,415,0.654,416,1.489,417,0.654,418,0.654,419,1.356,420,0.654,421,0.679,422,0.654,423,0.654,424,0.862,425,0.654,426,0.579,427,0.654,428,1.869,429,0.654,430,0.981,431,0.428,432,0.654,433,0.454,434,0.654,435,1.146,436,0.501,437,0.654,438,0.454,439,0.654,440,0.773,441,0.969,442,0.654,443,0.469,444,0.654,445,0.475,446,0.654,447,0.449,448,0.501,449,0.351,450,1.15,451,0.421,452,0.501,453,0.714,454,0.654,455,1.012,456,0.533,457,0.533,458,1.489,459,0.501,460,0.533,461,0.344,462,0.487,463,0.487,464,0.543,465,0.445,466,0.494,467,0.654,468,0.594,469,0.501,470,0.501,471,0.952,472,0.579,473,1.489,474,0.579,475,1.272,476,0.654,477,0.738,478,0.891,479,0.723,480,1.303,481,0.454,482,0.424,483,0.475,484,1.663,485,0.436,486,0.628,487,0.654,488,1.08,489,3.905,490,0.501,491,1.356,492,0.809,493,0.407,494,0.779,495,0.579,496,0.414,497,0.285,498,0.792,499,0.364,500,1.558,501,0.389,502,0.475,503,0.554,504,0.401,505,1.472,506,0.902,507,0.654,508,0.311,509,0.579,510,0.389,511,0.579,512,0.386,513,0.579,514,0.533,515,0.654,516,1.103,517,1.099,518,0.654,519,0.475,520,0.464,521,0.543,522,0.436,523,0.728,524,0.358,525,0.358,526,0.355,527,0.436,528,0.533,529,0.475,530,0.61,531,0.902,532,1.241,533,1.196,534,0.714,535,1.241,536,0.566,537,0.654,538,0.533,539,0.449,540,1.099,541,0.566,542,0.654,543,1.241,544,1.241,545,0.654,546,0.654,547,0.533,548,0.695,549,0.654,550,0.516,551,0.82,552,0.785,553,0.524,554,0.533,555,1.564,556,0.501,557,0.533,558,0.428,559,0.566,560,0.543,561,0.454,562,0.654,563,0.524,564,0.355,565,0.881,566,0.533,567,0.533,568,0.579,569,0.386,570,0.369,571,0.891,572,0.828,573,0.233,574,0.579,575,1.012,576,0.654,577,0.579,578,0.469,579,0.487,580,0.61,581,1.241,582,0.654,583,0.654,584,0.654,585,0.654,586,0.654,587,0.579,588,0.501,589,0.414,590,0.364,591,0.714,592,0.587,593,1.099,594,0.436,595,0.654,596,0.723,597,0.936,598,0.464,599,0.228,600,0.654,601,0.82,602,0.475,603,0.654,604,0.533,605,0.654,606,0.475,607,0.654,608,0.654,609,0.654,610,0.311,611,0.44,612,0.654,613,0.579,614,0.61,615,0.421,616,0.937,617,1.099,618,0.329,619,1.241,620,0.533,621,0.654,622,0.533,623,1.086,624,0.533,625,0.654,626,0.654,627,0.654,628,0.579,629,0.654,630,0.654,631,0.667,632,1.012,633,0.95,634,0.654,635,0.654,636,0.218,637,0.428,638,0.654,639,0.554,640,0.533,641,1.099,642,0.654,643,0.579,644,0.654,645,0.579,646,0.654,647,0.654,648,0.654,649,0.654,650,0.63,651,0.579,652,0.654]],["component/3",[79,0.574]],["title/4-1",[19,14.115,78,34.766]],["name/4-1",[]],["text/4-1",[]],["component/4-1",[]],["title/4-2",[200,36.201]],["name/4-2",[]],["text/4-2",[]],["component/4-2",[]],["title/4-3",[210,26.309,508,26.551]],["name/4-3",[]],["text/4-3",[]],["component/4-3",[]],["title/4",[653,57.12]],["name/4",[653,3.384]],["text/4",[5,0.661,6,0.913,7,2.22,8,0.931,9,1.466,10,2.325,11,2.343,13,0.717,14,2.157,19,1.433,27,0.501,31,3.238,34,0.459,37,1.48,40,0.995,43,0.927,46,0.414,47,0.45,49,0.71,52,0.402,58,0.53,60,0.553,63,0.83,64,1.653,66,0.584,70,0.614,72,0.721,78,0.744,81,0.711,85,0.975,86,0.975,88,2.198,90,2.205,92,1.295,105,0.479,111,2.113,114,2.083,115,2.14,121,2.268,122,0.915,124,2.377,126,0.75,135,1.999,136,1.669,138,0.485,145,0.587,154,1.064,159,0.727,166,0.653,179,1.563,195,2.295,196,2.152,199,1.185,200,0.618,201,3.297,210,1.025,221,1.091,222,2.236,229,1.545,230,2.039,231,1.775,237,2.127,240,2.636,248,1.528,251,0.797,259,3.94,260,0.915,264,3.415,266,3.587,269,2.337,270,1.581,271,1.545,273,2.178,275,1.058,277,2.361,278,1.511,280,1.581,283,1.581,285,1.717,287,0.975,288,0.975,290,1.717,292,1.581,294,1.344,295,3.528,298,0.975,300,3.45,303,0.975,307,1.775,309,1.666,311,1.666,390,0.782,460,0.975,461,0.628,462,0.89,464,0.993,471,0.642,473,1.438,486,0.605,492,1.369,496,0.756,499,0.665,508,2.288,512,0.706,519,1.581,520,0.848,522,0.797,523,3.537,524,2.347,525,1.639,526,0.65,527,0.797,529,0.868,548,2.07,564,0.65,568,1.058,573,1.53,591,0.687,601,1.387,610,0.568,615,0.769,618,0.602,623,0.732,654,1.085,655,0.762,656,1.195,657,2.176,658,1.195,659,1.195,660,3.694,661,5.143,662,1.195,663,1.195,664,1.195,665,1.195,666,1.195,667,1.195,668,1.195,669,2.889,670,1.195,671,1.195,672,1.195,673,1.195,674,1.195,675,0.858,676,2.176,677,1.195,678,1.195,679,2.176,680,2.997,681,1.195,682,2.176,683,1.195,684,2.176,685,1.195,686,1.152,687,1.195,688,1.195,689,1.195,690,2.176,691,1.195,692,1.058,693,1.322,694,1.15,695,1.058,696,0.579,697,1.085,698,1.195,699,1.511,700,0.67,701,2.445,702,3.502,703,1.116,704,1.012,705,0.797,706,1.775,707,2.593,708,1.058,709,0.83,710,0.661,711,1.195,712,1.195,713,1.012,714,1.717,715,1.413,716,1.666,717,3.713,718,0.915,719,0.902,720,0.975,721,1.701,722,1.775,723,2.403,724,1.496,725,2.653,726,2.295,727,1.563,728,1.058,729,0.879,730,1.058,731,1.973,732,0.993,733,1.116,734,0.79,735,0.868,736,0.628,737,1.844,738,0.975,739,2.167,740,1.058,741,1.195,742,1.058,743,0.75,744,0.501,745,0.782,746,0.682,747,1.012,748,0.744,749,0.858,750,1.058,751,0.915,752,1.195,753,1.058,754,1.012,755,0.624,756,1.195,757,0.821,758,0.949,759,0.696,760,1.545,761,0.868,762,0.775,763,1.058,764,0.797]],["component/4",[79,0.574]],["title/5-1",[199,22.087,473,36.911]],["name/5-1",[]],["text/5-1",[]],["component/5-1",[]],["title/5-2",[199,18.369,201,20.263,700,26.03]],["name/5-2",[]],["text/5-2",[]],["component/5-2",[]],["title/5-3",[655,29.633,765,41.124,766,41.124]],["name/5-3",[]],["text/5-3",[]],["component/5-3",[]],["title/5",[201,24.364,767,24.868]],["name/5",[201,1.162,767,1.186]],["text/5",[7,1.657,14,1.021,38,1.94,40,0.967,70,2.146,78,2.598,84,2.957,102,2.784,118,2.416,121,2.205,123,1.975,133,2.839,144,1.931,199,2.94,201,1.821,208,2.52,209,2.93,210,2.93,216,3.07,243,3.695,277,3.422,455,3.405,473,5.444,474,9.057,491,4.762,493,2.598,502,3.032,531,3.032,655,2.663,700,2.339,702,2.578,736,2.193,744,1.751,746,5.844,748,2.598,768,3.293,769,9.478,770,7.434,771,5.001,772,4.174,773,4.174,774,4.023,775,4.174,776,3.196,777,3.405,778,4.174,779,4.174,780,4.174,781,4.174,782,4.174,783,4.174,784,4.174,785,3.695,786,4.174,787,4.174,788,3.347,789,4.174,790,3.611,791,3.196,792,4.174,793,2.52,794,3.536,795,2.484,796,2.663,797,4.174,798,3.405,799,3.032,800,3.783,801,4.174,802,2.598,803,3.405,804,2.31,805,2.898,806,3.695,807,4.174,808,3.196,809,2.416]],["component/5",[79,0.574]],["title/6-1",[20,17.101,175,39.354,810,41.124]],["name/6-1",[]],["text/6-1",[]],["component/6-1",[]],["title/6-2",[70,28.723,811,55.853]],["name/6-2",[]],["text/6-2",[]],["component/6-2",[]],["title/6-3",[199,27.69]],["name/6-3",[]],["text/6-3",[]],["component/6-3",[]],["title/6-4",[812,61.99]],["name/6-4",[]],["text/6-4",[]],["component/6-4",[]],["title/6",[813,57.12]],["name/6",[813,3.384]],["text/6",[7,2.175,8,2.609,14,1.493,38,3.78,40,1.414,54,2.579,70,3.137,79,1.624,82,3.768,84,2.9,88,1.489,90,2.231,102,4.07,118,3.531,138,2.474,175,5.169,178,3.739,187,4.977,199,2.413,207,3.555,218,3.739,219,3.831,490,4.671,493,3.798,497,2.661,653,4.977,707,4.282,709,4.236,745,3.995,812,5.401,813,4.977,814,6.101,815,6.101,816,3.711,817,4.432,818,6.378,819,4.977,820,5.279,821,7.31,822,6.101,823,6.101,824,5.696,825,6.101,826,5.696]],["component/6",[79,0.574]],["title/7-1",[241,26.523,731,16.304,827,31.37,828,35.2]],["name/7-1",[]],["text/7-1",[]],["component/7-1",[]],["title/7-2",[39,30.364,731,22.903]],["name/7-2",[]],["text/7-2",[]],["component/7-2",[]],["title/7",[111,18.634,803,37.893,829,35.567]],["name/7",[111,0.787,803,1.599,829,1.501]],["text/7",[4,3.471,7,1.076,14,1.181,19,0.937,30,0.751,34,1.857,35,1.97,36,0.883,38,1.016,40,0.507,46,1.285,52,2.14,56,1.665,58,0.969,60,3.201,64,2.144,66,2.361,71,2.575,73,2.879,74,1.361,81,1.301,88,0.533,93,1.419,104,1.003,105,2.281,108,1.079,109,1.274,111,2.554,115,1.09,119,1.049,127,0.998,138,0.887,139,1.301,143,1.21,154,1.813,158,1.33,166,1.196,167,2.794,169,2.985,201,1.617,212,1.162,240,1.608,241,4.247,246,3.039,295,2.972,397,1.107,400,1.225,408,1.21,412,1.674,430,1.21,451,1.407,463,2.762,477,1.301,479,1.274,483,1.588,486,3.223,488,0.877,516,1.361,540,1.935,547,1.783,548,4.132,552,1.383,555,2.574,564,1.188,565,2.631,570,1.233,572,1.458,589,3.054,590,2.689,594,1.458,599,0.762,618,1.101,645,1.935,694,1.155,697,1.09,705,1.458,721,1.241,731,3.769,734,1.445,739,1.283,744,1.555,793,1.32,795,1.301,796,1.395,798,1.783,802,1.361,804,1.21,827,4.487,828,1.935,830,2.186,831,2.522,832,2.308,833,1.935,834,1.852,835,1.472,836,1.534,837,3.221,838,6.124,839,1.935,840,2.473,841,1.783,842,1.674,843,3.574,844,2.839,845,1.432,846,2.186,847,2.186,848,2.186,849,2.497,850,2.186,851,2.694,852,2.206,853,1.935,854,1.395,855,2.186,856,1.935,857,1.935,858,1.608,859,1.935,860,0.977,861,4.828,862,1.588,863,3.995,864,1.985,865,2.694,866,2.255,867,1.892,868,2.186,869,2.662,870,1.292,871,1.588,872,1.783,873,1.552,874,2.839,875,3.282,876,2.186,877,2.118,878,1.783,879,2.186,880,1.674,881,1.674,882,2.186,883,1.935,884,1.518,885,1.432,886,1.935,887,2.186,888,2.186,889,2.186,890,1.935,891,2.662,892,2.041,893,1.33,894,1.518,895,1.383,896,1.935,897,1.518,898,1.217,899,1.725,900,1.149,901,2.175,902,1.361,903,1.783,904,1.588,905,2.107,906,2.186,907,1.935,908,1.651,909,1.33,910,1.852]],["component/7",[79,0.574]],["title/8",[64,13.904,410,33.718]],["name/8",[64,0.663,410,1.608]],["text/8",[45,3.194,52,2.786,54,2.653,64,2.31,67,2.738,88,2.264,108,3.099,145,3.084,240,2.761,410,6.195,430,3.474,478,4.506,501,3.735,508,2.984,548,3.517,573,3.308,596,3.657,744,2.633,767,2.795,877,3.585,911,5.431,912,5.12,913,4.952,914,4.806,915,3.971,916,4.806,917,5.557,918,4.405,919,4.877,920,6.277,921,6.277,922,7.338,923,4.617]],["component/8",[79,0.574]],["title/9-1",[0,57.12]],["name/9-1",[]],["text/9-1",[]],["component/9-1",[]],["title/9-2",[1,37.258,2,34.766]],["name/9-2",[]],["text/9-2",[]],["component/9-2",[]],["title/9-3",[46,19.357,592,26.429]],["name/9-3",[]],["text/9-3",[]],["component/9-3",[]],["title/9-4",[47,21.045,731,22.903]],["name/9-4",[]],["text/9-4",[]],["component/9-4",[]],["title/9-5",[52,18.776,64,13.904]],["name/9-5",[]],["text/9-5",[]],["component/9-5",[]],["title/9-6",[241,30.987,731,19.048,827,36.649]],["name/9-6",[]],["text/9-6",[]],["component/9-6",[]],["title/9",[3,32.112,4,23.978]],["name/9",[3,1.531,4,1.143]],["text/9",[1,1.5,2,3.067,3,2.183,4,1.63,5,1.244,6,1.592,7,1.442,9,2.557,10,1.557,11,1.568,14,2.64,19,0.568,20,2.132,27,2.714,30,0.772,32,1.5,34,0.865,40,0.521,41,1.301,46,2.722,47,1.43,49,1.239,52,2.36,56,1.009,58,1.683,60,2.679,64,1.442,67,0.981,71,2.231,72,1.357,73,1.922,74,2.363,84,1.069,88,2.175,90,0.822,105,0.902,108,1.11,111,2.323,119,1.822,137,1.301,138,2.624,149,2.292,150,2.779,169,2.715,213,1.378,218,1.378,219,1.059,223,0.902,295,1.049,300,2.486,408,2.101,449,1.208,463,1.675,477,2.259,479,1.31,486,1.138,488,1.523,492,1.734,493,1.399,497,2.822,499,1.252,508,1.069,558,1.472,561,1.561,564,1.222,573,2.306,578,1.614,592,4.58,599,0.784,636,1.269,697,1.121,700,1.26,721,2.155,731,2.878,746,1.284,762,1.459,767,1.001,795,1.338,804,1.244,832,1.399,838,3.361,839,3.361,854,1.434,860,1.697,869,1.614,877,1.284,900,1.181,924,2.248,925,2.663,926,3.361,927,2.04,928,2.248,929,1.99,930,2.907,931,3.721,932,2.907,933,2.292,934,5.126,935,1.633,936,1.446,937,2.099,938,2.248,939,5.23,940,2.099,941,1.697,942,1.868,943,1.868,944,6.47,945,1.545,946,1.301,947,1.388,948,1.5,949,2.248,950,4.928,951,1.338,952,2.248,953,1.26,954,2.248,955,1.529,956,1.721,957,1.422,958,1.99,959,1.654,960,2.248,961,2.248,962,1.422,963,1.367,964,1.328,965,1.208,966,2.248,967,1.378]],["component/9",[79,0.574]],["title/10-1",[240,18.608,447,38.379]],["name/10-1",[]],["text/10-1",[]],["component/10-1",[]],["title/10-2",[8,23.884,447,38.379]],["name/10-2",[]],["text/10-2",[]],["component/10-2",[]],["title/10-3",[697,27.852,918,39.201]],["name/10-3",[]],["text/10-3",[]],["component/10-3",[]],["title/10-4",[430,30.914,877,31.902]],["name/10-4",[]],["text/10-4",[]],["component/10-4",[]],["title/10",[430,38.757]],["name/10",[430,2.296]],["text/10",[4,0.553,7,0.519,8,2.163,14,0.315,19,1.588,20,1.441,28,1.741,30,0.8,32,1.555,34,0.896,35,0.685,36,0.942,40,0.299,41,0.746,45,0.656,46,2.054,51,1.091,52,1.856,54,1.914,56,2.033,58,1.033,64,1.941,67,0.562,79,0.257,81,0.767,82,0.796,84,1.517,88,1.903,90,0.471,93,2.071,99,3.526,102,1.555,105,0.517,109,0.751,111,1.28,121,0.681,127,2.31,130,1.377,134,1.54,136,0.717,137,0.746,138,1.294,139,0.767,141,2.166,143,1.29,144,0.596,145,0.633,148,1.051,150,1.799,151,0.859,157,0.936,158,0.784,161,1.451,166,3.019,167,1.349,169,0.604,171,1.57,210,0.607,215,0.986,219,0.607,220,1.76,222,0.599,223,0.517,240,3.145,241,0.859,244,1.693,245,0.636,246,0.688,250,1.051,295,1.088,381,0.876,397,1.616,400,0.722,410,3.577,430,3.479,431,0.844,433,1.618,435,2.196,440,0.802,441,1.275,445,2.843,447,3.112,449,0.692,450,0.836,453,1.34,463,0.96,480,0.948,485,1.555,486,0.652,488,1.28,501,1.899,503,1.091,504,1.428,506,0.936,508,1.108,514,1.051,526,1.267,539,1.601,541,1.115,548,0.722,555,1.618,556,0.986,560,1.07,563,1.033,571,0.925,588,0.986,592,0.61,596,1.358,599,0.449,616,0.973,675,0.925,694,1.231,697,1.952,705,1.555,709,0.895,731,0.528,736,0.677,744,1.899,746,0.736,757,0.885,799,0.936,802,1.986,804,1.29,831,3.441,835,0.868,837,0.859,842,2.996,849,1.57,852,0.767,860,0.576,863,0.808,869,1.673,870,1.377,872,1.901,874,1.784,875,1.141,880,0.986,881,2.996,885,2.563,893,0.784,895,0.815,898,0.717,900,2.379,908,3.419,912,2.603,916,0.986,918,4.837,919,1.811,923,0.948,927,1.252,936,0.829,939,0.96,946,1.847,957,0.815,963,0.784,964,0.761,968,1.115,969,1.288,970,4.834,971,0.986,972,4.529,973,1.141,974,1.736,975,2.331,976,1.016,977,1.288,978,2.603,979,1.016,980,2.109,981,4.537,982,2.063,983,1.288,984,1.288,985,1.141,986,2.063,987,1.288,988,0.986,989,0.844,990,2.063,991,2.331,992,0.904,993,1.051,994,1.288,995,1.869,996,1.901,997,1.288,998,2.063,999,2.603,1000,1.141,1001,5.059,1002,1.051,1003,1.288,1004,0.986,1005,1.051,1006,1.016,1007,0.986,1008,1.895,1009,1.288,1010,0.904,1011,1.288,1012,2.331,1013,1.474,1014,1.288,1015,2.063,1016,1.288,1017,1.439,1018,1.288,1019,1.288,1020,1.141,1021,1.736,1022,1.673,1023,1.811,1024,1.288,1025,1.288,1026,1.288,1027,0.986,1028,1.288,1029,1.901,1030,1.288,1031,1.141,1032,2.409,1033,1.141,1034,0.986,1035,0.986,1036,2.331,1037,1.288,1038,1.288,1039,0.696,1040,1.288,1041,1.513,1042,1.141,1043,3.465,1044,1.033,1045,1.051,1046,2.063,1047,0.925,1048,1.288,1049,2.063,1050,2.331,1051,0.936,1052,0.772,1053,1.091,1054,1.288,1055,0.936,1056,0.696,1057,1.288,1058,1.288,1059,1.288,1060,0.914,1061,0.986,1062,1.974,1063,1.288,1064,1.288,1065,1.203,1066,1.051,1067,1.288,1068,0.936,1069,0.948,1070,1.141,1071,2.149,1072,1.288,1073,1.288,1074,1.288,1075,0.948,1076,1.001,1077,1.141,1078,2.331,1079,1.288,1080,2.331,1081,1.288,1082,1.288,1083,1.288,1084,1.288,1085,1.288,1086,1.288,1087,1.288]],["component/10",[79,0.574]],["title/11-1",[64,13.904,1088,38.379]],["name/11-1",[]],["text/11-1",[]],["component/11-1",[]],["title/11",[14,11.364,212,24.681,481,32.255]],["name/11",[212,1.415,481,1.849]],["text/11",[7,0.589,13,0.87,14,2.725,20,2.359,27,1.109,36,1.068,40,0.613,43,1.851,47,0.996,49,2.091,64,1.377,66,2.125,70,1.359,71,2.901,74,3.988,88,2.05,94,1.367,144,2.56,145,1.299,151,1.763,190,3.945,210,1.245,212,2.939,230,1.798,234,1.024,240,2.68,242,1.551,253,2.42,254,1.672,266,3.812,295,1.234,397,3.244,400,2.435,440,1.645,441,3.025,479,1.54,481,4.916,482,1.716,514,3.544,519,5.844,599,0.922,610,2.065,723,2.12,724,4.403,743,3.471,762,1.716,791,2.024,849,1.78,878,2.156,884,1.835,885,1.731,897,3.017,925,1.429,962,1.672,1008,1.28,1089,3.559,1090,2.12,1091,1.672,1092,2.34,1093,2.34,1094,1.672,1095,2.239,1096,2.156,1097,4.123,1098,2.914,1099,4.123,1100,6.408,1101,4.542,1102,2.4,1103,4.345,1104,2.643,1105,2.643,1106,2.643,1107,2.763,1108,2.643,1109,4.513,1110,2.054,1111,1.876,1112,2.763,1113,2.763,1114,2.763,1115,2.763,1116,2.763,1117,2.763,1118,2.763,1119,2.763,1120,2.763,1121,2.156,1122,2.156,1123,2.156,1124,2.468,1125,1.835,1126,2.12,1127,2.643,1128,2.643,1129,2.643,1130,2.4,1131,2.643,1132,2.763,1133,4.542,1134,4.542,1135,2.643,1136,4.345,1137,1.53,1138,4.542,1139,2.763,1140,2.763,1141,2.763,1142,2.054,1143,2.763,1144,2.763,1145,2.643,1146,2.643,1147,2.763,1148,2.196,1149,2.643]],["component/11",[79,0.574]],["title/12",[88,17.088]],["name/12",[83,2.18]],["text/12",[2,1.245,7,1.346,13,0.659,20,1.265,31,1.278,32,1.335,36,1.826,40,1.047,41,1.158,45,1.018,46,0.693,52,3.006,58,0.887,60,2.795,64,2.181,67,0.873,79,0.399,81,1.19,82,1.236,88,1.309,90,2.581,91,1.771,94,1.777,95,3.578,103,1.389,104,2.073,108,2.648,111,2.423,123,0.947,126,1.255,130,1.182,132,2.107,134,4.358,135,3.015,139,2.045,144,0.926,145,1.689,149,2.075,150,1.128,159,2.091,161,3.338,176,1.833,197,1.453,201,0.873,212,1.063,245,0.988,256,1.287,294,2.791,295,2.504,435,0.741,441,1.88,461,1.051,475,1.436,482,1.298,484,3.544,486,1.013,488,1.813,493,1.245,504,2.107,506,3.283,508,2.55,516,2.813,524,1.094,526,1.869,529,1.453,534,1.15,539,1.375,548,1.926,552,1.266,572,1.335,573,1.912,591,2.598,594,1.335,596,3.52,601,2.091,610,2.148,615,1.287,618,3.043,622,5.38,623,1.226,628,1.771,636,1.792,655,2.193,694,1.816,701,1.632,707,1.404,709,2.387,710,1.107,718,1.532,731,1.41,732,1.662,734,1.322,735,1.453,736,1.051,739,2.652,744,0.839,747,1.695,748,4.847,751,1.532,757,2.362,761,1.453,765,1.771,766,1.771,793,1.208,833,4.748,837,1.335,840,1.335,845,1.31,849,1.347,852,1.19,854,1.276,873,2.44,884,1.389,898,1.914,917,1.771,927,1.075,932,1.532,971,2.632,980,1.322,989,1.31,1007,1.532,1013,1.266,1041,1.298,1068,1.453,1125,2.387,1150,1.771,1151,2.883,1152,3.755,1153,5.758,1154,4.519,1155,2.859,1156,2.001,1157,2.001,1158,3.209,1159,1.771,1160,2.001,1161,2.001,1162,1.771,1163,3.437,1164,4.519,1165,1.771,1166,2.001,1167,2.001,1168,3.043,1169,3.043,1170,3.209,1171,3.437,1172,1.532,1173,1.771,1174,2.001,1175,1.771,1176,2.001,1177,1.868,1178,1.731,1179,2.001,1180,2.001,1181,2.001,1182,1.632,1183,2.001,1184,1.771,1185,1.771,1186,2.001,1187,2.001,1188,1.389,1189,1.632,1190,1.453,1191,1.771,1192,1.695,1193,1.632,1194,1.771,1195,1.771,1196,1.771,1197,2.001]],["component/12",[79,0.574]],["title/13",[1155,44.298]],["name/13",[1155,2.624]],["text/13",[7,1.931,14,2.285,34,2.11,36,2.217,40,2.008,52,1.844,64,1.884,67,2.393,89,3.5,90,2.768,99,3.265,104,2.517,111,2.201,137,3.176,144,2.539,176,2.225,201,2.393,246,4.044,294,3.389,295,2.561,465,3.732,488,2.201,497,2.393,500,2.764,502,3.986,508,3.598,510,3.265,564,2.983,573,2.698,697,2.736,700,3.075,709,3.81,744,2.301,836,3.851,860,2.453,1022,5.434,1151,3.5,1155,5.909,1169,4.857,1198,3.851,1199,3.939,1200,5.123,1201,4.857,1202,4.036,1203,3.114,1204,5.487,1205,5.487,1206,5.487,1207,5.487,1208,5.487]],["component/13",[79,0.574]],["title/14-1",[67,24.364,111,22.405]],["name/14-1",[]],["text/14-1",[]],["component/14-1",[]],["title/14-2",[46,16.099,234,17.987,592,21.981]],["name/14-2",[]],["text/14-2",[]],["component/14-2",[]],["title/14",[46,19.357,592,26.429]],["name/14",[46,0.923,592,1.26]],["text/14",[2,1.141,4,3.458,7,0.942,14,2.239,20,1.173,28,1.225,30,1.735,34,1.626,35,0.974,36,2.042,40,0.425,41,1.061,46,3.257,47,2.156,49,1.379,52,2.518,54,2.654,58,0.813,60,1.956,64,1.052,66,0.896,71,1.914,73,1.613,74,1.983,82,1.132,88,0.447,90,0.67,92,1.09,93,1.189,94,0.947,104,1.461,105,0.735,109,1.068,111,3.005,119,2.424,127,0.837,128,1.869,130,1.083,137,1.061,139,1.09,141,1.014,146,1.068,154,2.471,164,1.331,169,0.859,208,1.106,209,1.286,214,1.272,234,1.637,245,0.905,256,1.179,397,0.928,435,1.566,452,1.403,458,1.211,465,1.246,477,1.09,484,0.985,485,1.222,488,2.296,492,0.837,508,2.721,526,1.732,534,2.43,548,1.027,551,1.211,552,2.674,561,1.272,564,2.298,571,2.287,573,2.405,590,1.774,591,1.054,592,4.499,594,1.222,596,1.068,597,0.968,599,0.639,615,3.251,616,1.384,636,1.065,639,1.552,640,1.495,694,0.968,705,1.222,715,2.068,716,1.403,721,1.808,731,3.071,734,3.339,735,1.331,736,0.963,744,0.769,793,4.073,796,1.169,802,1.141,804,2.34,832,1.141,837,1.222,858,1.348,860,0.819,870,1.882,873,1.301,877,1.047,885,2.086,890,1.622,891,1.316,898,1.02,901,1.075,902,1.983,903,1.495,909,1.115,915,1.159,929,1.622,931,2.406,932,1.403,936,1.179,946,1.061,995,4.051,1002,1.495,1041,1.189,1047,1.316,1089,2.72,1091,1.159,1162,1.622,1168,1.622,1188,1.272,1201,1.622,1202,2.344,1209,1.495,1210,1.495,1211,6.279,1212,1.301,1213,1.832,1214,2.374,1215,1.403,1216,1.622,1217,3.714,1218,5.316,1219,1.832,1220,3.39,1221,1.832,1222,1.331,1223,3.186,1224,1.348,1225,1.622,1226,1.622,1227,1.586,1228,1.832,1229,1.331,1230,1.622,1231,1.272,1232,1.495,1233,1.316,1234,1.832,1235,3.186,1236,5.053,1237,3.186,1238,1.331,1239,1.832,1240,1.622,1241,1.832,1242,1.832,1243,1.832,1244,1.832,1245,1.832,1246,2.44,1247,1.15,1248,1.832,1249,1.622,1250,1.622,1251,1.832,1252,1.622,1253,1.832,1254,1.495,1255,1.832]],["component/14",[79,0.574]],["title/15",[19,17.696]],["name/15",[83,2.18]],["text/15",[1,3.233,2,3.017,7,1.08,8,3.464,12,3.521,13,2.667,14,2.382,15,3.954,16,5.04,17,3.954,19,2.591,22,5.659,25,3.954,26,4.291,27,2.033,28,1.864,29,4.291,30,2.382,31,1.802,33,3.711,34,1.864,37,3.297,40,2.323,43,2.064,69,7.165,76,3.954,78,3.017,104,2.223,133,3.297,168,1.826,176,1.966,201,2.114,240,2.311,397,2.454,401,3.954,485,3.233,488,1.944,492,2.213,494,3.041,526,2.635,592,2.293,636,1.62,721,2.75,758,2.114,965,2.604,1256,4.847,1257,4.291,1258,4.847,1259,4.847,1260,4.847,1261,4.847,1262,4.847,1263,4.291,1264,4.847,1265,4.847,1266,4.847,1267,4.847]],["component/15",[79,0.574]],["title/16",[168,26.384]],["name/16",[168,1.563]],["text/16",[8,4.485,19,2.165,28,3.067,35,2.078,38,1.818,40,1.657,43,1.666,48,4.224,49,2.333,52,1.991,53,5.176,60,1.81,63,2.716,69,2.995,72,2.362,88,0.955,105,1.569,145,2.911,150,2.206,168,2.232,215,2.995,222,2.753,240,1.303,385,3.463,386,3.463,387,3.463,388,2.995,389,3.652,391,3.652,393,3.652,394,3.314,395,3.652,396,3.314,397,2.999,398,4.647,399,3.314,400,3.32,401,4.832,402,3.652,403,2.842,404,3.748,405,3.652,431,2.562,461,2.055,488,1.569,494,2.455,501,2.328,555,4.113,624,4.832,696,1.895,697,1.951,700,3.32,749,4.253,758,2.584,767,2.638,933,2.362,1039,3.202,1218,2.776,1268,3.652,1269,3.912,1270,5.398,1271,5.924,1272,6.057,1273,5.244,1274,3.912,1275,4.602,1276,3.463,1277,2.877,1278,4.204,1279,5.019,1280,5.924,1281,3.912,1282,4.536]],["component/16",[79,0.574]],["title/17-1",[125,29.843,138,22.651]],["name/17-1",[]],["text/17-1",[]],["component/17-1",[]],["title/17",[88,17.088]],["name/17",[88,1.012]],["text/17",[7,1.488,8,4.256,12,2.545,13,1.153,14,2.724,15,2.858,16,3.955,17,2.858,19,2.181,22,2.858,25,2.858,30,1.203,40,1.547,47,2.051,52,1.178,64,1.874,69,4.168,71,1.586,72,2.115,73,2.756,74,2.181,76,2.858,78,2.181,88,1.989,122,2.682,124,2.254,125,1.872,133,2.383,168,1.32,210,1.65,385,4.819,386,4.819,387,3.101,396,6.377,399,6.377,407,4.819,414,4.819,416,2.315,522,2.337,615,2.254,623,2.147,736,1.841,745,2.294,758,1.528,956,2.682,1094,2.216,1111,7.173,1263,4.819,1273,3.101,1283,3.503,1284,5.443,1285,4.819,1286,2.829,1287,5.172,1288,3.503,1289,3.875,1290,3.875,1291,3.031,1292,3.503,1293,3.503,1294,3.503,1295,3.503,1296,3.503,1297,3.503,1298,4.819,1299,3.503,1300,3.503,1301,3.101,1302,3.101,1303,3.101,1304,3.101,1305,3.101]],["component/17",[79,0.574]],["title/18-1",[125,29.843,138,22.651]],["name/18-1",[]],["text/18-1",[]],["component/18-1",[]],["title/18",[8,17.003,120,26.037,121,21.008,124,25.582]],["name/18",[8,0.664,120,1.016,121,0.82,124,0.998]],["text/18",[5,2.999,6,2.273,7,1.919,8,3.681,9,3.65,10,2.222,11,2.239,14,2.106,19,1.896,40,1.256,43,2.308,47,2.042,104,2.485,118,3.136,122,4.149,124,5.538,125,2.895,154,2.65,161,3.373,168,3.243,200,2.801,210,2.552,213,3.321,263,4.797,295,2.53,390,3.548,522,5.742,526,2.946,599,1.89,636,1.811,749,3.89,933,3.271,1111,5.326,1291,4.688,1298,6.643,1301,4.797,1302,4.797,1303,4.797,1304,4.797,1305,4.797,1306,4.149,1307,5.419,1308,5.419,1309,7.504,1310,5.419,1311,5.419,1312,5.419,1313,5.419,1314,5.419,1315,5.419,1316,5.059,1317,5.419]],["component/18",[79,0.574]],["title/19",[8,23.884,125,29.843]],["name/19",[8,1.139,125,1.423]],["text/19",[5,2.515,6,1.906,7,1.476,8,4.464,9,3.06,10,1.863,11,1.877,13,2.18,14,2.232,16,3.301,18,4.022,19,1.148,20,1.673,31,1.689,40,1.534,114,3.734,121,2.401,125,5.384,127,2.075,176,2.685,180,2.851,200,2.349,210,3.119,213,2.784,218,2.784,239,5.483,256,2.923,404,4.942,497,3.407,636,2.212,694,2.401,702,4.089,755,4.082,794,3.849,832,2.828,849,3.06,854,2.898,899,5.224,951,2.703,953,2.546,989,2.975,1318,5.401,1319,4.544,1320,6.621,1321,4.544,1322,2.806,1323,4.544,1324,4.544,1325,4.544,1326,4.544,1327,4.544,1328,4.544,1329,4.544,1330,4.544,1331,4.544,1332,4.022,1333,4.544,1334,4.544,1335,4.544,1336,4.544]],["component/19",[79,0.574]],["title/20",[19,17.696]],["name/20",[19,1.048]],["text/20",[5,3.401,6,2.577,7,1.821,9,4.138,10,2.519,11,2.538,13,2.023,19,1.553,28,2.363,30,2.11,66,3.004,115,3.064,132,3.765,165,3.487,200,3.176,208,3.709,221,4.096,222,3.798,248,5.736,435,2.277,492,2.806,599,2.143,722,5.012,746,3.509,965,3.302,1052,3.682,1111,4.36,1322,3.794,1337,4.464,1338,5.439,1339,4.519,1340,5.439,1341,7.234,1342,5.439,1343,5.439,1344,6.144,1345,6.144,1346,5.439,1347,6.144,1348,5.104,1349,5.012,1350,5.012,1351,3.953,1352,5.439]],["component/20",[79,0.574]],["title/21",[47,21.045,435,20.697]],["name/21",[47,1.003,435,0.987]],["text/21",[13,1.496,14,2.588,20,1.673,27,3.6,36,1.836,40,1.81,47,3.438,58,2.015,64,1.131,67,1.982,105,1.823,115,3.895,138,1.843,143,2.515,150,2.562,156,3.262,168,2.495,219,2.14,221,2.277,223,1.823,233,2.828,246,2.428,435,2.895,492,3.024,497,3.407,569,2.684,601,3.064,805,3.155,817,3.301,841,3.706,900,2.387,957,2.874,964,3.912,1061,3.479,1353,5.96,1354,5.069,1355,5.069,1356,5.861,1357,5.981,1358,3.479,1359,3.479,1360,3.479,1361,3.155,1362,3.706,1363,4.022,1364,3.155,1365,3.155,1366,4.022,1367,4.022,1368,4.379,1369,3.479,1370,4.022,1371,4.544,1372,4.022,1373,6.621,1374,6.621,1375,6.621,1376,4.544,1377,4.544]],["component/21",[79,0.574]],["title/22-1",[435,25.948]],["name/22-1",[]],["text/22-1",[]],["component/22-1",[]],["title/22-2",[221,27.992,492,25.508]],["name/22-2",[]],["text/22-2",[]],["component/22-2",[]],["title/22",[58,24.765,435,20.697]],["name/22",[58,1.181,435,0.987]],["text/22",[14,2.784,20,2.312,27,3.553,28,0.33,30,1.581,31,1.839,34,0.33,36,0.649,40,0.199,43,3.13,49,1.094,64,0.706,139,0.511,165,0.488,176,0.348,199,0.34,221,0.805,222,0.399,223,0.345,233,4.161,251,0.573,435,1.567,492,0.392,497,4.497,570,3.127,601,2.566,636,1.653,736,0.452,767,0.383,804,0.476,860,4.258,891,1.153,925,4.373,947,4.008,948,2.236,951,0.511,953,4.964,965,0.462,1022,0.617,1039,0.464,1121,2.734,1198,0.603,1247,1.007,1351,0.553,1378,0.761,1379,0.761,1380,0.859,1381,2.838,1382,0.761,1383,8.472,1384,0.859,1385,0.859,1386,9.282,1387,8.383,1388,0.859,1389,7.984,1390,0.859,1391,0.603,1392,0.859,1393,2.26,1394,2.967,1395,5.122,1396,2.967,1397,0.859,1398,1.606,1399,2.26,1400,0.859,1401,0.859,1402,0.859,1403,1.421,1404,6.685,1405,6.685,1406,0.859,1407,4.946,1408,1.421,1409,2.838,1410,2.838,1411,2.512,1412,1.421,1413,1.421,1414,2.838,1415,2.838,1416,1.421,1417,2.512,1418,2.512,1419,1.606,1420,2.512,1421,2.512,1422,2.838,1423,2.838,1424,0.859,1425,4.604,1426,1.421,1427,2.28,1428,1.606,1429,0.859,1430,1.606,1431,0.859,1432,0.859,1433,1.421,1434,1.421,1435,0.859,1436,0.859,1437,2.26,1438,0.859,1439,1.606,1440,0.859,1441,0.859,1442,0.859,1443,4.604,1444,0.859,1445,5.546,1446,1.606,1447,1.606,1448,1.606,1449,1.606,1450,0.859,1451,5.259,1452,0.859,1453,0.859,1454,0.859,1455,0.859,1456,0.859,1457,0.859,1458,0.859,1459,1.606,1460,0.859]],["component/22",[79,0.574]],["title/23",[115,27.852,435,20.697]],["name/23",[83,2.18]],["text/23",[7,0.257,13,0.695,14,2.764,19,0.292,20,2.296,27,3.516,30,1.908,31,1.917,34,0.444,40,0.489,46,1.452,47,0.435,49,0.377,54,0.488,56,0.519,58,0.512,64,1.171,66,0.565,78,0.719,81,0.687,82,1.8,84,1.003,87,1.141,115,2.089,123,0.547,149,0.697,151,0.771,154,0.565,165,0.656,167,0.669,168,0.435,197,0.839,208,0.697,209,0.811,221,1.46,233,3.682,400,0.647,428,0.802,435,2.311,461,0.607,492,1.643,497,4.334,508,1.003,516,0.719,520,1.498,547,0.942,570,3.68,590,0.643,591,0.664,601,2.177,604,1.722,631,0.621,636,1.857,739,0.678,744,0.885,755,0.604,767,0.514,809,1.222,816,0.703,831,0.786,860,4.028,897,0.802,900,1.531,901,0.678,909,0.703,925,3.918,947,3.185,948,2.401,953,4.375,964,0.683,986,1.023,1004,0.885,1055,0.839,1061,0.885,1125,0.802,1182,0.942,1192,0.979,1215,0.885,1322,1.303,1337,1.533,1339,0.85,1343,1.023,1346,1.023,1350,0.942,1352,3.186,1353,6.802,1354,5.846,1355,5.846,1356,1.023,1361,0.802,1365,2.499,1366,2.58,1367,1.023,1369,0.885,1370,1.023,1394,1.869,1395,3.837,1396,1.869,1403,1.023,1408,1.023,1411,2.58,1412,1.023,1413,1.023,1416,1.023,1417,1.869,1418,1.869,1420,1.869,1421,1.869,1426,1.023,1427,2.448,1433,1.023,1434,1.869,1461,2.034,1462,1.155,1463,1.079,1464,1.395,1465,0.743,1466,1.113,1467,1.155,1468,1.023,1469,1.155,1470,1.869,1471,1.155,1472,0.979,1473,0.898,1474,0.911,1475,0.926,1476,1.155,1477,1.155,1478,0.979,1479,1.155,1480,1.155,1481,1.155,1482,1.155,1483,5.558,1484,5.558,1485,0.942,1486,5.915,1487,2.111,1488,2.111,1489,2.111,1490,2.111,1491,2.111,1492,2.111,1493,2.111,1494,5.558,1495,1.155,1496,1.155,1497,1.155,1498,1.155,1499,2.111,1500,1.155,1501,1.155,1502,2.914,1503,1.155,1504,1.155,1505,2.111,1506,2.914,1507,1.155,1508,1.155,1509,1.155,1510,1.155,1511,1.533,1512,1.155,1513,1.155,1514,1.155,1515,1.155,1516,1.155,1517,1.155,1518,1.155,1519,1.155,1520,2.914,1521,1.155,1522,1.155,1523,1.155,1524,1.155,1525,2.111,1526,1.155,1527,1.049,1528,1.155,1529,1.155,1530,1.155]],["component/23",[79,0.574]],["title/24",[809,40.528]],["name/24",[809,2.401]],["text/24",[7,1.057,13,1.561,14,2.364,20,1.745,31,2.539,40,1.099,47,3.015,49,1.547,64,1.18,115,2.364,128,2.782,131,4.197,132,2.906,146,2.763,159,2.884,169,2.223,213,2.906,214,3.292,221,2.376,237,4.846,435,3.244,450,3.077,461,3.588,497,2.979,564,2.578,636,2.282,702,2.928,755,2.478,776,3.63,796,3.025,800,2.884,809,3.952,900,2.491,925,4.325,951,2.821,953,2.657,955,3.225,1353,3.292,1357,3.63,1358,3.63,1359,3.63,1360,3.63,1365,3.292,1391,3.328,1427,3.225,1531,3.868,1532,6.042,1533,6.828,1534,7.751,1535,8.002,1536,3.868,1537,4.741,1538,4.741,1539,4.741,1540,4.741,1541,4.741,1542,4.741,1543,4.197,1544,4.197,1545,4.197,1546,4.427,1547,4.741,1548,4.197,1549,4.741,1550,4.102]],["component/24",[79,0.574]],["title/25",[39,30.364,115,27.852]],["name/25",[39,1.448,115,1.328]],["text/25",[14,2.389,20,2.57,40,1.617,47,3.345,115,3.481,138,2.831,176,2.831,435,2.587,502,5.071,694,3.688,806,6.179,967,4.277,1017,4.311,1055,5.071,1212,4.954,1353,4.846,1357,5.344,1358,5.344,1359,5.344,1360,5.344,1532,5.27,1534,7.86,1543,6.179,1551,6.179,1552,6.179,1553,6.179,1554,6.179,1555,5.27]],["component/25",[79,0.574]],["title/26",[435,20.697,461,29.348]],["name/26",[435,0.987,461,1.399]],["text/26",[28,2.561,34,3.313,36,2.691,39,3.621,64,2.145,67,2.905,103,4.624,115,4.296,138,2.701,149,4.021,168,3.599,461,5.629,499,3.709,504,4.081,570,3.756,636,2.225,744,2.793,964,3.935,1091,4.213,1306,5.099,1364,4.624,1464,4.401,1556,5.642,1557,6.66,1558,6.66,1559,6.66,1560,6.66,1561,6.66]],["component/26",[79,0.574]],["title/27",[84,33.287]],["name/27",[84,1.972]],["text/27",[14,2.447,20,1.772,35,1.593,36,1.211,39,1.63,40,1.87,47,2.272,48,3.562,53,1.946,56,2.161,62,2.019,64,1.501,84,4.437,105,1.202,108,1.48,115,4.229,119,1.438,136,1.669,139,1.784,146,2.804,165,1.701,219,1.412,435,2.558,458,3.18,461,3.168,480,2.205,508,1.425,517,4.26,565,2.127,573,1.069,591,1.723,599,1.045,637,1.963,705,2,710,1.659,721,1.701,736,1.575,740,4.26,744,1.257,802,2.996,845,1.963,860,1.34,866,1.823,869,2.152,895,3.044,900,1.575,907,2.654,909,1.823,927,1.611,935,2.178,965,1.611,1017,2.972,1022,2.152,1055,2.178,1056,1.62,1060,2.127,1198,2.104,1275,2.329,1287,2.06,1318,6.165,1351,1.929,1353,4.186,1357,4.616,1358,3.685,1359,3.685,1360,3.685,1361,3.342,1362,2.445,1364,2.081,1365,2.081,1372,2.654,1531,2.445,1544,7.144,1545,5.338,1551,7.144,1552,5.338,1553,2.654,1554,4.26,1562,2.654,1563,4.813,1564,4.813,1565,6.029,1566,2.998,1567,4.813,1568,4.813,1569,2.998,1570,2.998,1571,2.998,1572,2.654,1573,2.081,1574,2.998,1575,2.998,1576,2.998,1577,2.998,1578,2.998,1579,2.998,1580,2.998,1581,2.998,1582,2.998,1583,2.998,1584,1.896,1585,2.998,1586,2.54,1587,2.263,1588,2.799,1589,2.998,1590,4.813,1591,6.902]],["component/27",[79,0.574]],["title/28",[19,17.696]],["name/28",[19,1.048]],["text/28",[5,2.568,6,1.946,7,1.034,9,3.125,10,1.903,11,1.917,13,1.528,14,2.121,19,1.173,27,2.82,40,1.832,43,1.977,45,2.361,49,2.829,104,3.084,105,1.861,137,2.686,165,2.633,200,2.399,221,3.369,222,3.674,223,1.861,248,4.719,397,2.349,465,3.156,492,2.119,497,3.781,520,3.293,527,4.485,601,3.111,636,2.642,655,2.96,722,3.785,746,2.65,755,2.425,829,3.553,901,2.723,910,3.931,951,2.761,959,3.413,965,3.613,1007,3.553,1203,3.815,1247,2.912,1322,5.353,1337,3.371,1338,4.108,1339,4.945,1340,4.108,1341,5.952,1342,4.108,1592,4.64,1593,4.64,1594,6.723,1595,4.64,1596,4.64,1597,4.64,1598,3.785,1599,4.64,1600,4.333,1601,3.785,1602,4.64,1603,4.64,1604,4.64,1605,4.64,1606,4.64]],["component/28",[79,0.574]],["title/29",[945,48.115]],["name/29",[83,2.18]],["text/29",[7,0.487,14,2.663,20,0.805,31,2.572,34,2.448,35,1.162,36,0.883,40,0.507,46,3.185,47,0.824,49,2.257,52,2.14,56,0.982,67,1.617,70,1.124,92,1.301,104,2.214,108,1.079,114,2.091,115,1.09,119,1.049,127,0.998,137,1.265,138,0.887,144,1.716,165,1.241,167,1.265,169,1.025,176,0.887,200,1.13,207,1.274,213,1.34,221,2.85,222,2.959,233,3.005,245,1.079,435,0.81,482,1.419,492,2.908,497,4.368,527,3.794,566,3.025,569,1.292,573,2.027,587,1.935,601,3.412,623,1.34,636,1.613,710,4.081,718,1.674,739,1.283,744,0.917,751,1.674,753,1.935,755,1.938,805,1.518,808,1.674,809,2.146,851,1.588,859,3.282,860,2.846,891,1.569,893,1.33,897,1.518,901,2.175,925,2.004,945,5.555,946,1.265,947,2.29,948,2.473,951,4.116,953,4.53,965,2.594,1045,1.783,1093,1.935,1125,1.518,1151,1.395,1215,1.674,1306,1.674,1322,1.35,1337,1.588,1361,1.518,1532,1.651,1598,6.015,1607,2.186,1608,2.186,1609,2.186,1610,1.935,1611,2.186,1612,3.938,1613,2.186,1614,1.935,1615,1.935,1616,2.186,1617,2.186,1618,1.985,1619,4.828,1620,3.282,1621,1.935,1622,3.282,1623,3.282,1624,3.282,1625,3.282,1626,3.708,1627,5.034,1628,5.687,1629,3.282,1630,3.282,1631,3.708,1632,3.708,1633,2.186,1634,3.708,1635,2.186,1636,2.186,1637,1.935,1638,2.186,1639,1.935,1640,2.186]],["component/29",[79,0.574]],["title/30",[453,40.259]],["name/30",[453,2.385]],["text/30",[7,0.611,13,1.475,14,2.736,30,2.25,31,2.684,34,1.055,40,0.636,46,3.144,49,2.356,52,1.908,84,1.304,104,1.258,111,1.1,114,4.369,133,1.866,200,1.418,221,2.245,222,1.275,223,1.1,233,4.078,492,1.253,497,4.378,526,2.435,527,5.687,566,2.238,569,1.621,573,1.597,601,3.782,636,2.413,710,3.626,795,2.665,805,1.905,860,3.464,925,3.068,945,6.896,947,2.766,948,3.786,951,2.665,953,4.777,1306,2.1,1395,2.238,1598,6.32,1612,3.654,1620,3.965,1621,3.965,1622,5.8,1623,2.428,1624,3.965,1625,3.965,1627,3.965,1629,2.428,1630,2.428,1637,2.428,1641,5.676,1642,2.743,1643,4.479,1644,2.743,1645,2.428,1646,2.743,1647,6.117,1648,2.743,1649,1.947,1650,2.743,1651,4.479]],["component/30",[79,0.574]],["title/31-1",[138,22.651,697,27.852]],["name/31-1",[]],["text/31-1",[]],["component/31-1",[]],["title/31-2",[1652,49.446,1653,42.764]],["name/31-2",[]],["text/31-2",[]],["component/31-2",[]],["title/31-3",[125,29.843,1654,49.446]],["name/31-3",[]],["text/31-3",[]],["component/31-3",[]],["title/31-4",[491,42.764,1655,49.446]],["name/31-4",[]],["text/31-4",[]],["component/31-4",[]],["title/31",[138,18.839,152,28.915,1653,35.567]],["name/31",[138,0.795,152,1.22,1653,1.501]],["text/31",[7,2.076,40,1.264,41,3.156,67,2.379,88,1.331,111,3.023,125,4.027,138,3.056,145,2.679,152,3.394,154,2.666,166,2.982,222,2.534,223,2.187,397,3.816,491,5.77,590,3.036,697,2.719,702,3.367,731,2.236,800,3.316,851,3.961,880,4.175,916,4.175,955,5.126,965,2.93,1212,3.87,1230,4.827,1652,6.672,1653,7.133,1654,4.827,1655,7.646,1656,5.453,1657,9.778,1658,5.453,1659,5.453,1660,6.385,1661,5.453,1662,7.536,1663,4.175,1664,7.536,1665,5.453,1666,5.453,1667,5.453,1668,5.453]],["component/31",[79,0.574]],["title/32-1",[28,21.478,49,18.227]],["name/32-1",[]],["text/32-1",[]],["component/32-1",[]],["title/32-2",[697,34.919]],["name/32-2",[]],["text/32-2",[]],["component/32-2",[]],["title/32",[49,15.159,471,24.962,564,25.254]],["name/32",[49,0.64,471,1.054,564,1.066]],["text/32",[5,2.146,6,1.626,7,1.585,9,2.611,10,1.59,11,1.602,13,1.276,14,0.948,27,1.626,31,1.441,35,2.06,40,0.898,49,3.139,50,2.852,84,1.843,90,1.418,99,2.307,104,1.778,127,1.771,136,2.159,145,1.905,168,1.461,200,2.004,221,2.949,223,1.555,240,1.292,244,4.275,266,3.501,295,2.747,298,4.8,471,3.821,473,3.888,484,2.083,494,2.433,509,3.432,510,2.307,511,3.432,512,2.291,521,3.221,528,3.163,558,2.539,564,3.199,573,1.382,574,3.432,655,2.473,697,2.934,710,2.146,730,3.432,759,2.259,870,2.291,925,2.095,930,2.969,936,2.494,951,2.307,965,2.083,1125,2.692,1188,2.692,1203,2.2,1231,2.692,1427,2.637,1555,2.927,1610,3.432,1669,3.877,1670,3.877,1671,3.52,1672,3.109,1673,3.877,1674,4.275,1675,3.877,1676,3.432,1677,3.163,1678,3.877,1679,3.877,1680,3.877,1681,3.877,1682,5.884,1683,3.877,1684,3.877,1685,3.877,1686,3.877,1687,3.877,1688,3.877,1689,3.877,1690,3.877,1691,3.877,1692,3.877,1693,3.877,1694,3.877,1695,3.877,1696,3.432,1697,3.877,1698,3.355,1699,3.877,1700,3.877,1701,3.877,1702,3.877,1703,3.877,1704,3.877,1705,3.877,1706,3.52,1707,3.877,1708,3.877,1709,3.877,1710,3.877,1711,3.877,1712,3.877,1713,3.877,1714,3.877,1715,2.586,1716,2.692,1717,3.877]],["component/32",[79,0.574]],["title/33-1",[90,20.428,258,49.446]],["name/33-1",[]],["text/33-1",[]],["component/33-1",[]],["title/33-2",[90,20.428,746,31.902]],["name/33-2",[]],["text/33-2",[]],["component/33-2",[]],["title/33-3",[90,20.428,785,49.446]],["name/33-3",[]],["text/33-3",[]],["component/33-3",[]],["title/33",[90,16.99,176,18.839,199,18.369]],["name/33",[90,0.717,176,0.795,199,0.775]],["text/33",[4,1.269,14,2.063,20,1.089,27,1.24,28,1.83,30,1.015,39,1.608,45,1.505,46,2.601,47,1.114,49,2.449,54,1.25,64,0.736,66,1.446,87,1.598,94,1.529,109,1.723,112,2.558,114,1.667,123,2.827,150,1.667,176,2.777,199,2.968,201,2.076,210,1.393,219,1.393,221,1.482,234,1.145,240,1.586,244,3.458,245,1.46,256,1.902,295,2.222,435,1.764,461,1.554,465,2.011,473,1.954,484,4.31,486,2.41,488,1.909,508,2.84,510,1.759,516,1.841,526,2.588,531,2.148,551,1.954,552,3.011,553,2.371,555,3.305,558,4.915,565,2.099,570,1.667,573,2.13,591,3.435,596,1.723,597,2.515,599,1.031,601,1.368,616,2.233,636,2.931,641,5.289,697,2.374,699,2.053,731,1.952,758,2.076,767,1.317,790,2.558,793,3.607,795,1.759,816,1.798,831,2.011,834,2.505,884,2.053,894,2.053,900,1.554,909,1.798,925,1.598,930,2.264,1075,2.175,1089,3.063,1110,3.698,1159,4.214,1173,4.214,1194,4.214,1196,4.214,1202,2.175,1203,1.678,1209,2.412,1217,1.919,1218,4.24,1365,2.053,1369,3.645,1465,1.902,1468,2.618,1584,1.871,1587,2.233,1649,2.099,1674,4.34,1718,4.074,1719,6.848,1720,4.76,1721,2.053,1722,2.412,1723,2.957,1724,2.957,1725,2.618,1726,2.957,1727,2.957,1728,2.957,1729,2.412,1730,4.76,1731,4.033,1732,2.957,1733,2.957,1734,2.957,1735,2.412,1736,2.957,1737,2.957]],["component/33",[79,0.574]],["title/34-1",[56,20.856,433,32.255,1738,46.453]],["name/34-1",[]],["text/34-1",[]],["component/34-1",[]],["title/34-2",[240,15.476,441,25.403,999,37.893]],["name/34-2",[]],["text/34-2",[]],["component/34-2",[]],["title/34-3",[8,29.944]],["name/34-3",[]],["text/34-3",[]],["component/34-3",[]],["title/34",[430,38.757]],["name/34",[430,2.296]],["text/34",[4,2.76,8,3.118,14,1.573,19,1.843,28,1.271,30,3.025,36,1.335,38,2.988,40,0.766,56,3.56,64,1.815,71,2.911,88,1.779,114,1.863,120,3.405,144,1.529,147,2.108,161,2.057,166,1.807,168,3.32,219,1.556,240,3.265,255,2.695,397,1.673,430,4.389,431,4.21,433,4.464,435,2.938,436,3.981,438,2.294,440,4.002,441,4.605,443,3.733,445,4.671,496,2.09,501,1.966,556,2.53,563,4.17,573,1.178,599,1.152,696,3.114,746,1.887,758,1.441,870,1.952,898,1.84,899,2.607,916,2.53,981,2.53,992,2.319,999,2.695,1008,1.6,1034,3.981,1035,2.53,1043,4.603,1044,2.65,1051,2.401,1056,2.81,1060,2.345,1077,2.925,1094,2.09,1716,4.464,1739,2.925,1740,3.611,1741,2.925,1742,2.925,1743,5.692,1744,3.304,1745,3.304,1746,4.923,1747,2.799,1748,3.304,1749,2.607,1750,2.925,1751,2.925,1752,2.695,1753,3.304,1754,3.304,1755,2.925,1756,2.925,1757,3.304,1758,2.925,1759,3.304,1760,3.304,1761,3.304,1762,2.925,1763,3.304,1764,3.304,1765,3.304]],["component/34",[79,0.574]],["title/35-1",[759,40.802]],["name/35-1",[]],["text/35-1",[]],["component/35-1",[]],["title/35-2",[19,14.115,758,24.364]],["name/35-2",[]],["text/35-2",[]],["component/35-2",[]],["title/35-3",[450,36.25,743,35.046]],["name/35-3",[]],["text/35-3",[]],["component/35-3",[]],["title/35",[19,17.696]],["name/35",[83,2.18]],["text/35",[5,1.375,6,1.042,7,1.646,9,1.674,10,1.019,11,1.027,13,0.818,14,2.534,19,2.325,30,0.853,33,1.903,34,1.588,36,1.004,38,1.155,40,1.43,43,1.059,46,0.861,47,1.996,49,1.347,64,1.536,71,3.971,73,3.963,74,1.547,88,1.91,90,2.256,92,2.457,115,2.059,116,2.2,127,1.135,132,1.523,136,1.384,138,1.008,154,1.215,156,1.784,159,1.511,168,0.936,175,2.105,179,4.429,197,1.805,199,1.633,201,1.084,210,1.171,217,1.393,222,1.155,229,4.379,230,4.197,231,5.033,234,0.962,240,2.055,253,2.95,254,3.351,300,2.704,301,2.2,381,1.69,390,2.704,397,2.091,408,3.789,435,0.921,449,1.335,488,0.997,494,1.559,499,1.384,508,1.181,526,1.351,539,1.708,573,0.886,592,2.507,593,2.2,599,0.867,611,1.674,717,1.627,723,4.247,725,3.655,731,1.019,736,1.306,743,2.591,758,1.801,759,1.448,893,1.511,894,1.726,933,1.5,958,2.2,967,1.523,1008,1.204,1097,1.599,1098,1.13,1099,1.599,1109,4.321,1247,1.559,1257,2.2,1286,1.292,1287,3.64,1391,1.744,1715,2.754,1746,1.903,1766,1.903,1767,2.2,1768,2.065,1769,2.485,1770,2.485,1771,2.2,1772,2.2,1773,2.485,1774,2.485,1775,1.903,1776,2.485,1777,2.485,1778,2.485,1779,5.655,1780,2.485,1781,3.655,1782,2.485,1783,2.485,1784,2.485,1785,2.2,1786,5.585,1787,2.485,1788,2.485,1789,2.485,1790,2.485,1791,6.846,1792,3.43,1793,2.485,1794,2.485,1795,2.485,1796,4.129,1797,2.485,1798,2.485,1799,2.485,1800,2.485]],["component/35",[79,0.574]],["title/36",[240,18.608,428,38.782]],["name/36",[240,0.887,428,1.849]],["text/36",[4,1.687,7,2.153,13,1.294,14,2.1,28,1.511,30,2.462,31,1.461,36,1.588,40,2.093,66,3.506,71,1.779,73,1.989,88,2.204,89,2.507,93,2.55,105,3.874,111,3.623,113,3.479,119,1.885,120,3.892,154,1.921,176,1.594,201,1.714,208,3.588,234,2.302,240,3.357,246,3.176,428,6.512,431,2.573,461,2.065,479,2.29,599,1.37,615,2.528,700,2.202,710,3.29,744,2.493,759,2.29,832,2.446,857,3.479,895,2.486,898,2.188,925,4.32,992,2.758,1032,2.967,1076,4.618,1142,3.053,1740,2.728,1766,3.009,1801,3.929,1802,3.929,1803,3.479,1804,3.009,1805,3.479,1806,3.1,1807,3.929,1808,3.929,1809,5.944,1810,5.944,1811,2.274,1812,8.585,1813,3.929]],["component/36",[79,0.574]],["title/37-1",[217,31.298,696,27.051]],["name/37-1",[]],["text/37-1",[]],["component/37-1",[]],["title/37-2",[253,31.104,254,35.333]],["name/37-2",[]],["text/37-2",[]],["component/37-2",[]],["title/37-3",[430,30.914,431,36.575]],["name/37-3",[]],["text/37-3",[]],["component/37-3",[]],["title/37-4",[56,20.856,430,25.711,433,32.255]],["name/37-4",[]],["text/37-4",[]],["component/37-4",[]],["title/37-5",[64,9.898,240,13.247,440,24.749,441,21.744]],["name/37-5",[]],["text/37-5",[]],["component/37-5",[]],["title/37-6",[64,9.898,240,13.247,441,21.744,443,28.545]],["name/37-6",[]],["text/37-6",[]],["component/37-6",[]],["title/37-7",[40,8.053,64,8.652,240,11.579,440,21.633,445,25.249]],["name/37-7",[]],["text/37-7",[]],["component/37-7",[]],["title/37-8",[49,18.227,554,45.561]],["name/37-8",[]],["text/37-8",[]],["component/37-8",[]],["title/37",[168,26.384]],["name/37",[168,1.563]],["text/37",[8,2.62,14,1.961,19,1.467,20,0.412,28,1.573,30,2.701,31,0.416,35,2.174,36,1.145,38,0.52,40,1.655,43,2.734,45,0.569,47,0.421,49,1.335,54,0.473,56,3.298,58,0.496,60,0.948,62,1.38,64,2.031,67,0.894,73,0.566,84,0.974,88,2.155,105,0.822,114,0.631,120,2.679,123,0.529,126,0.702,127,0.936,137,0.647,141,1.134,143,0.619,147,1.307,158,1.724,163,1.671,166,1.55,168,1.322,169,0.524,199,0.442,201,1.237,217,0.627,218,1.255,219,1.652,222,0.52,240,3.479,241,0.746,242,2.699,252,1.296,253,3.574,254,1.296,255,1.671,397,0.566,400,0.627,408,4.437,410,2.118,412,2.171,416,3.837,419,4.445,421,2.516,424,1.968,426,2.51,428,1.968,430,3.698,431,2.297,433,2.841,435,2.019,436,2.686,438,1.968,440,2.864,441,2.98,443,3.625,445,2.549,447,2.411,448,2.171,457,0.912,475,0.803,480,0.822,485,2.729,486,2.329,492,0.511,493,0.696,496,1.296,504,0.685,534,1.178,557,1.671,599,0.39,606,0.812,651,0.99,696,0.542,697,1.414,706,0.912,718,0.856,736,1.076,746,0.639,754,0.947,758,0.488,759,0.652,760,0.794,767,0.498,799,1.488,802,2.864,829,1.569,841,0.912,863,0.702,870,2.073,881,0.856,883,0.99,898,0.623,902,1.275,908,0.844,909,2.798,918,1.438,927,0.601,933,0.675,935,1.488,955,1.393,964,0.661,970,0.912,974,2.614,979,0.882,981,2.171,982,0.99,992,1.438,1006,0.882,1008,0.992,1021,1.526,1032,2.14,1034,0.856,1035,0.856,1039,1.532,1041,1.33,1044,0.897,1051,0.812,1056,3.138,1061,0.856,1066,0.912,1071,0.753,1076,0.869,1098,1.86,1148,0.929,1151,1.307,1185,0.99,1188,0.776,1203,0.635,1212,1.454,1218,0.794,1222,0.812,1229,0.812,1268,1.044,1277,0.822,1282,0.856,1337,1.488,1472,0.947,1660,0.947,1739,1.814,1740,1.968,1741,1.814,1742,2.51,1749,0.882,1750,3.106,1751,0.99,1752,2.313,1755,0.99,1756,1.814,1758,0.99,1762,0.99,1781,0.99,1806,1.616,1811,0.647,1814,1.118,1815,4.601,1816,1.814,1817,1.118,1818,1.118,1819,1.118,1820,1.118,1821,1.118,1822,1.118,1823,1.118,1824,1.118,1825,2.049,1826,1.118,1827,2.049,1828,1.118,1829,0.947,1830,1.118,1831,0.99,1832,1.118,1833,0.99,1834,3.508,1835,1.118,1836,4.434,1837,1.118,1838,2.835,1839,1.118,1840,1.118,1841,2.049,1842,1.118,1843,2.049,1844,1.118,1845,0.897,1846,1.118,1847,1.118,1848,2.049,1849,0.99,1850,1.118,1851,2.835,1852,1.118,1853,0.99,1854,1.118,1855,0.968,1856,1.118,1857,1.118,1858,0.947,1859,0.947,1860,3.106,1861,1.814,1862,1.118,1863,4.824,1864,1.814]],["component/37",[79,0.574]],["title/38",[88,11.336,240,15.476,408,25.711]],["name/38",[88,0.478,240,0.653,408,1.085]],["text/38",[7,0.9,13,1.33,14,2.316,19,1.534,27,2.545,38,1.877,40,0.936,43,2.585,45,2.055,49,2.379,88,2.476,143,2.235,168,2.286,222,1.877,240,3.581,241,2.694,253,4.059,408,5.514,410,4.4,412,4.646,416,6.03,419,4.646,421,4.432,424,5.061,589,3.839,606,2.934,631,2.17,696,1.956,726,4.646,1008,1.956,1062,3.421,1097,2.598,1098,2.759,1099,2.598,1102,3.667,1775,3.092,1811,2.337,1860,3.575,1863,3.575,1864,3.575,1865,4.039,1866,2.621,1867,6.068,1868,4.039,1869,4.039,1870,4.039,1871,4.039,1872,4.039,1873,4.039,1874,4.039,1875,4.039,1876,4.039,1877,4.039,1878,4.039,1879,4.039,1880,3.575,1881,4.039,1882,4.039,1883,3.575,1884,4.039]],["component/38",[79,0.574]],["title/39-1",[253,31.104,453,32.112]],["name/39-1",[]],["text/39-1",[]],["component/39-1",[]],["title/39-2",[19,14.115,253,31.104]],["name/39-2",[]],["text/39-2",[]],["component/39-2",[]],["title/39",[40,12.943,253,31.104]],["name/39",[40,0.617,253,1.483]],["text/39",[4,1.614,7,1.555,8,1.608,14,2.388,19,2.244,28,1.446,30,1.974,38,1.748,40,1.617,64,2.21,67,1.64,70,1.934,71,2.603,73,1.904,88,2.055,90,1.375,123,1.779,127,1.717,141,2.081,145,1.848,151,2.508,168,2.166,212,1.998,219,1.771,223,1.508,229,2.669,230,2.558,240,2.958,246,2.009,253,5.723,254,4.414,300,2.462,390,2.462,408,4.325,416,5.867,419,4.401,441,2.056,486,3.533,599,2.004,696,1.821,699,4.845,909,3.496,946,2.176,1066,3.067,1097,2.419,1098,1.71,1099,2.419,1148,4.775,1151,2.399,1287,2.584,1672,3.015,1715,2.508,1716,2.611,1743,3.329,1746,2.879,1772,3.329,1775,2.879,1779,2.879,1785,3.329,1786,3.067,1816,5.089,1831,3.329,1885,3.624,1886,3.76,1887,3.76,1888,3.76,1889,3.76,1890,3.329,1891,3.76,1892,3.76,1893,3.76,1894,3.76,1895,3.76,1896,3.76,1897,3.76]],["component/39",[79,0.574]],["title/40-1",[111,15.95,236,26.78,636,13.286,748,24.749]],["name/40-1",[]],["text/40-1",[]],["component/40-1",[]],["title/40",[234,17.987,236,31.287,636,15.522]],["name/40",[234,0.759,236,1.321,636,0.655]],["text/40",[4,3.533,13,2.33,14,2.75,20,1.835,36,2.014,40,1.155,46,2.453,47,1.878,49,1.627,67,2.175,71,3.726,88,2.008,111,2,118,2.885,210,2.348,234,1.93,236,3.358,479,2.905,486,2.524,488,2,553,6.598,569,2.945,571,3.579,610,2.37,636,2.365,721,2.829,748,3.103,759,2.905,805,3.461,832,3.103,835,3.358,860,4.005,927,2.679,946,2.885,1318,4.067,1804,3.817,1898,8.229,1899,8.229,1900,4.985,1901,4.985,1902,4.985,1903,4.985,1904,4.985,1905,4.985,1906,4.985,1907,4.985,1908,4.985,1909,4.985]],["component/40",[79,0.574]],["title/41",[49,12.975,234,15.396,471,21.366,498,25.364]],["name/41",[49,0.506,234,0.601,471,0.834,498,0.99]],["text/41",[4,2.514,13,1.928,20,2.156,31,3.569,34,2.252,49,3.132,79,1.169,81,3.484,89,3.735,94,4.633,104,2.686,114,3.302,119,2.809,138,3.209,144,2.709,161,3.645,219,2.758,234,3.064,295,2.733,450,3.8,471,4.252,492,2.674,498,5.717,596,3.412,601,2.709,611,3.944,636,2.644,767,2.607,967,3.588,1276,5.184,1555,5.974,1645,5.184,1718,3.484,1804,4.483,1910,5.184,1911,5.855,1912,5.855,1913,5.855,1914,5.855,1915,3.704,1916,5.467]],["component/41",[79,0.574]],["title/42",[52,15.616,234,17.987,915,29.387]],["name/42",[52,0.659,234,0.759,915,1.24]],["text/42",[7,1.023,14,2.668,30,1.577,31,3.207,34,2.566,36,1.855,40,1.064,52,2.9,71,2.079,88,1.628,217,2.573,219,2.163,234,1.778,477,2.732,484,2.467,486,2.325,497,3.428,500,3.958,534,2.64,597,4.841,601,2.124,631,2.467,636,1.534,755,2.399,860,3.856,915,2.905,953,2.573,1097,2.954,1098,2.088,1099,2.954,1111,4.735,1151,2.929,1217,2.98,1349,5.442,1351,2.954,1427,4.538,1766,3.515,1917,7.036,1918,4.591,1919,3.682,1920,3.336,1921,5.242,1922,6.672,1923,3.89,1924,4.591,1925,5.906,1926,4.065,1927,4.591,1928,4.591,1929,4.591,1930,4.591,1931,4.591,1932,4.065,1933,4.591,1934,4.065]],["component/42",[79,0.574]],["title/43-1",[31,26.034]],["name/43-1",[]],["text/43-1",[]],["component/43-1",[]],["title/43-2",[234,17.987,266,27.639,471,24.962]],["name/43-2",[]],["text/43-2",[]],["component/43-2",[]],["title/43-3",[13,15.293,34,17.863,570,26.194]],["name/43-3",[]],["text/43-3",[]],["component/43-3",[]],["title/43",[49,15.159,234,17.987,471,24.962]],["name/43",[49,0.64,234,0.759,471,1.054]],["text/43",[7,1.263,14,2.669,20,0.801,27,0.912,28,2.18,30,0.747,31,2.107,34,2.18,38,1.011,40,1.471,43,1.573,45,1.879,47,1.391,49,2.939,52,2.319,54,0.919,58,2.815,62,1.465,64,0.542,66,1.064,67,0.949,71,0.985,84,1.034,88,1.174,90,0.796,95,1.451,109,1.268,119,1.044,123,1.747,135,1.451,138,2.299,144,1.708,145,1.069,146,1.268,152,1.354,156,1.562,207,1.268,218,1.333,221,1.85,223,0.873,232,3.012,233,1.354,234,2.458,244,2.682,245,1.074,266,2.197,404,1.376,435,1.782,449,1.169,452,1.665,471,4.487,488,0.873,497,0.949,506,1.58,516,2.298,526,2.007,558,2.418,561,1.51,569,1.285,570,2.712,573,2.263,579,1.621,590,1.211,591,2.123,597,2.541,599,0.759,631,1.169,632,1.774,636,2.586,715,1.412,721,1.234,731,0.892,739,1.276,743,1.365,744,0.912,757,1.495,767,1.644,804,1.204,851,1.58,852,2.197,860,2.151,870,2.181,872,3.012,895,1.376,915,1.376,930,1.665,967,2.263,970,1.774,973,1.926,979,1.716,988,1.665,1008,1.054,1013,1.376,1055,1.58,1056,1.176,1089,3.095,1091,1.376,1110,1.69,1125,1.51,1189,1.774,1190,1.58,1198,1.527,1203,1.234,1217,2.396,1220,1.744,1238,1.58,1287,1.495,1473,2.868,1556,3.128,1649,2.62,1674,1.58,1677,1.774,1721,1.51,1766,1.665,1803,1.926,1811,1.259,1845,1.744,1866,1.412,1932,1.926,1934,1.926,1935,2.175,1936,2.175,1937,3.692,1938,2.175,1939,2.175,1940,1.744,1941,2.175,1942,3.692,1943,2.175,1944,2.175,1945,2.175,1946,2.175,1947,2.175,1948,2.175,1949,1.926,1950,2.175,1951,2.175,1952,1.69,1953,2.175,1954,1.926,1955,2.175,1956,2.175,1957,2.175,1958,2.175,1959,1.926,1960,2.175,1961,2.175,1962,2.175,1963,2.175,1964,2.175,1965,2.175,1966,2.175,1967,2.175,1968,6.899,1969,2.175,1970,2.175,1971,2.175,1972,2.175,1973,2.175,1974,2.175,1975,2.175,1976,2.175,1977,2.175,1978,2.175,1979,2.175]],["component/43",[79,0.574]],["title/44",[54,14.689,60,16.081,87,18.784,88,8.481,435,12.879]],["name/44",[54,0.543,60,0.594,87,0.694,88,0.313,435,0.476]],["text/44",[14,1.829,27,1.768,28,1.621,30,1.447,31,1.567,36,1.703,40,1.452,43,1.795,46,2.869,49,2.44,52,1.417,54,2.648,64,1.049,67,2.733,71,3.385,87,2.278,88,1.824,99,2.508,111,1.691,119,2.022,123,2.964,127,2.861,154,2.061,176,1.709,216,4.608,234,2.426,295,4.13,435,3.067,450,2.735,453,2.423,461,2.214,485,2.811,488,3.549,504,2.583,526,3.406,534,2.423,548,2.362,565,2.991,575,3.438,596,2.456,597,5.211,598,5.875,599,2.184,636,2.093,717,2.76,744,1.768,853,3.731,898,2.347,900,2.214,902,2.623,933,2.544,1004,3.227,1008,2.041,1039,4.474,1193,3.438,1511,3.062,1718,2.508,1725,3.731,1792,3.501,1980,4.214,1981,3.379,1982,4.214,1983,6.264,1984,4.214,1985,3.182,1986,3.731,1987,6.264]],["component/44",[79,0.574]],["title/45-1",[64,11.564,589,29.387,731,19.048]],["name/45-1",[]],["text/45-1",[]],["component/45-1",[]],["title/45-2",[731,19.048,840,30.987,996,37.893]],["name/45-2",[]],["text/45-2",[]],["component/45-2",[]],["title/45",[60,25.843,64,13.904]],["name/45",[60,1.232,64,0.663]],["text/45",[7,1.694,32,3.683,40,1.28,45,2.81,54,2.334,56,2.479,58,2.448,64,2.332,82,3.41,92,3.285,99,4.523,111,2.215,225,4.29,295,2.578,435,3.64,448,4.228,484,2.967,488,3.757,500,3.829,508,3.614,539,3.794,561,3.834,610,2.625,631,4.085,637,3.616,694,2.917,717,3.616,731,2.264,736,2.901,767,3.871,862,4.011,893,3.358,894,3.834,914,4.228,996,4.504,1041,3.584,1214,5.664,1232,4.504,1721,3.834,1988,4.888,1989,5.522,1990,5.522,1991,5.522,1992,3.553,1993,4.228,1994,5.522,1995,4.587]],["component/45",[79,0.574]],["title/46-1",[7,8.862,237,28.219,573,14.173,1992,25.582]],["name/46-1",[]],["text/46-1",[]],["component/46-1",[]],["title/46-2",[108,22.937,435,17.214,636,15.522]],["name/46-2",[]],["text/46-2",[]],["component/46-2",[]],["title/46",[64,13.904,1992,35.935]],["name/46",[64,0.663,1992,1.713]],["text/46",[7,1.63,30,1.794,31,1.942,40,1.211,46,2.535,49,2.755,52,1.756,64,2.101,90,1.911,94,3.782,119,2.506,127,2.386,147,3.332,218,3.201,219,3.446,222,2.428,233,3.252,245,3.612,250,4.261,295,3.415,435,2.711,477,3.108,484,2.807,486,2.645,488,2.934,498,3.332,534,3.003,538,4.261,564,2.84,573,1.862,575,4.261,579,5.45,601,2.417,631,2.807,636,1.746,699,3.627,744,2.191,750,4.625,793,3.154,852,3.108,893,3.177,898,2.909,980,3.452,1039,2.823,1094,3.305,1193,4.261,1199,3.75,1202,3.842,1322,3.226,1474,4.122,1531,4.261,1639,4.625,1649,3.708,1866,3.39,1992,3.361,1996,4.52,1997,5.224,1998,4.261,1999,4.189,2000,4.878,2001,5.224]],["component/46",[79,0.574]],["title/47-1",[7,8.862,52,13.366,64,9.898,295,18.561]],["name/47-1",[]],["text/47-1",[]],["component/47-1",[]],["title/47-2",[7,6.88,36,12.472,40,7.153,46,10.697,111,12.382,127,14.097]],["name/47-2",[]],["text/47-2",[]],["component/47-2",[]],["title/47-3",[88,6.775,126,17.42,144,12.846,240,15.069,946,16.068,1051,20.17]],["name/47-3",[]],["text/47-3",[]],["component/47-3",[]],["title/47-4",[7,6.188,39,15.093,66,13.576,105,11.137,548,15.557,731,11.384,793,16.76]],["name/47-4",[]],["text/47-4",[]],["component/47-4",[]],["title/47",[88,13.63,240,18.608]],["name/47",[88,0.65,240,0.887]],["text/47",[7,1.432,19,1.102,32,4.287,36,3.083,39,4.148,46,1.512,52,1.466,56,1.958,64,2.337,67,1.903,105,1.75,107,3.34,108,2.154,111,3.06,119,2.093,123,2.064,126,2.737,128,2.559,130,2.577,134,2.883,151,4.287,158,2.653,164,3.169,201,1.903,217,2.444,240,2.804,245,2.154,246,2.331,278,3.029,295,3.929,435,1.616,440,2.715,441,2.385,443,3.131,483,3.169,508,2.073,548,5.439,569,3.796,577,3.861,579,3.25,591,2.508,599,1.521,631,2.344,715,2.831,717,2.856,761,3.169,762,2.831,767,1.942,791,4.92,793,2.633,852,2.595,858,3.208,862,3.169,873,3.096,874,3.34,900,3.376,927,2.344,957,2.759,971,3.34,993,3.558,1150,3.861,1199,3.131,1231,3.029,1233,3.131,1278,3.096,1721,3.029,1866,4.171,2002,4.92,2003,4.362,2004,3.558,2005,4.362,2006,4.204,2007,3.861,2008,4.362,2009,4.073,2010,4.362]],["component/47",[79,0.574]],["title/48-1",[7,6.88,35,16.4,90,11.29,200,15.958,201,13.465,202,27.327]],["name/48-1",[]],["text/48-1",[]],["component/48-1",[]],["title/48-2",[7,10.354,484,24.962,1089,29.887]],["name/48-2",[]],["text/48-2",[]],["component/48-2",[]],["title/48",[90,20.428,176,22.651]],["name/48",[90,0.974,176,1.08]],["text/48",[7,1.473,41,3.825,84,3.142,90,3.136,141,3.658,197,4.802,200,3.417,216,4.862,225,5.135,408,3.658,458,4.368,459,5.061,479,3.851,481,5.953,560,5.491,636,2.209,746,3.775,751,5.061,755,3.454,776,5.061,1075,4.862,1089,4.253,1090,5.3,1199,4.745,1247,4.147,1277,4.862,1339,4.862,1550,5.719,1792,5.491,1940,5.3,2002,6.564,2011,6.909,2012,6.909,2013,6.61,2014,6.61,2015,6.61]],["component/48",[79,0.574]],["title/49-1",[7,10.354,144,21.494,421,25.403]],["name/49-1",[]],["text/49-1",[]],["component/49-1",[]],["title/49-2",[7,10.354,486,23.519,1075,34.167]],["name/49-2",[]],["text/49-2",[]],["component/49-2",[]],["title/49-3",[7,8.862,199,15.723,242,23.328,1013,25.153]],["name/49-3",[]],["text/49-3",[]],["component/49-3",[]],["title/49-4",[7,7.746,13,11.442,64,8.652,623,21.298,2016,34.754]],["name/49-4",[]],["text/49-4",[]],["component/49-4",[]],["title/49-5",[7,4.753,13,7.021,14,5.217,60,9.868,516,13.275,618,10.743,1153,17.397,2017,16.826,2018,20.555,2019,21.327]],["name/49-5",[]],["text/49-5",[]],["component/49-5",[]],["title/49-6",[7,7.746,144,16.081,150,19.598,177,20.981,731,14.251]],["name/49-6",[]],["text/49-6",[]],["component/49-6",[]],["title/49-7",[7,8.862,118,23.013,456,32.434,714,31.37]],["name/49-7",[]],["text/49-7",[]],["component/49-7",[]],["title/49",[2020,61.99]],["name/49",[2020,3.673]],["text/49",[7,1.094,10,1.259,11,1.269,13,1.011,32,2.049,36,2.476,38,2.281,39,1.67,40,1.137,47,1.849,49,1.002,52,2.353,54,1.298,64,2.132,72,1.854,84,1.46,87,1.66,88,0.75,95,2.049,103,2.133,104,2.251,107,2.352,111,2.458,121,1.623,126,1.927,127,1.403,136,1.71,139,1.828,143,2.716,144,2.271,147,3.909,151,2.049,164,2.231,181,2.506,188,2.552,210,1.447,212,1.632,221,1.539,240,2.549,242,2.879,252,1.943,254,1.943,266,4.164,410,1.854,421,1.68,435,2.271,451,1.976,456,2.506,457,2.506,459,2.352,460,2.506,461,1.614,462,2.288,478,2.205,479,1.79,481,3.407,486,3.103,488,1.232,516,1.912,519,3.565,534,1.766,548,1.721,552,1.943,555,2.133,572,2.049,589,1.943,590,1.71,602,2.231,622,2.506,636,1.026,692,2.719,693,3.397,697,1.532,699,2.133,700,1.721,710,1.7,717,2.011,721,1.743,724,3.372,729,4.507,731,2.513,739,1.802,743,3.079,744,2.058,746,1.754,760,2.18,762,3.977,769,2.96,791,2.352,795,1.828,796,1.959,819,2.506,852,1.828,862,2.231,863,3.079,865,2.231,867,4.246,870,1.815,896,2.719,902,1.912,904,2.231,909,1.868,911,2.658,927,1.651,935,3.565,957,1.943,963,1.868,1008,1.488,1010,3.444,1047,2.205,1056,1.66,1094,3.104,1153,2.506,1172,2.352,1178,2.658,1287,2.111,1478,2.602,1806,3.872,2002,6.246,2021,2.719,2022,3.072,2023,3.072,2024,3.072,2025,3.072,2026,3.072,2027,3.072,2028,3.072,2029,3.072,2030,3.072,2031,3.072,2032,2.719,2033,3.072,2034,3.072,2035,2.719,2036,2.352]],["component/49",[79,0.574]],["title/50-1",[94,28.875,245,27.578]],["name/50-1",[]],["text/50-1",[]],["component/50-1",[]],["title/50-2",[94,28.875,877,31.902]],["name/50-2",[]],["text/50-2",[]],["component/50-2",[]],["title/50-3",[94,24.015,636,15.522,877,26.533]],["name/50-3",[]],["text/50-3",[]],["component/50-3",[]],["title/50-4",[94,24.015,877,26.533,1735,37.893]],["name/50-4",[]],["text/50-4",[]],["component/50-4",[]],["title/50-5",[28,21.478,1088,38.379]],["name/50-5",[]],["text/50-5",[]],["component/50-5",[]],["title/50-6",[28,17.863,1088,31.919,1674,33.748]],["name/50-6",[]],["text/50-6",[]],["component/50-6",[]],["title/50-7",[14,8.502,28,13.365,54,14.689,573,12.389,1088,23.881]],["name/50-7",[]],["text/50-7",[]],["component/50-7",[]],["title/50-8",[145,34.406]],["name/50-8",[]],["text/50-8",[]],["component/50-8",[]],["title/50-9",[234,27.114]],["name/50-9",[]],["text/50-9",[]],["component/50-9",[]],["title/50-10",[119,19.077,410,24.003,564,21.616,636,13.286]],["name/50-10",[]],["text/50-10",[]],["component/50-10",[]],["title/50",[49,15.159,94,24.015,498,29.633]],["name/50",[83,2.18]],["text/50",[3,0.938,7,0.364,13,0.197,14,2.254,19,0.151,20,2.096,27,2.596,28,1.243,30,0.391,31,0.423,35,0.317,36,1.882,38,0.529,40,0.483,41,0.659,42,0.929,43,1.984,45,0.58,46,1.695,47,0.429,49,2.384,53,0.388,54,0.881,56,0.511,58,0.265,60,0.276,61,0.529,63,0.791,64,0.886,66,1.408,67,1.256,71,0.516,73,0.577,79,0.119,81,0.355,82,0.369,84,0.776,87,0.323,90,0.417,92,0.355,93,0.388,94,3.828,95,1.089,102,0.399,104,0.522,105,0.457,108,1.422,109,0.348,111,1.55,119,2.452,120,0.391,121,0.316,123,0.772,126,0.375,127,1.894,128,0.958,130,0.353,132,0.366,136,0.333,137,0.346,138,1.311,141,1.97,142,0.479,143,0.63,144,1.156,145,0.802,146,1.214,147,1.041,149,0.688,150,0.642,152,0.372,154,0.557,157,0.827,158,1.751,161,2.9,164,0.434,165,0.339,166,0.623,167,1.206,169,1.171,171,1.099,180,0.715,199,0.236,205,3.151,207,0.348,209,0.419,213,1.277,214,0.791,216,0.439,217,0.335,219,0.537,222,0.278,223,0.24,233,0.372,234,1.605,240,1.077,245,1.029,246,0.872,251,1.089,252,0.378,254,1.58,256,0.733,266,0.355,381,0.406,397,0.302,398,0.348,400,1.167,410,2.813,424,0.415,435,1.067,447,0.783,449,0.877,451,0.384,458,0.753,471,1.913,472,0.529,475,1.793,477,1.24,479,1.455,482,0.739,483,0.434,484,0.321,485,0.399,488,1.869,489,0.529,490,0.457,492,0.52,495,0.529,496,0.378,497,0.909,498,2.464,502,0.434,505,0.496,506,0.827,508,0.284,513,0.529,519,0.827,523,0.958,527,0.76,528,0.487,531,0.434,534,1.436,538,0.487,548,0.335,550,0.899,551,0.395,552,2.045,554,0.487,558,0.391,559,0.517,564,1.757,567,0.487,569,0.673,571,0.818,573,0.582,588,0.872,590,1.603,591,0.343,592,0.283,594,2.156,596,0.348,597,3.1,599,0.208,601,0.527,602,0.827,604,0.487,606,1.514,611,2.602,615,0.733,617,0.529,618,0.574,620,1.7,623,1,624,0.929,636,2.621,637,0.746,675,0.818,694,1.88,696,0.289,697,0.298,700,0.335,705,0.76,707,1.146,710,0.903,716,0.457,721,0.339,724,1.432,731,1.91,734,0.395,735,0.434,736,0.314,738,0.929,739,0.668,743,0.375,744,1.62,745,0.746,755,0.595,759,0.664,767,0.727,768,0.471,795,0.971,796,0.727,802,0.372,804,0.63,805,0.415,808,0.457,809,0.346,819,0.487,831,1.11,835,0.402,836,0.799,837,1.089,840,0.399,842,0.872,844,0.872,845,2.116,849,0.402,852,1.713,854,1.329,860,0.509,862,0.827,863,0.715,865,0.434,870,0.673,871,0.434,877,0.651,878,0.929,880,1.25,884,0.415,885,1.636,886,1.008,891,0.429,895,0.378,897,0.415,898,0.333,900,2.03,901,0.958,902,1.792,912,0.929,913,0.471,914,0.457,922,0.529,927,1.342,932,0.457,934,1.008,936,0.384,942,0.496,943,0.496,946,0.346,956,1.595,957,0.378,959,0.439,964,0.353,965,0.321,974,0.849,976,0.471,980,1.651,981,1.25,988,0.457,989,0.391,990,1.844,992,0.799,993,0.487,995,0.479,998,0.529,1002,0.487,1007,0.457,1010,0.419,1013,0.378,1021,0.445,1022,1.172,1023,0.464,1027,0.457,1029,1.332,1032,0.451,1041,0.388,1046,1.445,1052,0.358,1056,0.323,1060,1.479,1068,1.186,1069,0.439,1070,0.529,1071,1.403,1088,0.783,1089,2.668,1091,0.721,1092,0.529,1094,0.378,1096,0.487,1110,1.619,1126,0.479,1137,0.659,1142,0.464,1182,0.487,1184,0.529,1189,0.487,1190,0.434,1191,3.905,1198,0.419,1209,0.487,1215,0.457,1216,0.529,1217,1.059,1218,0.424,1220,2.003,1222,0.434,1224,0.439,1225,0.529,1233,0.429,1246,0.457,1249,1.844,1272,1.383,1278,1.158,1279,0.965,1282,0.457,1285,3.151,1322,0.369,1350,0.487,1351,0.384,1354,1.912,1355,1.25,1361,0.415,1378,0.529,1379,0.529,1391,0.419,1465,0.733,1470,0.529,1473,0.464,1474,1.971,1475,0.479,1511,2.586,1601,0.487,1663,0.457,1674,2.092,1676,1.008,1715,0.76,1718,0.678,1721,0.415,1722,1.7,1735,0.487,1747,0.506,1752,0.487,1768,0.496,1805,0.529,1811,1.871,1855,0.517,1858,0.965,1859,0.965,1940,0.479,1949,0.529,1952,0.885,1959,1.008,1981,0.479,1985,0.451,1992,0.384,1993,0.457,1998,0.487,1999,1.309,2002,0.457,2004,1.7,2007,0.529,2037,0.597,2038,0.529,2039,0.597,2040,1.139,2041,0.506,2042,0.471,2043,0.558,2044,1.139,2045,0.597,2046,1.139,2047,1.632,2048,2.498,2049,1.139,2050,1.139,2051,0.597,2052,3.232,2053,1.008,2054,0.597,2055,0.597,2056,1.139,2057,1.139,2058,0.597,2059,0.597,2060,0.597,2061,0.597,2062,0.597,2063,0.597,2064,0.597,2065,0.597,2066,0.597,2067,0.597,2068,1.139,2069,0.597,2070,0.597,2071,0.597,2072,0.597,2073,1.524,2074,0.597,2075,0.529,2076,1.139,2077,0.597,2078,1.063,2079,0.597,2080,1.008,2081,0.597,2082,0.517,2083,0.597,2084,0.597,2085,1.008,2086,1.139,2087,0.597,2088,0.597,2089,1.008,2090,1.139,2091,0.597,2092,0.529,2093,0.597,2094,0.529,2095,0.597,2096,0.597,2097,0.529,2098,0.597,2099,0.597,2100,0.597,2101,0.529,2102,0.529,2103,0.597,2104,0.597,2105,1.139,2106,1.632,2107,0.558,2108,0.597,2109,0.597,2110,0.529,2111,1.632,2112,0.445,2113,0.597,2114,0.597,2115,0.576,2116,0.597,2117,0.529,2118,0.597,2119,0.597,2120,1.844,2121,0.597,2122,0.597,2123,0.597,2124,0.597,2125,0.597,2126,0.597,2127,0.597,2128,0.597,2129,0.597,2130,1.139,2131,0.597,2132,0.597,2133,0.597,2134,0.597,2135,0.597,2136,0.597,2137,0.597,2138,0.597,2139,0.597,2140,0.597,2141,0.597,2142,0.597,2143,0.597,2144,0.597,2145,0.597,2146,0.597,2147,0.597,2148,0.597,2149,0.597,2150,0.597,2151,0.597,2152,0.597,2153,0.597,2154,0.929,2155,0.529,2156,0.597,2157,0.597,2158,1.139,2159,0.597,2160,0.597,2161,0.597,2162,0.529,2163,0.597,2164,1.803,2165,0.506,2166,1.139,2167,0.529,2168,0.529,2169,0.487,2170,0.576,2171,0.529,2172,0.529,2173,0.597,2174,0.597,2175,0.597,2176,0.597,2177,0.597,2178,0.929,2179,0.597,2180,0.529,2181,0.597,2182,0.597,2183,0.597,2184,0.597,2185,0.597,2186,0.542,2187,0.529,2188,0.597,2189,0.597,2190,0.597,2191,0.597,2192,0.529,2193,0.597,2194,0.597,2195,0.464,2196,0.597,2197,0.597,2198,0.597,2199,0.597,2200,0.597,2201,0.597,2202,0.597,2203,0.597,2204,0.529,2205,1.632,2206,0.597,2207,0.597,2208,0.597,2209,0.597,2210,0.597,2211,0.597,2212,0.597,2213,0.597,2214,0.597,2215,0.542,2216,0.457,2217,0.597,2218,0.597,2219,0.517,2220,0.558,2221,0.487,2222,0.597,2223,0.597,2224,0.597,2225,0.487,2226,0.597,2227,0.529,2228,0.597]],["component/50",[79,0.574]],["title/51",[618,28.134,2229,45.561]],["name/51",[618,1.341,2229,2.172]],["text/51",[14,2.369,19,0.901,20,1.831,27,1.495,28,1.371,30,1.224,31,1.325,34,1.013,36,2.009,38,0.686,40,0.61,43,0.629,45,1.34,46,0.913,47,0.992,49,1.163,50,1.086,53,0.958,58,0.654,64,0.656,66,0.722,67,1.149,73,0.747,78,0.919,87,1.423,88,0.36,94,4.337,104,0.677,105,1.056,108,1.3,109,0.86,111,0.592,119,0.708,121,0.78,127,1.203,128,1.545,138,1.757,141,1.457,144,1.218,146,1.534,148,1.204,154,1.743,158,0.898,165,1.494,169,0.692,171,4.948,212,0.784,213,0.904,214,1.025,215,1.13,219,1.24,220,1.988,234,0.571,236,0.994,240,0.877,245,1.3,251,0.985,295,0.689,400,0.827,404,0.934,436,3.316,440,2.219,466,1.114,479,2.077,482,2.314,488,0.592,498,2.274,501,3.283,504,0.904,523,0.866,550,1.164,561,3.007,564,0.802,590,2.412,594,1.757,597,3.378,599,0.515,601,1.218,602,1.072,610,1.252,618,1.796,620,1.204,633,1.13,636,0.88,637,0.966,694,1.391,702,0.911,715,0.958,721,0.838,738,4.501,744,1.495,745,1.724,759,2.524,767,0.657,795,0.878,799,2.59,809,1.524,817,2.59,831,1.791,836,1.848,837,0.985,840,0.985,856,1.307,865,1.072,877,2.036,881,1.13,884,1.025,895,0.934,900,1.873,901,2.541,902,0.919,908,1.114,926,1.307,933,0.891,936,2.294,941,2.692,945,1.014,946,0.854,948,0.985,955,1.004,957,0.934,964,2.938,965,1.415,976,1.164,978,1.204,980,1.74,1006,4.353,1008,0.715,1020,2.331,1029,2.148,1031,1.307,1033,2.331,1035,2.016,1041,0.958,1052,0.884,1068,2.59,1071,0.994,1095,3.669,1172,1.13,1190,1.072,1222,3.147,1226,2.331,1227,2.278,1229,1.913,1231,1.025,1247,0.926,1250,2.331,1270,1.114,1277,1.086,1351,0.95,1353,1.828,1354,3.807,1355,3.316,1364,1.025,1369,1.13,1391,1.036,1511,1.072,1601,1.204,1677,1.204,1715,0.985,1716,1.025,1722,1.204,1811,2.878,1853,5.299,1866,1.709,1954,1.307,1981,2.111,1993,1.13,1998,1.204,1999,2.111,2053,2.331,2075,1.307,2080,1.307,2082,1.277,2092,1.307,2094,2.331,2097,1.307,2101,2.331,2102,3.156,2110,1.307,2112,1.1,2154,1.204,2172,1.307,2227,1.307,2229,1.204,2230,1.476,2231,2.633,2232,1.34,2233,1.476,2234,1.307,2235,1.476,2236,1.476,2237,1.476,2238,1.476,2239,1.476,2240,1.476,2241,1.476,2242,1.476,2243,1.476,2244,1.476,2245,4.973,2246,1.476,2247,7.346,2248,1.476,2249,3.565,2250,2.633,2251,1.476,2252,2.633,2253,1.476,2254,1.476,2255,2.633,2256,3.565,2257,3.565,2258,6.393,2259,5.986,2260,4.331,2261,4.973,2262,2.633,2263,1.476,2264,2.458,2265,1.476,2266,3.565,2267,1.378,2268,1.476,2269,1.476,2270,1.476,2271,1.476,2272,1.476,2273,1.34,2274,1.476,2275,1.476,2276,1.422,2277,1.307,2278,1.476,2279,1.476]],["component/51",[79,0.574]],["title/52",[64,13.904,488,22.405]],["name/52",[83,2.18]],["text/52",[7,1.074,14,2.505,30,1.655,46,2.799,47,1.816,52,1.62,64,1.72,67,3.014,71,3.657,73,2.44,74,4.301,81,2.868,88,1.686,104,3.169,130,2.848,138,1.955,141,2.668,150,4.554,169,2.26,245,2.38,435,1.786,449,2.59,488,4.107,492,2.201,496,3.049,500,3.48,508,3.285,534,2.771,573,2.879,590,2.684,592,3.269,731,3.617,744,2.022,767,2.146,923,3.545,925,2.605,933,4.171,967,2.954,1039,2.605,1123,3.932,1137,3.999,1214,3.591,1767,6.117,1921,5.885,1992,3.101,2112,3.591,2280,4.82,2281,4.5,2282,4.5]],["component/52",[79,0.574]],["title/53",[525,30.544,2283,49.446]],["name/53",[525,1.456,2283,2.357]],["text/53",[4,3.114,5,2.857,6,2.165,7,1.151,9,5.649,10,3.731,11,2.133,13,1.7,30,1.773,40,1.196,64,1.806,70,2.655,87,2.79,88,2.047,90,1.888,105,2.071,146,3.008,195,3.952,196,3.706,222,3.371,248,3.623,305,4.82,398,4.227,403,3.75,459,5.554,499,2.875,512,3.05,523,4.256,524,2.823,525,3.967,529,5.27,601,2.389,610,2.454,618,2.6,719,3.898,735,3.75,748,3.213,761,3.75,800,3.14,804,2.857,956,3.952,1247,3.239,1252,4.57,2036,3.952,2284,7.254,2285,5.162,2286,7.254,2287,5.162,2288,6.185,2289,6.185,2290,6.185,2291,7.254,2292,5.917,2293,5.162,2294,5.709,2295,5.709,2296,5.162]],["component/53",[79,0.574]],["title/54",[523,32.769,601,25.843]],["name/54",[83,2.18]],["text/54",[7,2.128,13,1.786,30,1.198,31,2.017,40,1.257,52,1.173,64,2.314,70,1.794,84,1.659,88,2.497,90,2.435,99,2.076,103,2.423,105,3.013,111,1.4,114,3.06,115,1.74,121,2.867,123,1.651,127,1.594,135,2.328,136,3.022,159,2.122,166,2.967,167,2.02,169,1.636,184,3.019,195,5.098,196,3.896,200,1.804,201,1.522,223,1.4,227,2.753,237,4.726,240,1.162,246,1.864,295,1.629,300,2.285,303,2.846,307,4.426,309,4.155,311,4.155,397,1.767,404,2.207,493,2.172,499,1.943,523,5.833,524,4.108,525,3.641,526,1.897,527,2.328,529,2.535,573,1.244,601,3.765,610,1.659,618,2.733,655,2.226,695,3.089,696,1.69,702,2.155,709,2.423,731,1.431,748,2.172,758,1.522,760,3.851,761,2.535,762,2.265,763,3.089,764,2.328,767,1.554,840,2.328,971,2.672,989,2.285,1004,2.672,1008,1.69,1094,2.207,1121,2.846,1122,2.846,1126,2.798,1155,2.207,1165,3.089,1362,2.846,1485,2.846,1988,3.089,2297,3.258,2298,3.489,2299,3.489,2300,3.489,2301,3.489]],["component/54",[79,0.574]],["title/55-1",[592,33.134]],["name/55-1",[]],["text/55-1",[]],["component/55-1",[]],["title/55-2",[573,24.961]],["name/55-2",[]],["text/55-2",[]],["component/55-2",[]],["title/55-3",[49,18.227,424,38.782]],["name/55-3",[]],["text/55-3",[]],["component/55-3",[]],["title/55-4",[403,50.872]],["name/55-4",[]],["text/55-4",[]],["component/55-4",[]],["title/55",[70,28.723,523,32.769]],["name/55",[70,1.369,523,1.562]],["text/55",[4,2.18,14,2.617,27,1.345,28,2.425,30,1.101,40,0.743,43,2.163,46,2.485,49,2.34,50,6.115,54,2.665,62,2.16,64,0.798,88,1.239,121,1.694,123,1.518,139,1.908,155,6.349,189,4.496,207,2.959,240,2.101,253,1.786,403,2.33,424,3.526,441,4.274,452,2.455,465,2.181,494,2.012,557,2.616,573,2.248,592,2.403,696,3.054,701,2.616,736,1.685,742,2.839,835,2.16,860,4.038,927,1.723,939,2.389,959,3.736,988,3.889,1017,3.137,1021,5.823,1056,3.876,1137,1.856,1155,2.029,1210,5.144,1247,4.5,1270,2.421,1349,4.143,1427,2.181,1920,5.21,2120,2.839,2302,3.207,2303,5.079,2304,3.207,2305,3.207,2306,2.664,2307,3.207,2308,6.305,2309,3.207,2310,3.207,2311,3.207,2312,3.69,2313,5.079,2314,3.207,2315,3.207,2316,3.207,2317,3.207,2318,3.207,2319,3.207,2320,3.207,2321,3.207,2322,3.207,2323,3.207,2324,3.207,2325,3.207,2326,3.207,2327,3.207,2328,6.305,2329,6.305,2330,6.305,2331,6.305,2332,6.305]],["component/55",[79,0.574]],["title/56-1",[523,32.769,524,30.544]],["name/56-1",[]],["text/56-1",[]],["component/56-1",[]],["title/56-2",[19,17.696]],["name/56-2",[]],["text/56-2",[]],["component/56-2",[]],["title/56",[832,43.586]],["name/56",[832,2.582]],["text/56",[4,3.004,5,2.09,6,1.584,7,1.285,9,2.543,10,1.549,11,1.56,14,2.481,30,2.403,31,2.601,36,1.526,40,2.061,43,2.98,46,1.309,47,1.423,64,1.436,67,1.647,71,1.71,74,2.351,87,2.041,88,2.17,105,2.313,108,2.848,114,2.129,115,1.883,121,1.995,146,2.2,210,1.779,213,2.314,214,2.622,222,2.68,234,1.462,237,2.68,256,2.43,309,2.891,311,4.416,512,3.407,523,5.596,524,5.454,551,2.496,573,1.346,601,1.747,610,2.742,715,2.451,719,5.913,755,1.973,760,2.68,764,4.667,804,2.09,898,2.103,901,2.216,965,2.029,1094,2.389,1137,2.186,1382,3.343,1532,2.851,2281,3.526,2292,3.08,2333,3.776,2334,3.526,2335,4.177,2336,3.776,2337,3.776,2338,3.776,2339,3.776,2340,3.343,2341,3.776,2342,3.776,2343,3.776,2344,3.776,2345,3.776,2346,3.776,2347,3.776,2348,3.776,2349,3.776,2350,3.776,2351,3.776,2352,3.776,2353,4.177,2354,3.776,2355,3.776]],["component/56",[79,0.574]],["title/57",[88,13.63,252,35.333]],["name/57",[83,2.18]],["text/57",[6,1.751,7,1.386,8,1.785,9,2.811,10,1.712,11,1.724,14,2.406,20,1.537,40,2.042,47,2.801,64,1.039,66,2.041,70,2.146,72,2.52,88,2.15,90,2.275,92,2.484,114,2.354,117,3.405,128,2.449,144,2.878,154,3.635,167,2.416,199,1.651,200,3.215,201,3.843,210,1.966,222,1.94,228,2.598,240,3.078,252,2.641,259,3.165,260,3.196,268,2.709,294,3.841,398,2.432,450,2.709,466,3.152,496,2.641,510,2.484,610,2.957,631,2.243,675,2.997,699,2.898,729,3.07,739,2.449,744,1.751,893,3.783,897,2.898,898,2.324,1090,3.347,1097,4.002,1098,3.381,1099,2.685,2356,7.187,2357,4.174,2358,4.174,2359,5.506,2360,6.581,2361,4.174,2362,6.22,2363,2.997,2364,3.695,2365,3.347,2366,3.152,2367,2.997,2368,2.997,2369,2.997,2370,4.174]],["component/57",[79,0.574]],["title/58-1",[19,17.696]],["name/58-1",[]],["text/58-1",[]],["component/58-1",[]],["title/58",[201,20.263,240,15.476,510,27.639]],["name/58",[201,0.855,240,0.653,510,1.167]],["text/58",[4,2.754,14,1.569,19,1.621,30,2.203,40,1.948,88,1.565,99,3.817,104,2.942,105,2.573,154,3.137,159,3.902,201,4.342,240,3.316,260,4.912,455,5.233,478,4.606,510,5.003,599,2.237,736,3.371,745,4.201,758,2.798,767,2.856,955,4.364,965,3.447,1027,4.912,1097,4.127,1098,2.917,1099,4.127,1175,5.679,1475,5.144,2117,5.679,2356,5.233,2359,5.679,2371,6.415,2372,6.415]],["component/58",[79,0.574]],["title/59-1",[52,13.366,573,14.173,2216,30.443,2373,35.2]],["name/59-1",[]],["text/59-1",[]],["component/59-1",[]],["title/59-2",[40,9.214,64,9.898,1464,26.276,1992,25.582]],["name/59-2",[]],["text/59-2",[]],["component/59-2",[]],["title/59",[137,32.327,578,40.098]],["name/59",[137,1.541,578,1.912]],["text/59",[4,2.092,7,1.086,13,1.605,14,2.512,20,1.794,31,1.812,34,1.874,38,2.265,40,1.614,46,1.689,52,3.279,71,2.207,87,2.634,88,1.189,101,4.315,105,2.794,119,2.338,144,2.255,145,3.422,225,5.411,232,3.976,234,1.887,479,2.84,486,2.468,492,3.181,497,2.126,499,2.714,508,3.311,510,2.9,573,2.897,596,4.058,597,2.575,599,2.429,631,2.619,633,3.732,636,1.629,852,2.9,904,3.541,947,3.01,962,4.406,1013,3.083,1053,4.129,1254,3.976,1464,3.221,1663,3.732,1672,3.908,1716,3.384,1917,3.976,1921,3.251,1925,4.315,2032,4.315,2216,6.222,2234,4.315,2373,4.315,2374,4.874,2375,4.874,2376,4.874,2377,4.315,2378,4.874,2379,4.874,2380,4.874]],["component/59",[79,0.574]],["title/60-1",[46,16.099,52,15.616,592,21.981]],["name/60-1",[]],["text/60-1",[]],["component/60-1",[]],["title/60-2",[20,17.101,52,15.616,573,16.559]],["name/60-2",[]],["text/60-2",[]],["component/60-2",[]],["title/60-3",[52,15.616,573,16.559,962,29.387]],["name/60-3",[]],["text/60-3",[]],["component/60-3",[]],["title/60",[52,18.776,64,13.904]],["name/60",[83,2.18]],["text/60",[3,2.929,4,1.382,7,1.135,14,2.213,20,3.065,27,3.284,28,2.763,34,1.959,35,2.706,45,1.638,46,2.713,47,2.708,49,1.662,52,3.598,54,2.153,60,1.489,64,1.573,71,2.306,73,1.63,88,0.785,108,2.515,119,1.544,138,2.066,141,1.782,145,1.582,169,2.389,208,1.943,219,1.516,220,2.43,381,2.189,449,1.73,458,2.127,492,1.47,493,2.004,508,3.005,573,3.878,592,3.705,597,2.691,731,1.32,744,2.136,755,1.682,802,2.004,851,2.339,866,3.098,893,1.958,925,1.74,931,2.43,941,2.43,962,5.721,967,1.973,1010,2.259,1203,4.078,1217,2.089,1240,2.85,1464,3.366,1465,2.071,1511,3.701,1866,2.089,1920,2.339,2004,2.626,2306,2.674,2381,3.219,2382,3.219,2383,3.219,2384,3.219,2385,3.219,2386,3.219,2387,3.219,2388,3.219,2389,3.219,2390,3.219,2391,2.85,2392,3.219,2393,3.219,2394,5.094,2395,3.219,2396,3.219]],["component/60",[79,0.574]],["title/61-1",[52,18.776,500,28.134]],["name/61-1",[]],["text/61-1",[]],["component/61-1",[]],["title/61-2",[52,18.776,1921,37.258]],["name/61-2",[]],["text/61-2",[]],["component/61-2",[]],["title/61-3",[453,40.259]],["name/61-3",[]],["text/61-3",[]],["component/61-3",[]],["title/61-4",[234,21.627,484,30.014]],["name/61-4",[]],["text/61-4",[]],["component/61-4",[]],["title/61",[52,15.616,500,23.399,1921,30.987]],["name/61",[449,1.054,500,0.988,1921,1.308]],["text/61",[7,1.832,13,1.368,14,1.016,30,2.128,31,1.544,34,1.597,38,1.931,40,1.718,46,3.047,52,3.782,89,2.65,104,1.905,130,2.454,145,2.041,154,2.031,199,1.643,217,2.328,219,1.957,221,2.082,484,3.33,500,4.645,573,3.134,588,3.181,590,2.313,596,2.421,611,2.798,631,2.232,633,6.732,749,4.449,767,1.85,845,4.058,866,2.527,885,2.72,901,2.437,904,3.018,915,2.628,962,4.69,1005,3.389,1013,5.199,1015,3.678,1068,4.503,1123,3.389,1151,3.954,1465,5.657,1917,3.389,1921,5.483,2397,4.154,2398,4.154,2399,6.197,2400,4.154,2401,4.154,2402,4.154,2403,4.154,2404,3.331]],["component/61",[79,0.574]],["title/62-1",[34,21.478,499,31.104]],["name/62-1",[]],["text/62-1",[]],["component/62-1",[]],["title/62-2",[421,38.293]],["name/62-2",[]],["text/62-2",[]],["component/62-2",[]],["title/62",[34,13.365,52,11.683,421,19.006,499,19.354,877,19.851]],["name/62",[421,2.269]],["text/62",[7,1.422,13,2.1,14,1.56,34,2.917,39,2.348,40,1.001,46,3.575,47,2.403,52,3.409,54,1.825,64,1.888,88,1.054,92,2.57,119,3.061,123,2.044,150,2.435,157,3.138,169,2.991,207,2.516,208,2.607,245,2.132,295,3.541,381,4.339,421,3.488,461,2.269,484,2.321,499,3.552,531,3.138,558,2.828,567,3.523,573,2.274,632,3.523,700,3.574,710,3.531,767,1.923,795,2.57,808,3.307,844,3.307,863,2.71,873,3.065,877,2.467,902,2.688,951,2.57,1049,3.823,1060,3.065,1190,3.138,1203,2.451,1224,3.176,1229,3.138,1238,4.634,1339,3.176,1351,2.779,1465,4.88,1536,3.523,1612,3.523,1614,3.823,1615,3.823,2021,3.823,2164,3.737,2404,3.463,2405,3.588,2406,4.319,2407,4.319,2408,4.319,2409,4.319,2410,4.319,2411,4.319,2412,4.319,2413,4.319,2414,4.319,2415,4.162]],["component/62",[79,0.574]],["title/63",[597,29.51,598,39.64]],["name/63",[597,1.407,598,1.89]],["text/63",[4,2.548,7,1.323,14,2.593,27,3.349,30,2.742,31,2.969,41,3.435,71,2.687,88,1.448,90,2.171,144,2.746,199,2.347,234,2.298,295,3.728,497,2.589,597,4.219,598,6.404,618,4.022,636,2.668,915,3.755,947,4.931,953,3.326,962,3.755,1071,3.997,1716,4.121,1779,4.544,1920,4.312,1926,5.254,2340,5.254,2377,5.254,2416,4.841,2417,5.277,2418,7.985,2419,5.935,2420,5.935,2421,5.935]],["component/63",[79,0.574]],["title/64",[242,32.769,451,35.935]],["name/64",[242,1.562,451,1.713]],["text/64",[7,2.055,14,2.609,19,1.872,30,1.827,46,1.844,70,2.736,71,2.409,73,2.693,88,1.808,90,2.71,108,2.627,128,3.121,229,3.775,230,3.618,242,5.408,300,3.483,404,4.687,408,4.1,413,4.709,451,4.766,599,1.855,636,1.778,759,3.1,894,3.694,963,3.235,1097,3.423,1098,2.419,1099,3.423,1365,3.694,1731,4.507,1746,4.073,1771,4.709,1775,4.073,1779,4.073,1786,4.339,1861,4.709,1880,4.709,1883,4.709,1890,4.709,2422,5.32,2423,5.127,2424,5.32,2425,5.32,2426,5.32,2427,5.32,2428,5.32,2429,5.32,2430,5.32,2431,5.32,2432,5.32,2433,5.32]],["component/64",[79,0.574]],["title/65",[242,32.769,449,30.014]],["name/65",[242,1.562,449,1.431]],["text/65",[13,1.995,14,2.231,34,2.33,38,2.816,43,2.581,71,3.666,88,2.375,127,2.767,134,4.004,201,2.643,210,2.854,240,2.018,242,5.951,246,3.237,252,3.833,441,3.313,449,4.351,451,3.898,510,3.605,536,5.242,572,4.042,590,3.374,700,3.395,710,3.353,739,3.555,745,3.967,757,4.163,762,3.932,802,3.771,863,3.802,1047,4.35,1109,4.942,1231,4.207,1278,4.3,2038,5.364,2154,4.942,2391,5.364,2434,6.059,2435,6.059,2436,6.059]],["component/65",[79,0.574]],["title/66-1",[79,13.98]],["name/66-1",[]],["text/66-1",[]],["component/66-1",[]],["title/66-2",[245,34.575]],["name/66-2",[]],["text/66-2",[]],["component/66-2",[]],["title/66",[54,19.634,500,23.399,501,27.639]],["name/66",[54,0.829,500,0.988,501,1.167]],["text/66",[4,1.498,14,1.837,30,1.198,34,1.342,40,0.809,43,1.486,46,2.985,54,4.202,56,2.436,57,4.597,60,2.511,79,0.697,88,0.851,93,2.265,99,4.469,105,1.4,128,2.047,141,3.685,158,4.05,166,1.908,169,2.545,207,2.033,212,1.854,223,1.4,234,1.351,245,1.723,404,2.207,408,1.931,438,4.623,475,2.505,488,1.4,500,4.683,501,4.469,526,1.897,599,2.322,613,3.089,636,1.166,710,1.931,731,1.431,744,2.276,776,2.672,793,3.276,845,2.285,852,3.229,854,2.226,866,2.122,885,2.285,894,2.423,901,2.047,902,2.172,904,2.535,918,2.449,919,2.711,923,2.566,927,1.875,968,3.019,974,2.6,980,2.306,1000,3.089,1027,2.672,1034,4.155,1047,2.505,1096,2.846,1152,2.899,1155,2.207,1188,2.423,1210,2.846,1212,2.476,1217,3.522,1465,3.491,1573,2.423,1721,2.423,1729,2.846,1740,2.423,1849,3.089,1919,2.798,1952,2.711,1985,2.635,1986,3.089,2035,3.089,2162,3.089,2195,2.711,2204,3.089,2405,5.532,2437,3.489,2438,3.168,2439,6.658,2440,3.489,2441,3.489,2442,3.489,2443,3.089,2444,3.489,2445,3.489,2446,3.489,2447,3.489,2448,3.489,2449,3.489,2450,3.489,2451,3.489,2452,5.23,2453,3.489,2454,3.489,2455,2.672]],["component/66",[79,0.574]],["title/67-1",[14,18.744]],["name/67-1",[]],["text/67-1",[]],["component/67-1",[]],["title/67-2",[1188,48.621]],["name/67-2",[]],["text/67-2",[]],["component/67-2",[]],["title/67-3",[1718,33.233,2225,45.561]],["name/67-3",[]],["text/67-3",[]],["component/67-3",[]],["title/67",[488,22.405,500,28.134]],["name/67",[83,2.18]],["text/67",[4,1.057,7,0.549,14,2.434,20,1.508,31,0.915,34,0.947,35,2.177,36,1.656,40,0.777,43,0.583,45,1.253,46,2.985,49,1.095,54,2.593,56,0.615,63,1.71,64,1.426,66,1.204,67,1.074,88,0.334,90,0.501,104,1.879,105,1.346,107,1.048,111,1.644,121,0.723,123,0.648,124,0.881,136,0.763,138,1.662,139,1.465,144,0.634,146,2.387,149,0.827,154,0.67,156,1.768,158,1.498,159,0.833,165,1.397,166,0.749,167,3.046,169,1.155,171,0.922,196,0.983,207,2.753,208,1.486,221,1.681,256,1.584,398,0.798,400,1.88,435,0.507,448,1.048,449,1.323,477,0.815,482,0.889,488,2.949,490,1.048,492,2.158,496,0.866,497,1.463,500,4.338,504,0.839,516,1.533,520,0.972,534,0.787,552,1.558,556,1.048,569,0.809,570,1.388,591,1.416,592,1.165,594,0.913,597,1.772,601,0.634,602,3.433,606,0.995,611,2.259,636,1.914,637,0.897,643,1.212,655,0.873,694,1.301,697,1.673,707,0.961,708,2.18,714,1.08,715,0.889,716,1.048,717,0.897,731,0.561,739,0.803,744,2.723,755,0.716,757,1.692,760,0.972,793,0.827,799,0.995,804,2.268,810,1.212,817,2.437,836,1.728,837,1.642,840,2.238,842,1.048,844,1.048,845,2.197,854,3.357,858,1.007,860,1.832,863,0.859,866,1.498,895,0.866,898,2.282,901,1.968,903,2.008,913,1.943,933,0.827,945,1.692,946,0.793,947,3.537,948,0.913,963,0.833,964,2.421,965,3.296,967,0.839,978,1.117,985,3.627,989,0.897,1005,1.117,1008,1.193,1010,0.961,1013,0.866,1017,1.521,1039,1.331,1045,2.008,1056,0.74,1088,0.941,1089,0.881,1122,1.117,1137,3.942,1172,1.885,1195,1.212,1199,0.983,1203,1.904,1222,0.995,1229,0.995,1231,0.951,1232,2.008,1233,0.983,1322,0.846,1361,0.951,1363,1.212,1485,2.736,1548,2.18,1586,1.16,1663,1.048,1696,7.071,1698,2.903,1729,2.008,1833,2.18,1845,3.789,1910,1.212,1923,1.16,1993,1.048,2036,1.048,2089,1.212,2155,1.212,2168,3.627,2169,1.117,2171,1.212,2178,2.008,2195,2.606,2216,1.048,2219,1.185,2225,1.117,2277,1.212,2443,1.212,2456,1.369,2457,1.369,2458,1.369,2459,1.278,2460,1.369,2461,1.369,2462,4.725,2463,1.369,2464,1.369,2465,3.355,2466,1.369,2467,1.369,2468,1.369,2469,1.369,2470,1.369,2471,1.185,2472,1.369,2473,2.462,2474,4.097,2475,7.096,2476,2.462,2477,1.369,2478,1.369,2479,1.369,2480,1.32,2481,1.369,2482,1.369,2483,1.369,2484,4.097,2485,2.462,2486,1.369,2487,1.369,2488,1.369,2489,1.369,2490,1.369,2491,1.369,2492,2.462,2493,1.369,2494,1.369,2495,1.369,2496,1.369,2497,1.369,2498,1.369,2499,1.369,2500,1.369,2501,1.369,2502,1.369,2503,1.369,2504,1.369,2505,1.369,2506,1.369,2507,1.369,2508,1.369,2509,1.369,2510,1.369,2511,1.369,2512,1.369,2513,1.369]],["component/67",[79,0.574]],["title/68-1",[54,14.689,105,13.941,500,17.506,963,21.138,1137,20.115]],["name/68-1",[]],["text/68-1",[]],["component/68-1",[]],["title/68-2",[1573,38.782,2455,42.764]],["name/68-2",[]],["text/68-2",[]],["component/68-2",[]],["title/68",[963,21.138,1137,20.115,1246,26.61,1573,24.132,2455,26.61]],["name/68",[963,0.781,1137,0.743,1246,0.983,1573,0.891,2455,0.983]],["text/68",[3,4.053,7,1.105,13,1.632,28,2.711,34,2.711,46,1.718,54,4.146,56,3.165,67,2.162,105,3.291,109,2.888,132,3.038,488,3.584,497,2.162,499,2.76,500,5.195,501,4.194,539,3.406,570,2.795,573,3.185,696,2.401,767,2.207,795,4.194,860,3.668,866,3.015,869,3.559,927,3.788,963,3.015,1137,5.841,1155,3.136,1275,3.851,1351,4.535,1465,5.278,1562,4.388,1573,4.895,1740,3.442,1829,4.199,2514,4.957,2515,4.957,2516,4.628,2517,4.957,2518,4.957,2519,4.957,2520,4.957]],["component/68",[79,0.574]],["title/69-1",[19,17.696]],["name/69-1",[]],["text/69-1",[]],["component/69-1",[]],["title/69-2",[168,21.045,199,22.087]],["name/69-2",[]],["text/69-2",[]],["component/69-2",[]],["title/69",[269,35.333,270,40.577]],["name/69",[269,1.685,270,1.935]],["text/69",[6,1.257,7,1.073,9,2.019,10,1.229,11,1.238,13,1.584,14,1.688,19,1.216,28,1.153,30,1.653,40,1.599,46,1.039,48,5.374,49,0.978,60,1.387,88,1.684,90,1.096,105,3.402,118,4.375,165,1.701,168,3.041,176,1.216,199,1.185,201,3.011,207,4.022,223,1.931,240,1.603,245,1.48,246,1.602,259,1.526,264,3.416,268,3.123,269,4.366,270,3.496,398,2.804,488,2.419,522,5.383,524,3.297,525,1.639,570,3.4,589,1.896,599,1.678,696,1.452,720,3.926,758,1.308,764,4.022,777,3.926,788,5.534,871,2.178,900,1.575,953,1.68,1008,1.452,1039,3.73,1056,1.62,1069,2.205,1091,1.896,1098,1.363,1286,1.558,1364,2.081,1584,1.896,1811,1.735,2042,2.365,2221,3.926,2312,5.863,2521,2.998,2522,1.823,2523,1.823,2524,2.998,2525,1.63,2526,2.998,2527,2.998,2528,2.594,2529,2.998,2530,2.654,2531,2.654,2532,2.998,2533,2.654,2534,2.654,2535,2.654,2536,2.654,2537,2.654,2538,6.11,2539,4.26,2540,4.835,2541,7.067,2542,4.26,2543,4.26,2544,2.654,2545,4.26,2546,2.654,2547,2.654,2548,4.26,2549,4.26,2550,2.654,2551,3.739,2552,2.654,2553,2.54,2554,2.654,2555,2.654]],["component/69",[79,0.574]],["title/70-1",[19,17.696]],["name/70-1",[]],["text/70-1",[]],["component/70-1",[]],["title/70-2",[168,21.045,199,22.087]],["name/70-2",[]],["text/70-2",[]],["component/70-2",[]],["title/70",[269,35.333,271,39.64]],["name/70",[269,1.685,271,1.89]],["text/70",[6,1.257,7,1.073,9,2.019,10,1.229,11,1.238,13,1.584,14,1.688,19,1.216,28,1.153,30,1.653,40,1.599,46,1.039,48,5.374,49,0.978,60,1.387,88,1.684,90,1.096,105,3.402,118,4.375,165,1.701,168,3.041,176,1.216,199,1.185,201,3.011,207,4.022,223,1.931,240,1.603,245,1.48,246,1.602,259,1.526,264,3.416,268,3.123,269,4.366,271,3.416,398,2.804,488,2.419,522,5.383,524,3.297,525,1.639,570,3.4,589,1.896,599,1.678,696,1.452,720,3.926,758,1.308,764,4.022,777,3.926,788,5.534,871,2.178,900,1.575,953,1.68,1008,1.452,1039,3.73,1056,1.62,1069,2.205,1091,1.896,1098,1.363,1286,1.558,1364,2.081,1584,1.896,1811,1.735,2042,2.365,2221,3.926,2312,5.863,2522,1.823,2523,1.823,2525,1.63,2528,2.594,2530,2.654,2531,2.654,2533,2.654,2534,2.654,2535,2.654,2536,2.654,2537,2.654,2538,6.11,2539,4.26,2540,4.835,2541,7.067,2542,4.26,2543,4.26,2544,2.654,2545,4.26,2546,2.654,2547,2.654,2548,4.26,2549,4.26,2550,2.654,2551,3.739,2552,2.654,2553,2.54,2554,2.654,2555,2.654,2556,2.799,2557,2.799,2558,2.998,2559,2.998,2560,2.998,2561,2.998]],["component/70",[79,0.574]],["title/71-1",[19,17.696]],["name/71-1",[]],["text/71-1",[]],["component/71-1",[]],["title/71-2",[168,21.045,199,22.087]],["name/71-2",[]],["text/71-2",[]],["component/71-2",[]],["title/71",[88,13.63,273,40.577]],["name/71",[88,0.65,273,1.935]],["text/71",[6,1.776,7,1.401,9,2.852,10,1.736,11,1.749,13,1.394,14,2.03,19,1.07,27,2.637,28,1.628,40,2.152,43,3.194,48,5.487,49,1.382,81,4.461,88,2.163,168,2.825,176,1.717,199,1.675,218,2.595,223,1.699,259,2.155,268,4.08,273,4.567,488,2.522,524,3.438,525,2.316,599,2.893,610,3.564,696,2.051,728,5.566,748,2.636,758,1.847,764,4.194,939,3.155,1098,1.926,1286,2.201,1572,3.749,1584,4.743,2165,3.588,2416,3.454,2417,2.799,2522,2.576,2523,2.576,2525,2.302,2540,7.108,2541,5.825,2562,4.235,2563,4.235,2564,4.235,2565,4.235,2566,4.235,2567,4.235,2568,4.235,2569,7.001,2570,5.708,2571,5.87,2572,5.87,2573,8.297,2574,6.059]],["component/71",[79,0.574]],["title/72-1",[19,17.696]],["name/72-1",[]],["text/72-1",[]],["component/72-1",[]],["title/72-2",[168,21.045,199,22.087]],["name/72-2",[]],["text/72-2",[]],["component/72-2",[]],["title/72",[280,50.872]],["name/72",[280,3.014]],["text/72",[6,1.957,7,1.504,9,3.142,10,1.913,11,1.927,14,2.126,19,2.33,20,1.717,28,1.794,30,2.317,33,5.167,40,2.014,47,2.543,88,1.138,118,2.7,149,2.816,168,2.543,176,1.892,199,1.845,222,2.168,223,1.871,240,3.072,259,2.374,268,4.38,280,7.373,388,3.572,416,3.083,488,3.181,494,2.927,512,3.987,551,3.083,572,3.112,589,4.27,599,1.627,696,2.259,736,2.451,758,2.035,860,2.086,933,2.816,953,2.614,957,2.951,1008,2.259,1052,2.796,1098,2.121,1142,3.624,1203,2.647,1286,2.425,1919,3.741,2312,4.903,2522,2.837,2523,2.837,2525,2.536,2575,4.665,2576,4.665,2577,4.665,2578,4.665,2579,4.665,2580,4.665,2581,5.167,2582,6.749]],["component/72",[79,0.574]],["title/73-1",[19,17.696]],["name/73-1",[]],["text/73-1",[]],["component/73-1",[]],["title/73-2",[168,21.045,199,22.087]],["name/73-2",[]],["text/73-2",[]],["component/73-2",[]],["title/73",[283,50.872]],["name/73",[283,3.014]],["text/73",[6,2.711,7,1.883,9,4.353,10,2.65,11,2.67,14,2.442,19,1.633,20,2.379,40,1.498,88,1.577,168,3.761,176,2.621,199,2.556,219,3.044,223,2.592,259,3.289,268,5.484,282,5.721,283,6.839,599,2.254,758,2.819,1098,2.939,1286,3.359,2522,3.931,2523,3.931,2525,3.513,2583,6.463,2584,6.463,2585,6.463,2586,6.463,2587,6.463,2588,6.463]],["component/73",[79,0.574]],["title/74-1",[19,17.696]],["name/74-1",[]],["text/74-1",[]],["component/74-1",[]],["title/74-2",[168,21.045,199,22.087]],["name/74-2",[]],["text/74-2",[]],["component/74-2",[]],["title/74",[285,55.245]],["name/74",[285,3.273]],["text/74",[6,0.802,7,0.737,9,1.288,10,0.784,11,0.79,14,1.438,19,0.483,27,1.387,28,2.001,30,1.136,36,1.336,40,1.952,43,3.588,46,2.229,47,1.961,49,0.624,56,0.859,58,0.848,64,0.476,84,0.909,87,2.361,88,1.434,93,5.72,94,0.989,104,0.877,109,1.115,111,2.358,121,1.011,127,1.51,137,1.107,154,1.617,161,1.191,168,3.251,176,0.776,199,0.756,208,1.996,222,1.537,223,0.767,227,3.446,228,1.191,234,0.741,246,1.022,251,1.276,252,1.21,259,0.973,266,1.138,268,2.146,285,4.637,397,2.976,400,3.605,465,2.249,479,1.927,483,2.403,488,1.327,524,1.809,525,2.389,599,2.406,610,2.077,618,0.964,636,0.639,696,0.926,697,0.954,700,2.448,710,1.059,713,1.621,724,1.314,729,1.407,731,2.134,733,3.088,737,2.802,745,2.166,748,3.658,755,2.719,758,1.443,762,2.146,809,1.914,866,1.163,892,3.088,895,1.21,900,1.005,935,1.39,953,2.448,955,1.301,1008,0.926,1021,3.255,1023,1.486,1042,1.693,1056,1.034,1069,1.407,1098,0.87,1111,2.347,1155,2.092,1170,4.858,1212,1.358,1277,2.432,1282,2.532,1286,0.994,1478,3.701,1647,1.786,1740,1.328,1829,1.621,1920,1.39,2017,5.075,2273,1.737,2416,1.56,2417,1.264,2522,1.163,2523,1.163,2525,1.04,2541,2.569,2551,1.486,2571,4.079,2572,4.079,2589,4.832,2590,2.116,2591,2.116,2592,2.116,2593,2.116,2594,2.116,2595,2.116,2596,2.116,2597,3.658,2598,2.116,2599,2.116,2600,2.116,2601,1.913,2602,1.844,2603,2.116,2604,6.899,2605,6.458,2606,1.913,2607,2.116,2608,1.913,2609,2.116,2610,2.116,2611,4.408,2612,2.116,2613,4.832,2614,2.116,2615,5.203,2616,5.755,2617,3.658,2618,2.116,2619,2.116,2620,1.786,2621,2.116,2622,2.116,2623,3.658,2624,3.658,2625,5.755,2626,3.658,2627,3.088,2628,3.658,2629,2.116,2630,2.116,2631,1.56,2632,2.116,2633,2.116,2634,2.116,2635,2.116,2636,2.116,2637,2.116,2638,2.116,2639,3.658,2640,2.116,2641,2.116,2642,2.116,2643,2.116,2644,2.116,2645,4.566,2646,2.116]],["component/74",[79,0.574]],["title/75-1",[19,17.696]],["name/75-1",[]],["text/75-1",[]],["component/75-1",[]],["title/75",[88,9.703,277,21.874,573,14.173,727,28.545]],["name/75",[88,0.379,277,0.854,573,0.553,727,1.114]],["text/75",[6,1.811,7,1.422,9,2.909,10,1.771,11,1.784,14,2.049,19,1.612,30,3.069,40,2.071,56,2.864,64,1.075,88,1.851,168,1.627,169,2.991,176,1.751,223,1.732,240,2.125,259,2.198,268,4.14,277,2.376,287,3.523,288,3.523,438,4.429,486,3.23,494,2.71,522,4.255,525,2.362,573,1.539,599,3.116,610,2.053,696,2.092,727,3.1,758,1.884,764,4.255,909,2.627,1056,3.448,1098,1.964,1286,2.245,1332,3.823,1749,5.984,2522,2.627,2523,2.627,2525,2.348,2551,3.355,2581,6.842,2605,5.647,2620,4.032,2647,4.319,2648,4.319,2649,6.379,2650,4.319,2651,4.319,2652,4.319,2653,6.379,2654,4.319,2655,4.319,2656,4.319,2657,4.319,2658,4.032,2659,8.377,2660,4.319,2661,4.319,2662,4.319,2663,5.956,2664,4.319,2665,6.379,2666,4.319]],["component/75",[79,0.574]],["title/76-1",[19,17.696]],["name/76-1",[]],["text/76-1",[]],["component/76-1",[]],["title/76",[277,30.727,278,38.782]],["name/76",[277,1.465,278,1.849]],["text/76",[6,2.331,7,1.702,8,4.605,9,3.743,10,2.279,11,2.296,14,2.134,19,2.373,30,1.908,40,2.176,43,4,45,2.828,65,4.456,88,1.356,168,2.094,176,2.254,223,2.229,234,2.152,259,2.828,268,4.955,277,3.057,278,5.302,390,3.639,599,1.938,696,2.691,758,2.424,1098,2.527,1286,2.888,1811,3.216,2522,3.38,2523,3.38,2525,3.021,2581,4.255,2667,5.557,2668,5.557,2669,5.557,2670,5.557,2671,5.557,2672,7.129,2673,7.635]],["component/76",[79,0.574]],["title/77-1",[19,17.696]],["name/77-1",[]],["text/77-1",[]],["component/77-1",[]],["title/77",[277,30.727,290,44.066]],["name/77",[277,1.465,290,2.101]],["text/77",[6,0.621,7,0.589,8,1.129,9,0.997,10,0.607,11,0.612,14,1.062,19,2.079,20,0.545,27,0.621,28,1.67,30,2.322,34,0.569,36,1.067,39,0.805,40,1.983,43,1.85,52,1.859,56,1.949,58,1.585,64,0.657,66,0.724,88,1.06,105,0.594,111,0.594,119,0.711,127,1.633,132,0.908,145,0.728,158,0.901,168,2.083,169,1.238,170,1.383,176,0.601,199,1.414,201,0.646,213,0.908,217,0.83,219,0.698,221,0.742,223,0.594,259,0.754,264,1.051,268,1.714,277,1.453,290,2.084,394,6.446,397,3.423,400,1.48,421,2.726,431,1.73,438,6.507,441,1.444,458,0.979,463,1.103,493,0.922,499,1.991,503,1.255,504,0.908,520,1.874,524,0.81,525,2.726,534,0.851,550,1.168,552,0.937,565,1.051,578,1.063,589,0.937,599,1.247,610,0.704,615,0.953,618,0.746,631,1.921,640,1.208,694,2.294,696,0.717,700,3.361,710,1.462,713,1.255,719,3.763,737,3.678,743,0.929,744,1.499,748,0.922,758,0.646,762,1.714,767,0.659,834,2.237,835,4.766,864,1.344,866,0.901,870,1.56,871,1.919,873,1.051,874,4.592,909,2.174,942,1.23,946,0.857,957,0.937,979,1.168,1008,0.717,1017,1.631,1039,2.347,1042,4.895,1053,1.255,1076,1.151,1094,0.937,1098,0.673,1137,0.857,1200,1.383,1202,1.089,1203,1.499,1218,2.537,1224,4.067,1238,1.076,1270,1.118,1278,2.537,1282,1.134,1286,0.77,1348,1.23,1600,2.466,1731,1.255,1740,1.834,1749,1.168,1804,2.022,1811,2.069,1995,1.23,2009,4.653,2017,2.82,2042,2.084,2043,3.338,2078,2.466,2085,2.338,2187,1.311,2192,2.338,2232,1.344,2292,2.154,2297,1.383,2405,3.607,2416,2.154,2417,1.745,2522,0.901,2523,0.901,2525,0.805,2601,2.641,2604,5.529,2605,1.311,2606,3.575,2608,3.575,2615,1.481,2627,1.383,2631,4.066,2663,2.466,2674,4.802,2675,1.638,2676,1.638,2677,1.638,2678,1.638,2679,1.638,2680,1.638,2681,1.638,2682,1.638,2683,1.638,2684,1.638,2685,1.638,2686,1.638,2687,1.638,2688,1.638,2689,1.638,2690,1.548,2691,1.638,2692,1.638,2693,1.638,2694,1.638,2695,6.115,2696,2.921,2697,2.97,2698,5.512,2699,3.954,2700,2.921,2701,7.478,2702,6.115,2703,2.921,2704,1.638,2705,2.921,2706,1.638,2707,1.638,2708,1.638,2709,1.638,2710,1.638,2711,1.638,2712,1.548,2713,1.638,2714,1.638,2715,1.638,2716,1.638,2717,3.954,2718,1.638,2719,2.921,2720,5.512,2721,3.954,2722,3.954,2723,3.954,2724,3.954,2725,2.921,2726,1.638,2727,1.638,2728,1.638,2729,1.383,2730,1.638,2731,1.638,2732,1.481,2733,1.638]],["component/77",[79,0.574]],["title/78-1",[19,17.696]],["name/78-1",[]],["text/78-1",[]],["component/78-1",[]],["title/78",[292,50.872]],["name/78",[292,3.014]],["text/78",[6,2.524,7,1.796,9,4.052,10,2.467,11,2.486,14,2.223,19,1.521,27,2.524,40,1.394,88,1.468,168,2.267,176,2.44,217,3.372,223,2.414,259,3.062,268,5.23,292,5.855,599,2.098,610,4.319,696,2.914,731,2.467,758,2.625,1008,2.914,1052,3.606,1098,2.736,1286,3.127,1536,4.908,2017,4.747,2036,4.607,2522,3.659,2523,3.659,2525,3.271,2729,5.618,2734,8.059,2735,6.017,2736,6.017,2737,6.017,2738,6.017,2739,6.017,2740,6.017,2741,6.017,2742,6.017,2743,5.799,2744,6.017]],["component/78",[79,0.574]],["title/79-1",[19,17.696]],["name/79-1",[]],["text/79-1",[]],["component/79-1",[]],["title/79",[470,53.613]],["name/79",[470,3.176]],["text/79",[6,1.936,7,1.493,9,3.109,10,1.893,11,1.907,13,1.52,14,2.625,19,1.693,20,1.699,27,3.306,31,1.716,40,1.07,58,2.047,64,1.667,88,2.337,90,1.688,123,2.184,180,2.896,212,2.452,223,1.852,228,4.906,259,2.349,294,2.851,470,5.128,497,2.921,512,2.727,525,2.524,599,1.61,610,2.194,618,2.325,636,1.542,758,2.013,800,2.807,860,2.064,1098,2.099,1286,2.399,1718,2.746,1915,2.92,2363,4.808,2364,4.086,2365,3.701,2366,3.485,2367,3.314,2368,3.314,2369,3.314,2417,3.05,2525,2.509,2745,4.616,2746,4.616,2747,6.697,2748,4.616,2749,4.616,2750,3.395,2751,4.616,2752,4.616,2753,4.616,2754,4.616,2755,4.616,2756,3.395,2757,3.395,2758,3.395,2759,3.395,2760,3.395,2761,3.395,2762,3.395,2763,3.586,2764,3.586,2765,3.395,2766,3.395]],["component/79",[79,0.574]],["title/80-1",[19,17.696]],["name/80-1",[]],["text/80-1",[]],["component/80-1",[]],["title/80",[2360,61.99]],["name/80",[2360,3.673]],["text/80",[6,1.906,7,1.476,9,3.06,10,1.863,11,1.877,13,1.496,14,2.617,19,1.673,20,1.673,27,3.276,31,1.689,40,1.053,58,2.015,64,1.648,88,2.324,90,1.662,123,2.15,176,1.843,180,2.851,212,2.414,223,1.823,228,4.862,259,2.312,268,4.297,294,2.806,497,2.888,512,2.684,599,1.584,610,2.16,618,2.289,636,1.518,758,1.982,800,2.763,860,2.031,1098,2.066,1286,2.362,1718,2.703,1915,2.874,2356,3.706,2360,6.915,2361,4.544,2362,6.621,2363,4.753,2364,4.022,2365,3.643,2366,3.431,2367,3.262,2368,3.262,2369,3.262,2370,4.544,2417,3.003,2525,2.47,2750,3.342,2756,3.342,2757,3.342,2758,3.342,2759,3.342,2760,3.342,2761,3.342,2762,3.342,2763,3.53,2764,3.53,2765,3.342,2766,3.342,2767,5.025,2768,5.025,2769,5.025,2770,5.025,2771,5.025,2772,5.025]],["component/80",[79,0.574]],["title/81-1",[19,17.696]],["name/81-1",[]],["text/81-1",[]],["component/81-1",[]],["title/81",[277,38.523]],["name/81",[277,2.282]],["text/81",[6,1.926,7,1.487,9,3.092,10,1.883,11,1.897,13,1.512,14,2.622,19,1.686,20,1.69,27,3.296,31,1.707,40,1.064,58,2.036,64,1.661,88,2.333,123,2.173,176,1.862,180,2.881,212,2.439,223,1.842,228,4.891,259,2.337,268,4.33,277,2.526,294,2.836,497,2.91,512,2.713,599,1.601,610,2.183,618,2.313,636,1.534,758,2.003,800,2.793,860,2.053,1098,2.088,1286,2.386,1718,2.732,1915,2.905,2363,4.79,2365,3.682,2366,3.467,2367,3.296,2368,3.296,2369,3.296,2417,3.034,2525,2.496,2750,3.377,2756,3.377,2757,3.377,2758,3.377,2759,3.377,2760,3.377,2761,3.377,2762,3.377,2763,3.567,2764,3.567,2765,3.377,2766,3.377,2773,4.591,2774,4.591,2775,4.591,2776,6.672,2777,4.591,2778,4.591,2779,4.591,2780,4.591,2781,4.591,2782,4.591,2783,4.591,2784,4.591]],["component/81",[79,0.574]],["title/82-1",[19,17.696]],["name/82-1",[]],["text/82-1",[]],["component/82-1",[]],["title/82",[469,53.613]],["name/82",[469,3.176]],["text/82",[6,1.957,7,1.504,9,3.142,10,1.913,11,1.927,13,1.536,14,2.63,19,1.706,20,1.717,27,3.326,31,1.734,40,1.081,58,2.069,64,1.68,88,2.345,123,2.208,180,2.927,212,2.479,223,1.871,228,4.936,259,2.374,294,2.881,469,5.167,497,2.944,512,2.756,599,1.627,610,2.218,618,2.35,636,1.559,758,2.035,800,2.837,860,2.086,1098,2.121,1286,2.425,1718,2.776,1915,2.951,2363,4.845,2366,3.522,2367,3.349,2368,3.349,2369,3.349,2417,3.083,2525,2.536,2750,3.431,2756,3.431,2757,3.431,2758,3.431,2759,3.431,2760,3.431,2761,3.431,2762,3.431,2763,3.624,2764,3.624,2765,3.431,2766,3.431,2785,4.665,2786,4.665,2787,6.749,2788,4.665,2789,4.665,2790,4.665,2791,4.356,2792,4.665,2793,4.665,2794,4.665,2795,4.665,2796,4.665]],["component/82",[79,0.574]],["title/83-1",[19,17.696]],["name/83-1",[]],["text/83-1",[]],["component/83-1",[]],["title/83",[2797,57.12]],["name/83",[2797,3.384]],["text/83",[6,2.103,7,1.584,9,3.377,10,2.056,11,2.071,13,1.651,14,2.61,19,1.796,20,1.846,27,2.103,31,1.864,40,1.162,58,2.223,64,1.769,88,2.192,123,2.372,180,3.146,212,2.664,223,2.011,228,5.138,259,2.552,294,3.096,466,3.786,497,3.1,512,2.962,599,1.748,610,2.383,636,1.675,758,2.187,800,3.049,860,2.242,1098,2.28,1286,2.606,1718,2.983,1915,3.172,2363,5.102,2367,3.599,2368,3.599,2369,3.599,2525,2.726,2750,3.688,2756,3.688,2757,3.688,2758,3.688,2759,3.688,2760,3.688,2761,3.688,2762,3.688,2765,3.688,2766,3.688,2797,5.797,2798,5.014,2799,5.014,2800,7.106,2801,5.014,2802,5.014,2803,5.014,2804,5.014,2805,5.014,2806,5.014]],["component/83",[79,0.574]],["title/84-1",[0,57.12]],["name/84-1",[]],["text/84-1",[]],["component/84-1",[]],["title/84-2",[1,37.258,2,34.766]],["name/84-2",[]],["text/84-2",[]],["component/84-2",[]],["title/84",[3,32.112,4,23.978]],["name/84",[3,1.531,4,1.143]],["text/84",[1,2.415,2,2.253,5,2.003,6,1.518,7,0.807,8,4.291,10,1.484,11,1.495,12,4.951,13,2.522,14,2.492,15,2.953,16,6.012,17,4.554,18,6.033,19,2.303,20,1.333,21,4.003,22,4.554,23,3.62,24,3.62,25,4.554,26,4.942,27,2.858,28,2.945,29,4.942,30,1.917,31,2.076,32,2.415,33,4.274,34,1.392,35,1.923,36,2.754,37,4.635,38,1.682,39,1.968,40,2.026,41,2.095,42,2.953,43,2.378,44,3.62,45,1.842,46,1.254,47,2.886,48,2.139,49,1.822,50,2.662,51,3.066,52,1.877,53,3.623,54,1.53,55,2.856,56,2.506,57,3.066,58,1.605,59,3.62,60,1.675,61,3.204,62,2.438,63,2.513,64,0.901,65,2.902,66,1.77,67,1.579,68,3.62,69,5.218,70,1.861,71,2.528,72,2.185,73,2.826,74,2.253,75,4.003,76,2.953,77,3.62,78,2.253,2807,2.415]],["component/84",[79,0.574]],["title/85-1",[80,70.023]],["name/85-1",[]],["text/85-1",[]],["component/85-1",[]],["title/85-2",[37,31.597,81,27.639,82,28.688]],["name/85-2",[]],["text/85-2",[]],["component/85-2",[]],["title/85-3",[12,50.872]],["name/85-3",[]],["text/85-3",[]],["component/85-3",[]],["title/85-4",[16,50.872]],["name/85-4",[]],["text/85-4",[]],["component/85-4",[]],["title/85-5",[8,29.944]],["name/85-5",[]],["text/85-5",[]],["component/85-5",[]],["title/85-6",[53,45.447]],["name/85-6",[]],["text/85-6",[]],["component/85-6",[]],["title/85",[8,29.944]],["name/85",[83,2.18]],["text/85",[3,1.683,7,1.323,8,4.436,12,2.127,13,2.877,19,0.74,28,3.229,31,2.531,36,1.908,37,5.43,40,2.195,43,1.247,48,3.506,49,0.955,52,2.288,53,3.064,56,1.314,60,1.354,62,1.972,63,2.033,64,1.987,72,2.85,84,1.391,85,2.388,86,2.388,87,1.582,88,1.448,89,3.012,90,2.17,91,2.591,92,2.809,93,1.9,94,2.441,95,1.953,96,2.927,97,2.927,98,2.591,99,2.809,100,2.821,101,2.591,102,1.953,103,2.033,104,1.343,105,2.38,106,2.101,107,2.241,108,1.445,109,1.706,110,2.927,111,1.894,112,2.533,113,2.591,114,2.662,115,1.46,116,2.591,117,2.388,118,1.694,119,1.404,120,1.917,121,1.547,122,2.241,123,1.385,124,1.883,125,1.564,126,2.962,127,2.156,128,1.717,129,2.927,130,1.729,131,2.591,132,3.636,133,3.211,134,3.12,135,1.953,136,1.63,137,2.733,138,1.915,139,1.742,140,2.927,141,1.62,142,3.786,143,1.62,144,1.354,145,1.438,146,1.706,147,3.012,148,2.388,149,1.767,150,1.651,151,1.953,152,1.822,153,4.721,154,4.107,155,2.591,156,3.39,157,2.127,158,3.609,159,1.78,160,2.48,161,1.822,162,2.927,163,2.388,164,2.127,165,1.661,166,1.601,167,1.694,168,1.103,169,1.373,170,2.733,171,1.972]],["component/85",[79,0.574]],["title/86-1",[2808,67.488]],["name/86-1",[]],["text/86-1",[]],["component/86-1",[]],["title/86-2",[173,38.757]],["name/86-2",[]],["text/86-2",[]],["component/86-2",[]],["title/86-3",[2809,73.197]],["name/86-3",[]],["text/86-3",[]],["component/86-3",[]],["title/86-4",[176,28.397]],["name/86-4",[]],["text/86-4",[]],["component/86-4",[]],["title/86-5",[173,38.757]],["name/86-5",[]],["text/86-5",[]],["component/86-5",[]],["title/86-6",[177,33.718,178,34.228]],["name/86-6",[]],["text/86-6",[]],["component/86-6",[]],["title/86-7",[172,70.023]],["name/86-7",[]],["text/86-7",[]],["component/86-7",[]],["title/86-8",[173,38.757]],["name/86-8",[]],["text/86-8",[]],["component/86-8",[]],["title/86-9",[174,70.023]],["name/86-9",[]],["text/86-9",[]],["component/86-9",[]],["title/86-10",[173,38.757]],["name/86-10",[]],["text/86-10",[]],["component/86-10",[]],["title/86-11",[175,59.322]],["name/86-11",[]],["text/86-11",[]],["component/86-11",[]],["title/86-12",[176,28.397]],["name/86-12",[]],["text/86-12",[]],["component/86-12",[]],["title/86-13",[173,38.757]],["name/86-13",[]],["text/86-13",[]],["component/86-13",[]],["title/86-14",[177,33.718,178,34.228]],["name/86-14",[]],["text/86-14",[]],["component/86-14",[]],["title/86-15",[179,40.098,180,35.046]],["name/86-15",[]],["text/86-15",[]],["component/86-15",[]],["title/86-16",[19,17.696]],["name/86-16",[]],["text/86-16",[]],["component/86-16",[]],["title/86-17",[8,29.944]],["name/86-17",[]],["text/86-17",[]],["component/86-17",[]],["title/86-18",[88,17.088]],["name/86-18",[]],["text/86-18",[]],["component/86-18",[]],["title/86-19",[181,57.12]],["name/86-19",[]],["text/86-19",[]],["component/86-19",[]],["title/86-20",[176,28.397]],["name/86-20",[]],["text/86-20",[]],["component/86-20",[]],["title/86-21",[173,38.757]],["name/86-21",[]],["text/86-21",[]],["component/86-21",[]],["title/86-22",[177,33.718,178,34.228]],["name/86-22",[]],["text/86-22",[]],["component/86-22",[]],["title/86-23",[182,70.023]],["name/86-23",[]],["text/86-23",[]],["component/86-23",[]],["title/86-24",[176,28.397]],["name/86-24",[]],["text/86-24",[]],["component/86-24",[]],["title/86-25",[173,38.757]],["name/86-25",[]],["text/86-25",[]],["component/86-25",[]],["title/86-26",[177,33.718,178,34.228]],["name/86-26",[]],["text/86-26",[]],["component/86-26",[]],["title/86-27",[183,70.023]],["name/86-27",[]],["text/86-27",[]],["component/86-27",[]],["title/86-28",[173,38.757]],["name/86-28",[]],["text/86-28",[]],["component/86-28",[]],["title/86-29",[184,60.586]],["name/86-29",[]],["text/86-29",[]],["component/86-29",[]],["title/86-30",[176,28.397]],["name/86-30",[]],["text/86-30",[]],["component/86-30",[]],["title/86-31",[173,38.757]],["name/86-31",[]],["text/86-31",[]],["component/86-31",[]],["title/86-32",[177,33.718,178,34.228]],["name/86-32",[]],["text/86-32",[]],["component/86-32",[]],["title/86-33",[185,61.99]],["name/86-33",[]],["text/86-33",[]],["component/86-33",[]],["title/86-34",[176,28.397]],["name/86-34",[]],["text/86-34",[]],["component/86-34",[]],["title/86-35",[173,38.757]],["name/86-35",[]],["text/86-35",[]],["component/86-35",[]],["title/86-36",[177,33.718,178,34.228]],["name/86-36",[]],["text/86-36",[]],["component/86-36",[]],["title/86-37",[186,61.99]],["name/86-37",[]],["text/86-37",[]],["component/86-37",[]],["title/86-38",[176,28.397]],["name/86-38",[]],["text/86-38",[]],["component/86-38",[]],["title/86-39",[173,38.757]],["name/86-39",[]],["text/86-39",[]],["component/86-39",[]],["title/86-40",[177,33.718,178,34.228]],["name/86-40",[]],["text/86-40",[]],["component/86-40",[]],["title/86",[187,57.12]],["name/86",[187,3.384]],["text/86",[1,0.428,2,0.399,3,0.369,4,0.276,7,1.829,8,1.978,13,0.401,14,0.649,19,1.622,20,0.641,27,0.269,28,1.019,30,0.598,31,0.648,34,0.469,35,0.341,36,0.493,37,0.437,38,0.567,39,0.663,40,1.009,41,1.765,43,1.732,45,0.327,46,0.604,47,0.999,48,0.72,49,2.044,50,0.472,52,0.586,54,0.937,55,0.506,56,0.547,58,0.541,60,1.227,64,0.85,66,0.852,70,1.14,71,1.2,73,0.882,78,0.759,82,0.753,83,0.337,84,1.623,85,0.524,86,0.524,88,2.036,89,1.111,90,1.249,92,0.382,94,0.332,95,0.813,98,1.08,99,1.577,103,0.446,104,0.294,105,0.257,108,1.686,109,0.374,111,0.257,114,0.982,115,1.322,117,0.524,119,0.836,121,0.644,123,1.254,124,1.121,125,0.652,127,0.293,128,0.715,132,0.393,133,0.829,136,0.97,138,0.495,141,0.355,143,0.355,144,0.297,146,3.109,147,0.409,149,1.339,150,0.982,152,1.084,154,1.084,159,0.742,160,0.544,161,1.898,167,0.706,168,0.835,171,0.432,173,1.467,176,0.26,177,1.6,178,1.359,179,0.461,180,1.391,181,0.524,185,0.568,186,0.568,188,2.533,189,6.478,190,0.583,191,0.642,192,1.219,193,0.642,194,0.642,195,1.698,196,0.875,197,1.266,198,0.599,199,1.484,200,1.576,201,1.637,202,1.08,203,0.642,204,0.642,205,0.568,206,0.642,207,0.711,208,0.387,209,0.45,210,0.574,211,1.219,212,1.62,213,0.393,214,0.446,215,0.491,216,1.631,217,0.36,218,0.393,219,1.915,220,2.302,221,0.873,222,1.587,223,0.257,224,0.619,225,0.499,226,0.619,227,1.374,228,0.759,229,0.455,230,0.829,231,0.524,232,0.524,233,0.399,234,1.18,235,1.219,236,0.821,237,1.236,238,0.642,239,0.856,240,2.507,241,0.428,242,2.003,243,1.08,244,0.886,245,0.86,246,0.343,247,0.642,248,1.223,249,0.642,250,0.524,251,2.905,252,1.102,253,1.902,254,1.102,255,0.524,257,0.642,258,1.963,259,3.015,260,0.934,261,0.642,262,0.642,263,0.568,264,1.236,265,0.642,266,1.037,267,1.219,268,3.463,269,1.929,270,1.266,271,1.236,272,0.642,273,0.886,274,0.642,275,0.568,276,0.642,277,0.671,278,0.446,279,0.642,280,0.886,281,0.642,282,0.568,283,0.886,284,0.642,285,0.962,286,0.642,287,0.524,288,0.524,289,0.642,290,0.506,291,0.642,292,0.886,293,1.219,294,1.637,295,1.898,296,0.642,297,0.642,298,0.524,299,0.642,300,0.799,301,0.568,302,0.642,303,0.524,304,0.642,305,0.599,306,0.642,307,0.524,308,0.642,309,0.934,310,0.642,311,0.491,381,0.437,382,1.219,383,1.219,384,1.219,385,0.568,386,0.568,387,0.568,388,0.491,389,0.599,390,1.736,391,0.599,392,0.599,393,0.599,394,0.544,395,0.599,396,0.544,397,0.325,398,0.711,399,0.544,400,0.683,401,0.524,402,0.599,403,0.466,404,0.771,405,0.599,406,0.642,407,0.568,408,1.89,409,0.642,410,0.736,411,0.642,412,0.934,413,0.568,414,0.568,415,0.642,416,1.465,417,0.642,418,0.642,419,1.334,420,0.642,421,0.667,422,0.642,423,0.642,424,0.847,425,0.642,426,0.568,427,0.642,428,1.841,429,0.642,430,0.964,431,0.42,432,0.642,433,0.446,434,0.642,435,1.13,436,0.491,437,0.642,438,0.446,439,0.642,440,0.759,441,0.953,442,0.642,443,0.461,444,0.642,445,0.466,446,0.642,447,0.441,448,0.491,449,0.345,450,1.131,451,0.413,452,0.491,453,0.701,454,0.642,455,0.995,456,0.524,457,0.524,458,1.465,459,0.491,460,0.524,461,0.337,462,0.478,463,0.478,464,0.533,465,0.437,466,0.485,467,0.642,468,0.583,469,0.491,470,0.491,471,1.425,472,0.568,473,1.465,474,0.568,475,1.251,476,0.642,477,0.726,478,1.251,479,1.015,480,1.631,481,0.446,482,0.417,483,0.886,484,1.638,485,0.428,486,0.617,487,0.642,488,1.223,489,4.319,490,0.491,491,1.334,492,0.796,493,0.759,494,0.765,495,0.568,496,0.406,497,0.28,498,0.778,499,0.357,500,1.536,501,0.382,502,0.466,503,0.544,504,0.393,505,1.447,506,0.886,507,0.642,508,0.305,509,0.568,510,0.382,511,0.568,512,0.379,513,1.08,514,0.524,515,0.642,516,1.084,517,1.08,518,0.642,519,0.466,520,0.455,521,0.533,522,0.428,523,0.715,524,0.351,525,0.351,526,0.349,527,0.428,528,0.524,529,0.466,530,0.599,531,0.886,532,1.219,533,1.175,534,0.701,535,1.219,536,0.555,537,0.642,538,0.524,539,0.441,540,1.08,541,0.555,542,0.642,543,1.219,544,1.219,545,0.642,546,0.642,547,0.524,548,0.683,549,0.642,550,0.506,551,0.806,552,0.771,553,0.515,554,0.524,555,1.54,556,0.934,557,0.524,558,0.42,559,0.555,560,0.533,561,0.446,562,0.642,563,0.515,564,0.663,565,0.865,566,0.524,567,0.524,568,0.568,569,0.379,570,0.362,571,0.875,572,0.813,573,0.229,574,0.568,575,0.995,576,0.642,577,0.568,578,0.461,579,0.478,580,0.599,581,1.219,582,0.642,583,0.642,584,0.642,585,0.642,586,0.642,587,0.568,588,0.491,589,0.406,590,0.357,591,0.701,592,0.577,593,1.08,594,0.428,595,0.642,596,0.711,597,0.92,598,0.455,599,0.224,600,0.642,601,0.806,602,0.466,603,0.642,604,0.524,605,0.642,606,0.466,607,0.642,608,1.219,609,0.642,610,0.305,611,0.432,612,0.642,613,0.568,614,1.139,615,0.413,616,0.921,617,1.08,618,0.323,619,1.219,620,0.524,621,0.642,622,0.524,623,1.068,624,0.524,625,0.642,626,0.642,627,0.642,628,0.568,629,0.642,630,0.642,631,0.655,632,0.995,633,0.934,634,0.642,635,0.642,636,0.214,637,0.42,638,0.642,639,0.544,640,0.524,641,1.08,642,0.642,643,0.568,644,0.642,645,0.568,646,0.642,647,0.642,648,0.642,649,0.642,650,0.619,651,0.568,652,0.642,697,0.32,729,0.472,816,0.39,870,0.379,1051,0.886,1091,0.406,1706,0.583,2611,0.544,2810,0.671,2811,0.671,2812,0.671,2813,0.671,2814,0.499,2815,0.499,2816,0.671,2817,0.671,2818,0.671,2819,0.671,2820,0.671,2821,0.671,2822,0.583,2823,0.671,2824,0.599,2825,0.671,2826,0.671,2827,0.671,2828,0.671,2829,0.671,2830,0.671,2831,0.671,2832,0.671,2833,0.671,2834,0.671,2835,0.671,2836,0.671,2837,0.671,2838,0.671,2839,0.671,2840,0.671,2841,0.671,2842,0.671,2843,0.671,2844,0.671,2845,0.671,2846,0.671,2847,0.671,2848,0.671,2849,0.671,2850,0.671,2851,0.671,2852,0.671,2853,0.671,2854,0.671,2855,0.671,2856,0.671,2857,0.671,2858,0.671,2859,0.671,2860,0.671,2861,0.671,2862,0.671,2863,0.671,2864,0.671,2865,1.275,2866,0.671,2867,0.671,2868,0.671,2869,0.671,2870,0.671,2871,0.671,2872,0.671,2873,0.671,2874,0.671,2875,0.671,2876,0.671,2877,0.671,2878,0.671,2879,0.671,2880,0.671,2881,0.671,2882,0.671,2883,0.671,2884,0.671,2885,0.671,2886,0.671,2887,0.671,2888,0.671,2889,0.671,2890,0.671,2891,0.671,2892,0.671,2893,0.671,2894,0.671,2895,0.671,2896,0.671,2897,0.671,2898,0.671,2899,0.671,2900,0.671,2901,0.671,2902,0.671]],["component/86",[79,0.574]],["title/87-1",[19,14.115,78,34.766]],["name/87-1",[]],["text/87-1",[]],["component/87-1",[]],["title/87-2",[200,36.201]],["name/87-2",[]],["text/87-2",[]],["component/87-2",[]],["title/87",[653,57.12]],["name/87",[653,3.384]],["text/87",[5,0.634,6,0.879,7,2.221,8,0.896,10,2.268,11,2.285,13,0.69,14,2.129,19,1.398,27,0.481,31,3.195,34,0.441,37,1.425,40,0.965,43,0.893,46,0.397,47,0.432,49,1.167,52,0.385,58,0.508,60,0.53,63,0.796,64,1.618,66,0.56,70,0.589,72,0.692,78,0.713,81,0.682,85,0.935,86,0.935,88,2.171,90,2.154,92,1.247,105,0.46,111,2.058,114,2.017,115,2.077,121,2.201,122,0.878,124,2.301,125,1.12,126,0.719,135,1.931,136,1.612,138,0.465,145,0.563,154,1.025,159,0.697,166,0.627,179,1.504,195,2.216,196,2.078,199,1.145,200,0.593,201,3.239,210,0.987,221,1.05,222,2.174,229,1.487,230,1.969,231,1.709,237,2.054,239,1.471,240,2.593,248,1.471,251,0.765,259,3.873,260,0.878,264,3.321,266,3.695,268,4.389,269,2.263,270,1.522,271,1.487,273,2.103,275,1.015,277,2.291,278,1.455,280,1.522,283,1.522,285,1.653,287,0.935,288,0.935,290,1.653,292,1.522,294,1.294,295,3.553,298,0.935,300,3.36,303,0.935,307,1.709,309,1.604,311,1.604,390,0.751,460,0.935,461,0.602,462,0.854,464,0.952,471,1.126,473,1.913,486,0.58,492,1.322,496,0.725,499,0.638,508,2.224,512,0.677,519,1.522,520,0.813,522,0.765,523,3.455,524,2.278,525,1.583,526,0.623,527,0.765,529,0.833,548,2.004,564,1.139,568,1.015,573,1.485,591,0.659,601,1.339,610,0.545,615,0.737,618,0.577,623,0.702,654,1.041,655,0.731,656,1.146,657,2.095,658,1.146,659,1.146,660,3.576,662,1.146,663,1.146,664,1.146,665,1.146,666,1.146,667,1.146,668,1.146,669,2.79,670,1.146,671,1.146,672,1.146,673,1.146,674,1.146,675,0.823,676,2.095,677,1.146,678,1.146,679,2.095,680,2.894,681,1.146,682,2.095,683,1.146,684,2.095,685,1.146,686,1.105,687,1.146,688,1.146,689,1.146,690,2.095,691,1.146,692,1.015,694,1.107,695,1.015,696,0.555,697,1.443,698,1.146,699,1.455,700,0.642,701,2.361,702,3.416,703,1.07,704,0.971,705,0.765,706,1.709,707,2.51,708,1.015,709,0.796,710,0.634,711,1.146,712,1.146,713,0.971,714,1.653,715,1.36,716,1.604,717,3.622,718,0.878,719,0.865,720,0.935,721,1.643,722,1.709,723,2.321,724,1.44,725,2.562,726,2.216,727,1.504,728,1.015,729,0.843,730,1.015,731,1.919,732,0.952,733,1.07,734,0.757,735,0.833,736,0.602,737,1.775,738,0.935,739,2.098,740,1.015,741,1.146,742,1.015,743,0.719,744,0.481,745,0.751,746,0.655,747,0.971,748,0.713,749,0.823,750,1.015,751,0.878,752,1.146,753,1.015,754,0.971,755,0.599,756,1.146,757,0.788,758,0.914,759,0.668,760,1.487,761,0.833,762,0.744,763,1.015,764,0.765,816,1.274,1464,0.757,2807,1.398,2814,0.89,2903,4.991,2904,1.268,2905,0.992]],["component/87",[79,0.574]],["title/88-1",[199,22.087,473,36.911]],["name/88-1",[]],["text/88-1",[]],["component/88-1",[]],["title/88-2",[199,18.369,201,20.263,700,26.03]],["name/88-2",[]],["text/88-2",[]],["component/88-2",[]],["title/88-3",[655,29.633,765,41.124,766,41.124]],["name/88-3",[]],["text/88-3",[]],["component/88-3",[]],["title/88",[201,24.364,767,24.868]],["name/88",[201,1.162,767,1.186]],["text/88",[7,1.643,14,1.007,38,1.912,40,0.954,70,2.116,78,2.561,84,2.925,102,2.745,118,2.382,121,2.174,123,1.947,133,2.799,144,1.904,199,2.915,201,1.795,208,2.484,209,2.888,210,2.899,216,3.027,243,3.643,277,3.385,455,3.357,473,5.406,474,9.162,491,4.712,493,2.561,502,2.989,531,2.989,655,2.625,700,2.306,702,2.541,736,2.162,744,1.726,746,5.911,748,2.561,768,3.246,770,7.371,772,4.115,773,4.115,774,3.966,775,4.115,777,3.357,778,4.115,779,4.115,780,4.115,781,4.115,782,4.115,783,4.115,784,4.115,786,4.115,787,4.115,788,3.3,789,4.115,790,3.56,791,3.151,792,4.115,793,2.484,794,3.486,795,2.448,796,2.625,797,4.115,798,3.357,799,2.989,800,3.743,801,4.115,802,2.561,803,3.357,804,2.278,805,2.857,806,3.643,807,4.115,808,3.151,809,2.382,2814,7.608,2906,4.301,2907,4.301,2908,4.301,2909,4.301]],["component/88",[79,0.574]],["title/89-1",[20,17.101,810,41.124,2808,44.771]],["name/89-1",[]],["text/89-1",[]],["component/89-1",[]],["title/89-2",[70,28.723,811,55.853]],["name/89-2",[]],["text/89-2",[]],["component/89-2",[]],["title/89-3",[199,27.69]],["name/89-3",[]],["text/89-3",[]],["component/89-3",[]],["title/89-4",[812,61.99]],["name/89-4",[]],["text/89-4",[]],["component/89-4",[]],["title/89",[813,57.12]],["name/89",[813,3.384]],["text/89",[7,2.175,8,2.609,14,1.493,38,3.78,40,1.414,54,2.579,70,3.137,79,1.624,82,3.768,84,2.9,88,1.489,90,2.231,102,4.07,118,3.531,138,2.474,178,3.739,187,4.977,199,2.413,207,3.555,218,3.739,219,3.831,490,4.671,493,3.798,497,2.661,653,4.977,707,4.282,709,4.236,745,3.995,812,5.401,813,4.977,814,6.101,815,6.101,816,3.711,817,4.432,818,6.378,819,4.977,820,5.279,822,6.101,823,6.101,824,5.696,825,6.101,826,5.696,2808,5.88,2910,7.31]],["component/89",[79,0.574]],["title/90-1",[241,26.523,731,16.304,827,31.37,828,35.2]],["name/90-1",[]],["text/90-1",[]],["component/90-1",[]],["title/90-2",[39,30.364,731,22.903]],["name/90-2",[]],["text/90-2",[]],["component/90-2",[]],["title/90",[111,18.634,803,37.893,829,35.567]],["name/90",[111,0.787,803,1.599,829,1.501]],["text/90",[4,3.471,7,1.076,14,1.181,19,0.937,30,0.751,34,1.857,35,1.97,36,0.883,38,1.016,40,0.507,46,1.285,52,2.14,56,1.665,58,0.969,60,3.201,64,2.144,66,2.361,71,2.575,73,2.879,74,1.361,81,1.301,88,0.533,93,1.419,104,1.003,105,2.281,108,1.079,109,1.274,111,2.554,115,1.09,119,1.049,127,0.998,138,0.887,139,1.301,143,1.21,154,1.813,158,1.33,166,1.196,167,2.794,169,2.985,201,1.617,212,1.162,240,1.608,241,4.247,246,3.039,295,2.972,397,1.107,400,1.225,408,1.21,412,1.674,430,1.21,451,1.407,463,2.762,477,1.301,479,1.274,483,1.588,486,3.223,488,0.877,516,1.361,540,1.935,547,1.783,548,4.132,552,1.383,555,2.574,564,1.188,565,2.631,570,1.233,572,1.458,589,3.054,590,2.689,594,1.458,599,0.762,618,1.101,645,1.935,694,1.155,697,1.09,705,1.458,721,1.241,731,3.769,734,1.445,739,1.283,744,1.555,793,1.32,795,1.301,796,1.395,798,1.783,802,1.361,804,1.21,827,4.487,828,1.935,830,2.186,831,2.522,832,2.308,833,1.935,834,1.852,835,1.472,836,1.534,837,3.221,838,6.124,839,1.935,840,2.473,841,1.783,842,1.674,843,3.574,844,2.839,845,1.432,846,2.186,847,2.186,848,2.186,849,2.497,850,2.186,851,2.694,852,2.206,853,1.935,854,1.395,855,2.186,856,1.935,857,1.935,858,1.608,859,1.935,860,0.977,861,4.828,862,1.588,863,3.995,864,1.985,865,2.694,866,2.255,867,1.892,868,2.186,869,2.662,870,1.292,871,1.588,872,1.783,873,1.552,874,2.839,875,3.282,876,2.186,877,2.118,878,1.783,879,2.186,880,1.674,881,1.674,882,2.186,883,1.935,884,1.518,885,1.432,886,1.935,887,2.186,888,2.186,889,2.186,890,1.935,891,2.662,892,2.041,893,1.33,894,1.518,895,1.383,896,1.935,897,1.518,898,1.217,899,1.725,900,1.149,901,2.175,902,1.361,903,1.783,904,1.588,905,2.107,906,2.186,907,1.935,908,1.651,909,1.33,910,1.852]],["component/90",[79,0.574]],["title/91",[64,13.904,410,33.718]],["name/91",[64,0.663,410,1.608]],["text/91",[45,3.194,52,2.786,54,2.653,64,2.31,67,2.738,88,2.264,108,3.099,145,3.084,240,2.761,410,6.195,430,3.474,478,4.506,501,3.735,508,2.984,548,3.517,573,3.308,596,3.657,744,2.633,767,2.795,877,3.585,911,5.431,912,5.12,913,4.952,914,4.806,915,3.971,916,4.806,917,5.557,918,4.405,919,4.877,920,6.277,921,6.277,922,7.338,923,4.617]],["component/91",[79,0.574]],["title/92-1",[0,57.12]],["name/92-1",[]],["text/92-1",[]],["component/92-1",[]],["title/92-2",[1,37.258,2,34.766]],["name/92-2",[]],["text/92-2",[]],["component/92-2",[]],["title/92-3",[46,19.357,592,26.429]],["name/92-3",[]],["text/92-3",[]],["component/92-3",[]],["title/92-4",[47,21.045,731,22.903]],["name/92-4",[]],["text/92-4",[]],["component/92-4",[]],["title/92-5",[52,18.776,64,13.904]],["name/92-5",[]],["text/92-5",[]],["component/92-5",[]],["title/92-6",[241,30.987,731,19.048,827,36.649]],["name/92-6",[]],["text/92-6",[]],["component/92-6",[]],["title/92",[3,32.112,4,23.978]],["name/92",[3,1.531,4,1.143]],["text/92",[1,1.5,2,3.067,3,2.183,4,1.63,5,1.244,6,1.592,7,1.442,10,1.557,11,1.568,14,2.64,19,0.568,20,2.132,27,2.714,30,0.772,32,1.5,34,0.865,40,0.521,41,1.301,46,2.722,47,1.43,49,1.239,52,2.36,56,1.009,58,1.683,60,2.679,64,1.442,67,0.981,71,2.231,72,1.357,73,1.922,74,2.363,84,1.069,88,2.175,90,0.822,105,0.902,108,1.11,111,2.323,119,1.822,137,1.301,138,2.624,149,2.292,150,2.779,169,2.715,213,1.378,218,1.378,219,1.059,223,0.902,295,1.049,300,2.486,408,2.101,449,1.208,463,1.675,477,2.259,479,1.31,486,1.138,488,1.523,492,1.734,493,1.399,497,2.822,499,1.252,508,1.069,558,1.472,561,1.561,564,1.222,573,2.306,578,1.614,592,4.58,599,0.784,636,1.269,697,1.121,700,1.26,721,2.155,731,2.878,746,1.284,762,1.459,767,1.001,795,1.338,804,1.244,832,1.399,838,3.361,839,3.361,854,1.434,860,1.697,869,1.614,877,1.284,900,1.181,924,2.248,925,2.663,926,3.361,927,2.04,928,2.248,929,1.99,930,2.907,931,3.721,932,2.907,933,2.292,934,5.126,935,1.633,936,1.446,937,2.099,938,2.248,939,5.23,940,2.099,941,1.697,942,1.868,943,1.868,944,6.47,945,1.545,946,1.301,947,1.388,948,1.5,949,2.248,950,4.928,951,1.338,952,2.248,953,1.26,954,2.248,955,1.529,956,1.721,957,1.422,958,1.99,959,1.654,960,2.248,961,2.248,962,1.422,963,1.367,964,1.328,965,1.208,966,2.248,967,1.378,2807,2.533]],["component/92",[79,0.574]],["title/93-1",[240,18.608,447,38.379]],["name/93-1",[]],["text/93-1",[]],["component/93-1",[]],["title/93-2",[8,23.884,447,38.379]],["name/93-2",[]],["text/93-2",[]],["component/93-2",[]],["title/93-3",[697,27.852,918,39.201]],["name/93-3",[]],["text/93-3",[]],["component/93-3",[]],["title/93-4",[430,30.914,877,31.902]],["name/93-4",[]],["text/93-4",[]],["component/93-4",[]],["title/93",[430,38.757]],["name/93",[430,2.296]],["text/93",[4,0.553,7,0.519,8,2.163,14,0.315,19,1.588,20,1.441,28,1.741,30,0.8,32,1.555,34,0.896,35,0.685,36,0.942,40,0.299,41,0.746,45,0.656,46,2.054,51,1.091,52,1.856,54,1.914,56,2.033,58,1.033,64,1.941,67,0.562,79,0.257,81,0.767,82,0.796,84,1.517,88,1.903,90,0.471,93,2.071,99,3.526,102,1.555,105,0.517,109,0.751,111,1.28,121,0.681,127,2.31,130,1.377,134,1.54,136,0.717,137,0.746,138,1.294,139,0.767,141,2.166,143,1.29,144,0.596,145,0.633,148,1.051,150,1.799,151,0.859,157,0.936,158,0.784,161,1.451,166,3.019,167,1.349,169,0.604,171,1.57,210,0.607,215,0.986,219,0.607,220,1.76,222,0.599,223,0.517,240,3.145,241,0.859,244,1.693,245,0.636,246,0.688,250,1.051,295,1.088,381,0.876,397,1.616,400,0.722,410,3.577,430,3.479,431,0.844,433,1.618,435,2.196,440,0.802,441,1.275,445,2.843,447,3.112,449,0.692,450,0.836,453,1.34,463,0.96,480,0.948,485,1.555,486,0.652,488,1.28,501,1.899,503,1.091,504,1.428,506,0.936,508,1.108,514,1.051,526,1.267,539,1.601,541,1.115,548,0.722,555,1.618,556,0.986,560,1.07,563,1.033,571,0.925,588,0.986,592,0.61,596,1.358,599,0.449,616,0.973,675,0.925,694,1.231,697,1.952,705,1.555,709,0.895,731,0.528,736,0.677,744,1.899,746,0.736,757,0.885,799,0.936,802,1.986,804,1.29,831,3.441,835,0.868,837,0.859,842,2.996,849,1.57,852,0.767,860,0.576,863,0.808,869,1.673,870,1.377,872,1.901,874,1.784,875,1.141,880,0.986,881,2.996,885,2.563,893,0.784,895,0.815,898,0.717,900,2.379,908,3.419,912,2.603,916,0.986,918,4.837,919,1.811,923,0.948,927,1.252,936,0.829,939,0.96,946,1.847,957,0.815,963,0.784,964,0.761,968,1.115,969,1.288,970,4.834,971,0.986,972,4.529,973,1.141,974,1.736,975,2.331,976,1.016,977,1.288,978,2.603,979,1.016,980,2.109,981,4.537,982,2.063,983,1.288,984,1.288,985,1.141,986,2.063,987,1.288,988,0.986,989,0.844,990,2.063,991,2.331,992,0.904,993,1.051,994,1.288,995,1.869,996,1.901,997,1.288,998,2.063,999,2.603,1000,1.141,1001,5.059,1002,1.051,1003,1.288,1004,0.986,1005,1.051,1006,1.016,1007,0.986,1008,1.895,1009,1.288,1010,0.904,1011,1.288,1012,2.331,1013,1.474,1014,1.288,1015,2.063,1016,1.288,1017,1.439,1018,1.288,1019,1.288,1020,1.141,1021,1.736,1022,1.673,1023,1.811,1024,1.288,1025,1.288,1026,1.288,1027,0.986,1028,1.288,1029,1.901,1030,1.288,1031,1.141,1032,2.409,1033,1.141,1034,0.986,1035,0.986,1036,2.331,1037,1.288,1038,1.288,1039,0.696,1040,1.288,1041,1.513,1042,1.141,1043,3.465,1044,1.033,1045,1.051,1046,2.063,1047,0.925,1048,1.288,1049,2.063,1050,2.331,1051,0.936,1052,0.772,1053,1.091,1054,1.288,1055,0.936,1056,0.696,1057,1.288,1058,1.288,1059,1.288,1060,0.914,1061,0.986,1062,1.974,1063,1.288,1064,1.288,1065,1.203,1066,1.051,1067,1.288,1068,0.936,1069,0.948,1070,1.141,1071,2.149,1072,1.288,1073,1.288,1074,1.288,1075,0.948,1076,1.001,1077,1.141,1078,2.331,1079,1.288,1080,2.331,1081,1.288,1082,1.288,1083,1.288,1084,1.288,1085,1.288,1086,1.288,1087,1.288]],["component/93",[79,0.574]],["title/94-1",[64,13.904,1088,38.379]],["name/94-1",[]],["text/94-1",[]],["component/94-1",[]],["title/94",[14,11.364,212,24.681,481,32.255]],["name/94",[212,1.415,481,1.849]],["text/94",[7,0.589,13,0.87,14,2.725,20,2.359,27,1.109,36,1.068,40,0.613,43,1.851,47,0.996,49,2.091,64,1.377,66,2.125,70,1.359,71,2.901,74,3.988,88,2.05,94,1.367,144,2.56,145,1.299,151,1.763,190,3.945,210,1.245,212,2.939,230,1.798,234,1.024,240,2.68,242,1.551,253,2.42,254,1.672,266,3.812,295,1.234,397,3.244,400,2.435,440,1.645,441,3.025,479,1.54,481,4.916,482,1.716,514,3.544,519,5.844,599,0.922,610,2.065,723,2.12,724,4.403,743,3.471,762,1.716,791,2.024,849,1.78,878,2.156,884,1.835,885,1.731,897,3.017,925,1.429,962,1.672,1008,1.28,1089,3.559,1090,2.12,1091,1.672,1092,2.34,1093,2.34,1094,1.672,1095,2.239,1096,2.156,1097,4.123,1098,2.914,1099,4.123,1100,6.408,1101,4.542,1102,2.4,1103,4.345,1104,2.643,1105,2.643,1106,2.643,1107,2.763,1108,2.643,1109,4.513,1110,2.054,1111,1.876,1112,2.763,1113,2.763,1114,2.763,1115,2.763,1116,2.763,1117,2.763,1118,2.763,1119,2.763,1120,2.763,1121,2.156,1122,2.156,1123,2.156,1124,2.468,1125,1.835,1126,2.12,1127,2.643,1128,2.643,1129,2.643,1130,2.4,1131,2.643,1132,2.763,1133,4.542,1134,4.542,1135,2.643,1136,4.345,1137,1.53,1138,4.542,1139,2.763,1140,2.763,1141,2.763,1142,2.054,1143,2.763,1144,2.763,1145,2.643,1146,2.643,1147,2.763,1148,2.196,1149,2.643]],["component/94",[79,0.574]],["title/95",[88,17.088]],["name/95",[83,2.18]],["text/95",[2,1.245,7,1.346,13,0.659,20,1.265,31,1.278,32,1.335,36,1.826,40,1.047,41,1.158,45,1.018,46,0.693,52,3.006,58,0.887,60,2.795,64,2.181,67,0.873,79,0.399,81,1.19,82,1.236,88,1.309,90,2.581,91,1.771,94,1.777,95,3.578,103,1.389,104,2.073,108,2.648,111,2.423,123,0.947,126,1.255,130,1.182,132,2.107,134,4.358,135,3.015,139,2.045,144,0.926,145,1.689,149,2.075,150,1.128,159,2.091,161,3.338,176,1.833,197,1.453,201,0.873,212,1.063,245,0.988,256,1.287,294,2.791,295,2.504,435,0.741,441,1.88,461,1.051,475,1.436,482,1.298,484,3.544,486,1.013,488,1.813,493,1.245,504,2.107,506,3.283,508,2.55,516,2.813,524,1.094,526,1.869,529,1.453,534,1.15,539,1.375,548,1.926,552,1.266,572,1.335,573,1.912,591,2.598,594,1.335,596,3.52,601,2.091,610,2.148,615,1.287,618,3.043,622,5.38,623,1.226,628,1.771,636,1.792,655,2.193,694,1.816,701,1.632,707,1.404,709,2.387,710,1.107,718,1.532,731,1.41,732,1.662,734,1.322,735,1.453,736,1.051,739,2.652,744,0.839,747,1.695,748,4.847,751,1.532,757,2.362,761,1.453,765,1.771,766,1.771,793,1.208,833,4.748,837,1.335,840,1.335,845,1.31,849,1.347,852,1.19,854,1.276,873,2.44,884,1.389,898,1.914,917,1.771,927,1.075,932,1.532,971,2.632,980,1.322,989,1.31,1007,1.532,1013,1.266,1041,1.298,1068,1.453,1125,2.387,1150,1.771,1151,2.883,1152,3.755,1153,5.758,1154,4.519,1155,2.859,1156,2.001,1157,2.001,1158,3.209,1159,1.771,1160,2.001,1161,2.001,1162,1.771,1163,3.437,1164,4.519,1165,1.771,1166,2.001,1167,2.001,1168,3.043,1169,3.043,1170,3.209,1171,3.437,1172,1.532,1173,1.771,1174,2.001,1175,1.771,1176,2.001,1177,1.868,1178,1.731,1179,2.001,1180,2.001,1181,2.001,1182,1.632,1183,2.001,1184,1.771,1185,1.771,1186,2.001,1187,2.001,1188,1.389,1189,1.632,1190,1.453,1191,1.771,1192,1.695,1193,1.632,1194,1.771,1195,1.771,1196,1.771,1197,2.001]],["component/95",[79,0.574]],["title/96",[1155,44.298]],["name/96",[1155,2.624]],["text/96",[7,1.931,14,2.285,34,2.11,36,2.217,40,2.008,52,1.844,64,1.884,67,2.393,89,3.5,90,2.768,99,3.265,104,2.517,111,2.201,137,3.176,144,2.539,176,2.225,201,2.393,246,4.044,294,3.389,295,2.561,465,3.732,488,2.201,497,2.393,500,2.764,502,3.986,508,3.598,510,3.265,564,2.983,573,2.698,697,2.736,700,3.075,709,3.81,744,2.301,836,3.851,860,2.453,1022,5.434,1151,3.5,1155,5.909,1169,4.857,1198,3.851,1199,3.939,1200,5.123,1201,4.857,1202,4.036,1203,3.114,1204,5.487,1205,5.487,1206,5.487,1207,5.487,1208,5.487]],["component/96",[79,0.574]],["title/97-1",[67,24.364,111,22.405]],["name/97-1",[]],["text/97-1",[]],["component/97-1",[]],["title/97-2",[64,11.564,1584,29.387,1587,35.074]],["name/97-2",[]],["text/97-2",[]],["component/97-2",[]],["title/97-3",[64,8.652,105,13.941,1584,21.986,1587,26.241,2697,28.873]],["name/97-3",[]],["text/97-3",[]],["component/97-3",[]],["title/97-4",[46,16.099,234,17.987,592,21.981]],["name/97-4",[]],["text/97-4",[]],["component/97-4",[]],["title/97",[46,19.357,592,26.429]],["name/97",[46,0.923,592,1.26]],["text/97",[2,0.956,4,3.21,7,1.138,13,0.506,14,2.215,20,1.004,28,1.415,30,1.531,34,1.415,35,2.713,36,1.802,40,1.033,41,0.889,46,3.096,47,2.131,49,1.201,52,2.315,54,2.39,56,0.689,58,0.681,60,1.703,64,1.408,66,1.334,71,1.666,72,0.927,73,1.381,74,1.698,82,0.948,88,0.375,89,0.98,90,0.562,92,0.914,93,0.997,94,0.794,102,1.024,104,1.688,105,0.616,106,1.958,108,0.758,109,0.895,111,2.888,118,1.579,119,2.139,127,0.701,128,1.6,130,0.907,137,0.889,139,0.914,141,1.51,143,0.85,145,0.755,146,0.895,147,0.98,154,2.18,157,1.116,164,1.116,169,0.72,208,0.927,209,1.078,214,1.066,219,0.723,234,1.425,245,0.758,256,0.988,397,1.381,400,0.861,435,1.364,452,1.176,458,1.015,465,1.045,466,1.159,477,0.914,480,1.129,482,0.997,484,0.825,485,1.82,486,2.257,488,2.048,492,0.701,508,3.104,526,1.483,534,2.116,548,0.861,551,1.015,552,2.328,561,1.066,564,2.001,571,1.958,573,2.566,590,1.519,591,0.883,592,4.284,594,1.82,596,0.895,597,0.811,599,0.536,615,2.869,616,1.159,631,0.825,636,0.912,637,1.006,639,1.301,640,1.253,694,1.441,702,0.948,705,1.024,715,2.389,716,1.176,721,1.548,731,2.952,732,1.276,734,2.946,735,1.116,736,0.807,744,1.144,793,3.697,796,0.98,802,0.956,804,2.468,832,0.956,837,1.024,858,1.129,860,0.687,870,1.612,873,1.09,877,0.877,885,1.786,890,1.359,891,1.102,898,0.855,901,0.901,902,1.698,903,1.253,909,0.934,915,0.971,923,1.129,927,0.825,929,1.359,931,2.06,932,1.176,936,0.988,946,1.579,962,1.726,992,1.078,995,3.575,1002,1.253,1041,0.997,1047,1.102,1075,2.006,1089,2.368,1091,0.971,1130,1.394,1162,1.359,1168,1.359,1188,1.066,1201,1.359,1202,2.006,1209,1.253,1210,1.253,1211,5.654,1212,1.09,1213,1.536,1214,2.032,1215,1.176,1216,1.359,1217,3.314,1218,4.887,1219,1.536,1220,2.951,1221,1.536,1222,1.116,1223,2.728,1224,1.129,1225,1.359,1226,1.359,1227,1.329,1228,1.536,1229,1.116,1230,1.359,1231,1.066,1232,1.253,1233,2.642,1234,1.536,1235,2.728,1236,4.459,1237,2.728,1238,1.116,1239,1.536,1240,1.359,1241,1.536,1242,1.536,1243,1.536,1244,1.536,1245,1.536,1246,2.089,1247,1.712,1248,1.536,1249,1.359,1250,1.359,1251,1.536,1252,1.359,1253,1.536,1254,1.253,1255,1.536,1584,0.971,1768,1.276,2041,2.311,2167,1.359,2180,1.359,2697,2.266,2824,1.434,2911,1.605,2912,1.605,2913,1.605,2914,1.605,2915,1.605,2916,1.434,2917,1.605,2918,1.605,2919,1.605]],["component/97",[79,0.574]],["title/98",[19,17.696]],["name/98",[83,2.18]],["text/98",[1,3.233,2,3.017,7,1.08,8,3.464,12,3.521,13,2.667,14,2.382,15,3.954,16,5.04,17,3.954,19,2.591,22,5.659,25,3.954,26,4.291,27,2.033,28,1.864,29,4.291,30,2.382,31,1.802,33,3.711,34,1.864,37,3.297,40,2.323,43,2.064,69,7.165,76,3.954,78,3.017,104,2.223,133,3.297,168,1.826,176,1.966,201,2.114,240,2.311,397,2.454,401,3.954,485,3.233,488,1.944,492,2.213,494,3.041,526,2.635,592,2.293,636,1.62,721,2.75,758,2.114,965,2.604,1256,4.847,1257,4.291,1258,4.847,1259,4.847,1260,4.847,1261,4.847,1262,4.847,1263,4.291,1264,4.847,1265,4.847,1266,4.847,1267,4.847]],["component/98",[79,0.574]],["title/99",[168,26.384]],["name/99",[168,1.563]],["text/99",[8,4.485,19,2.165,28,3.067,35,2.078,38,1.818,40,1.657,43,1.666,48,4.224,49,2.333,52,1.991,53,5.176,60,1.81,63,2.716,69,2.995,72,2.362,88,0.955,105,1.569,145,2.911,150,2.206,168,2.232,215,2.995,222,2.753,240,1.303,385,3.463,386,3.463,387,3.463,388,2.995,389,3.652,391,3.652,393,3.652,394,3.314,395,3.652,396,3.314,397,2.999,398,4.647,399,3.314,400,3.32,401,4.832,402,3.652,403,2.842,404,3.748,405,3.652,431,2.562,461,2.055,488,1.569,494,2.455,501,2.328,555,4.113,624,4.832,696,1.895,697,1.951,700,3.32,749,4.253,758,2.584,767,2.638,933,2.362,1039,3.202,1218,2.776,1268,3.652,1269,3.912,1270,5.398,1271,5.924,1272,6.057,1273,5.244,1274,3.912,1275,4.602,1276,3.463,1277,2.877,1278,4.204,1279,5.019,1280,5.924,1281,3.912,1282,4.536]],["component/99",[79,0.574]],["title/100-1",[125,29.843,138,22.651]],["name/100-1",[]],["text/100-1",[]],["component/100-1",[]],["title/100",[88,17.088]],["name/100",[88,1.012]],["text/100",[7,1.488,8,4.256,12,2.545,13,1.153,14,2.724,15,2.858,16,3.955,17,2.858,19,2.181,22,2.858,25,2.858,30,1.203,40,1.547,47,2.051,52,1.178,64,1.874,69,4.168,71,1.586,72,2.115,73,2.756,74,2.181,76,2.858,78,2.181,88,1.989,122,2.682,124,2.254,125,1.872,133,2.383,168,1.32,210,1.65,385,4.819,386,4.819,387,3.101,396,6.377,399,6.377,407,4.819,414,4.819,416,2.315,522,2.337,615,2.254,623,2.147,736,1.841,745,2.294,758,1.528,956,2.682,1094,2.216,1111,7.173,1263,4.819,1273,3.101,1283,3.503,1284,5.443,1285,4.819,1286,2.829,1287,5.172,1288,3.503,1289,3.875,1290,3.875,1291,3.031,1292,3.503,1293,3.503,1294,3.503,1295,3.503,1296,3.503,1297,3.503,1298,4.819,1299,3.503,1300,3.503,1301,3.101,1302,3.101,1303,3.101,1304,3.101,1305,3.101]],["component/100",[79,0.574]],["title/101",[816,33.97,2920,44.786]],["name/101",[2920,3.326]],["text/101",[7,1.706,127,3.495,188,6.358,218,4.69,219,3.605,462,5.702,464,7.814,768,7.421,816,4.655,967,5.764,2631,6.243,2920,8.516,2921,8.001,2922,8.001,2923,8.001]],["component/101",[79,0.574]],["title/102",[816,42.588]],["name/102",[83,2.18]],["text/102",[7,1.87,38,3.899,125,4.483,130,4.957,227,6.619,239,5.889,694,4.433,816,6.047,927,4.508,2920,6.727]],["component/102",[79,0.574]],["title/103",[125,24.82,239,32.604,816,28.253]],["name/103",[125,1.423,239,1.869]],["text/103",[5,3.991,6,3.024,7,2.02,10,2.957,11,2.979,38,3.351,106,5.177,125,5.296,127,3.293,179,5.177,218,4.419,239,7.299,240,2.402,462,5.372,768,5.689,816,5.512,989,4.722,2807,4.81,2924,8.639,2925,8.639,2926,7.538]],["component/103",[79,0.574]],["title/104-1",[111,15.95,236,26.78,636,13.286,748,24.749]],["name/104-1",[]],["text/104-1",[]],["component/104-1",[]],["title/104",[234,17.987,236,31.287,636,15.522]],["name/104",[234,0.759,236,1.321,636,0.655]],["text/104",[4,3.533,13,2.33,14,2.75,20,1.835,36,2.014,40,1.155,46,2.453,47,1.878,49,1.627,67,2.175,71,3.726,88,2.008,111,2,118,2.885,210,2.348,234,1.93,236,3.358,479,2.905,486,2.524,488,2,553,6.598,569,2.945,571,3.579,610,2.37,636,2.365,721,2.829,748,3.103,759,2.905,805,3.461,832,3.103,835,3.358,860,4.005,927,2.679,946,2.885,1318,4.067,1804,3.817,1898,8.229,1899,8.229,1900,4.985,1901,4.985,1902,4.985,1903,4.985,1904,4.985,1905,4.985,1906,4.985,1907,4.985,1908,4.985,1909,4.985]],["component/104",[79,0.574]],["title/105",[49,12.975,234,15.396,471,21.366,498,25.364]],["name/105",[49,0.506,234,0.601,471,0.834,498,0.99]],["text/105",[4,2.514,13,1.928,20,2.156,31,3.569,34,2.252,49,3.132,79,1.169,81,3.484,89,3.735,94,4.633,104,2.686,114,3.302,119,2.809,138,3.209,144,2.709,161,3.645,219,2.758,234,3.064,295,2.733,450,3.8,471,4.252,492,2.674,498,5.717,596,3.412,601,2.709,611,3.944,636,2.644,767,2.607,967,3.588,1276,5.184,1555,5.974,1645,5.184,1718,3.484,1804,4.483,1910,5.184,1911,5.855,1912,5.855,1913,5.855,1914,5.855,1915,3.704,1916,5.467]],["component/105",[79,0.574]],["title/106",[52,15.616,234,17.987,915,29.387]],["name/106",[52,0.659,234,0.759,915,1.24]],["text/106",[7,1.002,14,2.659,30,1.544,31,3.175,34,2.527,36,1.817,40,1.042,52,2.871,71,2.036,88,1.604,138,1.824,217,2.52,219,2.118,234,1.741,449,2.416,477,2.676,484,2.416,486,2.277,492,2.054,497,3.387,500,3.911,534,2.585,597,4.8,601,2.081,631,2.416,636,1.503,755,2.35,860,3.819,915,2.845,953,2.52,967,2.756,1097,2.893,1098,2.045,1099,2.893,1111,4.664,1151,2.869,1217,2.919,1349,5.36,1351,2.893,1427,4.47,1766,3.443,1917,6.967,1918,4.497,1919,3.606,1920,3.267,1921,5.18,1922,6.571,1923,3.81,1924,4.497,1925,5.817,1926,3.981,1927,4.497,1928,4.497,1929,4.497,1930,4.497,1931,4.497,1932,3.981,1933,4.497,1934,3.981]],["component/106",[79,0.574]],["title/107-1",[31,26.034]],["name/107-1",[]],["text/107-1",[]],["component/107-1",[]],["title/107-2",[234,17.987,266,27.639,471,24.962]],["name/107-2",[]],["text/107-2",[]],["component/107-2",[]],["title/107-3",[13,15.293,34,17.863,570,26.194]],["name/107-3",[]],["text/107-3",[]],["component/107-3",[]],["title/107",[49,15.159,234,17.987,471,24.962]],["name/107",[49,0.64,234,0.759,471,1.054]],["text/107",[7,1.263,14,2.669,20,0.801,27,0.912,28,2.18,30,0.747,31,2.107,34,2.18,38,1.011,40,1.471,43,1.573,45,1.879,47,1.391,49,2.939,52,2.319,54,0.919,58,2.815,62,1.465,64,0.542,66,1.064,67,0.949,71,0.985,84,1.034,88,1.174,90,0.796,95,1.451,109,1.268,119,1.044,123,1.747,135,1.451,138,2.299,144,1.708,145,1.069,146,1.268,152,1.354,156,1.562,207,1.268,218,1.333,221,1.85,223,0.873,232,3.012,233,1.354,234,2.458,244,2.682,245,1.074,266,2.197,404,1.376,435,1.782,449,1.169,452,1.665,471,4.487,488,0.873,497,0.949,506,1.58,516,2.298,526,2.007,558,2.418,561,1.51,569,1.285,570,2.712,573,2.263,579,1.621,590,1.211,591,2.123,597,2.541,599,0.759,631,1.169,632,1.774,636,2.586,715,1.412,721,1.234,731,0.892,739,1.276,743,1.365,744,0.912,757,1.495,767,1.644,804,1.204,851,1.58,852,2.197,860,2.151,870,2.181,872,3.012,895,1.376,915,1.376,930,1.665,967,2.263,970,1.774,973,1.926,979,1.716,988,1.665,1008,1.054,1013,1.376,1055,1.58,1056,1.176,1089,3.095,1091,1.376,1110,1.69,1125,1.51,1189,1.774,1190,1.58,1198,1.527,1203,1.234,1217,2.396,1220,1.744,1238,1.58,1287,1.495,1473,2.868,1556,3.128,1649,2.62,1674,1.58,1677,1.774,1721,1.51,1766,1.665,1803,1.926,1811,1.259,1845,1.744,1866,1.412,1932,1.926,1934,1.926,1935,2.175,1936,2.175,1937,3.692,1938,2.175,1939,2.175,1940,1.744,1941,2.175,1942,3.692,1943,2.175,1944,2.175,1945,2.175,1946,2.175,1947,2.175,1948,2.175,1949,1.926,1950,2.175,1951,2.175,1952,1.69,1953,2.175,1954,1.926,1955,2.175,1956,2.175,1957,2.175,1958,2.175,1959,1.926,1960,2.175,1961,2.175,1962,2.175,1963,2.175,1964,2.175,1965,2.175,1966,2.175,1967,2.175,1968,6.899,1969,2.175,1970,2.175,1971,2.175,1972,2.175,1973,2.175,1974,2.175,1975,2.175,1976,2.175,1977,2.175,1978,2.175,1979,2.175]],["component/107",[79,0.574]],["title/108",[54,14.689,60,16.081,87,18.784,88,8.481,435,12.879]],["name/108",[54,0.543,60,0.594,87,0.694,88,0.313,435,0.476]],["text/108",[14,1.829,27,1.768,28,1.621,30,1.447,31,1.567,36,1.703,40,1.452,43,1.795,46,2.869,49,2.44,52,1.417,54,2.648,64,1.049,67,2.733,71,3.385,87,2.278,88,1.824,99,2.508,111,1.691,119,2.022,123,2.964,127,2.861,154,2.061,176,1.709,216,4.608,234,2.426,295,4.13,435,3.067,450,2.735,453,2.423,461,2.214,485,2.811,488,3.549,504,2.583,526,3.406,534,2.423,548,2.362,565,2.991,575,3.438,596,2.456,597,5.211,598,5.875,599,2.184,636,2.093,717,2.76,744,1.768,853,3.731,898,2.347,900,2.214,902,2.623,933,2.544,1004,3.227,1008,2.041,1039,4.474,1193,3.438,1511,3.062,1718,2.508,1725,3.731,1792,3.501,1980,4.214,1981,3.379,1982,4.214,1983,6.264,1984,4.214,1985,3.182,1986,3.731,1987,6.264]],["component/108",[79,0.574]],["title/109",[525,30.544,2283,49.446]],["name/109",[525,1.456,2283,2.357]],["text/109",[4,3.051,5,2.775,6,2.103,7,1.117,10,3.683,11,2.071,13,1.651,30,1.722,40,1.162,64,1.769,70,2.578,87,2.71,88,2.314,90,1.834,105,2.011,146,2.922,195,6.32,196,5.102,222,3.303,248,3.519,305,4.681,398,4.141,403,3.643,459,5.441,499,2.792,512,2.962,523,4.169,524,2.742,525,3.886,529,5.163,601,2.32,610,2.383,618,2.526,719,3.786,735,3.643,748,3.121,761,3.643,800,3.049,804,2.775,956,3.839,1247,3.146,1252,4.439,2036,3.839,2284,7.106,2285,5.014,2286,7.106,2287,5.014,2291,7.106,2292,5.797,2293,5.014,2294,5.545,2295,5.545,2296,5.014,2807,5.507,2927,5.241,2928,6.007,2929,5.241]],["component/109",[79,0.574]],["title/110",[523,32.769,601,25.843]],["name/110",[83,2.18]],["text/110",[7,2.128,13,1.786,30,1.198,31,2.017,40,1.257,52,1.173,64,2.314,70,1.794,84,1.659,88,2.497,90,2.435,99,2.076,103,2.423,105,3.013,111,1.4,114,3.06,115,1.74,121,2.867,123,1.651,127,1.594,135,2.328,136,3.022,159,2.122,166,2.967,167,2.02,169,1.636,184,3.019,195,5.098,196,3.896,200,1.804,201,1.522,223,1.4,227,2.753,237,4.726,240,1.162,246,1.864,295,1.629,300,2.285,303,2.846,307,4.426,309,4.155,311,4.155,397,1.767,404,2.207,493,2.172,499,1.943,523,5.833,524,4.108,525,3.641,526,1.897,527,2.328,529,2.535,573,1.244,601,3.765,610,1.659,618,2.733,655,2.226,695,3.089,696,1.69,702,2.155,709,2.423,731,1.431,748,2.172,758,1.522,760,3.851,761,2.535,762,2.265,763,3.089,764,2.328,767,1.554,840,2.328,971,2.672,989,2.285,1004,2.672,1008,1.69,1094,2.207,1121,2.846,1122,2.846,1126,2.798,1155,2.207,1165,3.089,1362,2.846,1485,2.846,1988,3.089,2297,3.258,2298,3.489,2299,3.489,2300,3.489,2301,3.489]],["component/110",[79,0.574]],["title/111-1",[592,33.134]],["name/111-1",[]],["text/111-1",[]],["component/111-1",[]],["title/111-2",[573,24.961]],["name/111-2",[]],["text/111-2",[]],["component/111-2",[]],["title/111-3",[49,18.227,424,38.782]],["name/111-3",[]],["text/111-3",[]],["component/111-3",[]],["title/111-4",[403,50.872]],["name/111-4",[]],["text/111-4",[]],["component/111-4",[]],["title/111",[70,28.723,523,32.769]],["name/111",[70,1.369,523,1.562]],["text/111",[4,2.18,14,2.617,27,1.345,28,2.425,30,1.101,40,0.743,43,2.163,46,2.485,49,2.34,50,6.115,54,2.665,62,2.16,64,0.798,88,1.239,121,1.694,123,1.518,139,1.908,155,6.349,189,4.496,207,2.959,240,2.101,253,1.786,403,2.33,424,3.526,441,4.274,452,2.455,465,2.181,494,2.012,557,2.616,573,2.248,592,2.403,696,3.054,701,2.616,736,1.685,742,2.839,835,2.16,860,4.038,927,1.723,939,2.389,959,3.736,988,3.889,1017,3.137,1021,5.823,1056,3.876,1137,1.856,1155,2.029,1210,5.144,1247,4.5,1270,2.421,1349,4.143,1427,2.181,1920,5.21,2120,2.839,2302,3.207,2303,5.079,2304,3.207,2305,3.207,2306,2.664,2307,3.207,2308,6.305,2309,3.207,2310,3.207,2311,3.207,2312,3.69,2313,5.079,2314,3.207,2315,3.207,2316,3.207,2317,3.207,2318,3.207,2319,3.207,2320,3.207,2321,3.207,2322,3.207,2323,3.207,2324,3.207,2325,3.207,2326,3.207,2327,3.207,2328,6.305,2329,6.305,2330,6.305,2331,6.305,2332,6.305]],["component/111",[79,0.574]],["title/112-1",[523,32.769,524,30.544]],["name/112-1",[]],["text/112-1",[]],["component/112-1",[]],["title/112-2",[19,17.696]],["name/112-2",[]],["text/112-2",[]],["component/112-2",[]],["title/112",[832,43.586]],["name/112",[832,2.582]],["text/112",[4,3.004,5,2.09,6,1.584,7,1.285,10,1.549,11,1.56,14,2.481,30,2.403,31,2.601,36,1.526,40,2.061,43,2.98,46,1.309,47,1.423,64,1.436,67,1.647,71,1.71,74,2.351,87,2.041,88,2.17,105,2.313,108,2.848,114,2.129,115,1.883,121,1.995,146,2.2,210,1.779,213,2.314,214,2.622,222,2.68,234,1.462,237,2.68,256,2.43,309,2.891,311,4.416,512,3.407,523,5.596,524,5.454,551,2.496,573,1.346,601,1.747,610,2.742,715,2.451,719,5.913,755,1.973,760,2.68,764,4.667,804,2.09,898,2.103,901,2.216,965,2.029,1094,2.389,1137,2.186,1382,3.343,1532,2.851,2281,3.526,2292,3.08,2333,3.776,2334,3.526,2335,4.177,2336,3.776,2337,3.776,2338,3.776,2339,3.776,2340,3.343,2341,3.776,2342,3.776,2343,3.776,2344,3.776,2345,3.776,2346,3.776,2347,3.776,2348,3.776,2349,3.776,2350,3.776,2351,3.776,2352,3.776,2353,4.177,2354,3.776,2355,3.776,2807,2.519]],["component/112",[79,0.574]],["title/113",[88,13.63,252,35.333]],["name/113",[83,2.18]],["text/113",[6,1.751,7,1.386,8,1.785,10,1.712,11,1.724,14,2.406,20,1.537,40,2.042,47,2.801,64,1.039,66,2.041,70,2.146,72,2.52,88,2.15,90,2.275,92,2.484,114,2.354,117,3.405,128,2.449,144,2.878,154,3.635,167,2.416,199,1.651,200,3.215,201,3.843,210,1.966,222,1.94,228,2.598,240,3.078,252,2.641,259,3.165,260,3.196,268,2.709,294,3.841,398,2.432,450,2.709,466,3.152,496,2.641,510,2.484,610,2.957,631,2.243,675,2.997,699,2.898,729,3.07,739,2.449,744,1.751,893,3.783,897,2.898,898,2.324,1090,3.347,1097,4.002,1098,3.381,1099,2.685,2356,7.187,2357,4.174,2358,4.174,2359,5.506,2360,6.581,2361,4.174,2362,6.22,2363,2.997,2364,3.695,2365,3.347,2366,3.152,2367,2.997,2368,2.997,2369,2.997,2370,4.174,2807,2.784]],["component/113",[79,0.574]],["title/114-1",[19,17.696]],["name/114-1",[]],["text/114-1",[]],["component/114-1",[]],["title/114",[201,20.263,240,15.476,510,27.639]],["name/114",[201,0.855,240,0.653,510,1.167]],["text/114",[4,2.754,14,1.569,19,1.621,30,2.203,40,1.948,88,1.565,99,3.817,104,2.942,105,2.573,154,3.137,159,3.902,201,4.342,240,3.316,260,4.912,455,5.233,478,4.606,510,5.003,599,2.237,736,3.371,745,4.201,758,2.798,767,2.856,955,4.364,965,3.447,1027,4.912,1097,4.127,1098,2.917,1099,4.127,1175,5.679,1475,5.144,2117,5.679,2356,5.233,2359,5.679,2371,6.415,2372,6.415]],["component/114",[79,0.574]],["title/115-1",[52,13.366,573,14.173,2216,30.443,2373,35.2]],["name/115-1",[]],["text/115-1",[]],["component/115-1",[]],["title/115-2",[40,9.214,64,9.898,1464,26.276,1992,25.582]],["name/115-2",[]],["text/115-2",[]],["component/115-2",[]],["title/115",[137,32.327,578,40.098]],["name/115",[137,1.541,578,1.912]],["text/115",[4,2.092,7,1.086,13,1.605,14,2.512,20,1.794,31,1.812,34,1.874,38,2.265,40,1.614,46,1.689,52,3.279,71,2.207,87,2.634,88,1.189,101,4.315,105,2.794,119,2.338,144,2.255,145,3.422,225,5.411,232,3.976,234,1.887,479,2.84,486,2.468,492,3.181,497,2.126,499,2.714,508,3.311,510,2.9,573,2.897,596,4.058,597,2.575,599,2.429,631,2.619,633,3.732,636,1.629,852,2.9,904,3.541,947,3.01,962,4.406,1013,3.083,1053,4.129,1254,3.976,1464,3.221,1663,3.732,1672,3.908,1716,3.384,1917,3.976,1921,3.251,1925,4.315,2032,4.315,2216,6.222,2234,4.315,2373,4.315,2374,4.874,2375,4.874,2376,4.874,2377,4.315,2378,4.874,2379,4.874,2380,4.874]],["component/115",[79,0.574]],["title/116-1",[143,29.941,1527,31.552,2815,27.002,2930,32.449]],["name/116-1",[]],["text/116-1",[]],["component/116-1",[]],["title/116-2",[136,22.142,143,22.007,2815,30.891,2931,37.124]],["name/116-2",[]],["text/116-2",[]],["component/116-2",[]],["title/116",[40,10.764,64,11.564,143,25.711]],["name/116",[143,1.474,2815,2.069]],["text/116",[3,1.524,7,1.236,13,0.873,14,1.865,20,0.976,34,1.02,35,4.629,36,1.071,40,1.285,45,1.349,46,0.919,47,2.872,52,1.864,54,1.841,60,1.227,64,2.378,66,1.296,67,1.157,72,3.347,89,1.691,90,0.97,95,1.769,102,2.906,104,1.998,106,3.127,108,1.309,111,2.575,118,1.535,126,1.664,127,1.989,130,1.566,134,4.242,136,1.477,138,1.075,143,4.964,167,2.521,169,2.6,171,1.786,199,1.048,209,1.861,223,1.064,224,2.555,228,1.65,234,3.119,390,1.736,421,1.45,449,1.425,486,2.205,492,1.211,504,2.669,505,2.203,508,3.371,533,4.198,569,2.573,573,3.106,578,1.903,590,1.477,591,1.524,611,1.786,623,1.625,631,1.425,636,0.886,675,1.903,694,1.401,702,1.637,707,1.861,731,1.087,734,1.752,744,1.827,749,1.903,767,1.18,790,2.294,796,2.779,804,3.068,817,1.926,836,1.861,849,1.786,854,1.691,858,1.95,863,1.664,865,1.926,893,1.613,936,1.706,943,2.203,946,2.521,962,2.756,963,1.613,964,1.566,1008,2.11,1075,1.95,1233,1.903,1277,1.95,1473,2.06,1584,1.677,1587,2.002,1618,2.407,1952,2.06,1995,2.203,2041,6.007,2186,2.407,2215,2.407,2306,2.203,2438,2.407,2697,3.619,2815,5.509,2916,2.475,2930,2.475,2931,6.621,2932,2.772,2933,3.177,2934,2.772,2935,2.772,2936,2.772,2937,2.772,2938,2.772,2939,2.651,2940,2.772,2941,5.219,2942,3.177,2943,3.177,2944,2.772,2945,2.772,2946,4.553,2947,2.772,2948,2.772,2949,2.772,2950,2.772,2951,2.772,2952,2.772,2953,2.772,2954,2.772]],["component/116",[79,0.574]],["title/117-1",[46,16.099,52,15.616,592,21.981]],["name/117-1",[]],["text/117-1",[]],["component/117-1",[]],["title/117-2",[20,17.101,52,15.616,573,16.559]],["name/117-2",[]],["text/117-2",[]],["component/117-2",[]],["title/117-3",[52,15.616,573,16.559,962,29.387]],["name/117-3",[]],["text/117-3",[]],["component/117-3",[]],["title/117",[52,18.776,64,13.904]],["name/117",[83,2.18]],["text/117",[3,2.929,4,1.382,7,1.135,14,2.213,20,3.065,27,3.284,28,2.763,34,1.959,35,2.706,45,1.638,46,2.713,47,2.708,49,1.662,52,3.598,54,2.153,60,1.489,64,1.573,71,2.306,73,1.63,88,0.785,108,2.515,119,1.544,138,2.066,141,1.782,145,1.582,169,2.389,208,1.943,219,1.516,220,2.43,381,2.189,449,1.73,458,2.127,492,1.47,493,2.004,508,3.005,573,3.878,592,3.705,597,2.691,731,1.32,744,2.136,755,1.682,802,2.004,851,2.339,866,3.098,893,1.958,925,1.74,931,2.43,941,2.43,962,5.721,967,1.973,1010,2.259,1203,4.078,1217,2.089,1240,2.85,1464,3.366,1465,2.071,1511,3.701,1866,2.089,1920,2.339,2004,2.626,2306,2.674,2381,3.219,2382,3.219,2383,3.219,2384,3.219,2385,3.219,2386,3.219,2387,3.219,2388,3.219,2389,3.219,2390,3.219,2391,2.85,2392,3.219,2393,3.219,2394,5.094,2395,3.219,2396,3.219]],["component/117",[79,0.574]],["title/118-1",[52,18.776,500,28.134]],["name/118-1",[]],["text/118-1",[]],["component/118-1",[]],["title/118-2",[52,18.776,1921,37.258]],["name/118-2",[]],["text/118-2",[]],["component/118-2",[]],["title/118-3",[453,40.259]],["name/118-3",[]],["text/118-3",[]],["component/118-3",[]],["title/118-4",[234,21.627,484,30.014]],["name/118-4",[]],["text/118-4",[]],["component/118-4",[]],["title/118",[52,15.616,500,23.399,1921,30.987]],["name/118",[449,1.054,500,0.988,1921,1.308]],["text/118",[7,1.832,13,1.368,14,1.016,30,2.128,31,1.544,34,1.597,38,1.931,40,1.718,46,3.047,52,3.782,89,2.65,104,1.905,130,2.454,145,2.041,154,2.031,199,1.643,217,2.328,219,1.957,221,2.082,484,3.33,500,4.645,573,3.134,588,3.181,590,2.313,596,2.421,611,2.798,631,2.232,633,6.732,749,4.449,767,1.85,845,4.058,866,2.527,885,2.72,901,2.437,904,3.018,915,2.628,962,4.69,1005,3.389,1013,5.199,1015,3.678,1068,4.503,1123,3.389,1151,3.954,1465,5.657,1917,3.389,1921,5.483,2397,4.154,2398,4.154,2399,6.197,2400,4.154,2401,4.154,2402,4.154,2403,4.154,2404,3.331]],["component/118",[79,0.574]],["title/119-1",[34,21.478,499,31.104]],["name/119-1",[]],["text/119-1",[]],["component/119-1",[]],["title/119-2",[421,38.293]],["name/119-2",[]],["text/119-2",[]],["component/119-2",[]],["title/119",[34,13.365,52,11.683,421,19.006,499,19.354,877,19.851]],["name/119",[421,2.269]],["text/119",[7,1.422,13,2.1,14,1.56,34,2.917,39,2.348,40,1.001,46,3.575,47,2.403,52,3.409,54,1.825,64,1.888,88,1.054,92,2.57,119,3.061,123,2.044,150,2.435,157,3.138,169,2.991,207,2.516,208,2.607,245,2.132,295,3.541,381,4.339,421,3.488,461,2.269,484,2.321,499,3.552,531,3.138,558,2.828,567,3.523,573,2.274,632,3.523,700,3.574,710,3.531,767,1.923,795,2.57,808,3.307,844,3.307,863,2.71,873,3.065,877,2.467,902,2.688,951,2.57,1049,3.823,1060,3.065,1190,3.138,1203,2.451,1224,3.176,1229,3.138,1238,4.634,1339,3.176,1351,2.779,1465,4.88,1536,3.523,1612,3.523,1614,3.823,1615,3.823,2021,3.823,2164,3.737,2404,3.463,2405,3.588,2406,4.319,2407,4.319,2408,4.319,2409,4.319,2410,4.319,2411,4.319,2412,4.319,2413,4.319,2414,4.319,2415,4.162]],["component/119",[79,0.574]],["title/120",[597,29.51,598,39.64]],["name/120",[597,1.407,598,1.89]],["text/120",[4,2.548,7,1.323,14,2.593,27,3.349,30,2.742,31,2.969,41,3.435,71,2.687,88,1.448,90,2.171,144,2.746,199,2.347,234,2.298,295,3.728,497,2.589,597,4.219,598,6.404,618,4.022,636,2.668,915,3.755,947,4.931,953,3.326,962,3.755,1071,3.997,1716,4.121,1779,4.544,1920,4.312,1926,5.254,2340,5.254,2377,5.254,2416,4.841,2417,5.277,2418,7.985,2419,5.935,2420,5.935,2421,5.935]],["component/120",[79,0.574]],["title/121-1",[125,29.843,138,22.651]],["name/121-1",[]],["text/121-1",[]],["component/121-1",[]],["title/121",[8,17.003,120,26.037,121,21.008,124,25.582]],["name/121",[8,0.664,120,1.016,121,0.82,124,0.998]],["text/121",[5,2.999,6,2.273,7,1.919,8,3.681,10,2.222,11,2.239,14,2.106,19,1.896,40,1.256,43,2.308,47,2.042,104,2.485,118,3.136,122,4.149,124,5.538,125,2.895,154,2.65,161,3.373,168,3.243,200,2.801,210,2.552,213,3.321,263,4.797,295,2.53,390,3.548,522,5.742,526,2.946,599,1.89,636,1.811,749,3.89,933,3.271,1111,5.326,1291,4.688,1298,6.643,1301,4.797,1302,4.797,1303,4.797,1304,4.797,1305,4.797,1306,4.149,1307,5.419,1308,5.419,1309,7.504,1310,5.419,1311,5.419,1312,5.419,1313,5.419,1314,5.419,1315,5.419,1316,5.059,1317,5.419,2807,3.615]],["component/121",[79,0.574]],["title/122",[8,23.884,125,29.843]],["name/122",[8,1.139,125,1.423]],["text/122",[5,2.515,6,1.906,7,1.476,8,4.464,10,1.863,11,1.877,13,2.18,14,2.232,16,3.301,18,4.022,19,1.148,20,1.673,31,1.689,40,1.534,114,3.734,121,2.401,125,5.384,127,2.075,176,2.685,180,2.851,200,2.349,210,3.119,213,2.784,218,2.784,239,5.483,256,2.923,404,4.942,497,3.407,636,2.212,694,2.401,702,4.089,755,4.082,794,3.849,832,2.828,849,3.06,854,2.898,899,5.224,951,2.703,953,2.546,989,2.975,1318,5.401,1319,4.544,1320,6.621,1321,4.544,1322,2.806,1323,4.544,1324,4.544,1325,4.544,1326,4.544,1327,4.544,1328,4.544,1329,4.544,1330,4.544,1331,4.544,1332,4.022,1333,4.544,1334,4.544,1335,4.544,1336,4.544,2807,3.031]],["component/122",[79,0.574]],["title/123",[19,17.696]],["name/123",[19,1.048]],["text/123",[5,3.401,6,2.577,7,1.821,10,2.519,11,2.538,13,2.023,19,1.553,28,2.363,30,2.11,66,3.004,115,3.064,132,3.765,165,3.487,200,3.176,208,3.709,221,4.096,222,3.798,248,5.736,435,2.277,492,2.806,599,2.143,722,5.012,746,3.509,965,3.302,1052,3.682,1111,4.36,1322,3.794,1337,4.464,1338,5.439,1339,4.519,1340,5.439,1341,7.234,1342,5.439,1343,5.439,1344,6.144,1345,6.144,1346,5.439,1347,6.144,1348,5.104,1349,5.012,1350,5.012,1351,3.953,1352,5.439,2807,4.099]],["component/123",[79,0.574]],["title/124",[47,21.045,435,20.697]],["name/124",[47,1.003,435,0.987]],["text/124",[13,1.496,14,2.588,20,1.673,27,3.6,36,1.836,40,1.81,47,3.438,58,2.015,64,1.131,67,1.982,105,1.823,115,3.895,138,1.843,143,2.515,150,2.562,156,3.262,168,2.495,219,2.14,221,2.277,223,1.823,233,2.828,246,2.428,435,2.895,492,3.024,497,3.407,569,2.684,601,3.064,805,3.155,817,3.301,841,3.706,900,2.387,957,2.874,964,3.912,1061,3.479,1353,5.96,1354,5.069,1355,5.069,1356,5.861,1357,5.981,1358,3.479,1359,3.479,1360,3.479,1361,3.155,1362,3.706,1363,4.022,1364,3.155,1365,3.155,1366,4.022,1367,4.022,1368,4.379,1369,3.479,1370,4.022,1371,4.544,1372,4.022,1373,6.621,1374,6.621,1375,6.621,1376,4.544,1377,4.544]],["component/124",[79,0.574]],["title/125-1",[435,25.948]],["name/125-1",[]],["text/125-1",[]],["component/125-1",[]],["title/125-2",[221,27.992,492,25.508]],["name/125-2",[]],["text/125-2",[]],["component/125-2",[]],["title/125",[58,24.765,435,20.697]],["name/125",[58,1.181,435,0.987]],["text/125",[14,2.784,20,2.312,27,3.553,28,0.33,30,1.581,31,1.839,34,0.33,36,0.649,40,0.199,43,3.13,49,1.094,64,0.706,139,0.511,165,0.488,176,0.348,199,0.34,221,0.805,222,0.399,223,0.345,233,4.161,251,0.573,435,1.567,492,0.392,497,4.497,570,3.127,601,2.566,636,1.653,736,0.452,767,0.383,804,0.476,860,4.258,891,1.153,925,4.373,947,4.008,948,2.236,951,0.511,953,4.964,965,0.462,1022,0.617,1039,0.464,1121,2.734,1198,0.603,1247,1.007,1351,0.553,1378,0.761,1379,0.761,1380,0.859,1381,2.838,1382,0.761,1383,8.472,1384,0.859,1385,0.859,1386,9.282,1387,8.383,1388,0.859,1389,7.984,1390,0.859,1391,0.603,1392,0.859,1393,2.26,1394,2.967,1395,5.122,1396,2.967,1397,0.859,1398,1.606,1399,2.26,1400,0.859,1401,0.859,1402,0.859,1403,1.421,1404,6.685,1405,6.685,1406,0.859,1407,4.946,1408,1.421,1409,2.838,1410,2.838,1411,2.512,1412,1.421,1413,1.421,1414,2.838,1415,2.838,1416,1.421,1417,2.512,1418,2.512,1419,1.606,1420,2.512,1421,2.512,1422,2.838,1423,2.838,1424,0.859,1425,4.604,1426,1.421,1427,2.28,1428,1.606,1429,0.859,1430,1.606,1431,0.859,1432,0.859,1433,1.421,1434,1.421,1435,0.859,1436,0.859,1437,2.26,1438,0.859,1439,1.606,1440,0.859,1441,0.859,1442,0.859,1443,4.604,1444,0.859,1445,5.546,1446,1.606,1447,1.606,1448,1.606,1449,1.606,1450,0.859,1451,5.259,1452,0.859,1453,0.859,1454,0.859,1455,0.859,1456,0.859,1457,0.859,1458,0.859,1459,1.606,1460,0.859]],["component/125",[79,0.574]],["title/126",[115,27.852,435,20.697]],["name/126",[83,2.18]],["text/126",[7,0.257,13,0.695,14,2.764,19,0.292,20,2.296,27,3.516,30,1.908,31,1.917,34,0.444,40,0.489,46,1.452,47,0.435,49,0.377,54,0.488,56,0.519,58,0.512,64,1.171,66,0.565,78,0.719,81,0.687,82,1.8,84,1.003,87,1.141,115,2.089,123,0.547,149,0.697,151,0.771,154,0.565,165,0.656,167,0.669,168,0.435,197,0.839,208,0.697,209,0.811,221,1.46,233,3.682,400,0.647,428,0.802,435,2.311,461,0.607,492,1.643,497,4.334,508,1.003,516,0.719,520,1.498,547,0.942,570,3.68,590,0.643,591,0.664,601,2.177,604,1.722,631,0.621,636,1.857,739,0.678,744,0.885,755,0.604,767,0.514,809,1.222,816,0.703,831,0.786,860,4.028,897,0.802,900,1.531,901,0.678,909,0.703,925,3.918,947,3.185,948,2.401,953,4.375,964,0.683,986,1.023,1004,0.885,1055,0.839,1061,0.885,1125,0.802,1182,0.942,1192,0.979,1215,0.885,1322,1.303,1337,1.533,1339,0.85,1343,1.023,1346,1.023,1350,0.942,1352,3.186,1353,6.802,1354,5.846,1355,5.846,1356,1.023,1361,0.802,1365,2.499,1366,2.58,1367,1.023,1369,0.885,1370,1.023,1394,1.869,1395,3.837,1396,1.869,1403,1.023,1408,1.023,1411,2.58,1412,1.023,1413,1.023,1416,1.023,1417,1.869,1418,1.869,1420,1.869,1421,1.869,1426,1.023,1427,2.448,1433,1.023,1434,1.869,1461,2.034,1462,1.155,1463,1.079,1464,1.395,1465,0.743,1466,1.113,1467,1.155,1468,1.023,1469,1.155,1470,1.869,1471,1.155,1472,0.979,1473,0.898,1474,0.911,1475,0.926,1476,1.155,1477,1.155,1478,0.979,1479,1.155,1480,1.155,1481,1.155,1482,1.155,1483,5.558,1484,5.558,1485,0.942,1486,5.915,1487,2.111,1488,2.111,1489,2.111,1490,2.111,1491,2.111,1492,2.111,1493,2.111,1494,5.558,1495,1.155,1496,1.155,1497,1.155,1498,1.155,1499,2.111,1500,1.155,1501,1.155,1502,2.914,1503,1.155,1504,1.155,1505,2.111,1506,2.914,1507,1.155,1508,1.155,1509,1.155,1510,1.155,1511,1.533,1512,1.155,1513,1.155,1514,1.155,1515,1.155,1516,1.155,1517,1.155,1518,1.155,1519,1.155,1520,2.914,1521,1.155,1522,1.155,1523,1.155,1524,1.155,1525,2.111,1526,1.155,1527,1.049,1528,1.155,1529,1.155,1530,1.155]],["component/126",[79,0.574]],["title/127",[809,40.528]],["name/127",[809,2.401]],["text/127",[7,1.057,13,1.561,14,2.364,20,1.745,31,2.539,40,1.099,47,3.015,49,1.547,64,1.18,115,2.364,128,2.782,131,4.197,132,2.906,146,2.763,159,2.884,169,2.223,213,2.906,214,3.292,221,2.376,237,4.846,435,3.244,450,3.077,461,3.588,497,2.979,564,2.578,636,2.282,702,2.928,755,2.478,776,3.63,796,3.025,800,2.884,809,3.952,900,2.491,925,4.325,951,2.821,953,2.657,955,3.225,1353,3.292,1357,3.63,1358,3.63,1359,3.63,1360,3.63,1365,3.292,1391,3.328,1427,3.225,1531,3.868,1532,6.042,1533,6.828,1534,7.751,1535,8.002,1536,3.868,1537,4.741,1538,4.741,1539,4.741,1540,4.741,1541,4.741,1542,4.741,1543,4.197,1544,4.197,1545,4.197,1546,4.427,1547,4.741,1548,4.197,1549,4.741,1550,4.102]],["component/127",[79,0.574]],["title/128",[39,30.364,115,27.852]],["name/128",[39,1.448,115,1.328]],["text/128",[14,2.389,20,2.57,40,1.617,47,3.345,115,3.481,138,2.831,176,2.831,435,2.587,502,5.071,694,3.688,806,6.179,967,4.277,1017,4.311,1055,5.071,1212,4.954,1353,4.846,1357,5.344,1358,5.344,1359,5.344,1360,5.344,1532,5.27,1534,7.86,1543,6.179,1551,6.179,1552,6.179,1553,6.179,1554,6.179,1555,5.27]],["component/128",[79,0.574]],["title/129",[435,20.697,461,29.348]],["name/129",[435,0.987,461,1.399]],["text/129",[28,2.561,34,3.313,36,2.691,39,3.621,64,2.145,67,2.905,103,4.624,115,4.296,138,2.701,149,4.021,168,3.599,461,5.629,499,3.709,504,4.081,570,3.756,636,2.225,744,2.793,964,3.935,1091,4.213,1306,5.099,1364,4.624,1464,4.401,1556,5.642,1557,6.66,1558,6.66,1559,6.66,1560,6.66,1561,6.66]],["component/129",[79,0.574]],["title/130",[84,33.287]],["name/130",[84,1.972]],["text/130",[14,2.447,20,1.772,35,1.593,36,1.211,39,1.63,40,1.87,47,2.272,48,3.562,53,1.946,56,2.161,62,2.019,64,1.501,84,4.437,105,1.202,108,1.48,115,4.229,119,1.438,136,1.669,139,1.784,146,2.804,165,1.701,219,1.412,435,2.558,458,3.18,461,3.168,480,2.205,508,1.425,517,4.26,565,2.127,573,1.069,591,1.723,599,1.045,637,1.963,705,2,710,1.659,721,1.701,736,1.575,740,4.26,744,1.257,802,2.996,845,1.963,860,1.34,866,1.823,869,2.152,895,3.044,900,1.575,907,2.654,909,1.823,927,1.611,935,2.178,965,1.611,1017,2.972,1022,2.152,1055,2.178,1056,1.62,1060,2.127,1198,2.104,1275,2.329,1287,2.06,1318,6.165,1351,1.929,1353,4.186,1357,4.616,1358,3.685,1359,3.685,1360,3.685,1361,3.342,1362,2.445,1364,2.081,1365,2.081,1372,2.654,1531,2.445,1544,7.144,1545,5.338,1551,7.144,1552,5.338,1553,2.654,1554,4.26,1562,2.654,1563,4.813,1564,4.813,1565,6.029,1566,2.998,1567,4.813,1568,4.813,1569,2.998,1570,2.998,1571,2.998,1572,2.654,1573,2.081,1574,2.998,1575,2.998,1576,2.998,1577,2.998,1578,2.998,1579,2.998,1580,2.998,1581,2.998,1582,2.998,1583,2.998,1584,1.896,1585,2.998,1586,2.54,1587,2.263,1588,2.799,1589,2.998,1590,4.813,1591,6.902]],["component/130",[79,0.574]],["title/131",[19,17.696]],["name/131",[19,1.048]],["text/131",[5,2.568,6,1.946,7,1.034,10,1.903,11,1.917,13,1.528,14,2.121,19,1.173,27,2.82,40,1.832,43,1.977,45,2.361,49,2.829,104,3.084,105,1.861,137,2.686,165,2.633,200,2.399,221,3.369,222,3.674,223,1.861,248,4.719,397,2.349,465,3.156,492,2.119,497,3.781,520,3.293,527,4.485,601,3.111,636,2.642,655,2.96,722,3.785,746,2.65,755,2.425,829,3.553,901,2.723,910,3.931,951,2.761,959,3.413,965,3.613,1007,3.553,1203,3.815,1247,2.912,1322,5.353,1337,3.371,1338,4.108,1339,4.945,1340,4.108,1341,5.952,1342,4.108,1592,4.64,1593,4.64,1594,6.723,1595,4.64,1596,4.64,1597,4.64,1598,3.785,1599,4.64,1600,4.333,1601,3.785,1602,4.64,1603,4.64,1604,4.64,1605,4.64,1606,4.64,2807,3.095]],["component/131",[79,0.574]],["title/132",[945,48.115]],["name/132",[83,2.18]],["text/132",[7,0.487,14,2.663,20,0.805,31,2.572,34,2.448,35,1.162,36,0.883,40,0.507,46,3.185,47,0.824,49,2.257,52,2.14,56,0.982,67,1.617,70,1.124,92,1.301,104,2.214,108,1.079,114,2.091,115,1.09,119,1.049,127,0.998,137,1.265,138,0.887,144,1.716,165,1.241,167,1.265,169,1.025,176,0.887,200,1.13,207,1.274,213,1.34,221,2.85,222,2.959,233,3.005,245,1.079,435,0.81,482,1.419,492,2.908,497,4.368,527,3.794,566,3.025,569,1.292,573,2.027,587,1.935,601,3.412,623,1.34,636,1.613,710,4.081,718,1.674,739,1.283,744,0.917,751,1.674,753,1.935,755,1.938,805,1.518,808,1.674,809,2.146,851,1.588,859,3.282,860,2.846,891,1.569,893,1.33,897,1.518,901,2.175,925,2.004,945,5.555,946,1.265,947,2.29,948,2.473,951,4.116,953,4.53,965,2.594,1045,1.783,1093,1.935,1125,1.518,1151,1.395,1215,1.674,1306,1.674,1322,1.35,1337,1.588,1361,1.518,1532,1.651,1598,6.015,1607,2.186,1608,2.186,1609,2.186,1610,1.935,1611,2.186,1612,3.938,1613,2.186,1614,1.935,1615,1.935,1616,2.186,1617,2.186,1618,1.985,1619,4.828,1620,3.282,1621,1.935,1622,3.282,1623,3.282,1624,3.282,1625,3.282,1626,3.708,1627,5.034,1628,5.687,1629,3.282,1630,3.282,1631,3.708,1632,3.708,1633,2.186,1634,3.708,1635,2.186,1636,2.186,1637,1.935,1638,2.186,1639,1.935,1640,2.186]],["component/132",[79,0.574]],["title/133",[453,40.259]],["name/133",[453,2.385]],["text/133",[7,0.611,13,1.475,14,2.736,30,2.25,31,2.684,34,1.055,40,0.636,46,3.144,49,2.356,52,1.908,84,1.304,104,1.258,111,1.1,114,4.369,133,1.866,200,1.418,221,2.245,222,1.275,223,1.1,233,4.078,492,1.253,497,4.378,526,2.435,527,5.687,566,2.238,569,1.621,573,1.597,601,3.782,636,2.413,710,3.626,795,2.665,805,1.905,860,3.464,925,3.068,945,6.896,947,2.766,948,3.786,951,2.665,953,4.777,1306,2.1,1395,2.238,1598,6.32,1612,3.654,1620,3.965,1621,3.965,1622,5.8,1623,2.428,1624,3.965,1625,3.965,1627,3.965,1629,2.428,1630,2.428,1637,2.428,1641,5.676,1642,2.743,1643,4.479,1644,2.743,1645,2.428,1646,2.743,1647,6.117,1648,2.743,1649,1.947,1650,2.743,1651,4.479]],["component/133",[79,0.574]],["title/134-1",[138,22.651,697,27.852]],["name/134-1",[]],["text/134-1",[]],["component/134-1",[]],["title/134-2",[1652,49.446,1653,42.764]],["name/134-2",[]],["text/134-2",[]],["component/134-2",[]],["title/134-3",[125,29.843,1654,49.446]],["name/134-3",[]],["text/134-3",[]],["component/134-3",[]],["title/134-4",[491,42.764,1655,49.446]],["name/134-4",[]],["text/134-4",[]],["component/134-4",[]],["title/134",[138,18.839,152,28.915,1653,35.567]],["name/134",[138,0.795,152,1.22,1653,1.501]],["text/134",[7,2.076,40,1.264,41,3.156,67,2.379,88,1.331,111,3.023,125,4.027,138,3.056,145,2.679,152,3.394,154,2.666,166,2.982,222,2.534,223,2.187,397,3.816,491,5.77,590,3.036,697,2.719,702,3.367,731,2.236,800,3.316,851,3.961,880,4.175,916,4.175,955,5.126,965,2.93,1212,3.87,1230,4.827,1652,6.672,1653,7.133,1654,4.827,1655,7.646,1656,5.453,1657,9.778,1658,5.453,1659,5.453,1660,6.385,1661,5.453,1662,7.536,1663,4.175,1664,7.536,1665,5.453,1666,5.453,1667,5.453,1668,5.453]],["component/134",[79,0.574]],["title/135-1",[28,21.478,49,18.227]],["name/135-1",[]],["text/135-1",[]],["component/135-1",[]],["title/135-2",[697,34.919]],["name/135-2",[]],["text/135-2",[]],["component/135-2",[]],["title/135-3",[90,12.711,599,12.119,1203,19.723,1464,22.968,2814,27.002]],["name/135-3",[]],["text/135-3",[]],["component/135-3",[]],["title/135",[49,15.159,471,24.962,564,25.254]],["name/135",[49,0.64,471,1.054,564,1.066]],["text/135",[5,3.1,6,2.349,7,1.711,10,2.297,11,2.314,13,1.197,14,1.37,27,1.525,31,1.351,35,1.931,40,0.842,49,3.075,50,2.673,84,1.728,90,1.329,99,2.163,104,1.667,127,1.66,136,2.024,145,1.786,168,1.37,200,1.879,221,2.807,223,1.458,240,1.211,244,4.069,266,4.065,295,3.19,298,4.569,471,3.671,473,3.701,484,1.953,494,2.281,509,3.218,510,2.163,511,3.218,512,2.147,521,3.02,528,2.965,558,2.38,564,3.045,573,1.296,574,3.218,655,2.319,697,2.793,710,2.012,730,3.218,759,3.263,870,2.147,925,3.027,930,2.783,936,2.339,951,2.163,965,1.953,1125,2.524,1188,2.524,1203,2.063,1231,2.524,1427,2.472,1555,2.744,1610,3.218,1669,3.635,1670,3.635,1671,3.3,1672,2.914,1673,3.635,1674,4.069,1675,3.635,1676,3.218,1677,2.965,1678,3.635,1679,3.635,1680,3.635,1681,3.635,1682,5.601,1683,3.635,1684,3.635,1685,3.635,1686,3.635,1687,3.635,1688,3.635,1689,3.635,1690,3.635,1691,3.635,1692,3.635,1693,3.635,1694,3.635,1695,3.635,1696,3.218,1697,3.635,1698,3.145,1699,3.635,1700,3.635,1701,3.635,1702,3.635,1703,3.635,1704,3.635,1705,3.635,1706,3.3,1707,3.635,1708,3.635,1709,3.635,1710,3.635,1711,3.635,1712,3.635,1713,3.635,1714,3.635,1715,3.736,1716,3.889,1717,3.635,2807,3.736,2905,3.145,2955,3.799]],["component/135",[79,0.574]],["title/136-1",[90,20.428,258,49.446]],["name/136-1",[]],["text/136-1",[]],["component/136-1",[]],["title/136-2",[90,20.428,746,31.902]],["name/136-2",[]],["text/136-2",[]],["component/136-2",[]],["title/136-3",[90,20.428,785,49.446]],["name/136-3",[]],["text/136-3",[]],["component/136-3",[]],["title/136-4",[90,20.428,2814,43.394]],["name/136-4",[]],["text/136-4",[]],["component/136-4",[]],["title/136",[90,16.99,176,18.839,199,18.369]],["name/136",[90,0.717,176,0.795,199,0.775]],["text/136",[4,1.101,7,1.402,14,1.942,20,0.944,27,1.076,28,1.63,30,0.881,39,1.395,40,0.982,45,1.306,46,2.414,47,0.967,49,2.273,54,1.084,64,0.639,66,1.255,87,1.387,90,2.301,94,1.326,109,1.495,112,2.22,114,1.447,123,2.564,150,1.447,176,2.825,199,2.967,200,2.192,201,1.849,210,1.208,219,2.552,221,1.286,234,0.993,240,1.412,244,3.08,245,2.675,256,1.651,266,3.744,295,3.503,435,1.571,461,1.348,465,1.745,473,1.695,484,4.461,486,2.146,488,1.701,508,2.575,510,1.527,516,1.597,526,2.305,531,1.864,551,1.695,552,2.682,553,2.057,555,2.944,558,4.562,565,1.821,570,1.447,573,1.931,591,3.115,596,1.495,597,2.24,599,1.478,601,1.187,616,1.937,636,2.774,641,4.796,697,2.114,699,1.781,731,1.738,758,1.849,767,1.142,776,3.246,785,3.753,790,2.22,793,3.271,795,1.527,816,1.56,831,1.745,834,2.173,884,1.781,894,1.781,900,1.348,909,1.56,914,3.246,925,1.387,930,1.964,1023,3.294,1075,1.887,1089,2.728,1110,3.294,1159,3.753,1173,3.753,1194,3.753,1196,3.753,1202,1.887,1203,2.406,1209,2.093,1217,1.665,1218,3.845,1365,1.781,1369,3.246,1464,2.802,1465,1.651,1468,2.271,1584,1.623,1587,1.937,1649,1.821,1674,3.936,1718,4.145,1719,6.292,1720,4.239,1721,1.781,1722,2.093,1723,2.566,1724,2.566,1725,2.271,1726,2.566,1727,2.566,1728,2.566,1729,2.093,1730,4.239,1731,3.592,1732,2.566,1733,2.566,1734,2.566,1735,2.093,1736,2.566,1737,2.566,2905,5.444]],["component/136",[79,0.574]],["title/137-1",[56,20.856,433,32.255,1738,46.453]],["name/137-1",[]],["text/137-1",[]],["component/137-1",[]],["title/137-2",[240,15.476,441,25.403,999,37.893]],["name/137-2",[]],["text/137-2",[]],["component/137-2",[]],["title/137-3",[8,29.944]],["name/137-3",[]],["text/137-3",[]],["component/137-3",[]],["title/137",[430,38.757]],["name/137",[430,2.296]],["text/137",[4,2.76,8,3.118,14,1.573,19,1.843,28,1.271,30,3.025,36,1.335,38,2.988,40,0.766,56,3.56,64,1.815,71,2.911,88,1.779,114,1.863,120,3.405,144,1.529,147,2.108,161,2.057,166,1.807,168,3.32,219,1.556,240,3.265,255,2.695,397,1.673,430,4.389,431,4.21,433,4.464,435,2.938,436,3.981,438,2.294,440,4.002,441,4.605,443,3.733,445,4.671,496,2.09,501,1.966,556,2.53,563,4.17,573,1.178,599,1.152,696,3.114,746,1.887,758,1.441,870,1.952,898,1.84,899,2.607,916,2.53,981,2.53,992,2.319,999,2.695,1008,1.6,1034,3.981,1035,2.53,1043,4.603,1044,2.65,1051,2.401,1056,2.81,1060,2.345,1077,2.925,1094,2.09,1716,4.464,1739,2.925,1740,3.611,1741,2.925,1742,2.925,1743,5.692,1744,3.304,1745,3.304,1746,4.923,1747,2.799,1748,3.304,1749,2.607,1750,2.925,1751,2.925,1752,2.695,1753,3.304,1754,3.304,1755,2.925,1756,2.925,1757,3.304,1758,2.925,1759,3.304,1760,3.304,1761,3.304,1762,2.925,1763,3.304,1764,3.304,1765,3.304]],["component/137",[79,0.574]],["title/138-1",[759,40.802]],["name/138-1",[]],["text/138-1",[]],["component/138-1",[]],["title/138-2",[19,14.115,758,24.364]],["name/138-2",[]],["text/138-2",[]],["component/138-2",[]],["title/138-3",[450,36.25,743,35.046]],["name/138-3",[]],["text/138-3",[]],["component/138-3",[]],["title/138",[19,17.696]],["name/138",[83,2.18]],["text/138",[5,1.375,6,1.042,7,1.646,10,1.019,11,1.027,13,0.818,14,2.534,19,2.325,30,0.853,33,1.903,34,1.588,36,1.004,38,1.155,40,1.43,43,1.059,46,0.861,47,1.996,49,1.347,64,1.536,71,3.971,73,3.963,74,1.547,88,1.91,90,2.256,92,2.457,115,2.059,116,2.2,127,1.135,132,1.523,136,1.384,138,1.008,154,1.215,156,1.784,159,1.511,168,0.936,175,2.105,179,4.429,197,1.805,199,1.633,201,1.084,210,1.171,217,1.393,222,1.155,229,4.379,230,4.197,231,5.033,234,0.962,240,2.055,253,2.95,254,3.351,300,2.704,301,2.2,381,1.69,390,2.704,397,2.091,408,3.789,435,0.921,449,1.335,488,0.997,494,1.559,499,1.384,508,1.181,526,1.351,539,1.708,573,0.886,592,2.507,593,2.2,599,0.867,611,1.674,717,1.627,723,4.247,725,3.655,731,1.019,736,1.306,743,2.591,758,1.801,759,1.448,893,1.511,894,1.726,933,1.5,958,2.2,967,1.523,1008,1.204,1097,1.599,1098,1.13,1099,1.599,1109,4.321,1247,1.559,1257,2.2,1286,1.292,1287,3.64,1391,1.744,1715,2.754,1746,1.903,1766,1.903,1767,2.2,1768,2.065,1769,2.485,1770,2.485,1771,2.2,1772,2.2,1773,2.485,1774,2.485,1775,1.903,1776,2.485,1777,2.485,1778,2.485,1779,5.655,1780,2.485,1781,3.655,1782,2.485,1783,2.485,1784,2.485,1785,2.2,1786,5.585,1787,2.485,1788,2.485,1789,2.485,1790,2.485,1791,6.846,1792,3.43,1793,2.485,1794,2.485,1795,2.485,1796,4.129,1797,2.485,1798,2.485,1799,2.485,1800,2.485,2807,1.658]],["component/138",[79,0.574]],["title/139",[240,18.608,428,38.782]],["name/139",[240,0.887,428,1.849]],["text/139",[4,1.687,7,2.153,13,1.294,14,2.1,28,1.511,30,2.462,31,1.461,36,1.588,40,2.093,66,3.506,71,1.779,73,1.989,88,2.204,89,2.507,93,2.55,105,3.874,111,3.623,113,3.479,119,1.885,120,3.892,154,1.921,176,1.594,201,1.714,208,3.588,234,2.302,240,3.357,246,3.176,428,6.512,431,2.573,461,2.065,479,2.29,599,1.37,615,2.528,700,2.202,710,3.29,744,2.493,759,2.29,832,2.446,857,3.479,895,2.486,898,2.188,925,4.32,992,2.758,1032,2.967,1076,4.618,1142,3.053,1740,2.728,1766,3.009,1801,3.929,1802,3.929,1803,3.479,1804,3.009,1805,3.479,1806,3.1,1807,3.929,1808,3.929,1809,5.944,1810,5.944,1811,2.274,1812,8.585,1813,3.929]],["component/139",[79,0.574]],["title/140-1",[217,31.298,696,27.051]],["name/140-1",[]],["text/140-1",[]],["component/140-1",[]],["title/140-2",[253,31.104,254,35.333]],["name/140-2",[]],["text/140-2",[]],["component/140-2",[]],["title/140-3",[430,30.914,431,36.575]],["name/140-3",[]],["text/140-3",[]],["component/140-3",[]],["title/140-4",[56,20.856,430,25.711,433,32.255]],["name/140-4",[]],["text/140-4",[]],["component/140-4",[]],["title/140-5",[64,9.898,240,13.247,440,24.749,441,21.744]],["name/140-5",[]],["text/140-5",[]],["component/140-5",[]],["title/140-6",[64,9.898,240,13.247,441,21.744,443,28.545]],["name/140-6",[]],["text/140-6",[]],["component/140-6",[]],["title/140-7",[40,8.053,64,8.652,240,11.579,440,21.633,445,25.249]],["name/140-7",[]],["text/140-7",[]],["component/140-7",[]],["title/140-8",[49,18.227,554,45.561]],["name/140-8",[]],["text/140-8",[]],["component/140-8",[]],["title/140",[168,26.384]],["name/140",[168,1.563]],["text/140",[8,2.62,14,1.961,19,1.467,20,0.412,28,1.573,30,2.701,31,0.416,35,2.174,36,1.145,38,0.52,40,1.655,43,2.734,45,0.569,47,0.421,49,1.335,54,0.473,56,3.298,58,0.496,60,0.948,62,1.38,64,2.031,67,0.894,73,0.566,84,0.974,88,2.155,105,0.822,114,0.631,120,2.679,123,0.529,126,0.702,127,0.936,137,0.647,141,1.134,143,0.619,147,1.307,158,1.724,163,1.671,166,1.55,168,1.322,169,0.524,199,0.442,201,1.237,217,0.627,218,1.255,219,1.652,222,0.52,240,3.479,241,0.746,242,2.699,252,1.296,253,3.574,254,1.296,255,1.671,397,0.566,400,0.627,408,4.437,410,2.118,412,2.171,416,3.837,419,4.445,421,2.516,424,1.968,426,2.51,428,1.968,430,3.698,431,2.297,433,2.841,435,2.019,436,2.686,438,1.968,440,2.864,441,2.98,443,3.625,445,2.549,447,2.411,448,2.171,457,0.912,475,0.803,480,0.822,485,2.729,486,2.329,492,0.511,493,0.696,496,1.296,504,0.685,534,1.178,557,1.671,599,0.39,606,0.812,651,0.99,696,0.542,697,1.414,706,0.912,718,0.856,736,1.076,746,0.639,754,0.947,758,0.488,759,0.652,760,0.794,767,0.498,799,1.488,802,2.864,829,1.569,841,0.912,863,0.702,870,2.073,881,0.856,883,0.99,898,0.623,902,1.275,908,0.844,909,2.798,918,1.438,927,0.601,933,0.675,935,1.488,955,1.393,964,0.661,970,0.912,974,2.614,979,0.882,981,2.171,982,0.99,992,1.438,1006,0.882,1008,0.992,1021,1.526,1032,2.14,1034,0.856,1035,0.856,1039,1.532,1041,1.33,1044,0.897,1051,0.812,1056,3.138,1061,0.856,1066,0.912,1071,0.753,1076,0.869,1098,1.86,1148,0.929,1151,1.307,1185,0.99,1188,0.776,1203,0.635,1212,1.454,1218,0.794,1222,0.812,1229,0.812,1268,1.044,1277,0.822,1282,0.856,1337,1.488,1472,0.947,1660,0.947,1739,1.814,1740,1.968,1741,1.814,1742,2.51,1749,0.882,1750,3.106,1751,0.99,1752,2.313,1755,0.99,1756,1.814,1758,0.99,1762,0.99,1781,0.99,1806,1.616,1811,0.647,1814,1.118,1815,4.601,1816,1.814,1817,1.118,1818,1.118,1819,1.118,1820,1.118,1821,1.118,1822,1.118,1823,1.118,1824,1.118,1825,2.049,1826,1.118,1827,2.049,1828,1.118,1829,0.947,1830,1.118,1831,0.99,1832,1.118,1833,0.99,1834,3.508,1835,1.118,1836,4.434,1837,1.118,1838,2.835,1839,1.118,1840,1.118,1841,2.049,1842,1.118,1843,2.049,1844,1.118,1845,0.897,1846,1.118,1847,1.118,1848,2.049,1849,0.99,1850,1.118,1851,2.835,1852,1.118,1853,0.99,1854,1.118,1855,0.968,1856,1.118,1857,1.118,1858,0.947,1859,0.947,1860,3.106,1861,1.814,1862,1.118,1863,4.824,1864,1.814]],["component/140",[79,0.574]],["title/141",[88,11.336,240,15.476,408,25.711]],["name/141",[88,0.478,240,0.653,408,1.085]],["text/141",[7,0.9,13,1.33,14,2.316,19,1.534,27,2.545,38,1.877,40,0.936,43,2.585,45,2.055,49,2.379,88,2.476,143,2.235,168,2.286,222,1.877,240,3.581,241,2.694,253,4.059,408,5.514,410,4.4,412,4.646,416,6.03,419,4.646,421,4.432,424,5.061,589,3.839,606,2.934,631,2.17,696,1.956,726,4.646,1008,1.956,1062,3.421,1097,2.598,1098,2.759,1099,2.598,1102,3.667,1775,3.092,1811,2.337,1860,3.575,1863,3.575,1864,3.575,1865,4.039,1866,2.621,1867,6.068,1868,4.039,1869,4.039,1870,4.039,1871,4.039,1872,4.039,1873,4.039,1874,4.039,1875,4.039,1876,4.039,1877,4.039,1878,4.039,1879,4.039,1880,3.575,1881,4.039,1882,4.039,1883,3.575,1884,4.039]],["component/141",[79,0.574]],["title/142-1",[253,31.104,453,32.112]],["name/142-1",[]],["text/142-1",[]],["component/142-1",[]],["title/142-2",[19,14.115,253,31.104]],["name/142-2",[]],["text/142-2",[]],["component/142-2",[]],["title/142",[40,12.943,253,31.104]],["name/142",[40,0.617,253,1.483]],["text/142",[4,1.614,7,1.555,8,1.608,14,2.388,19,2.244,28,1.446,30,1.974,38,1.748,40,1.617,64,2.21,67,1.64,70,1.934,71,2.603,73,1.904,88,2.055,90,1.375,123,1.779,127,1.717,141,2.081,145,1.848,151,2.508,168,2.166,212,1.998,219,1.771,223,1.508,229,2.669,230,2.558,240,2.958,246,2.009,253,5.723,254,4.414,300,2.462,390,2.462,408,4.325,416,5.867,419,4.401,441,2.056,486,3.533,599,2.004,696,1.821,699,4.845,909,3.496,946,2.176,1066,3.067,1097,2.419,1098,1.71,1099,2.419,1148,4.775,1151,2.399,1287,2.584,1672,3.015,1715,2.508,1716,2.611,1743,3.329,1746,2.879,1772,3.329,1775,2.879,1779,2.879,1785,3.329,1786,3.067,1816,5.089,1831,3.329,1885,3.624,1886,3.76,1887,3.76,1888,3.76,1889,3.76,1890,3.329,1891,3.76,1892,3.76,1893,3.76,1894,3.76,1895,3.76,1896,3.76,1897,3.76]],["component/142",[79,0.574]],["title/143-1",[94,28.875,245,27.578]],["name/143-1",[]],["text/143-1",[]],["component/143-1",[]],["title/143-2",[94,28.875,877,31.902]],["name/143-2",[]],["text/143-2",[]],["component/143-2",[]],["title/143-3",[94,24.015,636,15.522,877,26.533]],["name/143-3",[]],["text/143-3",[]],["component/143-3",[]],["title/143-4",[94,24.015,877,26.533,1735,37.893]],["name/143-4",[]],["text/143-4",[]],["component/143-4",[]],["title/143-5",[28,21.478,1088,38.379]],["name/143-5",[]],["text/143-5",[]],["component/143-5",[]],["title/143-6",[28,17.863,1088,31.919,1674,33.748]],["name/143-6",[]],["text/143-6",[]],["component/143-6",[]],["title/143-7",[14,8.502,28,13.365,54,14.689,573,12.389,1088,23.881]],["name/143-7",[]],["text/143-7",[]],["component/143-7",[]],["title/143-8",[145,34.406]],["name/143-8",[]],["text/143-8",[]],["component/143-8",[]],["title/143-9",[234,27.114]],["name/143-9",[]],["text/143-9",[]],["component/143-9",[]],["title/143-10",[119,19.077,410,24.003,564,21.616,636,13.286]],["name/143-10",[]],["text/143-10",[]],["component/143-10",[]],["title/143",[49,15.159,94,24.015,498,29.633]],["name/143",[83,2.18]],["text/143",[3,0.938,7,0.364,13,0.197,14,2.254,19,0.151,20,2.096,27,2.596,28,1.243,30,0.391,31,0.423,35,0.317,36,1.882,38,0.529,40,0.483,41,0.659,42,0.929,43,1.984,45,0.58,46,1.695,47,0.429,49,2.384,53,0.388,54,0.881,56,0.511,58,0.265,60,0.276,61,0.529,63,0.791,64,0.886,66,1.408,67,1.256,71,0.516,73,0.577,79,0.119,81,0.355,82,0.369,84,0.776,87,0.323,90,0.417,92,0.355,93,0.388,94,3.828,95,1.089,102,0.399,104,0.522,105,0.457,108,1.422,109,0.348,111,1.55,119,2.452,120,0.391,121,0.316,123,0.772,126,0.375,127,1.894,128,0.958,130,0.353,132,0.366,136,0.333,137,0.346,138,1.311,141,1.97,142,0.479,143,0.63,144,1.156,145,0.802,146,1.214,147,1.041,149,0.688,150,0.642,152,0.372,154,0.557,157,0.827,158,1.751,161,2.9,164,0.434,165,0.339,166,0.623,167,1.206,169,1.171,171,1.099,180,0.715,199,0.236,205,3.151,207,0.348,209,0.419,213,1.277,214,0.791,216,0.439,217,0.335,219,0.537,222,0.278,223,0.24,233,0.372,234,1.605,240,1.077,245,1.029,246,0.872,251,1.089,252,0.378,254,1.58,256,0.733,266,0.355,381,0.406,397,0.302,398,0.348,400,1.167,410,2.813,424,0.415,435,1.067,447,0.783,449,0.877,451,0.384,458,0.753,471,1.913,472,0.529,475,1.793,477,1.24,479,1.455,482,0.739,483,0.434,484,0.321,485,0.399,488,1.869,489,0.529,490,0.457,492,0.52,495,0.529,496,0.378,497,0.909,498,2.464,502,0.434,505,0.496,506,0.827,508,0.284,513,0.529,519,0.827,523,0.958,527,0.76,528,0.487,531,0.434,534,1.436,538,0.487,548,0.335,550,0.899,551,0.395,552,2.045,554,0.487,558,0.391,559,0.517,564,1.757,567,0.487,569,0.673,571,0.818,573,0.582,588,0.872,590,1.603,591,0.343,592,0.283,594,2.156,596,0.348,597,3.1,599,0.208,601,0.527,602,0.827,604,0.487,606,1.514,611,2.602,615,0.733,617,0.529,618,0.574,620,1.7,623,1,624,0.929,636,2.621,637,0.746,675,0.818,694,1.88,696,0.289,697,0.298,700,0.335,705,0.76,707,1.146,710,0.903,716,0.457,721,0.339,724,1.432,731,1.91,734,0.395,735,0.434,736,0.314,738,0.929,739,0.668,743,0.375,744,1.62,745,0.746,755,0.595,759,0.664,767,0.727,768,0.471,795,0.971,796,0.727,802,0.372,804,0.63,805,0.415,808,0.457,809,0.346,819,0.487,831,1.11,835,0.402,836,0.799,837,1.089,840,0.399,842,0.872,844,0.872,845,2.116,849,0.402,852,1.713,854,1.329,860,0.509,862,0.827,863,0.715,865,0.434,870,0.673,871,0.434,877,0.651,878,0.929,880,1.25,884,0.415,885,1.636,886,1.008,891,0.429,895,0.378,897,0.415,898,0.333,900,2.03,901,0.958,902,1.792,912,0.929,913,0.471,914,0.457,922,0.529,927,1.342,932,0.457,934,1.008,936,0.384,942,0.496,943,0.496,946,0.346,956,1.595,957,0.378,959,0.439,964,0.353,965,0.321,974,0.849,976,0.471,980,1.651,981,1.25,988,0.457,989,0.391,990,1.844,992,0.799,993,0.487,995,0.479,998,0.529,1002,0.487,1007,0.457,1010,0.419,1013,0.378,1021,0.445,1022,1.172,1023,0.464,1027,0.457,1029,1.332,1032,0.451,1041,0.388,1046,1.445,1052,0.358,1056,0.323,1060,1.479,1068,1.186,1069,0.439,1070,0.529,1071,1.403,1088,0.783,1089,2.668,1091,0.721,1092,0.529,1094,0.378,1096,0.487,1110,1.619,1126,0.479,1137,0.659,1142,0.464,1182,0.487,1184,0.529,1189,0.487,1190,0.434,1191,3.905,1198,0.419,1209,0.487,1215,0.457,1216,0.529,1217,1.059,1218,0.424,1220,2.003,1222,0.434,1224,0.439,1225,0.529,1233,0.429,1246,0.457,1249,1.844,1272,1.383,1278,1.158,1279,0.965,1282,0.457,1285,3.151,1322,0.369,1350,0.487,1351,0.384,1354,1.912,1355,1.25,1361,0.415,1378,0.529,1379,0.529,1391,0.419,1465,0.733,1470,0.529,1473,0.464,1474,1.971,1475,0.479,1511,2.586,1601,0.487,1663,0.457,1674,2.092,1676,1.008,1715,0.76,1718,0.678,1721,0.415,1722,1.7,1735,0.487,1747,0.506,1752,0.487,1768,0.496,1805,0.529,1811,1.871,1855,0.517,1858,0.965,1859,0.965,1940,0.479,1949,0.529,1952,0.885,1959,1.008,1981,0.479,1985,0.451,1992,0.384,1993,0.457,1998,0.487,1999,1.309,2002,0.457,2004,1.7,2007,0.529,2037,0.597,2038,0.529,2039,0.597,2040,1.139,2041,0.506,2042,0.471,2043,0.558,2044,1.139,2045,0.597,2046,1.139,2047,1.632,2048,2.498,2049,1.139,2050,1.139,2051,0.597,2052,3.232,2053,1.008,2054,0.597,2055,0.597,2056,1.139,2057,1.139,2058,0.597,2059,0.597,2060,0.597,2061,0.597,2062,0.597,2063,0.597,2064,0.597,2065,0.597,2066,0.597,2067,0.597,2068,1.139,2069,0.597,2070,0.597,2071,0.597,2072,0.597,2073,1.524,2074,0.597,2075,0.529,2076,1.139,2077,0.597,2078,1.063,2079,0.597,2080,1.008,2081,0.597,2082,0.517,2083,0.597,2084,0.597,2085,1.008,2086,1.139,2087,0.597,2088,0.597,2089,1.008,2090,1.139,2091,0.597,2092,0.529,2093,0.597,2094,0.529,2095,0.597,2096,0.597,2097,0.529,2098,0.597,2099,0.597,2100,0.597,2101,0.529,2102,0.529,2103,0.597,2104,0.597,2105,1.139,2106,1.632,2107,0.558,2108,0.597,2109,0.597,2110,0.529,2111,1.632,2112,0.445,2113,0.597,2114,0.597,2115,0.576,2116,0.597,2117,0.529,2118,0.597,2119,0.597,2120,1.844,2121,0.597,2122,0.597,2123,0.597,2124,0.597,2125,0.597,2126,0.597,2127,0.597,2128,0.597,2129,0.597,2130,1.139,2131,0.597,2132,0.597,2133,0.597,2134,0.597,2135,0.597,2136,0.597,2137,0.597,2138,0.597,2139,0.597,2140,0.597,2141,0.597,2142,0.597,2143,0.597,2144,0.597,2145,0.597,2146,0.597,2147,0.597,2148,0.597,2149,0.597,2150,0.597,2151,0.597,2152,0.597,2153,0.597,2154,0.929,2155,0.529,2156,0.597,2157,0.597,2158,1.139,2159,0.597,2160,0.597,2161,0.597,2162,0.529,2163,0.597,2164,1.803,2165,0.506,2166,1.139,2167,0.529,2168,0.529,2169,0.487,2170,0.576,2171,0.529,2172,0.529,2173,0.597,2174,0.597,2175,0.597,2176,0.597,2177,0.597,2178,0.929,2179,0.597,2180,0.529,2181,0.597,2182,0.597,2183,0.597,2184,0.597,2185,0.597,2186,0.542,2187,0.529,2188,0.597,2189,0.597,2190,0.597,2191,0.597,2192,0.529,2193,0.597,2194,0.597,2195,0.464,2196,0.597,2197,0.597,2198,0.597,2199,0.597,2200,0.597,2201,0.597,2202,0.597,2203,0.597,2204,0.529,2205,1.632,2206,0.597,2207,0.597,2208,0.597,2209,0.597,2210,0.597,2211,0.597,2212,0.597,2213,0.597,2214,0.597,2215,0.542,2216,0.457,2217,0.597,2218,0.597,2219,0.517,2220,0.558,2221,0.487,2222,0.597,2223,0.597,2224,0.597,2225,0.487,2226,0.597,2227,0.529,2228,0.597]],["component/143",[79,0.574]],["title/144",[618,28.134,2229,45.561]],["name/144",[618,1.341,2229,2.172]],["text/144",[14,2.369,19,0.901,20,1.831,27,1.495,28,1.371,30,1.224,31,1.325,34,1.013,36,2.009,38,0.686,40,0.61,43,0.629,45,1.34,46,0.913,47,0.992,49,1.163,50,1.086,53,0.958,58,0.654,64,0.656,66,0.722,67,1.149,73,0.747,78,0.919,87,1.423,88,0.36,94,4.337,104,0.677,105,1.056,108,1.3,109,0.86,111,0.592,119,0.708,121,0.78,127,1.203,128,1.545,138,1.757,141,1.457,144,1.218,146,1.534,148,1.204,154,1.743,158,0.898,165,1.494,169,0.692,171,4.948,212,0.784,213,0.904,214,1.025,215,1.13,219,1.24,220,1.988,234,0.571,236,0.994,240,0.877,245,1.3,251,0.985,295,0.689,400,0.827,404,0.934,436,3.316,440,2.219,466,1.114,479,2.077,482,2.314,488,0.592,498,2.274,501,3.283,504,0.904,523,0.866,550,1.164,561,3.007,564,0.802,590,2.412,594,1.757,597,3.378,599,0.515,601,1.218,602,1.072,610,1.252,618,1.796,620,1.204,633,1.13,636,0.88,637,0.966,694,1.391,702,0.911,715,0.958,721,0.838,738,4.501,744,1.495,745,1.724,759,2.524,767,0.657,795,0.878,799,2.59,809,1.524,817,2.59,831,1.791,836,1.848,837,0.985,840,0.985,856,1.307,865,1.072,877,2.036,881,1.13,884,1.025,895,0.934,900,1.873,901,2.541,902,0.919,908,1.114,926,1.307,933,0.891,936,2.294,941,2.692,945,1.014,946,0.854,948,0.985,955,1.004,957,0.934,964,2.938,965,1.415,976,1.164,978,1.204,980,1.74,1006,4.353,1008,0.715,1020,2.331,1029,2.148,1031,1.307,1033,2.331,1035,2.016,1041,0.958,1052,0.884,1068,2.59,1071,0.994,1095,3.669,1172,1.13,1190,1.072,1222,3.147,1226,2.331,1227,2.278,1229,1.913,1231,1.025,1247,0.926,1250,2.331,1270,1.114,1277,1.086,1351,0.95,1353,1.828,1354,3.807,1355,3.316,1364,1.025,1369,1.13,1391,1.036,1511,1.072,1601,1.204,1677,1.204,1715,0.985,1716,1.025,1722,1.204,1811,2.878,1853,5.299,1866,1.709,1954,1.307,1981,2.111,1993,1.13,1998,1.204,1999,2.111,2053,2.331,2075,1.307,2080,1.307,2082,1.277,2092,1.307,2094,2.331,2097,1.307,2101,2.331,2102,3.156,2110,1.307,2112,1.1,2154,1.204,2172,1.307,2227,1.307,2229,1.204,2230,1.476,2231,2.633,2232,1.34,2233,1.476,2234,1.307,2235,1.476,2236,1.476,2237,1.476,2238,1.476,2239,1.476,2240,1.476,2241,1.476,2242,1.476,2243,1.476,2244,1.476,2245,4.973,2246,1.476,2247,7.346,2248,1.476,2249,3.565,2250,2.633,2251,1.476,2252,2.633,2253,1.476,2254,1.476,2255,2.633,2256,3.565,2257,3.565,2258,6.393,2259,5.986,2260,4.331,2261,4.973,2262,2.633,2263,1.476,2264,2.458,2265,1.476,2266,3.565,2267,1.378,2268,1.476,2269,1.476,2270,1.476,2271,1.476,2272,1.476,2273,1.34,2274,1.476,2275,1.476,2276,1.422,2277,1.307,2278,1.476,2279,1.476]],["component/144",[79,0.574]],["title/145",[64,13.904,488,22.405]],["name/145",[83,2.18]],["text/145",[7,1.074,14,2.505,30,1.655,46,2.799,47,1.816,52,1.62,64,1.72,67,3.014,71,3.657,73,2.44,74,4.301,81,2.868,88,1.686,104,3.169,130,2.848,138,1.955,141,2.668,150,4.554,169,2.26,245,2.38,435,1.786,449,2.59,488,4.107,492,2.201,496,3.049,500,3.48,508,3.285,534,2.771,573,2.879,590,2.684,592,3.269,731,3.617,744,2.022,767,2.146,923,3.545,925,2.605,933,4.171,967,2.954,1039,2.605,1123,3.932,1137,3.999,1214,3.591,1767,6.117,1921,5.885,1992,3.101,2112,3.591,2280,4.82,2281,4.5,2282,4.5]],["component/145",[79,0.574]],["title/146-1",[64,11.564,589,29.387,731,19.048]],["name/146-1",[]],["text/146-1",[]],["component/146-1",[]],["title/146-2",[731,19.048,840,30.987,996,37.893]],["name/146-2",[]],["text/146-2",[]],["component/146-2",[]],["title/146",[60,25.843,64,13.904]],["name/146",[60,1.232,64,0.663]],["text/146",[7,1.694,32,3.683,40,1.28,45,2.81,54,2.334,56,2.479,58,2.448,64,2.332,82,3.41,92,3.285,99,4.523,111,2.215,225,4.29,295,2.578,435,3.64,448,4.228,484,2.967,488,3.757,500,3.829,508,3.614,539,3.794,561,3.834,610,2.625,631,4.085,637,3.616,694,2.917,717,3.616,731,2.264,736,2.901,767,3.871,862,4.011,893,3.358,894,3.834,914,4.228,996,4.504,1041,3.584,1214,5.664,1232,4.504,1721,3.834,1988,4.888,1989,5.522,1990,5.522,1991,5.522,1992,3.553,1993,4.228,1994,5.522,1995,4.587]],["component/146",[79,0.574]],["title/147-1",[7,8.862,237,28.219,573,14.173,1992,25.582]],["name/147-1",[]],["text/147-1",[]],["component/147-1",[]],["title/147-2",[108,22.937,435,17.214,636,15.522]],["name/147-2",[]],["text/147-2",[]],["component/147-2",[]],["title/147",[64,13.904,1992,35.935]],["name/147",[64,0.663,1992,1.713]],["text/147",[7,1.63,30,1.794,31,1.942,40,1.211,46,2.535,49,2.755,52,1.756,64,2.101,90,1.911,94,3.782,119,2.506,127,2.386,147,3.332,218,3.201,219,3.446,222,2.428,233,3.252,245,3.612,250,4.261,295,3.415,435,2.711,477,3.108,484,2.807,486,2.645,488,2.934,498,3.332,534,3.003,538,4.261,564,2.84,573,1.862,575,4.261,579,5.45,601,2.417,631,2.807,636,1.746,699,3.627,744,2.191,750,4.625,793,3.154,852,3.108,893,3.177,898,2.909,980,3.452,1039,2.823,1094,3.305,1193,4.261,1199,3.75,1202,3.842,1322,3.226,1474,4.122,1531,4.261,1639,4.625,1649,3.708,1866,3.39,1992,3.361,1996,4.52,1997,5.224,1998,4.261,1999,4.189,2000,4.878,2001,5.224]],["component/147",[79,0.574]],["title/148-1",[7,8.862,52,13.366,64,9.898,295,18.561]],["name/148-1",[]],["text/148-1",[]],["component/148-1",[]],["title/148-2",[7,6.88,36,12.472,40,7.153,46,10.697,111,12.382,127,14.097]],["name/148-2",[]],["text/148-2",[]],["component/148-2",[]],["title/148-3",[88,6.775,126,17.42,144,12.846,240,15.069,946,16.068,1051,20.17]],["name/148-3",[]],["text/148-3",[]],["component/148-3",[]],["title/148-4",[7,6.188,39,15.093,66,13.576,105,11.137,548,15.557,731,11.384,793,16.76]],["name/148-4",[]],["text/148-4",[]],["component/148-4",[]],["title/148",[88,13.63,240,18.608]],["name/148",[88,0.65,240,0.887]],["text/148",[7,1.432,19,1.102,32,4.287,36,3.083,39,4.148,46,1.512,52,1.466,56,1.958,64,2.337,67,1.903,105,1.75,107,3.34,108,2.154,111,3.06,119,2.093,123,2.064,126,2.737,128,2.559,130,2.577,134,2.883,151,4.287,158,2.653,164,3.169,201,1.903,217,2.444,240,2.804,245,2.154,246,2.331,278,3.029,295,3.929,435,1.616,440,2.715,441,2.385,443,3.131,483,3.169,508,2.073,548,5.439,569,3.796,577,3.861,579,3.25,591,2.508,599,1.521,631,2.344,715,2.831,717,2.856,761,3.169,762,2.831,767,1.942,791,4.92,793,2.633,852,2.595,858,3.208,862,3.169,873,3.096,874,3.34,900,3.376,927,2.344,957,2.759,971,3.34,993,3.558,1150,3.861,1199,3.131,1231,3.029,1233,3.131,1278,3.096,1721,3.029,1866,4.171,2002,4.92,2003,4.362,2004,3.558,2005,4.362,2006,4.204,2007,3.861,2008,4.362,2009,4.073,2010,4.362]],["component/148",[79,0.574]],["title/149-1",[7,6.88,35,16.4,90,11.29,200,15.958,201,13.465,202,27.327]],["name/149-1",[]],["text/149-1",[]],["component/149-1",[]],["title/149-2",[7,10.354,484,24.962,1089,29.887]],["name/149-2",[]],["text/149-2",[]],["component/149-2",[]],["title/149",[90,20.428,176,22.651]],["name/149",[90,0.974,176,1.08]],["text/149",[7,1.473,41,3.825,84,3.142,90,3.136,141,3.658,197,4.802,200,3.417,216,4.862,225,5.135,408,3.658,458,4.368,459,5.061,479,3.851,481,5.953,560,5.491,636,2.209,746,3.775,751,5.061,755,3.454,776,5.061,1075,4.862,1089,4.253,1090,5.3,1199,4.745,1247,4.147,1277,4.862,1339,4.862,1550,5.719,1792,5.491,1940,5.3,2002,6.564,2011,6.909,2012,6.909,2013,6.61,2014,6.61,2015,6.61]],["component/149",[79,0.574]],["title/150-1",[7,10.354,144,21.494,421,25.403]],["name/150-1",[]],["text/150-1",[]],["component/150-1",[]],["title/150-2",[7,10.354,486,23.519,1075,34.167]],["name/150-2",[]],["text/150-2",[]],["component/150-2",[]],["title/150-3",[7,8.862,199,15.723,242,23.328,1013,25.153]],["name/150-3",[]],["text/150-3",[]],["component/150-3",[]],["title/150-4",[7,7.746,13,11.442,64,8.652,623,21.298,2016,34.754]],["name/150-4",[]],["text/150-4",[]],["component/150-4",[]],["title/150-5",[7,4.753,13,7.021,14,5.217,60,9.868,516,13.275,618,10.743,1153,17.397,2017,16.826,2018,20.555,2019,21.327]],["name/150-5",[]],["text/150-5",[]],["component/150-5",[]],["title/150-6",[7,7.746,144,16.081,150,19.598,177,20.981,731,14.251]],["name/150-6",[]],["text/150-6",[]],["component/150-6",[]],["title/150-7",[7,8.862,118,23.013,456,32.434,714,31.37]],["name/150-7",[]],["text/150-7",[]],["component/150-7",[]],["title/150",[2020,61.99]],["name/150",[2020,3.673]],["text/150",[7,1.094,10,1.259,11,1.269,13,1.011,32,2.049,36,2.476,38,2.281,39,1.67,40,1.137,47,1.849,49,1.002,52,2.353,54,1.298,64,2.132,72,1.854,84,1.46,87,1.66,88,0.75,95,2.049,103,2.133,104,2.251,107,2.352,111,2.458,121,1.623,126,1.927,127,1.403,136,1.71,139,1.828,143,2.716,144,2.271,147,3.909,151,2.049,164,2.231,181,2.506,188,2.552,210,1.447,212,1.632,221,1.539,240,2.549,242,2.879,252,1.943,254,1.943,266,4.164,410,1.854,421,1.68,435,2.271,451,1.976,456,2.506,457,2.506,459,2.352,460,2.506,461,1.614,462,2.288,478,2.205,479,1.79,481,3.407,486,3.103,488,1.232,516,1.912,519,3.565,534,1.766,548,1.721,552,1.943,555,2.133,572,2.049,589,1.943,590,1.71,602,2.231,622,2.506,636,1.026,692,2.719,697,1.532,699,2.133,700,1.721,710,1.7,717,2.011,721,1.743,724,3.372,729,4.507,731,2.513,739,1.802,743,3.079,744,2.058,746,1.754,760,2.18,762,3.977,769,2.96,791,2.352,795,1.828,796,1.959,819,2.506,852,1.828,862,2.231,863,3.079,865,2.231,867,4.246,870,1.815,896,2.719,902,1.912,904,2.231,909,1.868,911,2.658,927,1.651,935,3.565,957,1.943,963,1.868,1008,1.488,1010,3.444,1047,2.205,1056,1.66,1094,3.104,1153,2.506,1172,2.352,1178,2.658,1287,2.111,1478,2.602,1806,3.872,2002,6.246,2021,2.719,2022,3.072,2023,3.072,2024,3.072,2025,3.072,2026,3.072,2027,3.072,2028,3.072,2029,3.072,2030,3.072,2031,3.072,2032,2.719,2033,3.072,2034,3.072,2035,2.719,2036,2.352,2904,3.397]],["component/150",[79,0.574]],["title/151-1",[19,17.696]],["name/151-1",[]],["text/151-1",[]],["component/151-1",[]],["title/151-2",[168,21.045,199,22.087]],["name/151-2",[]],["text/151-2",[]],["component/151-2",[]],["title/151",[269,35.333,270,40.577]],["name/151",[269,1.685,270,1.935]],["text/151",[6,1.257,7,1.073,10,1.229,11,1.238,13,1.584,14,1.688,19,1.216,28,1.153,30,1.653,40,1.599,46,1.039,48,5.374,49,0.978,60,1.387,88,1.684,90,1.096,105,3.402,118,4.375,165,1.701,168,3.041,176,1.216,199,1.185,201,3.011,207,4.022,223,1.931,240,1.603,245,1.48,246,1.602,259,1.526,264,3.416,268,3.123,269,4.366,270,3.496,398,2.804,488,2.419,522,5.383,524,3.297,525,1.639,570,3.4,589,1.896,599,1.678,696,1.452,720,3.926,758,1.308,764,4.022,777,3.926,788,5.534,871,2.178,900,1.575,953,1.68,1008,1.452,1039,3.73,1056,1.62,1069,2.205,1091,1.896,1098,1.363,1286,1.558,1364,2.081,1584,1.896,1811,1.735,2042,2.365,2221,3.926,2312,5.863,2521,2.998,2522,1.823,2523,1.823,2524,2.998,2525,1.63,2526,2.998,2527,2.998,2528,2.594,2529,2.998,2530,2.654,2531,2.654,2532,2.998,2533,2.654,2534,2.654,2535,2.654,2536,2.654,2537,2.654,2538,6.11,2539,4.26,2540,4.835,2541,7.067,2542,4.26,2543,4.26,2544,2.654,2545,4.26,2546,2.654,2547,2.654,2548,4.26,2549,4.26,2550,2.654,2551,3.739,2552,2.654,2553,2.54,2554,2.654,2555,2.654,2807,2]],["component/151",[79,0.574]],["title/152-1",[19,17.696]],["name/152-1",[]],["text/152-1",[]],["component/152-1",[]],["title/152-2",[168,21.045,199,22.087]],["name/152-2",[]],["text/152-2",[]],["component/152-2",[]],["title/152",[269,35.333,271,39.64]],["name/152",[269,1.685,271,1.89]],["text/152",[6,1.257,7,1.073,10,1.229,11,1.238,13,1.584,14,1.688,19,1.216,28,1.153,30,1.653,40,1.599,46,1.039,48,5.374,49,0.978,60,1.387,88,1.684,90,1.096,105,3.402,118,4.375,165,1.701,168,3.041,176,1.216,199,1.185,201,3.011,207,4.022,223,1.931,240,1.603,245,1.48,246,1.602,259,1.526,264,3.416,268,3.123,269,4.366,271,3.416,398,2.804,488,2.419,522,5.383,524,3.297,525,1.639,570,3.4,589,1.896,599,1.678,696,1.452,720,3.926,758,1.308,764,4.022,777,3.926,788,5.534,871,2.178,900,1.575,953,1.68,1008,1.452,1039,3.73,1056,1.62,1069,2.205,1091,1.896,1098,1.363,1286,1.558,1364,2.081,1584,1.896,1811,1.735,2042,2.365,2221,3.926,2312,5.863,2522,1.823,2523,1.823,2525,1.63,2528,2.594,2530,2.654,2531,2.654,2533,2.654,2534,2.654,2535,2.654,2536,2.654,2537,2.654,2538,6.11,2539,4.26,2540,4.835,2541,7.067,2542,4.26,2543,4.26,2544,2.654,2545,4.26,2546,2.654,2547,2.654,2548,4.26,2549,4.26,2550,2.654,2551,3.739,2552,2.654,2553,2.54,2554,2.654,2555,2.654,2556,2.799,2557,2.799,2558,2.998,2559,2.998,2560,2.998,2561,2.998,2807,2]],["component/152",[79,0.574]],["title/153-1",[19,17.696]],["name/153-1",[]],["text/153-1",[]],["component/153-1",[]],["title/153-2",[168,21.045,199,22.087]],["name/153-2",[]],["text/153-2",[]],["component/153-2",[]],["title/153",[88,13.63,273,40.577]],["name/153",[88,0.65,273,1.935]],["text/153",[6,1.776,7,1.401,10,1.736,11,1.749,13,1.394,14,2.03,19,1.07,27,2.637,28,1.628,40,2.152,43,3.194,48,5.487,49,1.382,81,4.461,88,2.163,168,2.825,176,1.717,199,1.675,218,2.595,223,1.699,259,2.155,268,4.08,273,4.567,488,2.522,524,3.438,525,2.316,599,2.893,610,3.564,696,2.051,728,5.566,748,2.636,758,1.847,764,4.194,939,3.155,1098,1.926,1286,2.201,1572,3.749,1584,4.743,2165,3.588,2416,3.454,2417,2.799,2522,2.576,2523,2.576,2525,2.302,2540,7.108,2541,5.825,2562,4.235,2563,4.235,2564,4.235,2565,4.235,2566,4.235,2567,4.235,2568,4.235,2569,7.001,2570,5.708,2571,5.87,2572,5.87,2573,8.297,2574,6.059,2807,2.825]],["component/153",[79,0.574]],["title/154-1",[19,17.696]],["name/154-1",[]],["text/154-1",[]],["component/154-1",[]],["title/154-2",[168,21.045,199,22.087]],["name/154-2",[]],["text/154-2",[]],["component/154-2",[]],["title/154",[280,50.872]],["name/154",[280,3.014]],["text/154",[6,1.957,7,1.504,10,1.913,11,1.927,14,2.126,19,2.33,20,1.717,28,1.794,30,2.317,33,5.167,40,2.014,47,2.543,88,1.138,118,2.7,149,2.816,168,2.543,176,1.892,199,1.845,222,2.168,223,1.871,240,3.072,259,2.374,268,4.38,280,7.373,388,3.572,416,3.083,488,3.181,494,2.927,512,3.987,551,3.083,572,3.112,589,4.27,599,1.627,696,2.259,736,2.451,758,2.035,860,2.086,933,2.816,953,2.614,957,2.951,1008,2.259,1052,2.796,1098,2.121,1142,3.624,1203,2.647,1286,2.425,1919,3.741,2312,4.903,2522,2.837,2523,2.837,2525,2.536,2575,4.665,2576,4.665,2577,4.665,2578,4.665,2579,4.665,2580,4.665,2581,5.167,2582,6.749,2807,3.112]],["component/154",[79,0.574]],["title/155-1",[19,17.696]],["name/155-1",[]],["text/155-1",[]],["component/155-1",[]],["title/155-2",[168,21.045,199,22.087]],["name/155-2",[]],["text/155-2",[]],["component/155-2",[]],["title/155",[283,50.872]],["name/155",[283,3.014]],["text/155",[6,2.711,7,1.883,10,2.65,11,2.67,14,2.442,19,1.633,20,2.379,40,1.498,88,1.577,168,3.761,176,2.621,199,2.556,219,3.044,223,2.592,259,3.289,268,5.484,282,5.721,283,6.839,599,2.254,758,2.819,1098,2.939,1286,3.359,2522,3.931,2523,3.931,2525,3.513,2583,6.463,2584,6.463,2585,6.463,2586,6.463,2587,6.463,2588,6.463,2807,4.311]],["component/155",[79,0.574]],["title/156-1",[19,17.696]],["name/156-1",[]],["text/156-1",[]],["component/156-1",[]],["title/156-2",[168,21.045,199,22.087]],["name/156-2",[]],["text/156-2",[]],["component/156-2",[]],["title/156",[285,55.245]],["name/156",[285,3.273]],["text/156",[6,0.802,7,0.737,10,0.784,11,0.79,14,1.438,19,0.483,27,1.387,28,2.001,30,1.136,36,1.336,40,1.952,43,3.588,46,2.229,47,1.961,49,0.624,56,0.859,58,0.848,64,0.476,84,0.909,87,2.361,88,1.434,93,5.72,94,0.989,104,0.877,109,1.115,111,2.358,121,1.011,127,1.51,137,1.107,154,1.617,161,1.191,168,3.251,176,0.776,199,0.756,208,1.996,222,1.537,223,0.767,227,3.446,228,1.191,234,0.741,246,1.022,251,1.276,252,1.21,259,0.973,266,1.138,268,2.146,285,4.637,397,2.976,400,3.605,465,2.249,479,1.927,483,2.403,488,1.327,524,1.809,525,2.389,599,2.406,610,2.077,618,0.964,636,0.639,696,0.926,697,0.954,700,2.448,710,1.059,713,1.621,724,1.314,729,1.407,731,2.134,733,3.088,737,2.802,745,2.166,748,3.658,755,2.719,758,1.443,762,2.146,809,1.914,866,1.163,892,3.088,895,1.21,900,1.005,935,1.39,953,2.448,955,1.301,1008,0.926,1021,3.255,1023,1.486,1042,1.693,1056,1.034,1069,1.407,1098,0.87,1111,2.347,1155,2.092,1170,4.858,1212,1.358,1277,2.432,1282,2.532,1286,0.994,1478,3.701,1647,1.786,1740,1.328,1829,1.621,1920,1.39,2017,5.075,2273,1.737,2416,1.56,2417,1.264,2522,1.163,2523,1.163,2525,1.04,2541,2.569,2551,1.486,2571,4.079,2572,4.079,2589,4.832,2590,2.116,2591,2.116,2592,2.116,2593,2.116,2594,2.116,2595,2.116,2596,2.116,2597,3.658,2598,2.116,2599,2.116,2600,2.116,2601,1.913,2602,1.844,2603,2.116,2604,6.899,2605,6.458,2606,1.913,2607,2.116,2608,1.913,2609,2.116,2610,2.116,2611,4.408,2612,2.116,2613,4.832,2614,2.116,2615,5.203,2616,5.755,2617,3.658,2618,2.116,2619,2.116,2620,1.786,2621,2.116,2622,2.116,2623,3.658,2624,3.658,2625,5.755,2626,3.658,2627,3.088,2628,3.658,2629,2.116,2630,2.116,2631,1.56,2632,2.116,2633,2.116,2634,2.116,2635,2.116,2636,2.116,2637,2.116,2638,2.116,2639,3.658,2640,2.116,2641,2.116,2642,2.116,2643,2.116,2644,2.116,2645,4.566,2646,2.116,2807,1.276]],["component/156",[79,0.574]],["title/157-1",[19,17.696]],["name/157-1",[]],["text/157-1",[]],["component/157-1",[]],["title/157",[88,9.703,277,21.874,573,14.173,727,28.545]],["name/157",[88,0.379,277,0.854,573,0.553,727,1.114]],["text/157",[6,1.811,7,1.422,10,1.771,11,1.784,14,2.049,19,1.612,30,3.069,40,2.071,56,2.864,64,1.075,88,1.851,168,1.627,169,2.991,176,1.751,223,1.732,240,2.125,259,2.198,268,4.14,277,2.376,287,3.523,288,3.523,438,4.429,486,3.23,494,2.71,522,4.255,525,2.362,573,1.539,599,3.116,610,2.053,696,2.092,727,3.1,758,1.884,764,4.255,909,2.627,1056,3.448,1098,1.964,1286,2.245,1332,3.823,1749,5.984,2522,2.627,2523,2.627,2525,2.348,2551,3.355,2581,6.842,2605,5.647,2620,4.032,2647,4.319,2648,4.319,2649,6.379,2650,4.319,2651,4.319,2652,4.319,2653,6.379,2654,4.319,2655,4.319,2656,4.319,2657,4.319,2658,4.032,2659,8.377,2660,4.319,2661,4.319,2662,4.319,2663,5.956,2664,4.319,2665,6.379,2666,4.319,2807,2.881]],["component/157",[79,0.574]],["title/158-1",[19,17.696]],["name/158-1",[]],["text/158-1",[]],["component/158-1",[]],["title/158",[277,30.727,278,38.782]],["name/158",[277,1.465,278,1.849]],["text/158",[6,2.331,7,1.702,8,4.605,10,2.279,11,2.296,14,2.134,19,2.373,30,1.908,40,2.176,43,4,45,2.828,65,4.456,88,1.356,168,2.094,176,2.254,223,2.229,234,2.152,259,2.828,268,4.955,277,3.057,278,5.302,390,3.639,599,1.938,696,2.691,758,2.424,1098,2.527,1286,2.888,1811,3.216,2522,3.38,2523,3.38,2525,3.021,2581,4.255,2667,5.557,2668,5.557,2669,5.557,2670,5.557,2671,5.557,2672,7.129,2673,7.635,2807,3.707]],["component/158",[79,0.574]],["title/159-1",[19,17.696]],["name/159-1",[]],["text/159-1",[]],["component/159-1",[]],["title/159",[277,30.727,290,44.066]],["name/159",[277,1.465,290,2.101]],["text/159",[6,0.621,7,0.589,8,1.129,10,0.607,11,0.612,14,1.062,19,2.079,20,0.545,27,0.621,28,1.67,30,2.322,34,0.569,36,1.067,39,0.805,40,1.983,43,1.85,52,1.859,56,1.949,58,1.585,64,0.657,66,0.724,88,1.06,105,0.594,111,0.594,119,0.711,127,1.633,132,0.908,145,0.728,158,0.901,168,2.083,169,1.238,170,1.383,176,0.601,199,1.414,201,0.646,213,0.908,217,0.83,219,0.698,221,0.742,223,0.594,259,0.754,264,1.051,268,1.714,277,1.453,290,2.084,394,6.446,397,3.423,400,1.48,421,2.726,431,1.73,438,6.507,441,1.444,458,0.979,463,1.103,493,0.922,499,1.991,503,1.255,504,0.908,520,1.874,524,0.81,525,2.726,534,0.851,550,1.168,552,0.937,565,1.051,578,1.063,589,0.937,599,1.247,610,0.704,615,0.953,618,0.746,631,1.921,640,1.208,694,2.294,696,0.717,700,3.361,710,1.462,713,1.255,719,3.763,737,3.678,743,0.929,744,1.499,748,0.922,758,0.646,762,1.714,767,0.659,834,2.237,835,4.766,864,1.344,866,0.901,870,1.56,871,1.919,873,1.051,874,4.592,909,2.174,942,1.23,946,0.857,957,0.937,979,1.168,1008,0.717,1017,1.631,1039,2.347,1042,4.895,1053,1.255,1076,1.151,1094,0.937,1098,0.673,1137,0.857,1200,1.383,1202,1.089,1203,1.499,1218,2.537,1224,4.067,1238,1.076,1270,1.118,1278,2.537,1282,1.134,1286,0.77,1348,1.23,1600,2.466,1731,1.255,1740,1.834,1749,1.168,1804,2.022,1811,2.069,1995,1.23,2009,4.653,2017,2.82,2042,2.084,2043,3.338,2078,2.466,2085,2.338,2187,1.311,2192,2.338,2232,1.344,2292,2.154,2297,1.383,2405,3.607,2416,2.154,2417,1.745,2522,0.901,2523,0.901,2525,0.805,2601,2.641,2604,5.529,2605,1.311,2606,3.575,2608,3.575,2615,1.481,2627,1.383,2631,4.066,2663,2.466,2674,4.802,2675,1.638,2676,1.638,2677,1.638,2678,1.638,2679,1.638,2680,1.638,2681,1.638,2682,1.638,2683,1.638,2684,1.638,2685,1.638,2686,1.638,2687,1.638,2688,1.638,2689,1.638,2690,1.548,2691,1.638,2692,1.638,2693,1.638,2694,1.638,2695,6.115,2696,2.921,2697,2.97,2698,5.512,2699,3.954,2700,2.921,2701,7.478,2702,6.115,2703,2.921,2704,1.638,2705,2.921,2706,1.638,2707,1.638,2708,1.638,2709,1.638,2710,1.638,2711,1.638,2712,1.548,2713,1.638,2714,1.638,2715,1.638,2716,1.638,2717,3.954,2718,1.638,2719,2.921,2720,5.512,2721,3.954,2722,3.954,2723,3.954,2724,3.954,2725,2.921,2726,1.638,2727,1.638,2728,1.638,2729,1.383,2730,1.638,2731,1.638,2732,1.481,2733,1.638,2807,0.988]],["component/159",[79,0.574]],["title/160-1",[19,17.696]],["name/160-1",[]],["text/160-1",[]],["component/160-1",[]],["title/160",[292,50.872]],["name/160",[292,3.014]],["text/160",[6,2.524,7,1.796,10,2.467,11,2.486,14,2.223,19,1.521,27,2.524,40,1.394,88,1.468,168,2.267,176,2.44,217,3.372,223,2.414,259,3.062,268,5.23,292,5.855,599,2.098,610,4.319,696,2.914,731,2.467,758,2.625,1008,2.914,1052,3.606,1098,2.736,1286,3.127,1536,4.908,2017,4.747,2036,4.607,2522,3.659,2523,3.659,2525,3.271,2729,5.618,2734,8.059,2735,6.017,2736,6.017,2737,6.017,2738,6.017,2739,6.017,2740,6.017,2741,6.017,2742,6.017,2743,5.799,2744,6.017,2807,4.014]],["component/160",[79,0.574]],["title/161-1",[19,17.696]],["name/161-1",[]],["text/161-1",[]],["component/161-1",[]],["title/161",[470,53.613]],["name/161",[470,3.176]],["text/161",[6,1.936,7,1.493,10,1.893,11,1.907,13,1.52,14,2.625,19,1.693,20,1.699,27,3.306,31,1.716,40,1.07,58,2.047,64,1.667,88,2.337,90,1.688,123,2.184,180,2.896,212,2.452,223,1.852,228,4.906,259,2.349,294,2.851,470,5.128,497,2.921,512,2.727,525,2.524,599,1.61,610,2.194,618,2.325,636,1.542,758,2.013,800,2.807,860,2.064,1098,2.099,1286,2.399,1718,2.746,1915,2.92,2363,4.808,2364,4.086,2365,3.701,2366,3.485,2367,3.314,2368,3.314,2369,3.314,2417,3.05,2525,2.509,2745,4.616,2746,4.616,2747,6.697,2748,4.616,2749,4.616,2750,3.395,2751,4.616,2752,4.616,2753,4.616,2754,4.616,2755,4.616,2756,3.395,2757,3.395,2758,3.395,2759,3.395,2760,3.395,2761,3.395,2762,3.395,2763,3.586,2764,3.586,2765,3.395,2766,3.395,2807,3.079]],["component/161",[79,0.574]],["title/162-1",[19,17.696]],["name/162-1",[]],["text/162-1",[]],["component/162-1",[]],["title/162",[2360,61.99]],["name/162",[2360,3.673]],["text/162",[6,1.906,7,1.476,10,1.863,11,1.877,13,1.496,14,2.617,19,1.673,20,1.673,27,3.276,31,1.689,40,1.053,58,2.015,64,1.648,88,2.324,90,1.662,123,2.15,176,1.843,180,2.851,212,2.414,223,1.823,228,4.862,259,2.312,268,4.297,294,2.806,497,2.888,512,2.684,599,1.584,610,2.16,618,2.289,636,1.518,758,1.982,800,2.763,860,2.031,1098,2.066,1286,2.362,1718,2.703,1915,2.874,2356,3.706,2360,6.915,2361,4.544,2362,6.621,2363,4.753,2364,4.022,2365,3.643,2366,3.431,2367,3.262,2368,3.262,2369,3.262,2370,4.544,2417,3.003,2525,2.47,2750,3.342,2756,3.342,2757,3.342,2758,3.342,2759,3.342,2760,3.342,2761,3.342,2762,3.342,2763,3.53,2764,3.53,2765,3.342,2766,3.342,2767,5.025,2768,5.025,2769,5.025,2770,5.025,2771,5.025,2772,5.025,2807,3.031]],["component/162",[79,0.574]],["title/163-1",[19,17.696]],["name/163-1",[]],["text/163-1",[]],["component/163-1",[]],["title/163",[277,38.523]],["name/163",[277,2.282]],["text/163",[6,1.926,7,1.487,10,1.883,11,1.897,13,1.512,14,2.622,19,1.686,20,1.69,27,3.296,31,1.707,40,1.064,58,2.036,64,1.661,88,2.333,123,2.173,176,1.862,180,2.881,212,2.439,223,1.842,228,4.891,259,2.337,268,4.33,277,2.526,294,2.836,497,2.91,512,2.713,599,1.601,610,2.183,618,2.313,636,1.534,758,2.003,800,2.793,860,2.053,1098,2.088,1286,2.386,1718,2.732,1915,2.905,2363,4.79,2365,3.682,2366,3.467,2367,3.296,2368,3.296,2369,3.296,2417,3.034,2525,2.496,2750,3.377,2756,3.377,2757,3.377,2758,3.377,2759,3.377,2760,3.377,2761,3.377,2762,3.377,2763,3.567,2764,3.567,2765,3.377,2766,3.377,2773,4.591,2774,4.591,2775,4.591,2776,6.672,2777,4.591,2778,4.591,2779,4.591,2780,4.591,2781,4.591,2782,4.591,2783,4.591,2784,4.591,2807,3.063]],["component/163",[79,0.574]],["title/164-1",[19,17.696]],["name/164-1",[]],["text/164-1",[]],["component/164-1",[]],["title/164",[469,53.613]],["name/164",[469,3.176]],["text/164",[6,1.957,7,1.504,10,1.913,11,1.927,13,1.536,14,2.63,19,1.706,20,1.717,27,3.326,31,1.734,40,1.081,58,2.069,64,1.68,88,2.345,123,2.208,180,2.927,212,2.479,223,1.871,228,4.936,259,2.374,294,2.881,469,5.167,497,2.944,512,2.756,599,1.627,610,2.218,618,2.35,636,1.559,758,2.035,800,2.837,860,2.086,1098,2.121,1286,2.425,1718,2.776,1915,2.951,2363,4.845,2366,3.522,2367,3.349,2368,3.349,2369,3.349,2417,3.083,2525,2.536,2750,3.431,2756,3.431,2757,3.431,2758,3.431,2759,3.431,2760,3.431,2761,3.431,2762,3.431,2763,3.624,2764,3.624,2765,3.431,2766,3.431,2785,4.665,2786,4.665,2787,6.749,2788,4.665,2789,4.665,2790,4.665,2791,4.356,2792,4.665,2793,4.665,2794,4.665,2795,4.665,2796,4.665,2807,3.112]],["component/164",[79,0.574]],["title/165-1",[19,17.696]],["name/165-1",[]],["text/165-1",[]],["component/165-1",[]],["title/165",[2797,57.12]],["name/165",[2797,3.384]],["text/165",[6,2.103,7,1.584,10,2.056,11,2.071,13,1.651,14,2.61,19,1.796,20,1.846,27,2.103,31,1.864,40,1.162,58,2.223,64,1.769,88,2.192,123,2.372,180,3.146,212,2.664,223,2.011,228,5.138,259,2.552,294,3.096,466,3.786,497,3.1,512,2.962,599,1.748,610,2.383,636,1.675,758,2.187,800,3.049,860,2.242,1098,2.28,1286,2.606,1718,2.983,1915,3.172,2363,5.102,2367,3.599,2368,3.599,2369,3.599,2525,2.726,2750,3.688,2756,3.688,2757,3.688,2758,3.688,2759,3.688,2760,3.688,2761,3.688,2762,3.688,2765,3.688,2766,3.688,2797,5.797,2798,5.014,2799,5.014,2800,7.106,2801,5.014,2802,5.014,2803,5.014,2804,5.014,2805,5.014,2806,5.014,2807,3.345]],["component/165",[79,0.574]],["title/166",[242,32.769,451,35.935]],["name/166",[242,1.562,451,1.713]],["text/166",[7,2.055,14,2.609,19,1.872,30,1.827,46,1.844,70,2.736,71,2.409,73,2.693,88,1.808,90,2.71,108,2.627,128,3.121,229,3.775,230,3.618,242,5.408,300,3.483,404,4.687,408,4.1,413,4.709,451,4.766,599,1.855,636,1.778,759,3.1,894,3.694,963,3.235,1097,3.423,1098,2.419,1099,3.423,1365,3.694,1731,4.507,1746,4.073,1771,4.709,1775,4.073,1779,4.073,1786,4.339,1861,4.709,1880,4.709,1883,4.709,1890,4.709,2422,5.32,2423,5.127,2424,5.32,2425,5.32,2426,5.32,2427,5.32,2428,5.32,2429,5.32,2430,5.32,2431,5.32,2432,5.32,2433,5.32]],["component/166",[79,0.574]],["title/167",[242,32.769,449,30.014]],["name/167",[242,1.562,449,1.431]],["text/167",[13,1.995,14,2.231,34,2.33,38,2.816,43,2.581,71,3.666,88,2.375,127,2.767,134,4.004,201,2.643,210,2.854,240,2.018,242,5.951,246,3.237,252,3.833,441,3.313,449,4.351,451,3.898,510,3.605,536,5.242,572,4.042,590,3.374,700,3.395,710,3.353,739,3.555,745,3.967,757,4.163,762,3.932,802,3.771,863,3.802,1047,4.35,1109,4.942,1231,4.207,1278,4.3,2038,5.364,2154,4.942,2391,5.364,2434,6.059,2435,6.059,2436,6.059]],["component/167",[79,0.574]],["title/168-1",[79,13.98]],["name/168-1",[]],["text/168-1",[]],["component/168-1",[]],["title/168-2",[245,34.575]],["name/168-2",[]],["text/168-2",[]],["component/168-2",[]],["title/168",[54,19.634,500,23.399,501,27.639]],["name/168",[54,0.829,500,0.988,501,1.167]],["text/168",[4,1.498,14,1.837,30,1.198,34,1.342,40,0.809,43,1.486,46,2.985,54,4.202,56,2.436,57,4.597,60,2.511,79,0.697,88,0.851,93,2.265,99,4.469,105,1.4,128,2.047,141,3.685,158,4.05,166,1.908,169,2.545,207,2.033,212,1.854,223,1.4,234,1.351,245,1.723,404,2.207,408,1.931,438,4.623,475,2.505,488,1.4,500,4.683,501,4.469,526,1.897,599,2.322,613,3.089,636,1.166,710,1.931,731,1.431,744,2.276,776,2.672,793,3.276,845,2.285,852,3.229,854,2.226,866,2.122,885,2.285,894,2.423,901,2.047,902,2.172,904,2.535,918,2.449,919,2.711,923,2.566,927,1.875,968,3.019,974,2.6,980,2.306,1000,3.089,1027,2.672,1034,4.155,1047,2.505,1096,2.846,1152,2.899,1155,2.207,1188,2.423,1210,2.846,1212,2.476,1217,3.522,1465,3.491,1573,2.423,1721,2.423,1729,2.846,1740,2.423,1849,3.089,1919,2.798,1952,2.711,1985,2.635,1986,3.089,2035,3.089,2162,3.089,2195,2.711,2204,3.089,2405,5.532,2437,3.489,2438,3.168,2439,6.658,2440,3.489,2441,3.489,2442,3.489,2443,3.089,2444,3.489,2445,3.489,2446,3.489,2447,3.489,2448,3.489,2449,3.489,2450,3.489,2451,3.489,2452,5.23,2453,3.489,2454,3.489,2455,2.672]],["component/168",[79,0.574]],["title/169-1",[14,18.744]],["name/169-1",[]],["text/169-1",[]],["component/169-1",[]],["title/169-2",[1188,48.621]],["name/169-2",[]],["text/169-2",[]],["component/169-2",[]],["title/169-3",[1718,33.233,2225,45.561]],["name/169-3",[]],["text/169-3",[]],["component/169-3",[]],["title/169",[488,22.405,500,28.134]],["name/169",[83,2.18]],["text/169",[4,1.057,7,0.549,14,2.434,20,1.508,31,0.915,34,0.947,35,2.177,36,1.656,40,0.777,43,0.583,45,1.253,46,2.985,49,1.095,54,2.593,56,0.615,63,1.71,64,1.426,66,1.204,67,1.074,88,0.334,90,0.501,104,1.879,105,1.346,107,1.048,111,1.644,121,0.723,123,0.648,124,0.881,136,0.763,138,1.662,139,1.465,144,0.634,146,2.387,149,0.827,154,0.67,156,1.768,158,1.498,159,0.833,165,1.397,166,0.749,167,3.046,169,1.155,171,0.922,196,0.983,207,2.753,208,1.486,221,1.681,256,1.584,398,0.798,400,1.88,435,0.507,448,1.048,449,1.323,477,0.815,482,0.889,488,2.949,490,1.048,492,2.158,496,0.866,497,1.463,500,4.338,504,0.839,516,1.533,520,0.972,534,0.787,552,1.558,556,1.048,569,0.809,570,1.388,591,1.416,592,1.165,594,0.913,597,1.772,601,0.634,602,3.433,606,0.995,611,2.259,636,1.914,637,0.897,643,1.212,655,0.873,694,1.301,697,1.673,707,0.961,708,2.18,714,1.08,715,0.889,716,1.048,717,0.897,731,0.561,739,0.803,744,2.723,755,0.716,757,1.692,760,0.972,793,0.827,799,0.995,804,2.268,810,1.212,817,2.437,836,1.728,837,1.642,840,2.238,842,1.048,844,1.048,845,2.197,854,3.357,858,1.007,860,1.832,863,0.859,866,1.498,895,0.866,898,2.282,901,1.968,903,2.008,913,1.943,933,0.827,945,1.692,946,0.793,947,3.537,948,0.913,963,0.833,964,2.421,965,3.296,967,0.839,978,1.117,985,3.627,989,0.897,1005,1.117,1008,1.193,1010,0.961,1013,0.866,1017,1.521,1039,1.331,1045,2.008,1056,0.74,1088,0.941,1089,0.881,1122,1.117,1137,3.942,1172,1.885,1195,1.212,1199,0.983,1203,1.904,1222,0.995,1229,0.995,1231,0.951,1232,2.008,1233,0.983,1322,0.846,1361,0.951,1363,1.212,1485,2.736,1548,2.18,1586,1.16,1663,1.048,1696,7.071,1698,2.903,1729,2.008,1833,2.18,1845,3.789,1910,1.212,1923,1.16,1993,1.048,2036,1.048,2089,1.212,2155,1.212,2168,3.627,2169,1.117,2171,1.212,2178,2.008,2195,2.606,2216,1.048,2219,1.185,2225,1.117,2277,1.212,2443,1.212,2456,1.369,2457,1.369,2458,1.369,2459,1.278,2460,1.369,2461,1.369,2462,4.725,2463,1.369,2464,1.369,2465,3.355,2466,1.369,2467,1.369,2468,1.369,2469,1.369,2470,1.369,2471,1.185,2472,1.369,2473,2.462,2474,4.097,2475,7.096,2476,2.462,2477,1.369,2478,1.369,2479,1.369,2480,1.32,2481,1.369,2482,1.369,2483,1.369,2484,4.097,2485,2.462,2486,1.369,2487,1.369,2488,1.369,2489,1.369,2490,1.369,2491,1.369,2492,2.462,2493,1.369,2494,1.369,2495,1.369,2496,1.369,2497,1.369,2498,1.369,2499,1.369,2500,1.369,2501,1.369,2502,1.369,2503,1.369,2504,1.369,2505,1.369,2506,1.369,2507,1.369,2508,1.369,2509,1.369,2510,1.369,2511,1.369,2512,1.369,2513,1.369]],["component/169",[79,0.574]],["title/170-1",[54,14.689,105,13.941,500,17.506,963,21.138,1137,20.115]],["name/170-1",[]],["text/170-1",[]],["component/170-1",[]],["title/170-2",[1573,38.782,2455,42.764]],["name/170-2",[]],["text/170-2",[]],["component/170-2",[]],["title/170",[963,21.138,1137,20.115,1246,26.61,1573,24.132,2455,26.61]],["name/170",[963,0.781,1137,0.743,1246,0.983,1573,0.891,2455,0.983]],["text/170",[3,4.053,7,1.105,13,1.632,28,2.711,34,2.711,46,1.718,54,4.146,56,3.165,67,2.162,105,3.291,109,2.888,132,3.038,488,3.584,497,2.162,499,2.76,500,5.195,501,4.194,539,3.406,570,2.795,573,3.185,696,2.401,767,2.207,795,4.194,860,3.668,866,3.015,869,3.559,927,3.788,963,3.015,1137,5.841,1155,3.136,1275,3.851,1351,4.535,1465,5.278,1562,4.388,1573,4.895,1740,3.442,1829,4.199,2514,4.957,2515,4.957,2516,4.628,2517,4.957,2518,4.957,2519,4.957,2520,4.957]],["component/170",[79,0.574]],["title/171-1",[241,26.523,731,16.304,827,31.37,828,35.2]],["name/171-1",[]],["text/171-1",[]],["component/171-1",[]],["title/171-2",[39,30.364,731,22.903]],["name/171-2",[]],["text/171-2",[]],["component/171-2",[]],["title/171",[111,18.634,803,37.893,829,35.567]],["name/171",[111,0.787,803,1.599,829,1.501]],["text/171",[4,3.471,7,1.076,14,1.181,19,0.937,30,0.751,34,1.857,35,1.97,36,0.883,38,1.016,40,0.507,46,1.285,52,2.14,56,1.665,58,0.969,60,3.201,64,2.144,66,2.361,71,2.575,73,2.879,74,1.361,81,1.301,88,0.533,93,1.419,104,1.003,105,2.281,108,1.079,109,1.274,111,2.554,115,1.09,119,1.049,127,0.998,138,0.887,139,1.301,143,1.21,154,1.813,158,1.33,166,1.196,167,2.794,169,2.985,201,1.617,212,1.162,240,1.608,241,4.247,246,3.039,295,2.972,397,1.107,400,1.225,408,1.21,412,1.674,430,1.21,451,1.407,463,2.762,477,1.301,479,1.274,483,1.588,486,3.223,488,0.877,516,1.361,540,1.935,547,1.783,548,4.132,552,1.383,555,2.574,564,1.188,565,2.631,570,1.233,572,1.458,589,3.054,590,2.689,594,1.458,599,0.762,618,1.101,645,1.935,694,1.155,697,1.09,705,1.458,721,1.241,731,3.769,734,1.445,739,1.283,744,1.555,793,1.32,795,1.301,796,1.395,798,1.783,802,1.361,804,1.21,827,4.487,828,1.935,830,2.186,831,2.522,832,2.308,833,1.935,834,1.852,835,1.472,836,1.534,837,3.221,838,6.124,839,1.935,840,2.473,841,1.783,842,1.674,843,3.574,844,2.839,845,1.432,846,2.186,847,2.186,848,2.186,849,2.497,850,2.186,851,2.694,852,2.206,853,1.935,854,1.395,855,2.186,856,1.935,857,1.935,858,1.608,859,1.935,860,0.977,861,4.828,862,1.588,863,3.995,864,1.985,865,2.694,866,2.255,867,1.892,868,2.186,869,2.662,870,1.292,871,1.588,872,1.783,873,1.552,874,2.839,875,3.282,876,2.186,877,2.118,878,1.783,879,2.186,880,1.674,881,1.674,882,2.186,883,1.935,884,1.518,885,1.432,886,1.935,887,2.186,888,2.186,889,2.186,890,1.935,891,2.662,892,2.041,893,1.33,894,1.518,895,1.383,896,1.935,897,1.518,898,1.217,899,1.725,900,1.149,901,2.175,902,1.361,903,1.783,904,1.588,905,2.107,906,2.186,907,1.935,908,1.651,909,1.33,910,1.852]],["component/171",[79,0.574]],["title/172",[64,13.904,410,33.718]],["name/172",[64,0.663,410,1.608]],["text/172",[45,3.194,52,2.786,54,2.653,64,2.31,67,2.738,88,2.264,108,3.099,145,3.084,240,2.761,410,6.195,430,3.474,478,4.506,501,3.735,508,2.984,548,3.517,573,3.308,596,3.657,744,2.633,767,2.795,877,3.585,911,5.431,912,5.12,913,4.952,914,4.806,915,3.971,916,4.806,917,5.557,918,4.405,919,4.877,920,6.277,921,6.277,922,7.338,923,4.617]],["component/172",[79,0.574]],["title/173-1",[0,57.12]],["name/173-1",[]],["text/173-1",[]],["component/173-1",[]],["title/173-2",[1,37.258,2,34.766]],["name/173-2",[]],["text/173-2",[]],["component/173-2",[]],["title/173-3",[46,19.357,592,26.429]],["name/173-3",[]],["text/173-3",[]],["component/173-3",[]],["title/173-4",[47,21.045,731,22.903]],["name/173-4",[]],["text/173-4",[]],["component/173-4",[]],["title/173-5",[52,18.776,64,13.904]],["name/173-5",[]],["text/173-5",[]],["component/173-5",[]],["title/173-6",[241,30.987,731,19.048,827,36.649]],["name/173-6",[]],["text/173-6",[]],["component/173-6",[]],["title/173",[3,32.112,4,23.978]],["name/173",[3,1.531,4,1.143]],["text/173",[1,1.531,2,3.114,3,2.221,4,1.659,5,1.271,6,0.963,7,1.308,10,0.941,11,0.948,14,2.648,20,2.16,27,2.746,30,0.788,32,1.531,34,0.883,40,0.532,41,1.329,46,2.746,47,1.456,49,1.261,52,2.385,56,1.031,58,1.713,60,2.715,64,1.461,67,1.001,71,2.265,72,1.386,73,1.956,74,2.405,84,1.091,88,2.138,90,0.84,105,0.921,108,1.133,111,2.354,119,1.854,137,1.329,138,2.656,149,2.333,150,2.821,169,2.752,213,1.407,218,1.407,219,1.081,223,0.921,295,1.072,300,1.503,408,2.139,449,1.234,463,1.71,477,2.299,479,1.338,486,1.162,488,1.55,492,1.765,493,1.429,497,2.856,499,1.278,508,1.091,558,1.503,561,1.594,564,1.248,573,2.334,578,1.648,592,4.604,599,0.8,636,1.291,697,1.145,700,1.286,721,2.193,731,2.91,746,1.311,762,1.49,767,1.022,795,1.366,804,1.271,832,1.429,838,3.421,839,3.421,854,1.464,860,1.727,869,1.648,877,1.311,900,1.206,924,2.295,925,2.704,926,3.421,927,2.076,928,2.295,929,2.032,930,2.958,931,3.778,932,2.958,933,2.333,934,5.195,935,1.668,936,1.477,937,2.143,938,2.295,939,5.287,940,2.143,941,1.733,942,1.907,943,1.907,944,6.548,945,1.577,946,1.329,947,1.418,948,1.531,949,2.295,950,5.003,951,1.366,952,2.295,953,1.286,954,2.295,955,1.561,956,1.758,957,1.452,958,2.032,959,1.688,960,2.295,961,2.295,962,1.452,963,1.396,964,1.356,965,1.234,966,2.295,967,1.407,2956,1.531]],["component/173",[79,0.574]],["title/174-1",[240,18.608,447,38.379]],["name/174-1",[]],["text/174-1",[]],["component/174-1",[]],["title/174-2",[8,23.884,447,38.379]],["name/174-2",[]],["text/174-2",[]],["component/174-2",[]],["title/174-3",[697,27.852,918,39.201]],["name/174-3",[]],["text/174-3",[]],["component/174-3",[]],["title/174-4",[430,30.914,877,31.902]],["name/174-4",[]],["text/174-4",[]],["component/174-4",[]],["title/174",[430,38.757]],["name/174",[430,2.296]],["text/174",[4,0.561,7,0.291,8,2.182,14,0.319,19,1.6,20,1.455,28,1.758,30,0.81,32,1.574,34,0.907,35,0.694,36,0.953,40,0.303,41,0.756,45,0.665,46,2.069,51,1.106,52,1.871,54,1.932,56,2.052,58,1.046,64,1.951,67,0.57,79,0.261,81,0.777,82,0.806,84,1.534,88,1.913,90,0.478,93,2.094,99,3.553,102,0.871,105,0.524,109,0.761,111,1.294,121,0.69,127,2.331,130,1.394,134,1.559,136,0.727,137,0.756,138,1.308,139,0.777,141,2.188,143,1.306,144,0.604,145,0.642,148,1.065,150,1.819,151,0.871,157,0.949,158,0.794,161,1.468,166,3.044,167,1.365,169,0.612,171,1.589,210,0.615,215,1,219,0.615,220,1.781,222,0.607,223,0.524,240,3.156,241,0.871,244,1.714,245,0.645,246,0.698,250,1.065,295,1.101,381,0.888,397,1.634,400,0.732,410,3.605,430,3.504,431,0.855,433,1.638,435,2.213,440,0.813,441,1.29,445,2.872,447,3.141,449,0.702,450,0.847,453,1.356,463,0.973,480,0.96,485,1.574,488,1.294,501,1.92,503,1.106,504,1.446,506,0.949,508,1.121,514,1.065,526,1.282,539,1.621,541,1.13,548,0.732,555,1.638,556,1,560,1.085,563,1.047,571,0.937,588,1,592,0.618,596,1.375,599,0.455,616,0.986,675,0.937,694,1.246,697,1.971,705,1.574,709,0.907,731,0.535,736,0.686,744,1.917,746,0.746,757,0.897,799,0.949,802,2.008,804,1.306,831,3.471,835,0.879,837,0.871,842,3.027,849,1.589,852,0.777,860,0.584,863,0.819,869,1.694,870,1.394,872,1.924,874,1.806,875,1.156,880,1,881,3.027,885,2.589,893,0.794,895,0.826,898,0.727,900,2.402,908,3.451,912,2.632,916,1,918,4.668,919,1.014,923,0.96,927,0.702,936,0.84,939,0.973,946,1.867,957,0.826,963,0.794,964,0.771,968,1.13,969,1.306,970,4.871,971,1,972,4.571,973,1.156,974,1.757,975,2.359,976,1.03,977,1.306,978,2.632,979,1.03,980,1.559,981,4.572,982,2.088,983,1.306,984,1.306,985,1.156,986,2.088,987,1.306,988,1,989,0.855,990,2.088,991,2.359,992,0.916,993,1.065,994,1.306,995,1.892,996,1.924,997,1.306,998,2.088,999,2.632,1000,1.156,1001,5.103,1002,1.065,1003,1.306,1004,1,1005,1.065,1006,1.03,1007,1,1008,1.915,1009,1.306,1010,0.916,1011,1.306,1012,2.359,1013,1.492,1014,1.306,1015,2.088,1016,1.306,1017,1.457,1018,1.306,1019,1.306,1020,1.156,1021,1.757,1022,1.694,1023,1.833,1024,1.306,1025,1.306,1026,1.306,1027,1,1028,1.306,1029,1.924,1030,1.306,1031,1.156,1032,2.436,1033,1.156,1034,1,1035,1,1036,2.359,1037,1.306,1038,1.306,1039,0.706,1040,1.306,1041,1.531,1042,1.156,1043,3.5,1044,1.047,1045,1.065,1046,2.088,1047,0.937,1048,1.306,1049,2.088,1050,2.359,1051,0.949,1052,0.783,1053,1.106,1054,1.306,1055,0.949,1056,0.706,1057,1.306,1058,1.306,1059,1.306,1060,0.927,1061,1,1062,1.998,1063,1.306,1064,1.306,1065,1.219,1066,1.065,1067,1.306,1068,0.949,1069,0.96,1070,1.156,1071,2.173,1072,1.306,1073,1.306,1074,1.306,1077,1.156,1078,2.359,1079,1.306,1080,2.359,1081,1.306,1082,1.306,1083,1.306,1084,1.306,1085,1.306,1086,1.306,1087,1.306]],["component/174",[79,0.574]],["title/175-1",[64,13.904,1088,38.379]],["name/175-1",[]],["text/175-1",[]],["component/175-1",[]],["title/175",[14,11.364,212,24.681,481,32.255]],["name/175",[212,1.415,481,1.849]],["text/175",[7,0.589,13,0.87,14,2.725,20,2.359,27,1.109,36,1.068,40,0.613,43,1.851,47,0.996,49,2.091,64,1.377,66,2.125,70,1.359,71,2.901,74,3.988,88,2.05,94,1.367,144,2.56,145,1.299,151,1.763,190,3.945,210,1.245,212,2.939,230,1.798,234,1.024,240,2.68,242,1.551,253,2.42,254,1.672,266,3.812,295,1.234,397,3.244,400,2.435,440,1.645,441,3.025,479,1.54,481,4.916,482,1.716,514,3.544,519,5.844,599,0.922,610,2.065,723,2.12,724,4.403,743,3.471,762,1.716,791,2.024,849,1.78,878,2.156,884,1.835,885,1.731,897,3.017,925,1.429,962,1.672,1008,1.28,1089,3.559,1090,2.12,1091,1.672,1092,2.34,1093,2.34,1094,1.672,1095,2.239,1096,2.156,1097,4.123,1098,2.914,1099,4.123,1100,6.408,1101,4.542,1102,2.4,1103,4.345,1104,2.643,1105,2.643,1106,2.643,1107,2.763,1108,2.643,1109,4.513,1110,2.054,1111,1.876,1112,2.763,1113,2.763,1114,2.763,1115,2.763,1116,2.763,1117,2.763,1118,2.763,1119,2.763,1120,2.763,1121,2.156,1122,2.156,1123,2.156,1124,2.468,1125,1.835,1126,2.12,1127,2.643,1128,2.643,1129,2.643,1130,2.4,1131,2.643,1132,2.763,1133,4.542,1134,4.542,1135,2.643,1136,4.345,1137,1.53,1138,4.542,1139,2.763,1140,2.763,1141,2.763,1142,2.054,1143,2.763,1144,2.763,1145,2.643,1146,2.643,1147,2.763,1148,2.196,1149,2.643]],["component/175",[79,0.574]],["title/176",[88,17.088]],["name/176",[83,2.18]],["text/176",[2,1.245,7,1.346,13,0.659,20,1.265,31,1.278,32,1.335,36,1.826,40,1.047,41,1.158,45,1.018,46,0.693,52,3.006,58,0.887,60,2.795,64,2.181,67,0.873,79,0.399,81,1.19,82,1.236,88,1.309,90,2.581,91,1.771,94,1.777,95,3.578,103,1.389,104,2.073,108,2.648,111,2.423,123,0.947,126,1.255,130,1.182,132,2.107,134,4.358,135,3.015,139,2.045,144,0.926,145,1.689,149,2.075,150,1.128,159,2.091,161,3.338,176,1.833,197,1.453,201,0.873,212,1.063,245,0.988,256,1.287,294,2.791,295,2.504,435,0.741,441,1.88,461,1.051,475,1.436,482,1.298,484,3.544,486,1.013,488,1.813,493,1.245,504,2.107,506,3.283,508,2.55,516,2.813,524,1.094,526,1.869,529,1.453,534,1.15,539,1.375,548,1.926,552,1.266,572,1.335,573,1.912,591,2.598,594,1.335,596,3.52,601,2.091,610,2.148,615,1.287,618,3.043,622,5.38,623,1.226,628,1.771,636,1.792,655,2.193,694,1.816,701,1.632,707,1.404,709,2.387,710,1.107,718,1.532,731,1.41,732,1.662,734,1.322,735,1.453,736,1.051,739,2.652,744,0.839,747,1.695,748,4.847,751,1.532,757,2.362,761,1.453,765,1.771,766,1.771,793,1.208,833,4.748,837,1.335,840,1.335,845,1.31,849,1.347,852,1.19,854,1.276,873,2.44,884,1.389,898,1.914,917,1.771,927,1.075,932,1.532,971,2.632,980,1.322,989,1.31,1007,1.532,1013,1.266,1041,1.298,1068,1.453,1125,2.387,1150,1.771,1151,2.883,1152,3.755,1153,5.758,1154,4.519,1155,2.859,1156,2.001,1157,2.001,1158,3.209,1159,1.771,1160,2.001,1161,2.001,1162,1.771,1163,3.437,1164,4.519,1165,1.771,1166,2.001,1167,2.001,1168,3.043,1169,3.043,1170,3.209,1171,3.437,1172,1.532,1173,1.771,1174,2.001,1175,1.771,1176,2.001,1177,1.868,1178,1.731,1179,2.001,1180,2.001,1181,2.001,1182,1.632,1183,2.001,1184,1.771,1185,1.771,1186,2.001,1187,2.001,1188,1.389,1189,1.632,1190,1.453,1191,1.771,1192,1.695,1193,1.632,1194,1.771,1195,1.771,1196,1.771,1197,2.001]],["component/176",[79,0.574]],["title/177",[1155,44.298]],["name/177",[1155,2.624]],["text/177",[7,1.931,14,2.285,34,2.11,36,2.217,40,2.008,52,1.844,64,1.884,67,2.393,89,3.5,90,2.768,99,3.265,104,2.517,111,2.201,137,3.176,144,2.539,176,2.225,201,2.393,246,4.044,294,3.389,295,2.561,465,3.732,488,2.201,497,2.393,500,2.764,502,3.986,508,3.598,510,3.265,564,2.983,573,2.698,697,2.736,700,3.075,709,3.81,744,2.301,836,3.851,860,2.453,1022,5.434,1151,3.5,1155,5.909,1169,4.857,1198,3.851,1199,3.939,1200,5.123,1201,4.857,1202,4.036,1203,3.114,1204,5.487,1205,5.487,1206,5.487,1207,5.487,1208,5.487]],["component/177",[79,0.574]],["title/178-1",[67,24.364,111,22.405]],["name/178-1",[]],["text/178-1",[]],["component/178-1",[]],["title/178-2",[64,11.564,1584,29.387,1587,35.074]],["name/178-2",[]],["text/178-2",[]],["component/178-2",[]],["title/178-3",[64,8.652,105,13.941,1584,21.986,1587,26.241,2697,28.873]],["name/178-3",[]],["text/178-3",[]],["component/178-3",[]],["title/178-4",[46,16.099,234,17.987,592,21.981]],["name/178-4",[]],["text/178-4",[]],["component/178-4",[]],["title/178",[46,19.357,592,26.429]],["name/178",[46,0.923,592,1.26]],["text/178",[2,0.956,4,3.21,7,1.138,13,0.506,14,2.215,20,1.004,28,1.415,30,1.531,34,1.415,35,2.713,36,1.802,40,1.033,41,0.889,46,3.096,47,2.131,49,1.201,52,2.315,54,2.39,56,0.689,58,0.681,60,1.703,64,1.408,66,1.334,71,1.666,72,0.927,73,1.381,74,1.698,82,0.948,88,0.375,89,0.98,90,0.562,92,0.914,93,0.997,94,0.794,102,1.024,104,1.688,105,0.616,106,1.958,108,0.758,109,0.895,111,2.888,118,1.579,119,2.139,127,0.701,128,1.6,130,0.907,137,0.889,139,0.914,141,1.51,143,0.85,145,0.755,146,0.895,147,0.98,154,2.18,157,1.116,164,1.116,169,0.72,208,0.927,209,1.078,214,1.066,219,0.723,234,1.425,245,0.758,256,0.988,397,1.381,400,0.861,435,1.364,452,1.176,458,1.015,465,1.045,466,1.159,477,0.914,480,1.129,482,0.997,484,0.825,485,1.82,486,2.257,488,2.048,492,0.701,508,3.104,526,1.483,534,2.116,548,0.861,551,1.015,552,2.328,561,1.066,564,2.001,571,1.958,573,2.566,590,1.519,591,0.883,592,4.284,594,1.82,596,0.895,597,0.811,599,0.536,615,2.869,616,1.159,631,0.825,636,0.912,637,1.006,639,1.301,640,1.253,694,1.441,702,0.948,705,1.024,715,2.389,716,1.176,721,1.548,731,2.952,732,1.276,734,2.946,735,1.116,736,0.807,744,1.144,793,3.697,796,0.98,802,0.956,804,2.468,832,0.956,837,1.024,858,1.129,860,0.687,870,1.612,873,1.09,877,0.877,885,1.786,890,1.359,891,1.102,898,0.855,901,0.901,902,1.698,903,1.253,909,0.934,915,0.971,923,1.129,927,0.825,929,1.359,931,2.06,932,1.176,936,0.988,946,1.579,962,1.726,992,1.078,995,3.575,1002,1.253,1041,0.997,1047,1.102,1075,2.006,1089,2.368,1091,0.971,1130,1.394,1162,1.359,1168,1.359,1188,1.066,1201,1.359,1202,2.006,1209,1.253,1210,1.253,1211,5.654,1212,1.09,1213,1.536,1214,2.032,1215,1.176,1216,1.359,1217,3.314,1218,4.887,1219,1.536,1220,2.951,1221,1.536,1222,1.116,1223,2.728,1224,1.129,1225,1.359,1226,1.359,1227,1.329,1228,1.536,1229,1.116,1230,1.359,1231,1.066,1232,1.253,1233,2.642,1234,1.536,1235,2.728,1236,4.459,1237,2.728,1238,1.116,1239,1.536,1240,1.359,1241,1.536,1242,1.536,1243,1.536,1244,1.536,1245,1.536,1246,2.089,1247,1.712,1248,1.536,1249,1.359,1250,1.359,1251,1.536,1252,1.359,1253,1.536,1254,1.253,1255,1.536,1584,0.971,1768,1.276,2041,2.311,2167,1.359,2180,1.359,2697,2.266,2824,1.434,2911,1.605,2912,1.605,2913,1.605,2914,1.605,2915,1.605,2916,1.434,2917,1.605,2918,1.605,2919,1.605]],["component/178",[79,0.574]],["title/179",[525,30.544,2283,49.446]],["name/179",[525,1.456,2283,2.357]],["text/179",[4,2.92,7,1.051,10,3.271,13,1.552,30,1.619,40,1.093,64,1.693,70,2.425,87,2.549,88,2.354,90,1.725,105,1.892,146,2.748,195,6.687,196,4.883,222,3.161,223,1.892,248,4.774,398,3.963,403,3.426,408,2.61,459,5.208,499,2.626,512,2.786,523,3.991,524,2.579,525,3.72,529,4.941,601,2.182,610,2.242,618,2.375,719,3.56,735,3.426,748,2.935,761,3.426,800,2.868,804,2.61,927,2.534,956,3.611,1247,2.959,1252,4.175,2036,3.611,2284,6.802,2285,4.716,2286,6.802,2287,6.802,2291,6.802,2292,5.548,2293,4.716,2296,4.716,2553,3.995,2602,4.545,2927,4.929,2929,4.929,2956,4.537,2957,4.929,2958,5.216,2959,5.216,2960,5.216,2961,5.216,2962,5.216,2963,5.216,2964,5.216,2965,5.65,2966,5.216,2967,5.216]],["component/179",[79,0.574]],["title/180",[523,32.769,601,25.843]],["name/180",[83,2.18]],["text/180",[7,2.108,13,2.148,30,1.161,31,1.969,40,1.227,52,1.137,64,2.29,70,1.739,84,1.607,88,2.479,90,2.387,99,2.012,103,2.348,105,2.962,111,1.356,114,2.986,115,1.686,121,2.797,123,1.6,127,1.544,135,2.255,136,2.948,159,2.056,166,2.895,167,1.957,169,1.585,184,2.925,195,4.996,196,3.801,200,1.748,201,1.475,223,1.356,227,2.668,237,4.631,240,1.126,246,1.807,295,1.578,300,2.214,303,2.758,307,4.319,309,4.054,311,4.054,397,1.712,398,1.97,404,2.139,493,2.105,499,1.883,508,1.607,523,5.785,524,4.038,525,3.569,526,1.838,527,2.255,529,2.456,530,3.157,573,1.887,592,1.6,601,3.709,610,1.607,618,2.667,655,2.157,695,2.993,696,1.638,702,2.088,709,2.348,731,1.386,748,2.105,758,1.475,760,3.758,761,2.456,762,2.194,763,2.993,764,2.255,767,1.505,804,1.871,840,2.255,971,2.589,989,2.214,1004,2.589,1008,1.638,1094,2.139,1121,2.758,1122,2.758,1126,2.711,1155,2.139,1165,2.993,1362,2.758,1485,2.758,1988,2.993,2297,3.157,2298,3.381,2299,3.381,2300,3.381,2301,3.381,2968,3.74]],["component/180",[79,0.574]],["title/181-1",[592,33.134]],["name/181-1",[]],["text/181-1",[]],["component/181-1",[]],["title/181-2",[573,24.961]],["name/181-2",[]],["text/181-2",[]],["component/181-2",[]],["title/181-3",[49,18.227,424,38.782]],["name/181-3",[]],["text/181-3",[]],["component/181-3",[]],["title/181-4",[403,50.872]],["name/181-4",[]],["text/181-4",[]],["component/181-4",[]],["title/181",[70,28.723,523,32.769]],["name/181",[70,1.369,523,1.562]],["text/181",[4,2.18,14,2.617,27,1.345,28,2.425,30,1.101,40,0.743,43,2.163,46,2.485,49,2.34,50,6.115,54,2.665,62,2.16,64,0.798,88,1.239,121,1.694,123,1.518,139,1.908,155,6.349,189,4.496,207,2.959,240,2.101,253,1.786,403,2.33,424,3.526,441,4.274,452,2.455,465,2.181,494,2.012,557,2.616,573,2.248,592,2.403,696,3.054,701,2.616,736,1.685,742,2.839,835,2.16,860,4.038,927,1.723,939,2.389,959,3.736,988,3.889,1017,3.137,1021,5.823,1056,3.876,1137,1.856,1155,2.029,1210,5.144,1247,4.5,1270,2.421,1349,4.143,1427,2.181,1920,5.21,2120,2.839,2302,3.207,2303,5.079,2304,3.207,2305,3.207,2306,2.664,2307,3.207,2308,6.305,2309,3.207,2310,3.207,2311,3.207,2312,3.69,2313,5.079,2314,3.207,2315,3.207,2316,3.207,2317,3.207,2318,3.207,2319,3.207,2320,3.207,2321,3.207,2322,3.207,2323,3.207,2324,3.207,2325,3.207,2326,3.207,2327,3.207,2328,6.305,2329,6.305,2330,6.305,2331,6.305,2332,6.305]],["component/181",[79,0.574]],["title/182-1",[523,32.769,524,30.544]],["name/182-1",[]],["text/182-1",[]],["component/182-1",[]],["title/182-2",[19,17.696]],["name/182-2",[]],["text/182-2",[]],["component/182-2",[]],["title/182",[832,43.586]],["name/182",[832,2.582]],["text/182",[4,2.501,5,2.118,6,1.605,7,1.757,10,1.569,11,1.581,13,2.596,14,2.489,30,2,31,2.931,36,1.546,38,1.778,40,1.634,43,3.004,46,1.326,47,1.442,52,1.286,64,0.952,67,1.669,71,1.732,74,2.382,87,2.068,88,1.721,105,1.535,108,2.876,111,1.535,132,2.345,138,1.552,146,2.229,152,2.382,210,1.802,213,2.345,214,4.045,222,2.707,234,1.481,309,2.929,311,2.929,398,2.229,512,3.441,523,4.978,524,4.888,551,2.528,573,1.364,592,1.81,601,1.77,610,1.819,654,3.474,715,2.483,719,2.889,744,2.443,755,1.999,764,5.26,804,2.118,901,2.245,965,2.056,1094,2.42,1137,2.214,1254,3.121,1382,3.387,1532,2.889,2282,3.572,2292,3.121,2333,3.826,2334,3.572,2336,3.826,2337,3.826,2338,3.826,2339,3.826,2340,3.387,2341,3.826,2342,3.826,2343,3.826,2344,3.826,2345,3.826,2346,3.826,2347,3.826,2348,5.825,2349,3.826,2350,3.826,2351,3.826,2352,3.826,2354,3.826,2355,3.826,2471,3.31,2956,2.552,2969,4.232,2970,4.232,2971,4.232,2972,4.232,2973,4.232]],["component/182",[79,0.574]],["title/183-1",[138,22.651,697,27.852]],["name/183-1",[]],["text/183-1",[]],["component/183-1",[]],["title/183-2",[1652,49.446,1653,42.764]],["name/183-2",[]],["text/183-2",[]],["component/183-2",[]],["title/183-3",[125,29.843,1654,49.446]],["name/183-3",[]],["text/183-3",[]],["component/183-3",[]],["title/183-4",[491,42.764,1655,49.446]],["name/183-4",[]],["text/183-4",[]],["component/183-4",[]],["title/183",[138,18.839,152,28.915,1653,35.567]],["name/183",[138,0.795,152,1.22,1653,1.501]],["text/183",[7,2.076,40,1.264,41,3.156,67,2.379,88,1.331,111,3.023,125,4.027,138,3.056,145,2.679,152,3.394,154,2.666,166,2.982,222,2.534,223,2.187,397,3.816,491,5.77,590,3.036,697,2.719,702,3.367,731,2.236,800,3.316,851,3.961,880,4.175,916,4.175,955,5.126,965,2.93,1212,3.87,1230,4.827,1652,6.672,1653,7.133,1654,4.827,1655,7.646,1656,5.453,1657,9.778,1658,5.453,1659,5.453,1660,6.385,1661,5.453,1662,7.536,1663,4.175,1664,7.536,1665,5.453,1666,5.453,1667,5.453,1668,5.453]],["component/183",[79,0.574]],["title/184-1",[28,21.478,49,18.227]],["name/184-1",[]],["text/184-1",[]],["component/184-1",[]],["title/184-2",[697,34.919]],["name/184-2",[]],["text/184-2",[]],["component/184-2",[]],["title/184-3",[90,12.711,599,12.119,1203,19.723,1464,22.968,2814,27.002]],["name/184-3",[]],["text/184-3",[]],["component/184-3",[]],["title/184",[49,15.159,471,24.962,564,25.254]],["name/184",[49,0.64,471,1.054,564,1.066]],["text/184",[5,3.1,6,2.349,7,1.711,10,2.297,11,2.314,13,1.197,14,1.37,27,1.525,31,1.351,35,1.931,40,0.842,49,3.075,50,2.673,84,1.728,90,1.329,99,2.163,104,1.667,127,1.66,136,2.024,145,1.786,168,1.37,200,1.879,221,2.807,223,1.458,240,1.211,244,4.069,266,4.065,295,3.19,298,4.569,471,3.671,473,3.701,484,1.953,494,2.281,509,3.218,510,2.163,511,3.218,512,2.147,521,3.02,528,2.965,558,2.38,564,3.045,573,1.296,574,3.218,655,2.319,697,2.793,710,2.012,730,3.218,759,3.263,870,2.147,925,3.027,930,2.783,936,2.339,951,2.163,965,1.953,1125,2.524,1188,2.524,1203,2.063,1231,2.524,1427,2.472,1555,2.744,1610,3.218,1669,3.635,1670,3.635,1671,3.3,1672,2.914,1673,3.635,1674,4.069,1675,3.635,1676,3.218,1677,2.965,1678,3.635,1679,3.635,1680,3.635,1681,3.635,1682,5.601,1683,3.635,1684,3.635,1685,3.635,1686,3.635,1687,3.635,1688,3.635,1689,3.635,1690,3.635,1691,3.635,1692,3.635,1693,3.635,1694,3.635,1695,3.635,1696,3.218,1697,3.635,1698,3.145,1699,3.635,1700,3.635,1701,3.635,1702,3.635,1703,3.635,1704,3.635,1705,3.635,1706,3.3,1707,3.635,1708,3.635,1709,3.635,1710,3.635,1711,3.635,1712,3.635,1713,3.635,1714,3.635,1715,3.736,1716,3.889,1717,3.635,2905,3.145,2955,3.799,2956,3.736]],["component/184",[79,0.574]],["title/185-1",[90,20.428,258,49.446]],["name/185-1",[]],["text/185-1",[]],["component/185-1",[]],["title/185-2",[90,20.428,746,31.902]],["name/185-2",[]],["text/185-2",[]],["component/185-2",[]],["title/185-3",[90,20.428,785,49.446]],["name/185-3",[]],["text/185-3",[]],["component/185-3",[]],["title/185-4",[90,20.428,2814,43.394]],["name/185-4",[]],["text/185-4",[]],["component/185-4",[]],["title/185",[90,16.99,176,18.839,199,18.369]],["name/185",[90,0.717,176,0.795,199,0.775]],["text/185",[4,1.101,7,1.402,14,1.942,20,0.944,27,1.076,28,1.63,30,0.881,39,1.395,40,0.982,45,1.306,46,2.414,47,0.967,49,2.273,54,1.084,64,0.639,66,1.255,87,1.387,90,2.301,94,1.326,109,1.495,112,2.22,114,1.447,123,2.564,150,1.447,176,2.825,199,2.967,200,2.192,201,1.849,210,1.208,219,2.552,221,1.286,234,0.993,240,1.412,244,3.08,245,2.675,256,1.651,266,3.744,295,3.503,435,1.571,461,1.348,465,1.745,473,1.695,484,4.461,486,2.146,488,1.701,508,2.575,510,1.527,516,1.597,526,2.305,531,1.864,551,1.695,552,2.682,553,2.057,555,2.944,558,4.562,565,1.821,570,1.447,573,1.931,591,3.115,596,1.495,597,2.24,599,1.478,601,1.187,616,1.937,636,2.774,641,4.796,697,2.114,699,1.781,731,1.738,758,1.849,767,1.142,776,3.246,785,3.753,790,2.22,793,3.271,795,1.527,816,1.56,831,1.745,834,2.173,884,1.781,894,1.781,900,1.348,909,1.56,914,3.246,925,1.387,930,1.964,1023,3.294,1075,1.887,1089,2.728,1110,3.294,1159,3.753,1173,3.753,1194,3.753,1196,3.753,1202,1.887,1203,2.406,1209,2.093,1217,1.665,1218,3.845,1365,1.781,1369,3.246,1464,2.802,1465,1.651,1468,2.271,1584,1.623,1587,1.937,1649,1.821,1674,3.936,1718,4.145,1719,6.292,1720,4.239,1721,1.781,1722,2.093,1723,2.566,1724,2.566,1725,2.271,1726,2.566,1727,2.566,1728,2.566,1729,2.093,1730,4.239,1731,3.592,1732,2.566,1733,2.566,1734,2.566,1735,2.093,1736,2.566,1737,2.566,2905,5.444]],["component/185",[79,0.574]],["title/186-1",[56,20.856,433,32.255,1738,46.453]],["name/186-1",[]],["text/186-1",[]],["component/186-1",[]],["title/186-2",[240,15.476,441,25.403,999,37.893]],["name/186-2",[]],["text/186-2",[]],["component/186-2",[]],["title/186-3",[8,29.944]],["name/186-3",[]],["text/186-3",[]],["component/186-3",[]],["title/186",[430,38.757]],["name/186",[430,2.296]],["text/186",[4,2.76,8,3.118,14,1.573,19,1.843,28,1.271,30,3.025,36,1.335,38,2.988,40,0.766,56,3.56,64,1.815,71,2.911,88,1.779,114,1.863,120,3.405,144,1.529,147,2.108,161,2.057,166,1.807,168,3.32,219,1.556,240,3.265,255,2.695,397,1.673,430,4.389,431,4.21,433,4.464,435,2.938,436,3.981,438,2.294,440,4.002,441,4.605,443,3.733,445,4.671,496,2.09,501,1.966,556,2.53,563,4.17,573,1.178,599,1.152,696,3.114,746,1.887,758,1.441,870,1.952,898,1.84,899,2.607,916,2.53,981,2.53,992,2.319,999,2.695,1008,1.6,1034,3.981,1035,2.53,1043,4.603,1044,2.65,1051,2.401,1056,2.81,1060,2.345,1077,2.925,1094,2.09,1716,4.464,1739,2.925,1740,3.611,1741,2.925,1742,2.925,1743,5.692,1744,3.304,1745,3.304,1746,4.923,1747,2.799,1748,3.304,1749,2.607,1750,2.925,1751,2.925,1752,2.695,1753,3.304,1754,3.304,1755,2.925,1756,2.925,1757,3.304,1758,2.925,1759,3.304,1760,3.304,1761,3.304,1762,2.925,1763,3.304,1764,3.304,1765,3.304]],["component/186",[79,0.574]],["title/187-1",[759,40.802]],["name/187-1",[]],["text/187-1",[]],["component/187-1",[]],["title/187-2",[19,14.115,758,24.364]],["name/187-2",[]],["text/187-2",[]],["component/187-2",[]],["title/187-3",[450,36.25,743,35.046]],["name/187-3",[]],["text/187-3",[]],["component/187-3",[]],["title/187",[19,17.696]],["name/187",[83,2.18]],["text/187",[5,1.375,6,1.042,7,1.646,10,1.019,11,1.027,13,0.818,14,2.534,19,2.325,30,0.853,33,1.903,34,1.588,36,1.004,38,1.155,40,1.43,43,1.059,46,0.861,47,1.996,49,1.347,64,1.536,71,3.971,73,3.963,74,1.547,88,1.91,90,2.256,92,2.457,115,2.059,116,2.2,127,1.135,132,1.523,136,1.384,138,1.008,154,1.215,156,1.784,159,1.511,168,0.936,175,2.105,179,4.429,197,1.805,199,1.633,201,1.084,210,1.171,217,1.393,222,1.155,229,4.379,230,4.197,231,5.033,234,0.962,240,2.055,253,2.95,254,3.351,300,2.704,301,2.2,381,1.69,390,2.704,397,2.091,408,3.789,435,0.921,449,1.335,488,0.997,494,1.559,499,1.384,508,1.181,526,1.351,539,1.708,573,0.886,592,2.507,593,2.2,599,0.867,611,1.674,717,1.627,723,4.247,725,3.655,731,1.019,736,1.306,743,2.591,758,1.801,759,1.448,893,1.511,894,1.726,933,1.5,958,2.2,967,1.523,1008,1.204,1097,1.599,1098,1.13,1099,1.599,1109,4.321,1247,1.559,1257,2.2,1286,1.292,1287,3.64,1391,1.744,1715,2.754,1746,1.903,1766,1.903,1767,2.2,1768,2.065,1769,2.485,1770,2.485,1771,2.2,1772,2.2,1773,2.485,1774,2.485,1775,1.903,1776,2.485,1777,2.485,1778,2.485,1779,5.655,1780,2.485,1781,3.655,1782,2.485,1783,2.485,1784,2.485,1785,2.2,1786,5.585,1787,2.485,1788,2.485,1789,2.485,1790,2.485,1791,6.846,1792,3.43,1793,2.485,1794,2.485,1795,2.485,1796,4.129,1797,2.485,1798,2.485,1799,2.485,1800,2.485,2956,1.658]],["component/187",[79,0.574]],["title/188",[240,18.608,428,38.782]],["name/188",[240,0.887,428,1.849]],["text/188",[4,1.687,7,2.153,13,1.294,14,2.1,28,1.511,30,2.462,31,1.461,36,1.588,40,2.093,66,3.506,71,1.779,73,1.989,88,2.204,89,2.507,93,2.55,105,3.874,111,3.623,113,3.479,119,1.885,120,3.892,154,1.921,176,1.594,201,1.714,208,3.588,234,2.302,240,3.357,246,3.176,428,6.512,431,2.573,461,2.065,479,2.29,599,1.37,615,2.528,700,2.202,710,3.29,744,2.493,759,2.29,832,2.446,857,3.479,895,2.486,898,2.188,925,4.32,992,2.758,1032,2.967,1076,4.618,1142,3.053,1740,2.728,1766,3.009,1801,3.929,1802,3.929,1803,3.479,1804,3.009,1805,3.479,1806,3.1,1807,3.929,1808,3.929,1809,5.944,1810,5.944,1811,2.274,1812,8.585,1813,3.929]],["component/188",[79,0.574]],["title/189-1",[217,31.298,696,27.051]],["name/189-1",[]],["text/189-1",[]],["component/189-1",[]],["title/189-2",[253,31.104,254,35.333]],["name/189-2",[]],["text/189-2",[]],["component/189-2",[]],["title/189-3",[430,30.914,431,36.575]],["name/189-3",[]],["text/189-3",[]],["component/189-3",[]],["title/189-4",[56,20.856,430,25.711,433,32.255]],["name/189-4",[]],["text/189-4",[]],["component/189-4",[]],["title/189-5",[64,9.898,240,13.247,440,24.749,441,21.744]],["name/189-5",[]],["text/189-5",[]],["component/189-5",[]],["title/189-6",[64,9.898,240,13.247,441,21.744,443,28.545]],["name/189-6",[]],["text/189-6",[]],["component/189-6",[]],["title/189-7",[40,8.053,64,8.652,240,11.579,440,21.633,445,25.249]],["name/189-7",[]],["text/189-7",[]],["component/189-7",[]],["title/189-8",[49,18.227,554,45.561]],["name/189-8",[]],["text/189-8",[]],["component/189-8",[]],["title/189",[168,26.384]],["name/189",[168,1.563]],["text/189",[8,2.62,14,1.961,19,1.467,20,0.412,28,1.573,30,2.701,31,0.416,35,2.174,36,1.145,38,0.52,40,1.655,43,2.734,45,0.569,47,0.421,49,1.335,54,0.473,56,3.298,58,0.496,60,0.948,62,1.38,64,2.031,67,0.894,73,0.566,84,0.974,88,2.155,105,0.822,114,0.631,120,2.679,123,0.529,126,0.702,127,0.936,137,0.647,141,1.134,143,0.619,147,1.307,158,1.724,163,1.671,166,1.55,168,1.322,169,0.524,199,0.442,201,1.237,217,0.627,218,1.255,219,1.652,222,0.52,240,3.479,241,0.746,242,2.699,252,1.296,253,3.574,254,1.296,255,1.671,397,0.566,400,0.627,408,4.437,410,2.118,412,2.171,416,3.837,419,4.445,421,2.516,424,1.968,426,2.51,428,1.968,430,3.698,431,2.297,433,2.841,435,2.019,436,2.686,438,1.968,440,2.864,441,2.98,443,3.625,445,2.549,447,2.411,448,2.171,457,0.912,475,0.803,480,0.822,485,2.729,486,2.329,492,0.511,493,0.696,496,1.296,504,0.685,534,1.178,557,1.671,599,0.39,606,0.812,651,0.99,696,0.542,697,1.414,706,0.912,718,0.856,736,1.076,746,0.639,754,0.947,758,0.488,759,0.652,760,0.794,767,0.498,799,1.488,802,2.864,829,1.569,841,0.912,863,0.702,870,2.073,881,0.856,883,0.99,898,0.623,902,1.275,908,0.844,909,2.798,918,1.438,927,0.601,933,0.675,935,1.488,955,1.393,964,0.661,970,0.912,974,2.614,979,0.882,981,2.171,982,0.99,992,1.438,1006,0.882,1008,0.992,1021,1.526,1032,2.14,1034,0.856,1035,0.856,1039,1.532,1041,1.33,1044,0.897,1051,0.812,1056,3.138,1061,0.856,1066,0.912,1071,0.753,1076,0.869,1098,1.86,1148,0.929,1151,1.307,1185,0.99,1188,0.776,1203,0.635,1212,1.454,1218,0.794,1222,0.812,1229,0.812,1268,1.044,1277,0.822,1282,0.856,1337,1.488,1472,0.947,1660,0.947,1739,1.814,1740,1.968,1741,1.814,1742,2.51,1749,0.882,1750,3.106,1751,0.99,1752,2.313,1755,0.99,1756,1.814,1758,0.99,1762,0.99,1781,0.99,1806,1.616,1811,0.647,1814,1.118,1815,4.601,1816,1.814,1817,1.118,1818,1.118,1819,1.118,1820,1.118,1821,1.118,1822,1.118,1823,1.118,1824,1.118,1825,2.049,1826,1.118,1827,2.049,1828,1.118,1829,0.947,1830,1.118,1831,0.99,1832,1.118,1833,0.99,1834,3.508,1835,1.118,1836,4.434,1837,1.118,1838,2.835,1839,1.118,1840,1.118,1841,2.049,1842,1.118,1843,2.049,1844,1.118,1845,0.897,1846,1.118,1847,1.118,1848,2.049,1849,0.99,1850,1.118,1851,2.835,1852,1.118,1853,0.99,1854,1.118,1855,0.968,1856,1.118,1857,1.118,1858,0.947,1859,0.947,1860,3.106,1861,1.814,1862,1.118,1863,4.824,1864,1.814]],["component/189",[79,0.574]],["title/190",[88,11.336,240,15.476,408,25.711]],["name/190",[88,0.478,240,0.653,408,1.085]],["text/190",[7,0.9,13,1.33,14,2.316,19,1.534,27,2.545,38,1.877,40,0.936,43,2.585,45,2.055,49,2.379,88,2.476,143,2.235,168,2.286,222,1.877,240,3.581,241,2.694,253,4.059,408,5.514,410,4.4,412,4.646,416,6.03,419,4.646,421,4.432,424,5.061,589,3.839,606,2.934,631,2.17,696,1.956,726,4.646,1008,1.956,1062,3.421,1097,2.598,1098,2.759,1099,2.598,1102,3.667,1775,3.092,1811,2.337,1860,3.575,1863,3.575,1864,3.575,1865,4.039,1866,2.621,1867,6.068,1868,4.039,1869,4.039,1870,4.039,1871,4.039,1872,4.039,1873,4.039,1874,4.039,1875,4.039,1876,4.039,1877,4.039,1878,4.039,1879,4.039,1880,3.575,1881,4.039,1882,4.039,1883,3.575,1884,4.039]],["component/190",[79,0.574]],["title/191-1",[253,31.104,453,32.112]],["name/191-1",[]],["text/191-1",[]],["component/191-1",[]],["title/191-2",[19,14.115,253,31.104]],["name/191-2",[]],["text/191-2",[]],["component/191-2",[]],["title/191",[40,12.943,253,31.104]],["name/191",[40,0.617,253,1.483]],["text/191",[4,1.614,7,1.555,8,1.608,14,2.388,19,2.244,28,1.446,30,1.974,38,1.748,40,1.617,64,2.21,67,1.64,70,1.934,71,2.603,73,1.904,88,2.055,90,1.375,123,1.779,127,1.717,141,2.081,145,1.848,151,2.508,168,2.166,212,1.998,219,1.771,223,1.508,229,2.669,230,2.558,240,2.958,246,2.009,253,5.723,254,4.414,300,2.462,390,2.462,408,4.325,416,5.867,419,4.401,441,2.056,486,3.533,599,2.004,696,1.821,699,4.845,909,3.496,946,2.176,1066,3.067,1097,2.419,1098,1.71,1099,2.419,1148,4.775,1151,2.399,1287,2.584,1672,3.015,1715,2.508,1716,2.611,1743,3.329,1746,2.879,1772,3.329,1775,2.879,1779,2.879,1785,3.329,1786,3.067,1816,5.089,1831,3.329,1885,3.624,1886,3.76,1887,3.76,1888,3.76,1889,3.76,1890,3.329,1891,3.76,1892,3.76,1893,3.76,1894,3.76,1895,3.76,1896,3.76,1897,3.76]],["component/191",[79,0.574]],["title/192-1",[111,15.95,236,26.78,636,13.286,748,24.749]],["name/192-1",[]],["text/192-1",[]],["component/192-1",[]],["title/192",[234,17.987,236,31.287,636,15.522]],["name/192",[234,0.759,236,1.321,636,0.655]],["text/192",[4,3.533,13,2.33,14,2.75,20,1.835,36,2.014,40,1.155,46,2.453,47,1.878,49,1.627,67,2.175,71,3.726,88,2.008,111,2,118,2.885,210,2.348,234,1.93,236,3.358,479,2.905,486,2.524,488,2,553,6.598,569,2.945,571,3.579,610,2.37,636,2.365,721,2.829,748,3.103,759,2.905,805,3.461,832,3.103,835,3.358,860,4.005,927,2.679,946,2.885,1318,4.067,1804,3.817,1898,8.229,1899,8.229,1900,4.985,1901,4.985,1902,4.985,1903,4.985,1904,4.985,1905,4.985,1906,4.985,1907,4.985,1908,4.985,1909,4.985]],["component/192",[79,0.574]],["title/193",[49,12.975,234,15.396,471,21.366,498,25.364]],["name/193",[49,0.506,234,0.601,471,0.834,498,0.99]],["text/193",[4,2.514,13,1.928,20,2.156,31,3.569,34,2.252,49,3.132,79,1.169,81,3.484,89,3.735,94,4.633,104,2.686,114,3.302,119,2.809,138,3.209,144,2.709,161,3.645,219,2.758,234,3.064,295,2.733,450,3.8,471,4.252,492,2.674,498,5.717,596,3.412,601,2.709,611,3.944,636,2.644,767,2.607,967,3.588,1276,5.184,1555,5.974,1645,5.184,1718,3.484,1804,4.483,1910,5.184,1911,5.855,1912,5.855,1913,5.855,1914,5.855,1915,3.704,1916,5.467]],["component/193",[79,0.574]],["title/194",[52,15.616,234,17.987,915,29.387]],["name/194",[52,0.659,234,0.759,915,1.24]],["text/194",[7,1.002,14,2.659,30,1.544,31,3.175,34,2.527,36,1.817,40,1.042,52,2.871,71,2.036,88,1.604,138,1.824,217,2.52,219,2.118,234,1.741,449,2.416,477,2.676,484,2.416,486,2.277,492,2.054,497,3.387,500,3.911,534,2.585,597,4.8,601,2.081,631,2.416,636,1.503,755,2.35,860,3.819,915,2.845,953,2.52,967,2.756,1097,2.893,1098,2.045,1099,2.893,1111,4.664,1151,2.869,1217,2.919,1349,5.36,1351,2.893,1427,4.47,1766,3.443,1917,6.967,1918,4.497,1919,3.606,1920,3.267,1921,5.18,1922,6.571,1923,3.81,1924,4.497,1925,5.817,1926,3.981,1927,4.497,1928,4.497,1929,4.497,1930,4.497,1931,4.497,1932,3.981,1933,4.497,1934,3.981]],["component/194",[79,0.574]],["title/195-1",[31,26.034]],["name/195-1",[]],["text/195-1",[]],["component/195-1",[]],["title/195-2",[234,17.987,266,27.639,471,24.962]],["name/195-2",[]],["text/195-2",[]],["component/195-2",[]],["title/195-3",[13,15.293,34,17.863,570,26.194]],["name/195-3",[]],["text/195-3",[]],["component/195-3",[]],["title/195",[49,15.159,234,17.987,471,24.962]],["name/195",[49,0.64,234,0.759,471,1.054]],["text/195",[7,1.263,14,2.669,20,0.801,27,0.912,28,2.18,30,0.747,31,2.107,34,2.18,38,1.011,40,1.471,43,1.573,45,1.879,47,1.391,49,2.939,52,2.319,54,0.919,58,2.815,62,1.465,64,0.542,66,1.064,67,0.949,71,0.985,84,1.034,88,1.174,90,0.796,95,1.451,109,1.268,119,1.044,123,1.747,135,1.451,138,2.299,144,1.708,145,1.069,146,1.268,152,1.354,156,1.562,207,1.268,218,1.333,221,1.85,223,0.873,232,3.012,233,1.354,234,2.458,244,2.682,245,1.074,266,2.197,404,1.376,435,1.782,449,1.169,452,1.665,471,4.487,488,0.873,497,0.949,506,1.58,516,2.298,526,2.007,558,2.418,561,1.51,569,1.285,570,2.712,573,2.263,579,1.621,590,1.211,591,2.123,597,2.541,599,0.759,631,1.169,632,1.774,636,2.586,715,1.412,721,1.234,731,0.892,739,1.276,743,1.365,744,0.912,757,1.495,767,1.644,804,1.204,851,1.58,852,2.197,860,2.151,870,2.181,872,3.012,895,1.376,915,1.376,930,1.665,967,2.263,970,1.774,973,1.926,979,1.716,988,1.665,1008,1.054,1013,1.376,1055,1.58,1056,1.176,1089,3.095,1091,1.376,1110,1.69,1125,1.51,1189,1.774,1190,1.58,1198,1.527,1203,1.234,1217,2.396,1220,1.744,1238,1.58,1287,1.495,1473,2.868,1556,3.128,1649,2.62,1674,1.58,1677,1.774,1721,1.51,1766,1.665,1803,1.926,1811,1.259,1845,1.744,1866,1.412,1932,1.926,1934,1.926,1935,2.175,1936,2.175,1937,3.692,1938,2.175,1939,2.175,1940,1.744,1941,2.175,1942,3.692,1943,2.175,1944,2.175,1945,2.175,1946,2.175,1947,2.175,1948,2.175,1949,1.926,1950,2.175,1951,2.175,1952,1.69,1953,2.175,1954,1.926,1955,2.175,1956,2.175,1957,2.175,1958,2.175,1959,1.926,1960,2.175,1961,2.175,1962,2.175,1963,2.175,1964,2.175,1965,2.175,1966,2.175,1967,2.175,1968,6.899,1969,2.175,1970,2.175,1971,2.175,1972,2.175,1973,2.175,1974,2.175,1975,2.175,1976,2.175,1977,2.175,1978,2.175,1979,2.175]],["component/195",[79,0.574]],["title/196",[54,14.689,60,16.081,87,18.784,88,8.481,435,12.879]],["name/196",[54,0.543,60,0.594,87,0.694,88,0.313,435,0.476]],["text/196",[14,1.829,27,1.768,28,1.621,30,1.447,31,1.567,36,1.703,40,1.452,43,1.795,46,2.869,49,2.44,52,1.417,54,2.648,64,1.049,67,2.733,71,1.908,87,2.278,88,1.028,99,2.508,111,1.691,119,2.022,123,2.964,127,2.861,154,2.061,176,1.709,216,4.608,234,2.426,295,4.704,435,3.067,450,2.735,453,2.423,461,2.214,485,2.811,488,3.549,504,2.583,526,3.406,534,2.423,548,2.362,565,2.991,575,3.438,596,2.456,597,5.211,598,5.875,599,2.184,636,2.093,717,2.76,744,1.768,853,3.731,898,2.347,900,2.214,902,2.623,933,2.544,1004,3.227,1008,2.041,1039,4.474,1193,3.438,1511,3.062,1718,2.508,1725,3.731,1792,3.501,1980,4.214,1981,3.379,1982,4.214,1983,6.264,1984,4.214,1985,3.182,1986,3.731,1987,6.264]],["component/196",[79,0.574]],["title/197-1",[94,28.875,245,27.578]],["name/197-1",[]],["text/197-1",[]],["component/197-1",[]],["title/197-2",[94,28.875,877,31.902]],["name/197-2",[]],["text/197-2",[]],["component/197-2",[]],["title/197-3",[94,24.015,636,15.522,877,26.533]],["name/197-3",[]],["text/197-3",[]],["component/197-3",[]],["title/197-4",[94,24.015,877,26.533,1735,37.893]],["name/197-4",[]],["text/197-4",[]],["component/197-4",[]],["title/197-5",[28,21.478,1088,38.379]],["name/197-5",[]],["text/197-5",[]],["component/197-5",[]],["title/197-6",[28,17.863,1088,31.919,1674,33.748]],["name/197-6",[]],["text/197-6",[]],["component/197-6",[]],["title/197-7",[14,8.502,28,13.365,54,14.689,573,12.389,1088,23.881]],["name/197-7",[]],["text/197-7",[]],["component/197-7",[]],["title/197-8",[145,34.406]],["name/197-8",[]],["text/197-8",[]],["component/197-8",[]],["title/197-9",[234,27.114]],["name/197-9",[]],["text/197-9",[]],["component/197-9",[]],["title/197-10",[119,19.077,410,24.003,564,21.616,636,13.286]],["name/197-10",[]],["text/197-10",[]],["component/197-10",[]],["title/197",[49,15.159,94,24.015,498,29.633]],["name/197",[83,2.18]],["text/197",[3,0.938,7,0.364,13,0.197,14,2.254,19,0.151,20,2.096,27,2.596,28,1.243,30,0.391,31,0.423,35,0.317,36,1.882,38,0.529,40,0.483,41,0.659,42,0.929,43,1.984,45,0.58,46,1.695,47,0.429,49,2.384,53,0.388,54,0.881,56,0.511,58,0.265,60,0.276,61,0.529,63,0.791,64,0.886,66,1.408,67,1.256,71,0.516,73,0.577,79,0.119,81,0.355,82,0.369,84,0.776,87,0.323,90,0.417,92,0.355,93,0.388,94,3.828,95,1.089,102,0.399,104,0.522,105,0.457,108,1.422,109,0.348,111,1.55,119,2.452,120,0.391,121,0.316,123,0.772,126,0.375,127,1.894,128,0.958,130,0.353,132,0.366,136,0.333,137,0.346,138,1.311,141,1.97,142,0.479,143,0.63,144,1.156,145,0.802,146,1.214,147,1.041,149,0.688,150,0.642,152,0.372,154,0.557,157,0.827,158,1.751,161,2.9,164,0.434,165,0.339,166,0.623,167,1.206,169,1.171,171,1.099,180,0.715,199,0.236,205,3.151,207,0.348,209,0.419,213,1.277,214,0.791,216,0.439,217,0.335,219,0.537,222,0.278,223,0.24,233,0.372,234,1.605,240,1.077,245,1.029,246,0.872,251,1.089,252,0.378,254,1.58,256,0.733,266,0.355,381,0.406,397,0.302,398,0.348,400,1.167,410,2.813,424,0.415,435,1.067,447,0.783,449,0.877,451,0.384,458,0.753,471,1.913,472,0.529,475,1.793,477,1.24,479,1.455,482,0.739,483,0.434,484,0.321,485,0.399,488,1.869,489,0.529,490,0.457,492,0.52,495,0.529,496,0.378,497,0.909,498,2.464,502,0.434,505,0.496,506,0.827,508,0.284,513,0.529,519,0.827,523,0.958,527,0.76,528,0.487,531,0.434,534,1.436,538,0.487,548,0.335,550,0.899,551,0.395,552,2.045,554,0.487,558,0.391,559,0.517,564,1.757,567,0.487,569,0.673,571,0.818,573,0.582,588,0.872,590,1.603,591,0.343,592,0.283,594,2.156,596,0.348,597,3.1,599,0.208,601,0.527,602,0.827,604,0.487,606,1.514,611,2.602,615,0.733,617,0.529,618,0.574,620,1.7,623,1,624,0.929,636,2.621,637,0.746,675,0.818,694,1.88,696,0.289,697,0.298,700,0.335,705,0.76,707,1.146,710,0.903,716,0.457,721,0.339,724,1.432,731,1.91,734,0.395,735,0.434,736,0.314,738,0.929,739,0.668,743,0.375,744,1.62,745,0.746,755,0.595,759,0.664,767,0.727,768,0.471,795,0.971,796,0.727,802,0.372,804,0.63,805,0.415,808,0.457,809,0.346,819,0.487,831,1.11,835,0.402,836,0.799,837,1.089,840,0.399,842,0.872,844,0.872,845,2.116,849,0.402,852,1.713,854,1.329,860,0.509,862,0.827,863,0.715,865,0.434,870,0.673,871,0.434,877,0.651,878,0.929,880,1.25,884,0.415,885,1.636,886,1.008,891,0.429,895,0.378,897,0.415,898,0.333,900,2.03,901,0.958,902,1.792,912,0.929,913,0.471,914,0.457,922,0.529,927,1.342,932,0.457,934,1.008,936,0.384,942,0.496,943,0.496,946,0.346,956,1.595,957,0.378,959,0.439,964,0.353,965,0.321,974,0.849,976,0.471,980,1.651,981,1.25,988,0.457,989,0.391,990,1.844,992,0.799,993,0.487,995,0.479,998,0.529,1002,0.487,1007,0.457,1010,0.419,1013,0.378,1021,0.445,1022,1.172,1023,0.464,1027,0.457,1029,1.332,1032,0.451,1041,0.388,1046,1.445,1052,0.358,1056,0.323,1060,1.479,1068,1.186,1069,0.439,1070,0.529,1071,1.403,1088,0.783,1089,2.668,1091,0.721,1092,0.529,1094,0.378,1096,0.487,1110,1.619,1126,0.479,1137,0.659,1142,0.464,1182,0.487,1184,0.529,1189,0.487,1190,0.434,1191,3.905,1198,0.419,1209,0.487,1215,0.457,1216,0.529,1217,1.059,1218,0.424,1220,2.003,1222,0.434,1224,0.439,1225,0.529,1233,0.429,1246,0.457,1249,1.844,1272,1.383,1278,1.158,1279,0.965,1282,0.457,1285,3.151,1322,0.369,1350,0.487,1351,0.384,1354,1.912,1355,1.25,1361,0.415,1378,0.529,1379,0.529,1391,0.419,1465,0.733,1470,0.529,1473,0.464,1474,1.971,1475,0.479,1511,2.586,1601,0.487,1663,0.457,1674,2.092,1676,1.008,1715,0.76,1718,0.678,1721,0.415,1722,1.7,1735,0.487,1747,0.506,1752,0.487,1768,0.496,1805,0.529,1811,1.871,1855,0.517,1858,0.965,1859,0.965,1940,0.479,1949,0.529,1952,0.885,1959,1.008,1981,0.479,1985,0.451,1992,0.384,1993,0.457,1998,0.487,1999,1.309,2002,0.457,2004,1.7,2007,0.529,2037,0.597,2038,0.529,2039,0.597,2040,1.139,2041,0.506,2042,0.471,2043,0.558,2044,1.139,2045,0.597,2046,1.139,2047,1.632,2048,2.498,2049,1.139,2050,1.139,2051,0.597,2052,3.232,2053,1.008,2054,0.597,2055,0.597,2056,1.139,2057,1.139,2058,0.597,2059,0.597,2060,0.597,2061,0.597,2062,0.597,2063,0.597,2064,0.597,2065,0.597,2066,0.597,2067,0.597,2068,1.139,2069,0.597,2070,0.597,2071,0.597,2072,0.597,2073,1.524,2074,0.597,2075,0.529,2076,1.139,2077,0.597,2078,1.063,2079,0.597,2080,1.008,2081,0.597,2082,0.517,2083,0.597,2084,0.597,2085,1.008,2086,1.139,2087,0.597,2088,0.597,2089,1.008,2090,1.139,2091,0.597,2092,0.529,2093,0.597,2094,0.529,2095,0.597,2096,0.597,2097,0.529,2098,0.597,2099,0.597,2100,0.597,2101,0.529,2102,0.529,2103,0.597,2104,0.597,2105,1.139,2106,1.632,2107,0.558,2108,0.597,2109,0.597,2110,0.529,2111,1.632,2112,0.445,2113,0.597,2114,0.597,2115,0.576,2116,0.597,2117,0.529,2118,0.597,2119,0.597,2120,1.844,2121,0.597,2122,0.597,2123,0.597,2124,0.597,2125,0.597,2126,0.597,2127,0.597,2128,0.597,2129,0.597,2130,1.139,2131,0.597,2132,0.597,2133,0.597,2134,0.597,2135,0.597,2136,0.597,2137,0.597,2138,0.597,2139,0.597,2140,0.597,2141,0.597,2142,0.597,2143,0.597,2144,0.597,2145,0.597,2146,0.597,2147,0.597,2148,0.597,2149,0.597,2150,0.597,2151,0.597,2152,0.597,2153,0.597,2154,0.929,2155,0.529,2156,0.597,2157,0.597,2158,1.139,2159,0.597,2160,0.597,2161,0.597,2162,0.529,2163,0.597,2164,1.803,2165,0.506,2166,1.139,2167,0.529,2168,0.529,2169,0.487,2170,0.576,2171,0.529,2172,0.529,2173,0.597,2174,0.597,2175,0.597,2176,0.597,2177,0.597,2178,0.929,2179,0.597,2180,0.529,2181,0.597,2182,0.597,2183,0.597,2184,0.597,2185,0.597,2186,0.542,2187,0.529,2188,0.597,2189,0.597,2190,0.597,2191,0.597,2192,0.529,2193,0.597,2194,0.597,2195,0.464,2196,0.597,2197,0.597,2198,0.597,2199,0.597,2200,0.597,2201,0.597,2202,0.597,2203,0.597,2204,0.529,2205,1.632,2206,0.597,2207,0.597,2208,0.597,2209,0.597,2210,0.597,2211,0.597,2212,0.597,2213,0.597,2214,0.597,2215,0.542,2216,0.457,2217,0.597,2218,0.597,2219,0.517,2220,0.558,2221,0.487,2222,0.597,2223,0.597,2224,0.597,2225,0.487,2226,0.597,2227,0.529,2228,0.597]],["component/197",[79,0.574]],["title/198",[618,28.134,2229,45.561]],["name/198",[618,1.341,2229,2.172]],["text/198",[14,2.369,19,0.901,20,1.831,27,1.495,28,1.371,30,1.224,31,1.325,34,1.013,36,2.009,38,0.686,40,0.61,43,0.629,45,1.34,46,0.913,47,0.992,49,1.163,50,1.086,53,0.958,58,0.654,64,0.656,66,0.722,67,1.149,73,0.747,78,0.919,87,1.423,88,0.36,94,4.337,104,0.677,105,1.056,108,1.3,109,0.86,111,0.592,119,0.708,121,0.78,127,1.203,128,1.545,138,1.757,141,1.457,144,1.218,146,1.534,148,1.204,154,1.743,158,0.898,165,1.494,169,0.692,171,4.948,212,0.784,213,0.904,214,1.025,215,1.13,219,1.24,220,1.988,234,0.571,236,0.994,240,0.877,245,1.3,251,0.985,295,0.689,400,0.827,404,0.934,436,3.316,440,2.219,466,1.114,479,2.077,482,2.314,488,0.592,498,2.274,501,3.283,504,0.904,523,0.866,550,1.164,561,3.007,564,0.802,590,2.412,594,1.757,597,3.378,599,0.515,601,1.218,602,1.072,610,1.252,618,1.796,620,1.204,633,1.13,636,0.88,637,0.966,694,1.391,702,0.911,715,0.958,721,0.838,738,4.501,744,1.495,745,1.724,759,2.524,767,0.657,795,0.878,799,2.59,809,1.524,817,2.59,831,1.791,836,1.848,837,0.985,840,0.985,856,1.307,865,1.072,877,2.036,881,1.13,884,1.025,895,0.934,900,1.873,901,2.541,902,0.919,908,1.114,926,1.307,933,0.891,936,2.294,941,2.692,945,1.014,946,0.854,948,0.985,955,1.004,957,0.934,964,2.938,965,1.415,976,1.164,978,1.204,980,1.74,1006,4.353,1008,0.715,1020,2.331,1029,2.148,1031,1.307,1033,2.331,1035,2.016,1041,0.958,1052,0.884,1068,2.59,1071,0.994,1095,3.669,1172,1.13,1190,1.072,1222,3.147,1226,2.331,1227,2.278,1229,1.913,1231,1.025,1247,0.926,1250,2.331,1270,1.114,1277,1.086,1351,0.95,1353,1.828,1354,3.807,1355,3.316,1364,1.025,1369,1.13,1391,1.036,1511,1.072,1601,1.204,1677,1.204,1715,0.985,1716,1.025,1722,1.204,1811,2.878,1853,5.299,1866,1.709,1954,1.307,1981,2.111,1993,1.13,1998,1.204,1999,2.111,2053,2.331,2075,1.307,2080,1.307,2082,1.277,2092,1.307,2094,2.331,2097,1.307,2101,2.331,2102,3.156,2110,1.307,2112,1.1,2154,1.204,2172,1.307,2227,1.307,2229,1.204,2230,1.476,2231,2.633,2232,1.34,2233,1.476,2234,1.307,2235,1.476,2236,1.476,2237,1.476,2238,1.476,2239,1.476,2240,1.476,2241,1.476,2242,1.476,2243,1.476,2244,1.476,2245,4.973,2246,1.476,2247,7.346,2248,1.476,2249,3.565,2250,2.633,2251,1.476,2252,2.633,2253,1.476,2254,1.476,2255,2.633,2256,3.565,2257,3.565,2258,6.393,2259,5.986,2260,4.331,2261,4.973,2262,2.633,2263,1.476,2264,2.458,2265,1.476,2266,3.565,2267,1.378,2268,1.476,2269,1.476,2270,1.476,2271,1.476,2272,1.476,2273,1.34,2274,1.476,2275,1.476,2276,1.422,2277,1.307,2278,1.476,2279,1.476]],["component/198",[79,0.574]],["title/199",[64,13.904,488,22.405]],["name/199",[83,2.18]],["text/199",[7,1.074,14,2.505,30,1.655,46,2.799,47,1.816,52,1.62,64,1.72,67,3.014,71,3.657,73,2.44,74,4.301,81,2.868,88,1.686,104,3.169,130,2.848,138,1.955,141,2.668,150,4.554,169,2.26,245,2.38,435,1.786,449,2.59,488,4.107,492,2.201,496,3.049,500,3.48,508,3.285,534,2.771,573,2.879,590,2.684,592,3.269,731,3.617,744,2.022,767,2.146,923,3.545,925,2.605,933,4.171,967,2.954,1039,2.605,1123,3.932,1137,3.999,1214,3.591,1767,6.117,1921,5.885,1992,3.101,2112,3.591,2280,4.82,2281,4.5,2282,4.5]],["component/199",[79,0.574]],["title/200",[88,13.63,252,35.333]],["name/200",[83,2.18]],["text/200",[6,1.906,7,1.476,8,1.943,10,1.863,11,1.877,14,2.405,40,2.114,47,2.495,66,2.222,70,2.337,72,2.743,88,2.226,90,1.662,92,2.703,114,2.562,117,3.706,128,2.666,144,3.064,154,3.82,167,2.63,199,1.797,200,3.423,201,3.744,210,2.14,222,2.112,240,3.04,252,2.874,259,3.975,260,3.479,269,2.874,271,5.544,398,2.648,450,2.949,496,2.874,510,2.703,525,3.621,610,3.147,631,2.442,675,3.262,699,3.155,729,3.342,739,2.666,744,1.906,893,4.027,897,3.155,898,2.53,1090,3.643,1097,4.26,1098,3.011,1099,2.923,2356,7.001,2357,4.544,2358,4.544,2359,5.861,2522,2.763,2523,2.763,2556,4.242,2557,4.242,2956,3.031]],["component/200",[79,0.574]],["title/201-1",[19,17.696]],["name/201-1",[]],["text/201-1",[]],["component/201-1",[]],["title/201",[201,20.263,240,15.476,510,27.639]],["name/201",[201,0.855,240,0.653,510,1.167]],["text/201",[4,2.754,14,1.569,19,1.621,30,2.203,40,1.948,88,1.565,99,3.817,104,2.942,105,2.573,154,3.137,159,3.902,201,4.342,240,3.316,260,4.912,455,5.233,478,4.606,510,5.003,599,2.237,736,3.371,745,4.201,758,2.798,767,2.856,955,4.364,965,3.447,1027,4.912,1097,4.127,1098,2.917,1099,4.127,1175,5.679,1475,5.144,2117,5.679,2356,5.233,2359,5.679,2371,6.415,2372,6.415]],["component/201",[79,0.574]],["title/202-1",[52,13.366,573,14.173,2216,30.443,2373,35.2]],["name/202-1",[]],["text/202-1",[]],["component/202-1",[]],["title/202-2",[40,9.214,64,9.898,1464,26.276,1992,25.582]],["name/202-2",[]],["text/202-2",[]],["component/202-2",[]],["title/202",[137,32.327,578,40.098]],["name/202",[137,1.541,578,1.912]],["text/202",[4,2.092,7,1.086,13,1.605,14,2.512,20,1.794,31,1.812,34,1.874,38,2.265,40,1.614,46,1.689,52,3.279,71,2.207,87,2.634,88,1.189,101,4.315,105,2.794,119,2.338,144,2.255,145,3.422,225,5.411,232,3.976,234,1.887,479,2.84,486,2.468,492,3.181,497,2.126,499,2.714,508,3.311,510,2.9,573,2.897,596,4.058,597,2.575,599,2.429,631,2.619,633,3.732,636,1.629,852,2.9,904,3.541,947,3.01,962,4.406,1013,3.083,1053,4.129,1254,3.976,1464,3.221,1663,3.732,1672,3.908,1716,3.384,1917,3.976,1921,3.251,1925,4.315,2032,4.315,2216,6.222,2234,4.315,2373,4.315,2374,4.874,2375,4.874,2376,4.874,2377,4.315,2378,4.874,2379,4.874,2380,4.874]],["component/202",[79,0.574]],["title/203-1",[143,29.941,1527,31.552,2815,27.002,2930,32.449]],["name/203-1",[]],["text/203-1",[]],["component/203-1",[]],["title/203-2",[136,22.142,143,22.007,2815,30.891,2931,37.124]],["name/203-2",[]],["text/203-2",[]],["component/203-2",[]],["title/203",[40,10.764,64,11.564,143,25.711]],["name/203",[143,1.474,2815,2.069]],["text/203",[3,1.602,7,1.011,13,0.918,14,1.909,20,1.026,34,1.072,35,4.713,36,1.126,40,1.533,45,1.418,46,0.966,47,2.941,52,2.223,54,1.178,64,2.37,66,1.363,67,1.216,72,3.464,89,1.778,90,1.019,95,1.859,102,3.027,104,2.081,106,3.257,108,1.376,111,2.653,118,1.613,126,1.749,127,2.072,134,4.371,136,1.552,138,1.13,143,5.047,166,1.524,167,2.626,169,2.691,171,1.877,199,1.102,209,1.956,228,1.735,234,3.186,388,2.134,390,1.825,421,1.524,449,1.498,486,2.905,492,1.273,504,2.78,505,2.315,508,2.157,569,2.681,573,2.933,578,2.001,591,1.602,611,1.877,623,1.708,631,1.498,636,0.931,675,2.001,694,2.397,702,1.721,707,1.956,731,1.143,734,1.842,744,1.903,749,2.001,767,1.241,796,2.894,804,3.176,817,2.025,836,1.956,849,1.877,854,1.778,858,2.05,863,1.749,865,2.025,893,1.695,943,2.315,946,2.626,962,2.87,963,1.695,964,1.647,974,2.076,976,2.199,1008,1.35,1075,3.337,1233,2.001,1473,2.165,1584,1.763,1587,2.104,1618,2.53,1952,2.165,1995,2.315,2041,4.861,2186,2.53,2215,2.53,2306,2.315,2438,2.53,2697,3.769,2815,5.657,2916,2.602,2930,2.602,2931,6.175,2932,2.913,2934,2.913,2935,2.913,2936,2.913,2937,2.913,2938,2.913,2939,2.787,2940,2.913,2944,2.913,2945,2.913,2946,4.743,2947,2.913,2948,2.913,2949,2.913,2950,2.913,2951,2.913,2952,2.913,2953,2.913,2954,2.913,2974,2.913,2975,3.082]],["component/203",[79,0.574]],["title/204-1",[46,16.099,52,15.616,592,21.981]],["name/204-1",[]],["text/204-1",[]],["component/204-1",[]],["title/204-2",[20,17.101,52,15.616,573,16.559]],["name/204-2",[]],["text/204-2",[]],["component/204-2",[]],["title/204-3",[52,15.616,573,16.559,962,29.387]],["name/204-3",[]],["text/204-3",[]],["component/204-3",[]],["title/204",[52,18.776,64,13.904]],["name/204",[83,2.18]],["text/204",[3,2.929,4,1.382,7,1.135,14,2.213,20,3.065,27,3.284,28,2.763,34,1.959,35,2.706,45,1.638,46,2.713,47,2.708,49,1.662,52,3.598,54,2.153,60,1.489,64,1.573,71,2.306,73,1.63,88,0.785,108,2.515,119,1.544,138,2.066,141,1.782,145,1.582,169,2.389,208,1.943,219,1.516,220,2.43,381,2.189,449,1.73,458,2.127,492,1.47,493,2.004,508,3.005,573,3.878,592,3.705,597,2.691,731,1.32,744,2.136,755,1.682,802,2.004,851,2.339,866,3.098,893,1.958,925,1.74,931,2.43,941,2.43,962,5.721,967,1.973,1010,2.259,1203,4.078,1217,2.089,1240,2.85,1464,3.366,1465,2.071,1511,3.701,1866,2.089,1920,2.339,2004,2.626,2306,2.674,2381,3.219,2382,3.219,2383,3.219,2384,3.219,2385,3.219,2386,3.219,2387,3.219,2388,3.219,2389,3.219,2390,3.219,2391,2.85,2392,3.219,2393,3.219,2394,5.094,2395,3.219,2396,3.219]],["component/204",[79,0.574]],["title/205-1",[52,18.776,500,28.134]],["name/205-1",[]],["text/205-1",[]],["component/205-1",[]],["title/205-2",[52,18.776,1921,37.258]],["name/205-2",[]],["text/205-2",[]],["component/205-2",[]],["title/205-3",[453,40.259]],["name/205-3",[]],["text/205-3",[]],["component/205-3",[]],["title/205-4",[234,21.627,484,30.014]],["name/205-4",[]],["text/205-4",[]],["component/205-4",[]],["title/205",[52,15.616,500,23.399,1921,30.987]],["name/205",[449,1.054,500,0.988,1921,1.308]],["text/205",[7,1.832,13,1.368,14,1.016,30,2.128,31,1.544,34,1.597,38,1.931,40,1.718,46,3.047,52,3.782,89,2.65,104,1.905,130,2.454,145,2.041,154,2.031,199,1.643,217,2.328,219,1.957,221,2.082,484,3.33,500,4.645,573,3.134,588,3.181,590,2.313,596,2.421,611,2.798,631,2.232,633,6.732,749,4.449,767,1.85,845,4.058,866,2.527,885,2.72,901,2.437,904,3.018,915,2.628,962,4.69,1005,3.389,1013,5.199,1015,3.678,1068,4.503,1123,3.389,1151,3.954,1465,5.657,1917,3.389,1921,5.483,2397,4.154,2398,4.154,2399,6.197,2400,4.154,2401,4.154,2402,4.154,2403,4.154,2404,3.331]],["component/205",[79,0.574]],["title/206-1",[34,21.478,499,31.104]],["name/206-1",[]],["text/206-1",[]],["component/206-1",[]],["title/206-2",[421,38.293]],["name/206-2",[]],["text/206-2",[]],["component/206-2",[]],["title/206",[34,13.365,52,11.683,421,19.006,499,19.354,877,19.851]],["name/206",[421,2.269]],["text/206",[7,1.422,13,2.1,14,1.56,34,2.917,39,2.348,40,1.001,46,3.575,47,2.403,52,3.409,54,1.825,64,1.888,88,1.054,92,2.57,119,3.061,123,2.044,150,2.435,157,3.138,169,2.991,207,2.516,208,2.607,245,2.132,295,3.541,381,4.339,421,3.488,461,2.269,484,2.321,499,3.552,531,3.138,558,2.828,567,3.523,573,2.274,632,3.523,700,3.574,710,3.531,767,1.923,795,2.57,808,3.307,844,3.307,863,2.71,873,3.065,877,2.467,902,2.688,951,2.57,1049,3.823,1060,3.065,1190,3.138,1203,2.451,1224,3.176,1229,3.138,1238,4.634,1339,3.176,1351,2.779,1465,4.88,1536,3.523,1612,3.523,1614,3.823,1615,3.823,2021,3.823,2164,3.737,2404,3.463,2405,3.588,2406,4.319,2407,4.319,2408,4.319,2409,4.319,2410,4.319,2411,4.319,2412,4.319,2413,4.319,2414,4.319,2415,4.162]],["component/206",[79,0.574]],["title/207",[597,29.51,598,39.64]],["name/207",[597,1.407,598,1.89]],["text/207",[4,2.548,7,1.323,14,2.593,27,3.349,30,2.742,31,2.969,41,3.435,71,2.687,88,1.448,90,2.171,144,2.746,199,2.347,234,2.298,295,3.728,497,2.589,597,4.219,598,6.404,618,4.022,636,2.668,915,3.755,947,4.931,953,3.326,962,3.755,1071,3.997,1716,4.121,1779,4.544,1920,4.312,1926,5.254,2340,5.254,2377,5.254,2416,4.841,2417,5.277,2418,7.985,2419,5.935,2420,5.935,2421,5.935]],["component/207",[79,0.574]],["title/208-1",[64,11.564,589,29.387,731,19.048]],["name/208-1",[]],["text/208-1",[]],["component/208-1",[]],["title/208-2",[731,19.048,840,30.987,996,37.893]],["name/208-2",[]],["text/208-2",[]],["component/208-2",[]],["title/208",[60,25.843,64,13.904]],["name/208",[60,1.232,64,0.663]],["text/208",[7,1.694,32,3.683,40,1.28,45,2.81,54,2.334,56,2.479,58,2.448,64,2.332,82,3.41,92,3.285,99,4.523,111,2.215,225,4.29,295,2.578,435,3.64,448,4.228,484,2.967,488,3.757,500,3.829,508,3.614,539,3.794,561,3.834,610,2.625,631,4.085,637,3.616,694,2.917,717,3.616,731,2.264,736,2.901,767,3.871,862,4.011,893,3.358,894,3.834,914,4.228,996,4.504,1041,3.584,1214,5.664,1232,4.504,1721,3.834,1988,4.888,1989,5.522,1990,5.522,1991,5.522,1992,3.553,1993,4.228,1994,5.522,1995,4.587]],["component/208",[79,0.574]],["title/209-1",[7,8.862,237,28.219,573,14.173,1992,25.582]],["name/209-1",[]],["text/209-1",[]],["component/209-1",[]],["title/209-2",[108,22.937,435,17.214,636,15.522]],["name/209-2",[]],["text/209-2",[]],["component/209-2",[]],["title/209",[64,13.904,1992,35.935]],["name/209",[64,0.663,1992,1.713]],["text/209",[7,1.63,30,1.794,31,1.942,40,1.211,46,2.535,49,2.755,52,1.756,64,2.101,90,1.911,94,3.782,119,2.506,127,2.386,147,3.332,218,3.201,219,3.446,222,2.428,233,3.252,245,3.612,250,4.261,295,3.415,435,2.711,477,3.108,484,2.807,486,2.645,488,2.934,498,3.332,534,3.003,538,4.261,564,2.84,573,1.862,575,4.261,579,5.45,601,2.417,631,2.807,636,1.746,699,3.627,744,2.191,750,4.625,793,3.154,852,3.108,893,3.177,898,2.909,980,3.452,1039,2.823,1094,3.305,1193,4.261,1199,3.75,1202,3.842,1322,3.226,1474,4.122,1531,4.261,1639,4.625,1649,3.708,1866,3.39,1992,3.361,1996,4.52,1997,5.224,1998,4.261,1999,4.189,2000,4.878,2001,5.224]],["component/209",[79,0.574]],["title/210-1",[7,8.862,52,13.366,64,9.898,295,18.561]],["name/210-1",[]],["text/210-1",[]],["component/210-1",[]],["title/210-2",[7,6.88,36,12.472,40,7.153,46,10.697,111,12.382,127,14.097]],["name/210-2",[]],["text/210-2",[]],["component/210-2",[]],["title/210-3",[88,6.775,126,17.42,144,12.846,240,15.069,946,16.068,1051,20.17]],["name/210-3",[]],["text/210-3",[]],["component/210-3",[]],["title/210-4",[7,6.188,39,15.093,66,13.576,105,11.137,548,15.557,731,11.384,793,16.76]],["name/210-4",[]],["text/210-4",[]],["component/210-4",[]],["title/210",[88,13.63,240,18.608]],["name/210",[88,0.65,240,0.887]],["text/210",[7,1.432,19,1.102,32,4.287,36,3.083,39,4.148,46,1.512,52,1.466,56,1.958,64,2.337,67,1.903,105,1.75,107,3.34,108,2.154,111,3.06,119,2.093,123,2.064,126,2.737,128,2.559,130,2.577,134,2.883,151,4.287,158,2.653,164,3.169,201,1.903,217,2.444,240,2.804,245,2.154,246,2.331,278,3.029,295,3.929,435,1.616,440,2.715,441,2.385,443,3.131,483,3.169,508,2.073,548,5.439,569,3.796,577,3.861,579,3.25,591,2.508,599,1.521,631,2.344,715,2.831,717,2.856,761,3.169,762,2.831,767,1.942,791,4.92,793,2.633,852,2.595,858,3.208,862,3.169,873,3.096,874,3.34,900,3.376,927,2.344,957,2.759,971,3.34,993,3.558,1150,3.861,1199,3.131,1231,3.029,1233,3.131,1278,3.096,1721,3.029,1866,4.171,2002,4.92,2003,4.362,2004,3.558,2005,4.362,2006,4.204,2007,3.861,2008,4.362,2009,4.073,2010,4.362]],["component/210",[79,0.574]],["title/211-1",[7,6.88,35,16.4,90,11.29,200,15.958,201,13.465,202,27.327]],["name/211-1",[]],["text/211-1",[]],["component/211-1",[]],["title/211-2",[7,10.354,484,24.962,1089,29.887]],["name/211-2",[]],["text/211-2",[]],["component/211-2",[]],["title/211",[90,20.428,176,22.651]],["name/211",[90,0.974,176,1.08]],["text/211",[7,1.473,41,3.825,84,3.142,90,3.136,141,3.658,197,4.802,200,3.417,216,4.862,225,5.135,408,3.658,458,4.368,459,5.061,479,3.851,481,5.953,560,5.491,636,2.209,746,3.775,751,5.061,755,3.454,776,5.061,1075,4.862,1089,4.253,1090,5.3,1199,4.745,1247,4.147,1277,4.862,1339,4.862,1550,5.719,1792,5.491,1940,5.3,2002,6.564,2011,6.909,2012,6.909,2013,6.61,2014,6.61,2015,6.61]],["component/211",[79,0.574]],["title/212-1",[7,10.354,144,21.494,421,25.403]],["name/212-1",[]],["text/212-1",[]],["component/212-1",[]],["title/212-2",[7,10.354,486,23.519,1075,34.167]],["name/212-2",[]],["text/212-2",[]],["component/212-2",[]],["title/212-3",[7,8.862,199,15.723,242,23.328,1013,25.153]],["name/212-3",[]],["text/212-3",[]],["component/212-3",[]],["title/212-4",[7,7.746,13,11.442,64,8.652,623,21.298,2016,34.754]],["name/212-4",[]],["text/212-4",[]],["component/212-4",[]],["title/212-5",[7,4.753,13,7.021,14,5.217,60,9.868,516,13.275,618,10.743,1153,17.397,2017,16.826,2018,20.555,2019,21.327]],["name/212-5",[]],["text/212-5",[]],["component/212-5",[]],["title/212-6",[7,7.746,144,16.081,150,19.598,177,20.981,731,14.251]],["name/212-6",[]],["text/212-6",[]],["component/212-6",[]],["title/212-7",[7,8.862,118,23.013,456,32.434,714,31.37]],["name/212-7",[]],["text/212-7",[]],["component/212-7",[]],["title/212",[2020,61.99]],["name/212",[2020,3.673]],["text/212",[7,1.094,10,1.259,11,1.269,13,1.011,32,2.049,36,2.476,38,2.281,39,1.67,40,1.137,47,1.849,49,1.002,52,2.353,54,1.298,64,2.132,72,1.854,84,1.46,87,1.66,88,0.75,95,2.049,103,2.133,104,2.251,107,2.352,111,2.458,121,1.623,126,1.927,127,1.403,136,1.71,139,1.828,143,2.716,144,2.271,147,3.909,151,2.049,164,2.231,181,2.506,188,2.552,210,1.447,212,1.632,221,1.539,240,2.549,242,2.879,252,1.943,254,1.943,266,4.164,410,1.854,421,1.68,435,2.271,451,1.976,456,2.506,457,2.506,459,2.352,460,2.506,461,1.614,462,2.288,478,2.205,479,1.79,481,3.407,486,3.103,488,1.232,516,1.912,519,3.565,534,1.766,548,1.721,552,1.943,555,2.133,572,2.049,589,1.943,590,1.71,602,2.231,622,2.506,636,1.026,692,2.719,697,1.532,699,2.133,700,1.721,710,1.7,717,2.011,721,1.743,724,3.372,729,4.507,731,2.513,739,1.802,743,3.079,744,2.058,746,1.754,760,2.18,762,3.977,769,2.96,791,2.352,795,1.828,796,1.959,819,2.506,852,1.828,862,2.231,863,3.079,865,2.231,867,4.246,870,1.815,896,2.719,902,1.912,904,2.231,909,1.868,911,2.658,927,1.651,935,3.565,957,1.943,963,1.868,1008,1.488,1010,3.444,1047,2.205,1056,1.66,1094,3.104,1153,2.506,1172,2.352,1178,2.658,1287,2.111,1478,2.602,1806,3.872,2002,6.246,2021,2.719,2022,3.072,2023,3.072,2024,3.072,2025,3.072,2026,3.072,2027,3.072,2028,3.072,2029,3.072,2030,3.072,2031,3.072,2032,2.719,2033,3.072,2034,3.072,2035,2.719,2036,2.352,2976,3.397]],["component/212",[79,0.574]],["title/213-1",[0,57.12]],["name/213-1",[]],["text/213-1",[]],["component/213-1",[]],["title/213-2",[1,37.258,2,34.766]],["name/213-2",[]],["text/213-2",[]],["component/213-2",[]],["title/213",[3,32.112,4,23.978]],["name/213",[3,1.531,4,1.143]],["text/213",[1,2.328,2,2.172,5,1.931,6,1.464,7,1.209,8,4.251,10,1.431,11,1.442,12,4.837,13,2.473,14,2.47,15,4.426,16,5.911,17,4.426,18,5.895,19,2.272,20,1.285,22,2.846,23,3.489,24,3.489,25,4.426,26,4.804,27,2.793,28,2.888,29,4.804,30,1.863,31,2.017,32,2.328,33,4.155,34,1.342,35,1.854,36,2.69,37,5.109,38,1.622,39,1.897,40,1.996,41,2.02,42,2.846,43,2.311,44,3.489,45,1.776,46,1.209,47,2.83,48,2.062,49,1.771,50,2.566,51,2.956,52,1.824,53,3.522,54,1.475,55,2.753,56,2.436,57,2.956,58,1.547,59,3.489,60,1.615,61,3.089,62,2.35,63,2.423,64,0.869,65,2.798,66,1.706,67,1.522,68,3.489,69,5.098,70,2.791,71,2.457,72,2.106,73,2.747,74,2.172,76,2.846,77,3.489,78,2.172,88,0.851,152,2.172,210,2.556,300,2.285,598,2.476,755,1.823,936,2.245,2956,2.328]],["component/213",[79,0.574]],["title/214-1",[80,70.023]],["name/214-1",[]],["text/214-1",[]],["component/214-1",[]],["title/214-2",[37,31.597,81,27.639,82,28.688]],["name/214-2",[]],["text/214-2",[]],["component/214-2",[]],["title/214-3",[12,50.872]],["name/214-3",[]],["text/214-3",[]],["component/214-3",[]],["title/214-4",[16,50.872]],["name/214-4",[]],["text/214-4",[]],["component/214-4",[]],["title/214-5",[8,29.944]],["name/214-5",[]],["text/214-5",[]],["component/214-5",[]],["title/214-6",[53,45.447]],["name/214-6",[]],["text/214-6",[]],["component/214-6",[]],["title/214",[8,29.944]],["name/214",[83,2.18]],["text/214",[3,1.683,7,1.323,8,4.436,12,2.127,13,2.877,19,0.74,28,3.229,31,2.531,36,1.908,37,5.43,40,2.195,43,1.247,48,3.506,49,0.955,52,2.288,53,3.064,56,1.314,60,1.354,62,1.972,63,2.033,64,1.987,72,2.85,84,1.391,85,2.388,86,2.388,87,1.582,88,1.448,89,3.012,90,2.17,91,2.591,92,2.809,93,1.9,94,2.441,95,1.953,96,2.927,97,2.927,98,2.591,99,2.809,100,2.821,101,2.591,102,1.953,103,2.033,104,1.343,105,2.38,106,2.101,107,2.241,108,1.445,109,1.706,110,2.927,111,1.894,112,2.533,113,2.591,114,2.662,115,1.46,116,2.591,117,2.388,118,1.694,119,1.404,120,1.917,121,1.547,122,2.241,123,1.385,124,1.883,125,1.564,126,2.962,127,2.156,128,1.717,129,2.927,130,1.729,131,2.591,132,3.636,133,3.211,134,3.12,135,1.953,136,1.63,137,2.733,138,1.915,139,1.742,140,2.927,141,1.62,142,3.786,143,1.62,144,1.354,145,1.438,146,1.706,147,3.012,148,2.388,149,1.767,150,1.651,151,1.953,152,1.822,153,4.721,154,4.107,155,2.591,156,3.39,157,2.127,158,3.609,159,1.78,160,2.48,161,1.822,162,2.927,163,2.388,164,2.127,165,1.661,166,1.601,167,1.694,168,1.103,169,1.373,170,2.733,171,1.972]],["component/214",[79,0.574]],["title/215-1",[3,32.112,4,23.978]],["name/215-1",[]],["text/215-1",[]],["component/215-1",[]],["title/215-2",[0,57.12]],["name/215-2",[]],["text/215-2",[]],["component/215-2",[]],["title/215-3",[1,37.258,2,34.766]],["name/215-3",[]],["text/215-3",[]],["component/215-3",[]],["title/215-4",[2631,57.12]],["name/215-4",[]],["text/215-4",[]],["component/215-4",[]],["title/215-5",[525,38.293]],["name/215-5",[]],["text/215-5",[]],["component/215-5",[]],["title/215-6",[19,17.696]],["name/215-6",[]],["text/215-6",[]],["component/215-6",[]],["title/215-7",[2977,55.853,2978,55.853]],["name/215-7",[]],["text/215-7",[]],["component/215-7",[]],["title/215-8",[19,11.74,28,17.863,92,27.639]],["name/215-8",[]],["text/215-8",[]],["component/215-8",[]],["title/215-9",[2979,70.023]],["name/215-9",[]],["text/215-9",[]],["component/215-9",[]],["title/215",[264,49.696]],["name/215",[83,2.18]],["text/215",[1,1.06,2,0.989,5,1.556,6,0.666,7,1.164,10,0.651,11,0.656,13,2.408,14,2.583,19,1.459,20,2.125,27,1.917,30,1.793,31,2.321,34,1.081,38,0.738,40,1.867,43,0.677,46,0.551,47,1.425,48,1.661,49,1.234,52,0.945,54,0.672,56,0.713,64,0.396,66,0.777,67,1.226,70,0.817,72,0.959,81,0.945,84,1.336,90,1.028,94,0.821,104,0.729,111,1.128,132,0.974,135,1.875,136,0.885,138,1.533,144,0.735,154,1.375,200,1.955,201,1.993,210,0.748,222,0.738,234,0.615,240,0.937,245,0.784,246,1.502,248,1.115,251,1.06,252,1.779,253,0.885,264,4.431,266,1.673,404,1.005,435,1.042,438,1.103,450,1.031,477,0.945,484,0.854,488,1.128,494,1.764,496,1.779,497,2.518,499,0.885,508,0.755,510,0.945,525,4.616,569,0.939,570,2.132,573,2.225,590,1.566,599,0.554,601,1.301,610,3.329,636,2.34,694,1.485,703,1.483,704,4.891,706,3.085,713,1.346,719,1.2,737,2.382,744,0.666,755,0.83,759,1.638,767,1.684,804,0.879,832,1.75,871,1.154,874,1.216,893,0.966,900,1.477,925,3.12,940,1.483,951,2.25,959,1.169,1065,2.625,1091,1.005,1137,0.92,1151,1.014,1214,1.184,1217,2.966,1272,1.346,1463,4.266,1474,1.253,2017,1.253,2073,1.483,2264,5.829,2292,3.727,2569,1.483,2627,1.483,2631,6.737,2658,1.483,2956,1.06,2977,1.589,2978,1.589,2979,2.811,2980,3.109,2981,1.589,2982,4.182,2983,1.757,2984,1.757,2985,1.757,2986,1.757,2987,1.757,2988,1.757,2989,4.182,2990,4.182,2991,3.109,2992,4.182,2993,3.109,2994,4.182,2995,4.182,2996,3.109,2997,3.109,2998,3.109,2999,3.109,3000,1.757,3001,1.757,3002,1.757,3003,1.757,3004,1.757,3005,1.757,3006,1.757,3007,3.109,3008,1.757,3009,1.757,3010,1.757,3011,1.757,3012,1.757,3013,1.757,3014,3.109,3015,1.757,3016,1.757,3017,1.757,3018,1.757,3019,3.109,3020,1.757,3021,4.182,3022,1.757,3023,1.757,3024,1.757,3025,1.757,3026,1.757,3027,3.109,3028,1.757,3029,3.109,3030,1.757,3031,3.109,3032,3.109,3033,3.109,3034,3.109,3035,1.757,3036,1.757,3037,1.757,3038,1.757,3039,1.757,3040,1.757,3041,3.109,3042,3.109,3043,1.757,3044,1.757,3045,3.109,3046,3.109,3047,1.757,3048,3.109,3049,1.757,3050,1.757,3051,1.757,3052,1.757,3053,1.757,3054,1.757,3055,1.757,3056,1.757,3057,1.757,3058,1.757,3059,1.757]],["component/215",[79,0.574]],["title/216-1",[3060,70.023]],["name/216-1",[]],["text/216-1",[]],["component/216-1",[]],["title/216-2",[176,28.397]],["name/216-2",[]],["text/216-2",[]],["component/216-2",[]],["title/216-3",[173,38.757]],["name/216-3",[]],["text/216-3",[]],["component/216-3",[]],["title/216-4",[3061,77.446]],["name/216-4",[]],["text/216-4",[]],["component/216-4",[]],["title/216-5",[176,28.397]],["name/216-5",[]],["text/216-5",[]],["component/216-5",[]],["title/216-6",[173,38.757]],["name/216-6",[]],["text/216-6",[]],["component/216-6",[]],["title/216-7",[177,33.718,178,34.228]],["name/216-7",[]],["text/216-7",[]],["component/216-7",[]],["title/216-8",[2808,67.488]],["name/216-8",[]],["text/216-8",[]],["component/216-8",[]],["title/216-9",[173,38.757]],["name/216-9",[]],["text/216-9",[]],["component/216-9",[]],["title/216-10",[2809,73.197]],["name/216-10",[]],["text/216-10",[]],["component/216-10",[]],["title/216-11",[176,28.397]],["name/216-11",[]],["text/216-11",[]],["component/216-11",[]],["title/216-12",[173,38.757]],["name/216-12",[]],["text/216-12",[]],["component/216-12",[]],["title/216-13",[177,33.718,178,34.228]],["name/216-13",[]],["text/216-13",[]],["component/216-13",[]],["title/216-14",[172,70.023]],["name/216-14",[]],["text/216-14",[]],["component/216-14",[]],["title/216-15",[173,38.757]],["name/216-15",[]],["text/216-15",[]],["component/216-15",[]],["title/216-16",[174,70.023]],["name/216-16",[]],["text/216-16",[]],["component/216-16",[]],["title/216-17",[173,38.757]],["name/216-17",[]],["text/216-17",[]],["component/216-17",[]],["title/216-18",[175,59.322]],["name/216-18",[]],["text/216-18",[]],["component/216-18",[]],["title/216-19",[176,28.397]],["name/216-19",[]],["text/216-19",[]],["component/216-19",[]],["title/216-20",[173,38.757]],["name/216-20",[]],["text/216-20",[]],["component/216-20",[]],["title/216-21",[177,33.718,178,34.228]],["name/216-21",[]],["text/216-21",[]],["component/216-21",[]],["title/216-22",[179,40.098,180,35.046]],["name/216-22",[]],["text/216-22",[]],["component/216-22",[]],["title/216-23",[19,17.696]],["name/216-23",[]],["text/216-23",[]],["component/216-23",[]],["title/216-24",[8,29.944]],["name/216-24",[]],["text/216-24",[]],["component/216-24",[]],["title/216-25",[88,17.088]],["name/216-25",[]],["text/216-25",[]],["component/216-25",[]],["title/216-26",[181,57.12]],["name/216-26",[]],["text/216-26",[]],["component/216-26",[]],["title/216-27",[176,28.397]],["name/216-27",[]],["text/216-27",[]],["component/216-27",[]],["title/216-28",[173,38.757]],["name/216-28",[]],["text/216-28",[]],["component/216-28",[]],["title/216-29",[177,33.718,178,34.228]],["name/216-29",[]],["text/216-29",[]],["component/216-29",[]],["title/216-30",[182,70.023]],["name/216-30",[]],["text/216-30",[]],["component/216-30",[]],["title/216-31",[176,28.397]],["name/216-31",[]],["text/216-31",[]],["component/216-31",[]],["title/216-32",[173,38.757]],["name/216-32",[]],["text/216-32",[]],["component/216-32",[]],["title/216-33",[177,33.718,178,34.228]],["name/216-33",[]],["text/216-33",[]],["component/216-33",[]],["title/216-34",[183,70.023]],["name/216-34",[]],["text/216-34",[]],["component/216-34",[]],["title/216-35",[173,38.757]],["name/216-35",[]],["text/216-35",[]],["component/216-35",[]],["title/216-36",[184,60.586]],["name/216-36",[]],["text/216-36",[]],["component/216-36",[]],["title/216-37",[176,28.397]],["name/216-37",[]],["text/216-37",[]],["component/216-37",[]],["title/216-38",[173,38.757]],["name/216-38",[]],["text/216-38",[]],["component/216-38",[]],["title/216-39",[177,33.718,178,34.228]],["name/216-39",[]],["text/216-39",[]],["component/216-39",[]],["title/216-40",[185,61.99]],["name/216-40",[]],["text/216-40",[]],["component/216-40",[]],["title/216-41",[176,28.397]],["name/216-41",[]],["text/216-41",[]],["component/216-41",[]],["title/216-42",[173,38.757]],["name/216-42",[]],["text/216-42",[]],["component/216-42",[]],["title/216-43",[177,33.718,178,34.228]],["name/216-43",[]],["text/216-43",[]],["component/216-43",[]],["title/216-44",[186,61.99]],["name/216-44",[]],["text/216-44",[]],["component/216-44",[]],["title/216-45",[176,28.397]],["name/216-45",[]],["text/216-45",[]],["component/216-45",[]],["title/216-46",[173,38.757]],["name/216-46",[]],["text/216-46",[]],["component/216-46",[]],["title/216-47",[177,33.718,178,34.228]],["name/216-47",[]],["text/216-47",[]],["component/216-47",[]],["title/216",[187,57.12]],["name/216",[187,3.384]],["text/216",[1,0.386,2,0.36,3,0.332,4,0.248,7,1.778,8,2.229,13,0.363,14,0.594,19,1.575,20,0.745,27,0.242,28,0.934,30,0.695,31,0.589,34,0.609,35,0.307,36,0.446,37,0.393,38,0.513,39,0.6,40,1,41,1.623,43,1.607,45,0.294,46,0.549,47,1.056,48,0.936,49,1.985,50,0.425,52,1.059,54,1.027,55,0.871,56,0.496,58,0.489,60,1.124,64,0.784,66,0.774,70,1.249,71,1.1,73,1.23,78,0.687,82,0.682,83,0.304,84,1.793,85,0.471,86,0.471,88,2.043,89,1.01,90,1.152,92,0.344,94,0.299,95,0.736,98,0.977,99,1.668,103,0.401,104,0.265,105,0.443,108,1.556,109,0.337,111,0.232,114,0.893,115,1.212,117,0.471,119,0.971,121,0.583,123,1.15,124,1.019,125,0.846,127,0.264,128,0.648,132,0.354,133,0.751,135,0.386,136,0.882,138,0.448,141,0.32,143,0.32,144,0.267,146,2.918,147,0.369,149,1.222,150,0.893,152,0.986,154,0.99,159,0.671,160,0.49,161,1.745,167,0.639,168,0.763,171,0.389,173,1.345,176,0.234,177,1.467,178,1.241,179,0.415,180,1.27,181,0.471,185,0.512,186,0.512,188,2.329,189,6.466,190,0.525,191,0.578,192,1.104,193,0.578,194,0.578,195,1.55,196,0.792,197,1.151,198,0.54,199,1.373,200,1.449,201,1.515,202,0.977,203,0.578,204,0.578,205,0.512,206,0.578,207,0.643,208,0.349,209,0.406,210,0.52,211,1.104,212,1.49,213,0.354,214,0.401,215,0.443,216,1.489,217,0.324,218,0.354,219,1.909,220,2.379,221,0.794,222,1.464,223,0.232,224,0.557,225,0.449,226,0.557,227,1.25,228,0.687,229,0.41,230,0.751,231,0.471,232,0.471,233,0.36,234,1.22,235,1.104,236,0.743,237,1.124,238,0.578,239,1.112,240,2.433,241,0.386,242,1.848,243,0.977,244,0.802,245,0.999,246,0.309,247,0.578,248,1.112,249,0.578,250,0.471,251,2.703,252,1.002,253,2.101,254,1.281,255,0.471,257,0.578,258,1.792,259,2.932,260,0.845,261,0.578,262,0.578,263,0.512,264,1.124,265,0.578,266,0.942,267,1.104,268,3.25,269,1.993,270,1.471,271,1.437,272,0.578,273,1.151,274,0.578,275,0.512,276,0.578,277,0.871,278,0.766,279,0.578,280,1.151,281,0.578,282,0.512,283,1.151,284,0.578,285,0.871,286,0.578,287,0.471,288,0.471,289,0.578,290,0.456,291,0.578,292,1.151,293,1.104,294,1.5,295,1.761,296,0.578,297,0.578,298,0.471,299,0.578,300,0.723,301,0.512,302,0.578,303,0.471,304,0.578,305,0.54,306,0.578,307,0.471,308,0.578,309,0.845,310,0.578,311,0.443,381,0.393,382,1.104,383,1.104,384,1.104,385,0.512,386,0.512,387,0.512,388,0.443,389,0.54,390,1.591,391,0.54,392,0.54,393,0.54,394,0.49,395,0.54,396,0.49,397,0.293,398,0.643,399,0.49,400,0.618,401,0.471,402,0.54,403,0.42,404,1.002,405,0.54,406,0.578,407,0.512,408,1.744,409,0.578,410,0.666,411,0.578,412,0.845,413,0.512,414,0.512,415,0.578,416,1.338,417,0.578,418,0.578,419,1.213,420,0.578,421,0.604,422,0.578,423,0.578,424,0.766,425,0.578,426,0.512,427,0.578,428,1.687,429,0.578,430,1.12,431,0.378,432,0.578,433,0.401,434,0.578,435,1.167,436,0.443,437,0.578,438,0.401,439,0.578,440,0.687,441,0.866,442,0.578,443,0.415,444,0.578,445,0.42,446,0.578,447,0.397,448,0.443,449,0.311,450,1.028,451,0.372,452,0.443,453,0.911,454,0.578,455,1.292,456,0.471,457,0.471,458,1.338,459,0.443,460,0.471,461,0.304,462,0.431,463,0.431,464,0.48,465,0.393,466,0.436,467,0.578,468,1.002,469,0.443,470,0.443,471,1.507,472,0.512,473,1.338,474,0.512,475,1.453,476,0.578,477,0.657,478,1.453,479,1.18,480,1.787,481,0.401,482,0.375,483,1.151,484,1.507,485,0.386,486,0.559,487,0.578,488,1.264,489,4.036,490,0.443,491,1.55,492,0.723,493,0.687,494,0.693,495,0.512,496,0.366,497,0.481,498,0.704,499,0.322,500,1.749,501,0.657,502,0.42,503,0.49,504,0.354,505,1.316,506,0.802,507,0.578,508,0.275,509,0.512,510,0.344,511,0.512,512,0.341,513,0.977,514,0.471,515,0.578,516,0.986,517,0.977,518,0.578,519,0.42,520,0.41,521,0.48,522,0.386,523,0.648,524,0.316,525,0.316,526,0.314,527,0.386,528,0.471,529,0.42,530,0.54,531,0.802,532,1.104,533,1.064,534,0.911,535,1.104,536,0.5,537,0.578,538,0.471,539,0.397,540,0.977,541,0.5,542,0.578,543,1.584,544,1.104,545,0.578,546,0.578,547,0.471,548,0.618,549,0.578,550,0.456,551,0.729,552,0.698,553,0.463,554,0.471,555,1.406,556,0.845,557,0.471,558,0.378,559,0.5,560,0.48,561,0.401,562,0.578,563,0.463,564,0.6,565,0.783,566,0.471,567,0.471,568,0.512,569,0.341,570,0.326,571,0.792,572,1.057,573,0.565,574,0.512,575,0.9,576,0.578,577,0.512,578,0.415,579,0.431,580,0.54,581,1.104,582,0.578,583,0.578,584,0.578,585,0.578,586,0.578,587,0.512,588,0.443,589,0.366,590,0.322,591,0.635,592,0.522,593,0.977,594,0.386,595,0.578,596,0.643,597,0.837,598,0.41,599,0.202,600,0.578,601,0.733,602,0.802,603,0.578,604,0.471,605,0.578,606,0.42,607,0.578,608,1.104,609,0.578,610,0.275,611,0.389,612,0.578,613,0.512,614,1.479,615,0.372,616,0.833,617,0.977,618,0.291,619,1.104,620,0.471,621,0.578,622,0.471,623,0.971,624,0.471,625,0.578,626,0.578,627,0.578,628,0.512,629,0.578,630,0.578,631,0.851,632,0.9,633,0.845,634,0.578,635,0.578,636,0.193,637,0.378,638,0.578,639,0.49,640,0.471,641,0.977,642,0.578,643,0.512,644,0.578,645,0.512,646,0.578,647,0.578,648,0.578,649,0.578,650,0.557,651,0.512,652,0.578,675,0.415,697,0.288,726,0.845,727,0.792,729,0.425,755,0.302,798,0.471,809,0.335,816,1.916,827,0.456,866,0.352,870,0.341,900,0.304,910,0.49,918,0.406,919,0.449,925,0.312,937,0.54,1039,0.312,1051,0.802,1071,0.743,1076,0.857,1090,0.463,1091,0.366,1137,0.335,1671,0.525,1706,0.525,1715,0.386,1806,0.456,2267,0.54,2356,0.471,2611,0.49,2810,0.604,2811,0.604,2812,0.604,2813,0.604,2814,0.449,2815,0.449,2816,0.604,2817,0.604,2818,0.604,2819,0.604,2820,0.604,2821,0.604,2822,0.525,2823,0.604,2824,0.54,2825,0.604,2826,0.604,2827,0.604,2828,0.604,2829,0.604,2830,0.604,2831,0.604,2832,0.604,2833,0.604,2834,0.604,2835,0.604,2836,0.604,2837,0.604,2838,0.604,2839,0.604,2840,0.604,2841,0.604,2842,0.604,2843,0.604,2844,0.604,2845,0.604,2846,0.604,2847,0.604,2848,0.604,2849,0.604,2850,0.604,2851,0.604,2852,0.604,2853,0.604,2854,0.604,2855,0.604,2856,0.604,2857,0.604,2858,0.604,2859,0.604,2860,0.604,2861,0.604,2862,0.604,2863,0.604,2864,0.604,2865,1.154,2866,0.604,2867,0.604,2868,0.604,2869,0.604,2870,0.604,2871,0.604,2872,0.604,2873,0.604,2874,0.604,2875,0.604,2876,0.604,2877,0.604,2878,0.604,2879,0.604,2880,0.604,2881,0.604,2882,0.604,2883,0.604,2884,0.604,2885,0.604,2886,0.604,2887,0.604,2888,0.604,2889,0.604,2890,0.604,2891,0.604,2892,0.604,2893,0.604,2894,0.604,2895,0.604,2896,0.604,2897,0.604,2898,0.604,2899,0.604,2900,0.604,2901,0.604,2902,0.604,3062,0.557,3063,0.557,3064,1.154,3065,0.639,3066,2.526,3067,0.639,3068,0.639,3069,0.639,3070,0.639,3071,0.639,3072,0.639,3073,0.639,3074,0.639,3075,0.639,3076,0.639,3077,0.639,3078,0.639,3079,0.639,3080,0.639,3081,0.639,3082,0.639,3083,0.639,3084,0.578,3085,0.639,3086,0.639,3087,0.639,3088,0.639]],["component/216",[79,0.574]],["title/217-1",[19,14.115,78,34.766]],["name/217-1",[]],["text/217-1",[]],["component/217-1",[]],["title/217-2",[200,36.201]],["name/217-2",[]],["text/217-2",[]],["component/217-2",[]],["title/217",[653,57.12]],["name/217",[653,3.384]],["text/217",[5,0.64,6,0.886,7,2.234,8,0.904,10,2.281,11,2.298,13,0.696,14,2.135,19,1.406,27,0.485,31,3.205,34,0.445,37,1.437,40,0.972,43,0.9,46,0.401,47,0.436,49,1.176,52,0.389,58,0.513,60,0.535,63,0.803,64,1.626,66,0.566,70,0.595,72,0.698,78,0.72,81,0.688,85,0.944,86,0.944,88,2.177,90,2.165,92,1.257,105,0.464,111,2.07,114,2.031,115,2.091,121,2.216,122,0.886,124,2.318,125,1.129,126,0.726,135,1.946,136,1.624,138,0.469,145,0.568,154,1.033,159,0.704,166,0.633,179,1.517,195,2.233,196,2.094,199,1.154,200,0.598,201,3.252,210,0.995,221,1.059,222,2.188,229,1.5,230,1.984,231,1.724,237,2.07,239,1.483,240,2.603,248,1.483,251,0.772,259,3.888,260,0.886,264,3.341,266,3.713,269,2.279,270,1.535,271,1.5,273,2.119,275,1.024,277,2.307,278,1.467,280,1.535,283,1.535,285,1.667,287,0.944,288,0.944,290,1.667,292,1.535,294,1.305,295,3.567,298,0.944,300,3.38,303,0.944,307,1.724,309,1.618,311,1.618,390,0.758,460,0.944,461,0.608,462,0.862,464,0.961,471,1.136,473,1.928,486,0.586,492,1.332,496,0.732,499,0.644,508,2.238,512,0.683,519,1.535,520,0.821,522,0.772,523,3.473,524,2.293,525,1.595,526,0.629,527,0.772,529,0.84,548,2.019,564,1.149,568,1.024,573,1.495,591,0.665,601,1.35,610,0.55,615,0.744,618,0.583,623,0.709,654,1.05,655,0.738,656,1.157,657,2.113,658,1.157,659,1.157,660,3.602,662,1.157,663,1.157,664,1.157,665,1.157,666,1.157,667,1.157,668,1.157,669,2.812,670,1.157,671,1.157,672,1.157,673,1.157,674,1.157,675,0.83,676,2.113,677,1.157,678,1.157,679,2.113,680,2.917,681,1.157,682,2.113,683,1.157,684,2.113,685,1.157,686,1.115,687,1.157,688,1.157,689,1.157,690,2.113,691,1.157,692,1.024,694,1.117,695,1.024,696,0.56,697,1.455,698,1.157,699,1.467,700,0.648,701,2.38,702,3.435,703,1.08,704,0.98,705,0.772,706,1.724,707,2.528,708,1.024,709,0.803,710,0.64,711,1.157,712,1.157,713,0.98,714,1.667,715,1.372,716,1.618,717,3.642,718,0.886,719,0.873,720,0.944,721,1.655,722,1.724,723,2.339,724,1.452,725,2.582,726,2.758,727,1.517,728,1.024,729,0.851,730,1.024,731,1.931,732,0.961,733,1.08,734,0.764,735,0.84,736,0.608,737,1.79,738,0.944,739,2.113,740,1.024,741,1.157,742,1.024,743,0.726,744,0.485,745,0.758,746,0.661,747,0.98,748,0.72,749,0.83,750,1.024,751,0.886,752,1.157,753,1.024,754,0.98,755,0.605,756,1.157,757,0.795,758,0.922,759,0.674,760,1.5,761,0.84,762,0.751,763,1.024,764,0.772,816,1.774,1464,0.764,2814,0.899,2905,1.001,2956,1.41,2976,1.279,3066,1.694,3089,5.024]],["component/217",[79,0.574]],["title/218-1",[199,22.087,473,36.911]],["name/218-1",[]],["text/218-1",[]],["component/218-1",[]],["title/218-2",[199,18.369,201,20.263,700,26.03]],["name/218-2",[]],["text/218-2",[]],["component/218-2",[]],["title/218-3",[655,29.633,765,41.124,766,41.124]],["name/218-3",[]],["text/218-3",[]],["component/218-3",[]],["title/218",[201,24.364,767,24.868]],["name/218",[201,1.162,767,1.186]],["text/218",[7,1.643,14,1.007,38,1.912,40,0.954,70,2.116,78,2.561,84,2.925,102,2.745,118,2.382,121,2.174,123,1.947,133,2.799,144,1.904,199,2.915,201,1.795,208,2.484,209,2.888,210,2.899,216,3.027,243,3.643,277,3.385,455,3.357,473,5.406,474,9.162,491,4.712,493,2.561,502,2.989,531,2.989,655,2.625,700,2.306,702,2.541,736,2.162,744,1.726,746,5.911,748,2.561,768,3.246,770,7.371,772,4.115,773,4.115,774,3.966,775,4.115,777,3.357,778,4.115,779,4.115,780,4.115,781,4.115,782,4.115,783,4.115,784,4.115,786,4.115,787,4.115,788,3.3,789,4.115,790,3.56,791,3.151,792,4.115,793,2.484,794,3.486,795,2.448,796,2.625,797,4.115,798,3.357,799,2.989,800,3.743,801,4.115,802,2.561,803,3.357,804,2.278,805,2.857,806,3.643,807,4.115,808,3.151,809,2.382,2814,7.608,2906,4.301,2907,4.301,2908,4.301,2909,4.301]],["component/218",[79,0.574]],["title/219-1",[20,17.101,810,41.124,3060,46.453]],["name/219-1",[]],["text/219-1",[]],["component/219-1",[]],["title/219-2",[70,28.723,811,55.853]],["name/219-2",[]],["text/219-2",[]],["component/219-2",[]],["title/219-3",[199,27.69]],["name/219-3",[]],["text/219-3",[]],["component/219-3",[]],["title/219-4",[812,61.99]],["name/219-4",[]],["text/219-4",[]],["component/219-4",[]],["title/219",[813,57.12]],["name/219",[813,3.384]],["text/219",[7,2.175,8,2.609,14,1.493,38,3.78,40,1.414,54,2.579,70,3.137,79,1.624,82,3.768,84,2.9,88,1.489,90,2.231,102,4.07,118,3.531,138,2.474,178,3.739,187,4.977,199,2.413,207,3.555,218,3.739,219,3.831,490,4.671,493,3.798,497,2.661,653,4.977,707,4.282,709,4.236,745,3.995,812,5.401,813,4.977,814,6.101,815,6.101,816,3.711,817,4.432,818,6.378,819,4.977,820,5.279,822,6.101,823,6.101,824,5.696,825,6.101,826,5.696,3060,6.101,3090,7.31]],["component/219",[79,0.574]],["title/220-1",[0,57.12]],["name/220-1",[]],["text/220-1",[]],["component/220-1",[]],["title/220-2",[453,40.259]],["name/220-2",[]],["text/220-2",[]],["component/220-2",[]],["title/220",[135,46.711]],["name/220",[83,2.18]],["text/220",[5,2.824,6,2.14,7,1.137,8,2.182,10,2.092,11,2.108,14,2.214,30,1.752,34,1.962,40,1.931,46,1.768,47,1.922,49,1.665,64,1.27,70,2.624,84,2.425,87,2.757,88,1.245,90,1.866,115,2.544,133,3.47,135,6.788,149,3.08,159,3.103,169,2.392,200,2.638,222,2.371,234,1.975,266,4.959,295,3.359,558,3.341,569,3.014,573,1.819,706,4.162,714,4.025,717,3.341,724,3.506,736,2.681,743,3.201,747,4.322,759,4.192,800,3.103,854,3.255,870,4.25,893,3.103,925,3.888,1151,3.255,1152,4.238,1804,3.906,1858,4.322,1859,4.322,2732,5.102,2956,3.403,2981,5.102,3091,5.643,3092,5.643,3093,5.643,3094,5.643,3095,5.643,3096,5.643,3097,5.643]],["component/220",[79,0.574]],["title/221",[242,32.769,451,35.935]],["name/221",[242,1.562,451,1.713]],["text/221",[7,2.055,14,2.609,19,1.872,30,1.827,46,1.844,70,2.736,71,2.409,73,2.693,88,1.808,90,2.71,108,2.627,128,3.121,229,3.775,230,3.618,242,5.408,300,3.483,404,4.687,408,4.1,413,4.709,451,4.766,599,1.855,636,1.778,759,3.1,894,3.694,963,3.235,1097,3.423,1098,2.419,1099,3.423,1365,3.694,1731,4.507,1746,4.073,1771,4.709,1775,4.073,1779,4.073,1786,4.339,1861,4.709,1880,4.709,1883,4.709,1890,4.709,2422,5.32,2423,5.127,2424,5.32,2425,5.32,2426,5.32,2427,5.32,2428,5.32,2429,5.32,2430,5.32,2431,5.32,2432,5.32,2433,5.32]],["component/221",[79,0.574]],["title/222",[242,32.769,449,30.014]],["name/222",[242,1.562,449,1.431]],["text/222",[13,1.995,14,2.231,34,2.33,38,2.816,43,2.581,71,3.666,88,2.375,127,2.767,134,4.004,201,2.643,210,2.854,240,2.018,242,5.951,246,3.237,252,3.833,441,3.313,449,4.351,451,3.898,510,3.605,536,5.242,572,4.042,590,3.374,700,3.395,710,3.353,739,3.555,745,3.967,757,4.163,762,3.932,802,3.771,863,3.802,1047,4.35,1109,4.942,1231,4.207,1278,4.3,2038,5.364,2154,4.942,2391,5.364,2434,6.059,2435,6.059,2436,6.059]],["component/222",[79,0.574]],["title/223-1",[79,13.98]],["name/223-1",[]],["text/223-1",[]],["component/223-1",[]],["title/223-2",[245,34.575]],["name/223-2",[]],["text/223-2",[]],["component/223-2",[]],["title/223",[54,19.634,500,23.399,501,27.639]],["name/223",[54,0.829,500,0.988,501,1.167]],["text/223",[4,1.498,14,1.837,30,1.198,34,1.342,40,0.809,43,1.486,46,2.985,54,4.202,56,2.436,57,4.597,60,2.511,79,0.697,88,0.851,93,2.265,99,4.469,105,1.4,128,2.047,141,3.685,158,4.05,166,1.908,169,2.545,207,2.033,212,1.854,223,1.4,234,1.351,245,1.723,404,2.207,408,1.931,438,4.623,475,2.505,488,1.4,500,4.683,501,4.469,526,1.897,599,2.322,613,3.089,636,1.166,710,1.931,731,1.431,744,2.276,776,2.672,793,3.276,845,2.285,852,3.229,854,2.226,866,2.122,885,2.285,894,2.423,901,2.047,902,2.172,904,2.535,918,2.449,919,2.711,923,2.566,927,1.875,968,3.019,974,2.6,980,2.306,1000,3.089,1027,2.672,1034,4.155,1047,2.505,1096,2.846,1152,2.899,1155,2.207,1188,2.423,1210,2.846,1212,2.476,1217,3.522,1465,3.491,1573,2.423,1721,2.423,1729,2.846,1740,2.423,1849,3.089,1919,2.798,1952,2.711,1985,2.635,1986,3.089,2035,3.089,2162,3.089,2195,2.711,2204,3.089,2405,5.532,2437,3.489,2438,3.168,2439,6.658,2440,3.489,2441,3.489,2442,3.489,2443,3.089,2444,3.489,2445,3.489,2446,3.489,2447,3.489,2448,3.489,2449,3.489,2450,3.489,2451,3.489,2452,5.23,2453,3.489,2454,3.489,2455,2.672]],["component/223",[79,0.574]],["title/224-1",[14,18.744]],["name/224-1",[]],["text/224-1",[]],["component/224-1",[]],["title/224-2",[1188,48.621]],["name/224-2",[]],["text/224-2",[]],["component/224-2",[]],["title/224-3",[1718,33.233,2225,45.561]],["name/224-3",[]],["text/224-3",[]],["component/224-3",[]],["title/224",[488,22.405,500,28.134]],["name/224",[83,2.18]],["text/224",[4,1.057,7,0.549,14,2.434,20,1.508,31,0.915,34,0.947,35,2.177,36,1.656,40,0.777,43,0.583,45,1.253,46,2.985,49,1.095,54,2.593,56,0.615,63,1.71,64,1.426,66,1.204,67,1.074,88,0.334,90,0.501,104,1.879,105,1.346,107,1.048,111,1.644,121,0.723,123,0.648,124,0.881,136,0.763,138,1.662,139,1.465,144,0.634,146,2.387,149,0.827,154,0.67,156,1.768,158,1.498,159,0.833,165,1.397,166,0.749,167,3.046,169,1.155,171,0.922,196,0.983,207,2.753,208,1.486,221,1.681,256,1.584,398,0.798,400,1.88,435,0.507,448,1.048,449,1.323,477,0.815,482,0.889,488,2.949,490,1.048,492,2.158,496,0.866,497,1.463,500,4.338,504,0.839,516,1.533,520,0.972,534,0.787,552,1.558,556,1.048,569,0.809,570,1.388,591,1.416,592,1.165,594,0.913,597,1.772,601,0.634,602,3.433,606,0.995,611,2.259,636,1.914,637,0.897,643,1.212,655,0.873,694,1.301,697,1.673,707,0.961,708,2.18,714,1.08,715,0.889,716,1.048,717,0.897,731,0.561,739,0.803,744,2.723,755,0.716,757,1.692,760,0.972,793,0.827,799,0.995,804,2.268,810,1.212,817,2.437,836,1.728,837,1.642,840,2.238,842,1.048,844,1.048,845,2.197,854,3.357,858,1.007,860,1.832,863,0.859,866,1.498,895,0.866,898,2.282,901,1.968,903,2.008,913,1.943,933,0.827,945,1.692,946,0.793,947,3.537,948,0.913,963,0.833,964,2.421,965,3.296,967,0.839,978,1.117,985,3.627,989,0.897,1005,1.117,1008,1.193,1010,0.961,1013,0.866,1017,1.521,1039,1.331,1045,2.008,1056,0.74,1088,0.941,1089,0.881,1122,1.117,1137,3.942,1172,1.885,1195,1.212,1199,0.983,1203,1.904,1222,0.995,1229,0.995,1231,0.951,1232,2.008,1233,0.983,1322,0.846,1361,0.951,1363,1.212,1485,2.736,1548,2.18,1586,1.16,1663,1.048,1696,7.071,1698,2.903,1729,2.008,1833,2.18,1845,3.789,1910,1.212,1923,1.16,1993,1.048,2036,1.048,2089,1.212,2155,1.212,2168,3.627,2169,1.117,2171,1.212,2178,2.008,2195,2.606,2216,1.048,2219,1.185,2225,1.117,2277,1.212,2443,1.212,2456,1.369,2457,1.369,2458,1.369,2459,1.278,2460,1.369,2461,1.369,2462,4.725,2463,1.369,2464,1.369,2465,3.355,2466,1.369,2467,1.369,2468,1.369,2469,1.369,2470,1.369,2471,1.185,2472,1.369,2473,2.462,2474,4.097,2475,7.096,2476,2.462,2477,1.369,2478,1.369,2479,1.369,2480,1.32,2481,1.369,2482,1.369,2483,1.369,2484,4.097,2485,2.462,2486,1.369,2487,1.369,2488,1.369,2489,1.369,2490,1.369,2491,1.369,2492,2.462,2493,1.369,2494,1.369,2495,1.369,2496,1.369,2497,1.369,2498,1.369,2499,1.369,2500,1.369,2501,1.369,2502,1.369,2503,1.369,2504,1.369,2505,1.369,2506,1.369,2507,1.369,2508,1.369,2509,1.369,2510,1.369,2511,1.369,2512,1.369,2513,1.369]],["component/224",[79,0.574]],["title/225-1",[54,14.689,105,13.941,500,17.506,963,21.138,1137,20.115]],["name/225-1",[]],["text/225-1",[]],["component/225-1",[]],["title/225-2",[1573,38.782,2455,42.764]],["name/225-2",[]],["text/225-2",[]],["component/225-2",[]],["title/225",[963,21.138,1137,20.115,1246,26.61,1573,24.132,2455,26.61]],["name/225",[963,0.781,1137,0.743,1246,0.983,1573,0.891,2455,0.983]],["text/225",[3,4.053,7,1.105,13,1.632,28,2.711,34,2.711,46,1.718,54,4.146,56,3.165,67,2.162,105,3.291,109,2.888,132,3.038,488,3.584,497,2.162,499,2.76,500,5.195,501,4.194,539,3.406,570,2.795,573,3.185,696,2.401,767,2.207,795,4.194,860,3.668,866,3.015,869,3.559,927,3.788,963,3.015,1137,5.841,1155,3.136,1275,3.851,1351,4.535,1465,5.278,1562,4.388,1573,4.895,1740,3.442,1829,4.199,2514,4.957,2515,4.957,2516,4.628,2517,4.957,2518,4.957,2519,4.957,2520,4.957]],["component/225",[79,0.574]],["title/226-1",[19,17.696]],["name/226-1",[]],["text/226-1",[]],["component/226-1",[]],["title/226-2",[168,21.045,199,22.087]],["name/226-2",[]],["text/226-2",[]],["component/226-2",[]],["title/226",[269,35.333,270,40.577]],["name/226",[269,1.685,270,1.935]],["text/226",[6,1.27,7,1.082,10,1.242,11,1.251,13,1.598,14,1.699,19,1.226,28,1.165,30,1.666,40,1.609,46,1.05,48,5.393,49,0.988,60,1.401,88,1.694,90,1.108,105,3.416,118,4.397,165,1.719,168,3.055,199,1.198,201,3.029,207,4.046,223,1.947,240,1.617,245,1.496,246,1.618,259,1.541,264,3.444,269,4.392,270,3.525,398,2.828,488,2.435,522,5.408,524,3.32,525,1.656,570,3.424,589,1.916,599,1.692,696,1.467,720,3.958,758,1.321,764,4.05,777,3.958,788,5.567,871,2.2,900,1.591,953,1.697,1008,1.467,1039,3.753,1056,1.637,1069,2.228,1091,1.916,1098,1.377,1286,1.574,1364,2.103,1584,1.916,1811,1.753,2042,2.39,2221,3.958,2312,5.89,2521,3.029,2522,1.842,2523,1.842,2524,3.029,2525,1.647,2526,3.029,2527,3.029,2528,2.621,2529,3.029,2530,2.681,2531,2.681,2532,3.029,2533,2.681,2534,2.681,2535,2.681,2536,2.681,2537,2.681,2538,6.147,2539,4.296,2540,4.868,2541,7.091,2542,4.296,2543,4.296,2544,2.681,2545,4.296,2546,2.681,2547,2.681,2548,4.296,2549,4.296,2550,2.681,2551,3.77,2552,2.681,2553,2.566,2554,2.681,2555,2.681,2956,2.02]],["component/226",[79,0.574]],["title/227-1",[19,17.696]],["name/227-1",[]],["text/227-1",[]],["component/227-1",[]],["title/227-2",[168,21.045,199,22.087]],["name/227-2",[]],["text/227-2",[]],["component/227-2",[]],["title/227",[269,35.333,271,39.64]],["name/227",[269,1.685,271,1.89]],["text/227",[6,1.27,7,1.082,10,1.242,11,1.251,13,1.598,14,1.699,19,1.226,28,1.165,30,1.666,40,1.609,46,1.05,48,5.393,49,0.988,60,1.401,88,1.694,90,1.108,105,3.416,118,4.397,165,1.719,168,3.055,199,1.198,201,3.029,207,4.046,223,1.947,240,1.617,245,1.496,246,1.618,259,1.541,264,3.444,269,4.392,271,3.444,398,2.828,488,2.435,522,5.408,524,3.32,525,1.656,570,3.424,589,1.916,599,1.692,696,1.467,720,3.958,758,1.321,764,4.05,777,3.958,788,5.567,871,2.2,900,1.591,953,1.697,1008,1.467,1039,3.753,1056,1.637,1069,2.228,1091,1.916,1098,1.377,1286,1.574,1364,2.103,1584,1.916,1811,1.753,2042,2.39,2221,3.958,2312,5.89,2522,1.842,2523,1.842,2525,1.647,2528,2.621,2530,2.681,2531,2.681,2533,2.681,2534,2.681,2535,2.681,2536,2.681,2537,2.681,2538,6.147,2539,4.296,2540,4.868,2541,7.091,2542,4.296,2543,4.296,2544,2.681,2545,4.296,2546,2.681,2547,2.681,2548,4.296,2549,4.296,2550,2.681,2551,3.77,2552,2.681,2553,2.566,2554,2.681,2555,2.681,2556,2.828,2557,2.828,2558,3.029,2559,3.029,2560,3.029,2561,3.029,2956,2.02]],["component/227",[79,0.574]],["title/228-1",[19,17.696]],["name/228-1",[]],["text/228-1",[]],["component/228-1",[]],["title/228-2",[168,21.045,199,22.087]],["name/228-2",[]],["text/228-2",[]],["component/228-2",[]],["title/228",[88,13.63,273,40.577]],["name/228",[88,0.65,273,1.935]],["text/228",[6,1.802,7,1.417,10,1.762,11,1.775,13,1.415,14,2.044,19,1.086,27,2.666,28,1.653,40,2.164,43,3.221,48,5.516,49,1.402,81,4.5,88,2.176,168,2.85,199,1.699,218,2.634,223,1.724,259,2.187,273,4.617,488,2.55,524,3.476,525,2.35,599,2.914,610,3.595,696,2.081,728,5.627,748,2.675,758,1.875,764,4.24,939,3.202,1098,1.954,1286,2.234,1572,3.804,1584,4.784,2165,3.641,2416,3.505,2417,2.84,2522,2.614,2523,2.614,2525,2.336,2540,7.151,2541,5.876,2562,4.297,2563,4.297,2564,4.297,2565,4.297,2566,4.297,2567,4.297,2568,4.297,2569,7.061,2570,5.77,2571,5.934,2572,5.934,2573,8.357,2574,6.126,2956,2.867]],["component/228",[79,0.574]],["title/229-1",[19,17.696]],["name/229-1",[]],["text/229-1",[]],["component/229-1",[]],["title/229-2",[168,21.045,199,22.087]],["name/229-2",[]],["text/229-2",[]],["component/229-2",[]],["title/229",[280,50.872]],["name/229",[280,3.014]],["text/229",[6,1.989,7,1.522,10,1.944,11,1.959,14,2.142,19,2.345,20,1.745,28,1.823,30,2.345,33,5.228,40,2.029,47,2.573,88,1.157,118,2.744,149,2.862,168,2.573,199,1.875,222,2.204,223,1.902,240,3.091,259,2.413,280,7.406,388,3.63,416,3.133,488,3.21,494,2.975,512,4.034,551,3.133,572,3.163,589,4.32,599,1.653,696,2.296,736,2.491,758,2.068,860,2.12,933,2.862,953,2.657,957,2.999,1008,2.296,1052,2.841,1098,2.156,1142,3.684,1203,2.691,1286,2.464,1919,3.802,2312,4.961,2522,2.884,2523,2.884,2525,2.578,2575,4.741,2576,4.741,2577,4.741,2578,4.741,2579,4.741,2580,4.741,2581,5.228,2582,6.828,2956,3.163]],["component/229",[79,0.574]],["title/230-1",[19,17.696]],["name/230-1",[]],["text/230-1",[]],["component/230-1",[]],["title/230-2",[168,21.045,199,22.087]],["name/230-2",[]],["text/230-2",[]],["component/230-2",[]],["title/230",[283,50.872]],["name/230",[283,3.014]],["text/230",[6,2.772,7,1.911,10,2.71,11,2.731,14,2.463,19,1.67,20,2.433,40,1.532,88,1.613,168,3.794,199,2.614,219,3.113,223,2.651,259,3.364,282,5.851,283,6.913,599,2.305,758,2.883,1098,3.006,1286,3.435,2522,4.02,2523,4.02,2525,3.593,2583,6.61,2584,6.61,2585,6.61,2586,6.61,2587,6.61,2588,6.61,2956,4.409]],["component/230",[79,0.574]],["title/231-1",[19,17.696]],["name/231-1",[]],["text/231-1",[]],["component/231-1",[]],["title/231",[88,9.703,277,21.874,573,14.173,727,28.545]],["name/231",[88,0.379,277,0.854,573,0.553,727,1.114]],["text/231",[6,1.839,7,1.438,10,1.798,11,1.811,14,2.064,19,1.63,30,3.088,40,2.084,56,2.896,64,1.091,88,1.867,168,1.652,169,3.024,223,1.759,240,2.149,259,2.231,277,2.412,287,3.576,288,3.576,438,4.478,486,3.265,494,2.751,522,4.302,525,2.397,573,1.563,599,3.136,610,2.084,696,2.123,727,3.147,758,1.912,764,4.302,909,2.666,1056,3.486,1098,1.993,1286,2.279,1332,3.881,1749,6.037,2522,2.666,2523,2.666,2525,2.383,2551,3.406,2581,6.885,2605,5.71,2620,4.093,2647,4.384,2648,4.384,2649,6.45,2650,4.384,2651,4.384,2652,4.384,2653,6.45,2654,4.384,2655,4.384,2656,4.384,2657,4.384,2658,4.093,2659,8.438,2660,4.384,2661,4.384,2662,4.384,2663,6.022,2664,4.384,2665,6.45,2666,4.384,2956,2.924]],["component/231",[79,0.574]],["title/232-1",[19,17.696]],["name/232-1",[]],["text/232-1",[]],["component/232-1",[]],["title/232",[277,30.727,278,38.782]],["name/232",[277,1.465,278,1.849]],["text/232",[6,2.376,7,1.724,8,4.624,10,2.323,11,2.34,14,2.155,19,2.393,30,1.945,40,2.194,43,4.033,45,2.883,65,4.543,88,1.382,168,2.135,223,2.273,234,2.194,259,2.883,277,3.117,278,5.372,390,3.71,599,1.976,696,2.744,758,2.471,1098,2.576,1286,2.944,1811,3.279,2522,3.446,2523,3.446,2525,3.08,2581,4.338,2667,5.665,2668,5.665,2669,5.665,2670,5.665,2671,5.665,2672,7.224,2673,7.737,2956,3.779]],["component/232",[79,0.574]],["title/233-1",[19,17.696]],["name/233-1",[]],["text/233-1",[]],["component/233-1",[]],["title/233",[292,50.872]],["name/233",[292,3.014]],["text/233",[6,2.577,7,1.821,10,2.519,11,2.538,14,2.246,19,1.553,27,2.577,40,1.424,88,1.499,168,2.315,217,3.443,223,2.465,259,3.127,292,5.937,599,2.143,610,4.365,696,2.976,731,2.519,758,2.68,1008,2.976,1052,3.682,1098,2.794,1286,3.193,1536,5.012,2017,4.847,2036,4.704,2522,3.737,2523,3.737,2525,3.34,2729,5.736,2734,8.172,2735,6.144,2736,6.144,2737,6.144,2738,6.144,2739,6.144,2740,6.144,2741,6.144,2742,6.144,2743,5.922,2744,6.144,2956,4.099]],["component/233",[79,0.574]],["title/234-1",[19,17.696]],["name/234-1",[]],["text/234-1",[]],["component/234-1",[]],["title/234",[470,53.613]],["name/234",[470,3.176]],["text/234",[6,1.936,7,1.493,10,1.893,11,1.907,13,1.52,14,2.625,19,1.693,20,1.699,27,3.306,31,1.716,40,1.07,58,2.047,64,1.667,88,2.337,90,1.688,123,2.184,180,2.896,212,2.452,223,1.852,228,4.906,259,2.349,294,2.851,470,5.128,497,2.921,512,2.727,525,2.524,599,1.61,610,2.194,618,2.325,636,1.542,758,2.013,800,2.807,860,2.064,1098,2.099,1286,2.399,1718,2.746,1915,2.92,2363,4.808,2364,4.086,2365,3.701,2366,3.485,2367,3.314,2368,3.314,2369,3.314,2417,3.05,2525,2.509,2745,4.616,2746,4.616,2747,6.697,2748,4.616,2749,4.616,2750,3.395,2751,4.616,2752,4.616,2753,4.616,2754,4.616,2755,4.616,2756,3.395,2757,3.395,2758,3.395,2759,3.395,2760,3.395,2761,3.395,2762,3.395,2763,3.586,2764,3.586,2765,3.395,2766,3.395,2956,3.079]],["component/234",[79,0.574]],["title/235-1",[19,17.696]],["name/235-1",[]],["text/235-1",[]],["component/235-1",[]],["title/235",[277,38.523]],["name/235",[277,2.282]],["text/235",[6,1.957,7,1.504,10,1.913,11,1.927,13,1.536,14,2.63,19,1.706,20,1.717,27,3.326,31,1.734,40,1.081,58,2.069,64,1.68,88,2.345,123,2.208,180,2.927,212,2.479,223,1.871,228,4.936,259,2.374,277,2.567,294,2.881,497,2.944,512,2.756,599,1.627,610,2.218,618,2.35,636,1.559,758,2.035,800,2.837,860,2.086,1098,2.121,1286,2.425,1718,2.776,1915,2.951,2363,4.845,2365,3.741,2366,3.522,2367,3.349,2368,3.349,2369,3.349,2417,3.083,2525,2.536,2750,3.431,2756,3.431,2757,3.431,2758,3.431,2759,3.431,2760,3.431,2761,3.431,2762,3.431,2763,3.624,2764,3.624,2765,3.431,2766,3.431,2773,4.665,2774,4.665,2775,4.665,2776,6.749,2777,4.665,2778,4.665,2779,4.665,2780,4.665,2781,4.665,2782,4.665,2783,4.665,2784,4.665,2956,3.112]],["component/235",[79,0.574]],["title/236-1",[19,17.696]],["name/236-1",[]],["text/236-1",[]],["component/236-1",[]],["title/236",[469,53.613]],["name/236",[469,3.176]],["text/236",[6,1.957,7,1.504,10,1.913,11,1.927,13,1.536,14,2.63,19,1.706,20,1.717,27,3.326,31,1.734,40,1.081,58,2.069,64,1.68,88,2.345,123,2.208,180,2.927,212,2.479,223,1.871,228,4.936,259,2.374,294,2.881,469,5.167,497,2.944,512,2.756,599,1.627,610,2.218,618,2.35,636,1.559,758,2.035,800,2.837,860,2.086,1098,2.121,1286,2.425,1718,2.776,1915,2.951,2363,4.845,2366,3.522,2367,3.349,2368,3.349,2369,3.349,2417,3.083,2525,2.536,2750,3.431,2756,3.431,2757,3.431,2758,3.431,2759,3.431,2760,3.431,2761,3.431,2762,3.431,2763,3.624,2764,3.624,2765,3.431,2766,3.431,2785,4.665,2786,4.665,2787,6.749,2788,4.665,2789,4.665,2790,4.665,2791,4.356,2792,4.665,2793,4.665,2794,4.665,2795,4.665,2796,4.665,2956,3.112]],["component/236",[79,0.574]],["title/237-1",[19,17.696]],["name/237-1",[]],["text/237-1",[]],["component/237-1",[]],["title/237",[2797,57.12]],["name/237",[2797,3.384]],["text/237",[6,2.103,7,1.584,10,2.056,11,2.071,13,1.651,14,2.61,19,1.796,20,1.846,27,2.103,31,1.864,40,1.162,58,2.223,64,1.769,88,2.192,123,2.372,180,3.146,212,2.664,223,2.011,228,5.138,259,2.552,294,3.096,466,3.786,497,3.1,512,2.962,599,1.748,610,2.383,636,1.675,758,2.187,800,3.049,860,2.242,1098,2.28,1286,2.606,1718,2.983,1915,3.172,2363,5.102,2367,3.599,2368,3.599,2369,3.599,2525,2.726,2750,3.688,2756,3.688,2757,3.688,2758,3.688,2759,3.688,2760,3.688,2761,3.688,2762,3.688,2765,3.688,2766,3.688,2797,5.797,2798,5.014,2799,5.014,2800,7.106,2801,5.014,2802,5.014,2803,5.014,2804,5.014,2805,5.014,2806,5.014,2956,3.345]],["component/237",[79,0.574]],["title/238",[19,17.696]],["name/238",[83,2.18]],["text/238",[1,3.233,2,3.017,7,1.08,8,3.464,12,3.521,13,2.667,14,2.382,15,3.954,16,5.04,17,3.954,19,2.591,22,5.659,25,3.954,26,4.291,27,2.033,28,1.864,29,4.291,30,2.382,31,1.802,33,3.711,34,1.864,37,3.297,40,2.323,43,2.064,69,7.165,76,3.954,78,3.017,104,2.223,133,3.297,168,1.826,176,1.966,201,2.114,240,2.311,397,2.454,401,3.954,485,3.233,488,1.944,492,2.213,494,3.041,526,2.635,592,2.293,636,1.62,721,2.75,758,2.114,965,2.604,1256,4.847,1257,4.291,1258,4.847,1259,4.847,1260,4.847,1261,4.847,1262,4.847,1263,4.291,1264,4.847,1265,4.847,1266,4.847,1267,4.847]],["component/238",[79,0.574]],["title/239",[168,26.384]],["name/239",[168,1.563]],["text/239",[8,4.264,19,1.978,28,3.01,31,2.468,35,1.49,37,4.516,38,1.304,40,1.336,41,4.531,42,6.386,43,3.787,48,3.922,49,2.555,52,1.938,53,4.309,55,2.213,60,2.667,63,1.948,69,2.148,72,1.693,88,1.113,105,1.125,145,2.241,150,1.582,160,2.376,168,2.172,215,2.148,222,2.12,236,1.889,240,1.519,388,3.492,390,5.631,392,2.619,394,3.864,397,2.918,398,4.562,400,3.23,401,2.288,403,3.313,404,4.2,431,1.837,461,1.474,488,1.125,494,1.76,501,1.669,555,3.167,624,3.72,636,2.616,696,1.358,697,1.399,700,2.556,749,3.274,758,1.99,767,2.031,933,1.693,1039,2.465,1095,6.189,1218,1.991,1269,2.805,1270,4.352,1271,4.561,1272,4.883,1273,4.038,1274,2.805,1275,3.543,1276,2.483,1277,2.063,1278,3.237,1279,3.864,1280,4.561,1281,2.805,1282,3.492,1427,4.969,1866,4.741,1995,2.33,2085,2.483,2165,6.189,3098,3.102,3099,3.102,3100,3.102,3101,3.102,3102,8.079]],["component/239",[79,0.574]],["title/240-1",[8,19.864,55,36.649,73,23.519]],["name/240-1",[]],["text/240-1",[]],["component/240-1",[]],["title/240-2",[125,29.843,138,22.651]],["name/240-2",[]],["text/240-2",[]],["component/240-2",[]],["title/240",[88,17.088]],["name/240",[88,1.012]],["text/240",[4,1.105,7,1.405,8,4.275,12,1.869,13,0.847,14,2.609,15,2.099,16,3.087,17,2.099,19,2.101,20,0.947,22,2.099,25,2.099,28,2.088,30,0.884,40,1.461,43,1.096,47,2.629,48,2.511,49,2.057,51,2.18,52,0.865,53,4.877,55,4.283,57,5.34,58,1.141,60,1.191,64,1.569,65,2.063,69,3.254,71,1.165,72,1.553,73,2.749,74,1.602,76,2.099,78,1.602,88,2.028,106,1.847,111,2.529,122,1.97,124,1.656,125,1.375,127,1.175,130,1.52,133,1.75,138,1.044,141,1.424,166,1.407,168,0.97,169,1.207,210,1.212,253,1.433,254,2.688,388,1.97,396,3.6,397,2.152,398,3.673,399,3.6,400,2.381,407,2.278,408,2.352,414,2.278,416,1.7,488,1.032,492,1.175,501,1.531,522,1.716,572,1.716,599,0.897,614,2.402,615,1.656,623,1.577,639,2.18,640,2.099,694,1.36,736,1.352,745,1.685,758,1.122,835,2.862,845,2.783,860,1.15,866,1.565,885,1.685,956,1.97,964,1.52,980,1.7,1056,3.407,1094,1.628,1111,6.6,1177,2.402,1198,1.806,1263,3.762,1270,1.943,1273,2.278,1283,2.573,1284,4.25,1285,3.762,1286,2.209,1287,4.331,1288,2.573,1291,2.226,1292,2.573,1293,2.573,1294,2.573,1295,2.573,1296,2.573,1297,2.573,1298,3.762,1299,2.573,1300,2.573,1301,2.278,1302,2.278,1303,2.278,1304,2.278,1305,2.278,1472,2.18,3103,2.846,3104,2.846,3105,2.846,3106,2.846,3107,2.846,3108,2.846]],["component/240",[79,0.574]],["title/241-1",[125,29.843,138,22.651]],["name/241-1",[]],["text/241-1",[]],["component/241-1",[]],["title/241",[8,17.003,120,26.037,121,21.008,124,25.582]],["name/241",[8,0.664,120,1.016,121,0.82,124,0.998]],["text/241",[5,2.999,6,2.273,7,1.919,8,3.681,10,2.222,11,2.239,14,2.106,19,1.896,40,1.256,43,2.308,47,2.042,104,2.485,118,3.136,122,4.149,124,5.538,125,2.895,154,2.65,161,3.373,168,3.243,200,2.801,210,2.552,213,3.321,263,4.797,295,2.53,390,3.548,522,5.742,526,2.946,599,1.89,636,1.811,749,3.89,933,3.271,1111,5.326,1291,4.688,1298,6.643,1301,4.797,1302,4.797,1303,4.797,1304,4.797,1305,4.797,1306,4.149,1307,5.419,1308,5.419,1309,7.504,1310,5.419,1311,5.419,1312,5.419,1313,5.419,1314,5.419,1315,5.419,1316,5.059,1317,5.419,2956,3.615]],["component/241",[79,0.574]],["title/242",[8,23.884,125,29.843]],["name/242",[8,1.139,125,1.423]],["text/242",[5,2.515,6,1.906,7,1.476,8,4.464,10,1.863,11,1.877,13,2.18,14,2.232,16,3.301,18,4.022,19,1.148,20,1.673,31,1.689,40,1.534,114,3.734,121,2.401,125,5.384,127,2.075,176,2.685,180,2.851,200,2.349,210,3.119,213,2.784,218,2.784,239,5.483,256,2.923,404,4.942,497,3.407,636,2.212,694,2.401,702,4.089,755,4.082,794,3.849,832,2.828,849,3.06,854,2.898,899,5.224,951,2.703,953,2.546,989,2.975,1318,5.401,1319,4.544,1320,6.621,1321,4.544,1322,2.806,1323,4.544,1324,4.544,1325,4.544,1326,4.544,1327,4.544,1328,4.544,1329,4.544,1330,4.544,1331,4.544,1332,4.022,1333,4.544,1334,4.544,1335,4.544,1336,4.544,2956,3.031]],["component/242",[79,0.574]],["title/243-1",[19,17.696]],["name/243-1",[]],["text/243-1",[]],["component/243-1",[]],["title/243-2",[573,19.909,592,26.429]],["name/243-2",[]],["text/243-2",[]],["component/243-2",[]],["title/243",[726,42.764,3066,44.786]],["name/243",[3066,3.326]],["text/243",[4,2.12,5,0.981,6,1.298,7,1.101,10,0.727,11,0.732,13,0.584,14,1.371,19,2.009,28,2.369,30,0.609,31,2.084,34,1.19,38,1.439,39,2.685,40,2.131,41,1.792,43,2.103,46,1.943,47,1.861,48,3.64,49,0.579,52,0.596,56,1.39,58,2.731,64,0.441,65,2.482,66,1.514,67,0.773,73,4.825,87,1.673,88,1.205,104,1.42,105,0.711,106,4.759,109,1.033,111,1.981,118,1.026,120,1.161,130,1.829,134,1.172,138,1.671,142,1.422,145,1.521,150,1,154,0.867,166,0.97,168,1.861,169,1.452,176,0.719,179,1.273,199,1.953,219,0.835,222,1.439,223,1.242,228,1.104,229,1.258,230,1.206,234,2.17,240,1.373,256,1.992,397,0.898,398,1.033,416,1.172,453,1.019,471,0.953,473,1.172,477,2.938,478,2.222,497,0.773,521,2.572,551,1.172,572,1.183,573,1.998,592,2.652,597,0.937,599,0.618,601,1.432,623,2.525,631,1.664,636,2.058,637,1.161,694,2.609,704,2.623,705,1.183,715,1.151,721,2.339,724,3.393,726,1.357,731,1.269,734,1.172,743,2.586,744,0.744,746,1.013,755,0.926,767,1.835,796,1.131,816,3.003,820,1.534,824,1.655,826,2.89,931,1.339,936,1.141,941,1.339,947,1.912,951,1.055,964,1.047,989,1.161,1008,0.859,1010,1.244,1052,1.855,1056,0.958,1071,1.194,1192,1.502,1224,1.304,1238,1.288,1316,1.655,1322,4.744,1348,1.473,1555,2.337,1649,1.258,1715,1.183,1811,2.385,1866,2.009,1920,2.249,1985,1.339,1996,2.679,2107,1.655,2112,1.321,2169,1.446,2312,1.288,2404,2.482,2570,2.811,2581,5.383,2611,1.502,2672,1.655,2956,1.183,3066,6.159,3084,1.773,3109,1.961,3110,3.424,3111,7.776,3112,1.709,3113,1.709,3114,1.709,3115,1.709,3116,1.709,3117,1.853,3118,1.853,3119,1.961,3120,6.389,3121,5.403,3122,1.853,3123,1.853,3124,1.853,3125,1.961,3126,1.961,3127,1.709,3128,1.709,3129,1.853,3130,1.961,3131,3.424,3132,5.462,3133,1.853,3134,1.961,3135,1.961,3136,1.961,3137,1.961,3138,1.961,3139,1.961,3140,1.961,3141,1.709]],["component/243",[79,0.574]],["title/244",[816,33.97,2920,44.786]],["name/244",[2920,3.326]],["text/244",[7,1.706,127,3.495,188,6.358,218,4.69,219,3.605,462,5.702,464,7.814,768,7.421,816,4.655,967,5.764,2631,6.243,2920,8.516,2921,8.001,2922,8.001,2923,8.001]],["component/244",[79,0.574]],["title/245",[816,42.588]],["name/245",[83,2.18]],["text/245",[7,2.287,38,3.621,47,2.935,125,4.163,223,3.125,227,6.146,239,5.468,816,6.242,927,4.186,2920,6.247,3066,6.247,3142,7.274,3143,7.79,3144,8.616,3145,8.616]],["component/245",[79,0.574]],["title/246-1",[108,27.578,198,52.148]],["name/246-1",[]],["text/246-1",[]],["component/246-1",[]],["title/246-2",[19,17.696]],["name/246-2",[]],["text/246-2",[]],["component/246-2",[]],["title/246-3",[573,19.909,592,26.429]],["name/246-3",[]],["text/246-3",[]],["component/246-3",[]],["title/246-4",[477,33.233,3146,61.774]],["name/246-4",[]],["text/246-4",[]],["component/246-4",[]],["title/246-5",[809,40.528]],["name/246-5",[]],["text/246-5",[]],["component/246-5",[]],["title/246-6",[19,14.115,553,44.786]],["name/246-6",[]],["text/246-6",[]],["component/246-6",[]],["title/246",[125,24.82,239,32.604,816,28.253]],["name/246",[125,1.423,239,1.869]],["text/246",[4,2.617,5,0.75,6,1.023,7,1.439,10,0.555,11,0.56,13,1.544,14,2.029,19,1.908,28,2.344,30,0.465,31,0.906,34,0.938,36,2.111,38,1.545,39,0.736,40,1.749,41,1.411,42,1.105,46,1.152,47,2.552,48,1.964,49,0.442,52,0.455,56,0.608,58,1.081,60,0.627,64,0.337,66,0.662,67,0.591,70,0.697,73,4.631,84,1.581,87,0.732,88,1.785,89,0.864,102,0.903,105,1.881,106,1.75,108,0.669,111,1.881,119,1.17,125,5.027,128,0.795,130,1.964,134,0.895,138,1.348,141,1.349,142,1.086,144,0.627,145,1.634,147,0.864,149,1.472,152,0.843,161,0.843,163,1.105,166,1.333,167,1.411,168,0.51,169,1.143,176,0.549,179,0.972,199,1.315,200,1.26,208,0.818,210,0.638,222,0.629,223,0.543,228,0.843,234,1.574,236,1.642,239,3.667,251,0.903,252,0.857,256,1.569,381,0.921,397,0.686,398,0.789,408,0.75,416,0.895,462,1.009,471,0.728,473,0.895,477,2.418,478,0.972,483,0.984,484,0.728,486,0.686,497,0.591,548,0.759,551,0.895,573,2.173,579,1.009,580,1.265,592,3.055,597,0.716,599,0.85,601,1.128,615,0.871,618,1.228,623,0.83,631,1.31,636,2.445,694,0.716,702,0.836,705,0.903,715,0.879,721,0.769,724,1.675,731,1.363,734,0.895,744,0.568,746,0.774,754,1.147,755,1.737,758,0.591,767,0.603,768,1.069,795,0.806,796,0.864,798,1.989,809,0.784,816,3.461,820,2.109,835,1.642,852,0.806,866,0.824,899,1.069,913,1.069,925,0.732,927,1.31,931,1.023,941,1.023,947,0.836,989,0.887,1006,1.069,1008,1.181,1023,1.052,1052,1.461,1056,0.732,1071,0.912,1124,1.265,1203,1.384,1214,1.816,1224,0.996,1233,0.972,1238,1.771,1275,1.894,1278,0.961,1322,3.227,1348,1.125,1555,1.023,1556,1.147,1584,0.857,1586,2.065,1588,1.265,1649,1.73,1715,3.486,1718,1.451,1747,1.147,1811,1.411,1866,0.879,1915,0.857,1916,4.378,1985,1.023,1996,1.172,2000,1.265,2112,1.816,2178,3.825,2187,1.199,2273,1.23,2404,1.086,2417,0.895,2471,1.172,2581,1.867,2611,1.147,2791,1.265,2822,1.23,2926,1.416,2956,0.903,3112,1.305,3113,1.305,3114,1.305,3115,1.305,3116,1.305,3120,8.395,3121,3.917,3127,1.305,3128,1.305,3141,1.305,3142,1.265,3147,1.416,3148,1.498,3149,1.416,3150,1.498,3151,1.416,3152,2.697,3153,2.697,3154,1.498,3155,1.498,3156,1.498,3157,1.498,3158,1.498,3159,1.498,3160,1.498,3161,1.498,3162,2.697,3163,1.498,3164,2.697,3165,3.677,3166,1.498,3167,1.498,3168,1.498,3169,1.498,3170,1.498,3171,1.498,3172,5.186,3173,5.186,3174,5.186,3175,2.697,3176,5.186,3177,5.186,3178,1.498,3179,2.697,3180,3.677,3181,1.498,3182,1.498,3183,1.498,3184,1.498,3185,1.623,3186,1.623,3187,1.623,3188,1.623,3189,1.623]],["component/246",[79,0.574]],["title/247",[19,17.696]],["name/247",[19,1.048]],["text/247",[5,3.401,6,2.577,7,1.821,10,2.519,11,2.538,13,2.023,19,1.553,28,2.363,30,2.11,66,3.004,115,3.064,132,3.765,165,3.487,200,3.176,208,3.709,221,4.096,222,3.798,248,5.736,435,2.277,492,2.806,599,2.143,722,5.012,746,3.509,965,3.302,1052,3.682,1111,4.36,1322,3.794,1337,4.464,1338,5.439,1339,4.519,1340,5.439,1341,7.234,1342,5.439,1343,5.439,1344,6.144,1345,6.144,1346,5.439,1347,6.144,1348,5.104,1349,5.012,1350,5.012,1351,3.953,1352,5.439,2956,4.099]],["component/247",[79,0.574]],["title/248",[47,21.045,435,20.697]],["name/248",[47,1.003,435,0.987]],["text/248",[13,1.496,14,2.588,20,1.673,27,3.6,36,1.836,40,1.81,47,3.438,58,2.015,64,1.131,67,1.982,105,1.823,115,3.895,138,1.843,143,2.515,150,2.562,156,3.262,168,2.495,219,2.14,221,2.277,223,1.823,233,2.828,246,2.428,435,2.895,492,3.024,497,3.407,569,2.684,601,3.064,805,3.155,817,3.301,841,3.706,900,2.387,957,2.874,964,3.912,1061,3.479,1353,5.96,1354,5.069,1355,5.069,1356,5.861,1357,5.981,1358,3.479,1359,3.479,1360,3.479,1361,3.155,1362,3.706,1363,4.022,1364,3.155,1365,3.155,1366,4.022,1367,4.022,1368,4.379,1369,3.479,1370,4.022,1371,4.544,1372,4.022,1373,6.621,1374,6.621,1375,6.621,1376,4.544,1377,4.544]],["component/248",[79,0.574]],["title/249-1",[435,25.948]],["name/249-1",[]],["text/249-1",[]],["component/249-1",[]],["title/249-2",[221,27.992,492,25.508]],["name/249-2",[]],["text/249-2",[]],["component/249-2",[]],["title/249",[58,24.765,435,20.697]],["name/249",[58,1.181,435,0.987]],["text/249",[14,2.784,20,2.312,27,3.553,28,0.33,30,1.581,31,1.839,34,0.33,36,0.649,40,0.199,43,3.13,49,1.094,64,0.706,139,0.511,165,0.488,176,0.348,199,0.34,221,0.805,222,0.399,223,0.345,233,4.161,251,0.573,435,1.567,492,0.392,497,4.497,570,3.127,601,2.566,636,1.653,736,0.452,767,0.383,804,0.476,860,4.258,891,1.153,925,4.373,947,4.008,948,2.236,951,0.511,953,4.964,965,0.462,1022,0.617,1039,0.464,1121,2.734,1198,0.603,1247,1.007,1351,0.553,1378,0.761,1379,0.761,1380,0.859,1381,2.838,1382,0.761,1383,8.472,1384,0.859,1385,0.859,1386,9.282,1387,8.383,1388,0.859,1389,7.984,1390,0.859,1391,0.603,1392,0.859,1393,2.26,1394,2.967,1395,5.122,1396,2.967,1397,0.859,1398,1.606,1399,2.26,1400,0.859,1401,0.859,1402,0.859,1403,1.421,1404,6.685,1405,6.685,1406,0.859,1407,4.946,1408,1.421,1409,2.838,1410,2.838,1411,2.512,1412,1.421,1413,1.421,1414,2.838,1415,2.838,1416,1.421,1417,2.512,1418,2.512,1419,1.606,1420,2.512,1421,2.512,1422,2.838,1423,2.838,1424,0.859,1425,4.604,1426,1.421,1427,2.28,1428,1.606,1429,0.859,1430,1.606,1431,0.859,1432,0.859,1433,1.421,1434,1.421,1435,0.859,1436,0.859,1437,2.26,1438,0.859,1439,1.606,1440,0.859,1441,0.859,1442,0.859,1443,4.604,1444,0.859,1445,5.546,1446,1.606,1447,1.606,1448,1.606,1449,1.606,1450,0.859,1451,5.259,1452,0.859,1453,0.859,1454,0.859,1455,0.859,1456,0.859,1457,0.859,1458,0.859,1459,1.606,1460,0.859]],["component/249",[79,0.574]],["title/250",[115,27.852,435,20.697]],["name/250",[83,2.18]],["text/250",[7,0.257,13,0.695,14,2.764,19,0.292,20,2.296,27,3.516,30,1.908,31,1.917,34,0.444,40,0.489,46,1.452,47,0.435,49,0.377,54,0.488,56,0.519,58,0.512,64,1.171,66,0.565,78,0.719,81,0.687,82,1.8,84,1.003,87,1.141,115,2.089,123,0.547,149,0.697,151,0.771,154,0.565,165,0.656,167,0.669,168,0.435,197,0.839,208,0.697,209,0.811,221,1.46,233,3.682,400,0.647,428,0.802,435,2.311,461,0.607,492,1.643,497,4.334,508,1.003,516,0.719,520,1.498,547,0.942,570,3.68,590,0.643,591,0.664,601,2.177,604,1.722,631,0.621,636,1.857,739,0.678,744,0.885,755,0.604,767,0.514,809,1.222,816,0.703,831,0.786,860,4.028,897,0.802,900,1.531,901,0.678,909,0.703,925,3.918,947,3.185,948,2.401,953,4.375,964,0.683,986,1.023,1004,0.885,1055,0.839,1061,0.885,1125,0.802,1182,0.942,1192,0.979,1215,0.885,1322,1.303,1337,1.533,1339,0.85,1343,1.023,1346,1.023,1350,0.942,1352,3.186,1353,6.802,1354,5.846,1355,5.846,1356,1.023,1361,0.802,1365,2.499,1366,2.58,1367,1.023,1369,0.885,1370,1.023,1394,1.869,1395,3.837,1396,1.869,1403,1.023,1408,1.023,1411,2.58,1412,1.023,1413,1.023,1416,1.023,1417,1.869,1418,1.869,1420,1.869,1421,1.869,1426,1.023,1427,2.448,1433,1.023,1434,1.869,1461,2.034,1462,1.155,1463,1.079,1464,1.395,1465,0.743,1466,1.113,1467,1.155,1468,1.023,1469,1.155,1470,1.869,1471,1.155,1472,0.979,1473,0.898,1474,0.911,1475,0.926,1476,1.155,1477,1.155,1478,0.979,1479,1.155,1480,1.155,1481,1.155,1482,1.155,1483,5.558,1484,5.558,1485,0.942,1486,5.915,1487,2.111,1488,2.111,1489,2.111,1490,2.111,1491,2.111,1492,2.111,1493,2.111,1494,5.558,1495,1.155,1496,1.155,1497,1.155,1498,1.155,1499,2.111,1500,1.155,1501,1.155,1502,2.914,1503,1.155,1504,1.155,1505,2.111,1506,2.914,1507,1.155,1508,1.155,1509,1.155,1510,1.155,1511,1.533,1512,1.155,1513,1.155,1514,1.155,1515,1.155,1516,1.155,1517,1.155,1518,1.155,1519,1.155,1520,2.914,1521,1.155,1522,1.155,1523,1.155,1524,1.155,1525,2.111,1526,1.155,1527,1.049,1528,1.155,1529,1.155,1530,1.155]],["component/250",[79,0.574]],["title/251",[809,40.528]],["name/251",[809,2.401]],["text/251",[7,1.057,13,1.561,14,2.364,20,1.745,31,2.539,40,1.099,47,3.015,49,1.547,64,1.18,115,2.364,128,2.782,131,4.197,132,2.906,146,2.763,159,2.884,169,2.223,213,2.906,214,3.292,221,2.376,237,4.846,435,3.244,450,3.077,461,3.588,497,2.979,564,2.578,636,2.282,702,2.928,755,2.478,776,3.63,796,3.025,800,2.884,809,3.952,900,2.491,925,4.325,951,2.821,953,2.657,955,3.225,1353,3.292,1357,3.63,1358,3.63,1359,3.63,1360,3.63,1365,3.292,1391,3.328,1427,3.225,1531,3.868,1532,6.042,1533,6.828,1534,7.751,1535,8.002,1536,3.868,1537,4.741,1538,4.741,1539,4.741,1540,4.741,1541,4.741,1542,4.741,1543,4.197,1544,4.197,1545,4.197,1546,4.427,1547,4.741,1548,4.197,1549,4.741,1550,4.102]],["component/251",[79,0.574]],["title/252",[39,30.364,115,27.852]],["name/252",[39,1.448,115,1.328]],["text/252",[14,2.389,20,2.57,40,1.617,47,3.345,115,3.481,138,2.831,176,2.831,435,2.587,502,5.071,694,3.688,806,6.179,967,4.277,1017,4.311,1055,5.071,1212,4.954,1353,4.846,1357,5.344,1358,5.344,1359,5.344,1360,5.344,1532,5.27,1534,7.86,1543,6.179,1551,6.179,1552,6.179,1553,6.179,1554,6.179,1555,5.27]],["component/252",[79,0.574]],["title/253",[435,20.697,461,29.348]],["name/253",[435,0.987,461,1.399]],["text/253",[28,2.561,34,3.313,36,2.691,39,3.621,64,2.145,67,2.905,103,4.624,115,4.296,138,2.701,149,4.021,168,3.599,461,5.629,499,3.709,504,4.081,570,3.756,636,2.225,744,2.793,964,3.935,1091,4.213,1306,5.099,1364,4.624,1464,4.401,1556,5.642,1557,6.66,1558,6.66,1559,6.66,1560,6.66,1561,6.66]],["component/253",[79,0.574]],["title/254",[84,33.287]],["name/254",[84,1.972]],["text/254",[14,2.447,20,1.772,35,1.593,36,1.211,39,1.63,40,1.87,47,2.272,48,3.562,53,1.946,56,2.161,62,2.019,64,1.501,84,4.437,105,1.202,108,1.48,115,4.229,119,1.438,136,1.669,139,1.784,146,2.804,165,1.701,219,1.412,435,2.558,458,3.18,461,3.168,480,2.205,508,1.425,517,4.26,565,2.127,573,1.069,591,1.723,599,1.045,637,1.963,705,2,710,1.659,721,1.701,736,1.575,740,4.26,744,1.257,802,2.996,845,1.963,860,1.34,866,1.823,869,2.152,895,3.044,900,1.575,907,2.654,909,1.823,927,1.611,935,2.178,965,1.611,1017,2.972,1022,2.152,1055,2.178,1056,1.62,1060,2.127,1198,2.104,1275,2.329,1287,2.06,1318,6.165,1351,1.929,1353,4.186,1357,4.616,1358,3.685,1359,3.685,1360,3.685,1361,3.342,1362,2.445,1364,2.081,1365,2.081,1372,2.654,1531,2.445,1544,7.144,1545,5.338,1551,7.144,1552,5.338,1553,2.654,1554,4.26,1562,2.654,1563,4.813,1564,4.813,1565,6.029,1566,2.998,1567,4.813,1568,4.813,1569,2.998,1570,2.998,1571,2.998,1572,2.654,1573,2.081,1574,2.998,1575,2.998,1576,2.998,1577,2.998,1578,2.998,1579,2.998,1580,2.998,1581,2.998,1582,2.998,1583,2.998,1584,1.896,1585,2.998,1586,2.54,1587,2.263,1588,2.799,1589,2.998,1590,4.813,1591,6.902]],["component/254",[79,0.574]],["title/255",[809,40.528]],["name/255",[83,2.18]],["text/255",[5,3.743,7,1.507,14,1.655,19,2.199,138,2.743,210,3.186,219,3.186,702,4.177,755,4.547,800,4.114,804,3.743,809,5.568,1041,4.39,1391,4.747,1546,6.315,1923,5.73,2192,5.988,2334,6.315,2459,6.315,3190,7.48,3191,7.48,3192,11.234,3193,7.48,3194,7.48,3195,7.48,3196,7.48,3197,7.48,3198,7.48,3199,7.48]],["component/255",[79,0.574]],["title/256",[19,17.696]],["name/256",[19,1.048]],["text/256",[5,2.568,6,1.946,7,1.034,10,1.903,11,1.917,13,1.528,14,2.121,19,1.173,27,2.82,40,1.832,43,1.977,45,2.361,49,2.829,104,3.084,105,1.861,137,2.686,165,2.633,200,2.399,221,3.369,222,3.674,223,1.861,248,4.719,397,2.349,465,3.156,492,2.119,497,3.781,520,3.293,527,4.485,601,3.111,636,2.642,655,2.96,722,3.785,746,2.65,755,2.425,829,3.553,901,2.723,910,3.931,951,2.761,959,3.413,965,3.613,1007,3.553,1203,3.815,1247,2.912,1322,5.353,1337,3.371,1338,4.108,1339,4.945,1340,4.108,1341,5.952,1342,4.108,1592,4.64,1593,4.64,1594,6.723,1595,4.64,1596,4.64,1597,4.64,1598,3.785,1599,4.64,1600,4.333,1601,3.785,1602,4.64,1603,4.64,1604,4.64,1605,4.64,1606,4.64,2956,3.095]],["component/256",[79,0.574]],["title/257",[945,48.115]],["name/257",[83,2.18]],["text/257",[7,0.487,14,2.663,20,0.805,31,2.572,34,2.448,35,1.162,36,0.883,40,0.507,46,3.185,47,0.824,49,2.257,52,2.14,56,0.982,67,1.617,70,1.124,92,1.301,104,2.214,108,1.079,114,2.091,115,1.09,119,1.049,127,0.998,137,1.265,138,0.887,144,1.716,165,1.241,167,1.265,169,1.025,176,0.887,200,1.13,207,1.274,213,1.34,221,2.85,222,2.959,233,3.005,245,1.079,435,0.81,482,1.419,492,2.908,497,4.368,527,3.794,566,3.025,569,1.292,573,2.027,587,1.935,601,3.412,623,1.34,636,1.613,710,4.081,718,1.674,739,1.283,744,0.917,751,1.674,753,1.935,755,1.938,805,1.518,808,1.674,809,2.146,851,1.588,859,3.282,860,2.846,891,1.569,893,1.33,897,1.518,901,2.175,925,2.004,945,5.555,946,1.265,947,2.29,948,2.473,951,4.116,953,4.53,965,2.594,1045,1.783,1093,1.935,1125,1.518,1151,1.395,1215,1.674,1306,1.674,1322,1.35,1337,1.588,1361,1.518,1532,1.651,1598,6.015,1607,2.186,1608,2.186,1609,2.186,1610,1.935,1611,2.186,1612,3.938,1613,2.186,1614,1.935,1615,1.935,1616,2.186,1617,2.186,1618,1.985,1619,4.828,1620,3.282,1621,1.935,1622,3.282,1623,3.282,1624,3.282,1625,3.282,1626,3.708,1627,5.034,1628,5.687,1629,3.282,1630,3.282,1631,3.708,1632,3.708,1633,2.186,1634,3.708,1635,2.186,1636,2.186,1637,1.935,1638,2.186,1639,1.935,1640,2.186]],["component/257",[79,0.574]],["title/258",[453,40.259]],["name/258",[453,2.385]],["text/258",[7,0.611,13,1.475,14,2.736,30,2.25,31,2.684,34,1.055,40,0.636,46,3.144,49,2.356,52,1.908,84,1.304,104,1.258,111,1.1,114,4.369,133,1.866,200,1.418,221,2.245,222,1.275,223,1.1,233,4.078,492,1.253,497,4.378,526,2.435,527,5.687,566,2.238,569,1.621,573,1.597,601,3.782,636,2.413,710,3.626,795,2.665,805,1.905,860,3.464,925,3.068,945,6.896,947,2.766,948,3.786,951,2.665,953,4.777,1306,2.1,1395,2.238,1598,6.32,1612,3.654,1620,3.965,1621,3.965,1622,5.8,1623,2.428,1624,3.965,1625,3.965,1627,3.965,1629,2.428,1630,2.428,1637,2.428,1641,5.676,1642,2.743,1643,4.479,1644,2.743,1645,2.428,1646,2.743,1647,6.117,1648,2.743,1649,1.947,1650,2.743,1651,4.479]],["component/258",[79,0.574]],["title/259-1",[3200,73.197]],["name/259-1",[]],["text/259-1",[]],["component/259-1",[]],["title/259-2",[173,38.757]],["name/259-2",[]],["text/259-2",[]],["component/259-2",[]],["title/259-3",[3201,83.898]],["name/259-3",[]],["text/259-3",[]],["component/259-3",[]],["title/259-4",[176,28.397]],["name/259-4",[]],["text/259-4",[]],["component/259-4",[]],["title/259-5",[173,38.757]],["name/259-5",[]],["text/259-5",[]],["component/259-5",[]],["title/259-6",[3202,83.898]],["name/259-6",[]],["text/259-6",[]],["component/259-6",[]],["title/259-7",[176,28.397]],["name/259-7",[]],["text/259-7",[]],["component/259-7",[]],["title/259-8",[173,38.757]],["name/259-8",[]],["text/259-8",[]],["component/259-8",[]],["title/259-9",[177,33.718,178,34.228]],["name/259-9",[]],["text/259-9",[]],["component/259-9",[]],["title/259-10",[3060,70.023]],["name/259-10",[]],["text/259-10",[]],["component/259-10",[]],["title/259-11",[176,28.397]],["name/259-11",[]],["text/259-11",[]],["component/259-11",[]],["title/259-12",[173,38.757]],["name/259-12",[]],["text/259-12",[]],["component/259-12",[]],["title/259-13",[3061,77.446]],["name/259-13",[]],["text/259-13",[]],["component/259-13",[]],["title/259-14",[176,28.397]],["name/259-14",[]],["text/259-14",[]],["component/259-14",[]],["title/259-15",[173,38.757]],["name/259-15",[]],["text/259-15",[]],["component/259-15",[]],["title/259-16",[177,33.718,178,34.228]],["name/259-16",[]],["text/259-16",[]],["component/259-16",[]],["title/259-17",[2808,67.488]],["name/259-17",[]],["text/259-17",[]],["component/259-17",[]],["title/259-18",[173,38.757]],["name/259-18",[]],["text/259-18",[]],["component/259-18",[]],["title/259-19",[2809,73.197]],["name/259-19",[]],["text/259-19",[]],["component/259-19",[]],["title/259-20",[176,28.397]],["name/259-20",[]],["text/259-20",[]],["component/259-20",[]],["title/259-21",[173,38.757]],["name/259-21",[]],["text/259-21",[]],["component/259-21",[]],["title/259-22",[177,33.718,178,34.228]],["name/259-22",[]],["text/259-22",[]],["component/259-22",[]],["title/259-23",[172,70.023]],["name/259-23",[]],["text/259-23",[]],["component/259-23",[]],["title/259-24",[173,38.757]],["name/259-24",[]],["text/259-24",[]],["component/259-24",[]],["title/259-25",[174,70.023]],["name/259-25",[]],["text/259-25",[]],["component/259-25",[]],["title/259-26",[173,38.757]],["name/259-26",[]],["text/259-26",[]],["component/259-26",[]],["title/259-27",[175,59.322]],["name/259-27",[]],["text/259-27",[]],["component/259-27",[]],["title/259-28",[176,28.397]],["name/259-28",[]],["text/259-28",[]],["component/259-28",[]],["title/259-29",[173,38.757]],["name/259-29",[]],["text/259-29",[]],["component/259-29",[]],["title/259-30",[177,33.718,178,34.228]],["name/259-30",[]],["text/259-30",[]],["component/259-30",[]],["title/259-31",[179,40.098,180,35.046]],["name/259-31",[]],["text/259-31",[]],["component/259-31",[]],["title/259-32",[19,17.696]],["name/259-32",[]],["text/259-32",[]],["component/259-32",[]],["title/259-33",[8,29.944]],["name/259-33",[]],["text/259-33",[]],["component/259-33",[]],["title/259-34",[88,17.088]],["name/259-34",[]],["text/259-34",[]],["component/259-34",[]],["title/259-35",[181,57.12]],["name/259-35",[]],["text/259-35",[]],["component/259-35",[]],["title/259-36",[176,28.397]],["name/259-36",[]],["text/259-36",[]],["component/259-36",[]],["title/259-37",[173,38.757]],["name/259-37",[]],["text/259-37",[]],["component/259-37",[]],["title/259-38",[177,33.718,178,34.228]],["name/259-38",[]],["text/259-38",[]],["component/259-38",[]],["title/259-39",[182,70.023]],["name/259-39",[]],["text/259-39",[]],["component/259-39",[]],["title/259-40",[176,28.397]],["name/259-40",[]],["text/259-40",[]],["component/259-40",[]],["title/259-41",[173,38.757]],["name/259-41",[]],["text/259-41",[]],["component/259-41",[]],["title/259-42",[177,33.718,178,34.228]],["name/259-42",[]],["text/259-42",[]],["component/259-42",[]],["title/259-43",[183,70.023]],["name/259-43",[]],["text/259-43",[]],["component/259-43",[]],["title/259-44",[173,38.757]],["name/259-44",[]],["text/259-44",[]],["component/259-44",[]],["title/259-45",[184,60.586]],["name/259-45",[]],["text/259-45",[]],["component/259-45",[]],["title/259-46",[176,28.397]],["name/259-46",[]],["text/259-46",[]],["component/259-46",[]],["title/259-47",[173,38.757]],["name/259-47",[]],["text/259-47",[]],["component/259-47",[]],["title/259-48",[177,33.718,178,34.228]],["name/259-48",[]],["text/259-48",[]],["component/259-48",[]],["title/259-49",[185,61.99]],["name/259-49",[]],["text/259-49",[]],["component/259-49",[]],["title/259-50",[176,28.397]],["name/259-50",[]],["text/259-50",[]],["component/259-50",[]],["title/259-51",[173,38.757]],["name/259-51",[]],["text/259-51",[]],["component/259-51",[]],["title/259-52",[177,33.718,178,34.228]],["name/259-52",[]],["text/259-52",[]],["component/259-52",[]],["title/259-53",[186,61.99]],["name/259-53",[]],["text/259-53",[]],["component/259-53",[]],["title/259-54",[176,28.397]],["name/259-54",[]],["text/259-54",[]],["component/259-54",[]],["title/259-55",[173,38.757]],["name/259-55",[]],["text/259-55",[]],["component/259-55",[]],["title/259-56",[177,33.718,178,34.228]],["name/259-56",[]],["text/259-56",[]],["component/259-56",[]],["title/259",[187,57.12]],["name/259",[187,3.384]],["text/259",[1,0.354,2,0.33,3,0.305,4,0.228,7,1.722,8,2.197,13,0.482,14,0.553,19,1.506,20,0.691,27,0.223,28,0.869,30,0.645,31,0.544,34,0.563,35,0.282,36,0.411,37,0.361,38,0.473,39,0.796,40,0.998,41,1.513,43,1.509,45,0.27,46,0.507,47,0.985,48,0.865,49,1.991,50,0.39,52,0.99,54,0.955,55,0.802,56,0.457,58,0.649,60,1.046,62,0.357,64,0.733,66,0.716,70,1.345,71,1.023,73,1.324,78,1.168,82,0.628,83,0.279,84,1.812,85,0.433,86,0.433,88,1.985,89,0.934,90,1.487,92,0.316,94,0.274,95,0.678,98,0.9,99,1.556,103,0.368,104,0.243,105,0.408,106,0.381,108,1.454,109,0.309,111,0.213,114,0.826,115,1.127,117,0.433,119,0.901,121,0.537,123,1.069,124,0.942,125,1.574,127,0.464,128,0.597,132,0.325,133,0.692,135,0.678,136,0.815,138,0.761,141,0.294,143,0.294,144,0.245,146,2.765,147,0.338,149,1.133,150,0.826,152,0.911,154,0.918,159,0.618,160,0.449,161,1.627,167,0.589,168,0.707,171,0.357,173,1.251,176,0.215,177,1.578,178,1.15,179,0.381,180,1.178,181,0.433,185,0.47,186,0.47,188,2.172,189,6.773,190,0.482,191,0.531,192,1.017,193,0.531,194,0.531,195,1.437,196,0.73,197,1.064,198,0.495,199,1.401,200,1.523,201,1.419,202,0.9,203,0.531,204,0.531,205,0.47,206,0.531,207,0.593,208,0.32,209,0.372,210,0.479,211,1.017,212,1.565,213,0.325,214,0.368,215,0.406,216,1.381,217,0.57,218,0.623,219,1.916,220,2.224,221,0.734,222,1.369,223,0.213,224,0.511,225,0.412,226,0.511,227,1.155,228,0.633,229,0.377,230,0.692,231,0.433,232,0.433,233,0.33,234,1.14,235,1.017,236,0.685,237,1.039,238,0.531,239,1.835,240,2.377,241,0.354,242,1.728,243,0.9,244,0.739,245,0.927,246,0.283,247,0.531,248,1.318,249,0.531,250,0.433,251,2.543,252,0.926,253,2.123,254,1.429,255,0.433,257,0.531,258,1.662,259,2.794,260,0.779,261,0.531,262,0.531,263,0.47,264,1.039,265,0.531,266,0.871,267,1.017,268,3.079,269,1.863,270,1.642,271,1.332,272,0.531,273,1.064,274,0.531,275,0.47,276,0.531,277,0.806,278,0.706,279,0.531,280,1.064,281,0.531,282,0.47,283,1.064,284,0.531,285,0.802,286,0.531,287,0.433,288,0.433,289,0.531,290,0.419,291,0.531,292,1.064,293,1.017,294,1.395,295,1.654,296,0.531,297,0.531,298,0.433,299,0.531,300,0.666,301,0.47,302,0.531,303,0.433,304,0.531,305,0.495,306,0.531,307,0.433,308,0.531,309,0.779,310,0.531,311,0.406,381,0.361,382,1.017,383,1.017,384,1.017,385,0.47,386,0.47,387,0.47,388,0.406,389,0.495,390,1.48,391,0.495,392,0.495,393,0.495,394,0.449,395,0.495,396,0.449,397,0.741,398,0.853,399,0.449,400,0.57,401,0.433,402,0.495,403,0.385,404,0.926,405,0.495,406,1.017,407,0.47,408,1.63,409,0.531,410,0.884,411,0.531,412,0.779,413,0.47,414,0.47,415,0.531,416,1.241,417,0.531,418,0.531,419,1.121,420,0.531,421,0.556,422,0.531,423,0.531,424,0.706,425,0.531,426,0.47,427,0.531,428,1.569,429,0.531,430,1.039,431,0.347,432,0.531,433,0.368,434,0.531,435,1.091,436,0.406,437,0.531,438,0.368,439,0.531,440,0.633,441,0.801,442,0.531,443,0.381,444,0.531,445,0.385,446,0.531,447,0.365,448,0.406,449,0.285,450,0.95,451,0.341,452,0.406,453,0.842,454,0.531,455,1.194,456,0.433,457,0.433,458,1.241,459,0.406,460,0.433,461,0.769,462,0.395,463,0.395,464,0.441,465,0.361,466,0.401,467,0.531,468,0.923,469,0.406,470,0.406,471,1.583,472,0.47,473,1.241,474,1.296,475,1.622,476,0.531,477,0.605,478,1.348,479,1.094,480,1.923,481,0.706,482,0.344,483,1.064,484,1.405,485,0.354,486,0.515,487,0.531,488,1.181,489,3.812,490,0.406,491,1.437,492,0.669,493,0.633,494,0.638,495,0.47,496,0.336,497,0.444,498,0.649,499,0.566,500,1.921,501,0.605,502,0.385,503,0.449,504,0.325,505,1.216,506,0.739,507,0.531,508,0.252,509,0.47,510,0.316,511,0.47,512,0.313,513,0.9,514,0.433,515,0.531,516,0.911,517,0.9,518,0.531,519,0.739,520,0.377,521,0.441,522,0.354,523,0.597,524,0.556,525,0.29,526,0.288,527,0.354,528,0.433,529,0.385,530,0.495,531,0.739,532,1.017,533,0.98,534,0.842,535,1.017,536,0.459,537,0.531,538,0.433,539,0.365,540,0.9,541,0.459,542,0.531,543,1.877,544,1.017,545,0.531,546,0.531,547,0.433,548,0.57,549,0.531,550,0.419,551,0.672,552,0.643,553,0.425,554,0.433,555,1.303,556,0.779,557,0.433,558,0.347,559,0.459,560,0.441,561,0.368,562,0.531,563,0.425,564,0.553,565,0.722,566,0.433,567,0.433,568,0.47,569,0.313,570,0.299,571,0.73,572,0.977,573,0.522,574,0.47,575,0.829,576,0.531,577,0.47,578,0.381,579,0.395,580,0.495,581,1.017,582,0.531,583,0.531,584,0.531,585,0.531,586,0.531,587,0.47,588,0.406,589,0.336,590,0.295,591,0.585,592,0.481,593,0.9,594,0.354,595,0.531,596,0.593,597,0.774,598,0.377,599,0.511,600,0.531,601,0.678,602,0.739,603,0.531,604,0.433,605,0.531,606,0.385,607,0.531,608,1.017,609,0.531,610,0.252,611,0.357,612,0.531,613,0.47,614,1.367,615,0.341,616,0.768,617,0.9,618,0.267,619,1.017,620,0.433,621,0.531,622,0.433,623,0.897,624,0.433,625,0.531,626,0.531,627,0.531,628,0.47,629,0.531,630,0.531,631,0.787,632,0.829,633,0.779,634,0.531,635,0.531,636,0.177,637,0.347,638,0.531,639,0.449,640,0.433,641,0.9,642,0.531,643,0.47,644,0.531,645,0.47,646,0.531,647,0.531,648,0.531,649,0.531,650,0.511,651,0.47,652,0.531,675,0.381,697,0.73,726,0.779,727,0.73,729,0.39,749,0.381,755,0.277,798,0.433,809,0.307,816,2.619,817,0.385,827,0.419,866,0.323,870,0.313,900,0.279,910,0.449,911,0.459,918,0.372,919,0.412,925,0.287,936,0.341,937,0.495,939,0.395,980,0.351,1039,0.287,1051,0.739,1071,0.685,1076,0.79,1088,0.365,1090,0.425,1091,0.336,1126,0.425,1137,0.307,1158,0.495,1275,0.412,1279,0.449,1287,0.365,1550,0.459,1671,0.482,1706,0.482,1715,0.354,1806,0.419,2267,0.495,2356,0.433,2516,0.495,2611,0.449,2810,0.555,2811,0.555,2812,0.555,2813,0.555,2814,0.79,2815,0.412,2816,0.555,2817,0.555,2818,0.555,2819,0.555,2820,0.555,2821,0.555,2822,0.482,2823,0.555,2824,0.495,2825,0.555,2826,0.555,2827,0.555,2828,0.555,2829,0.555,2830,0.555,2831,0.555,2832,0.555,2833,0.555,2834,0.555,2835,0.555,2836,0.555,2837,0.555,2838,0.555,2839,0.555,2840,0.555,2841,0.555,2842,0.555,2843,0.555,2844,0.555,2845,0.555,2846,0.555,2847,0.555,2848,0.555,2849,0.555,2850,0.555,2851,0.555,2852,0.555,2853,0.555,2854,0.555,2855,0.555,2856,0.555,2857,0.555,2858,0.555,2859,0.555,2860,0.555,2861,0.555,2862,0.555,2863,0.555,2864,0.555,2865,1.063,2866,0.555,2867,0.555,2868,0.555,2869,0.555,2870,0.555,2871,0.555,2872,0.555,2873,0.555,2874,0.555,2875,0.555,2876,0.555,2877,0.555,2878,0.555,2879,0.555,2880,0.555,2881,0.555,2882,0.555,2883,0.555,2884,0.555,2885,0.555,2886,0.555,2887,0.555,2888,0.555,2889,0.555,2890,0.555,2891,0.555,2892,0.555,2893,0.555,2894,0.555,2895,0.555,2896,0.555,2897,0.555,2898,0.555,2899,0.555,2900,0.555,2901,0.555,2902,0.555,2920,0.815,3062,0.511,3063,0.511,3064,1.063,3065,0.587,3066,2.609,3067,0.587,3068,0.587,3069,0.587,3070,0.587,3071,0.587,3072,0.587,3073,0.587,3074,0.587,3075,0.587,3076,0.587,3077,0.587,3078,0.587,3079,0.587,3080,0.587,3081,0.587,3082,0.587,3083,0.587,3084,0.531,3085,0.587,3086,0.587,3087,0.587,3088,0.587,3142,0.495,3143,0.531,3147,0.555,3203,0.636,3204,0.636,3205,0.98,3206,0.636,3207,0.636,3208,0.636,3209,1.218,3210,0.636,3211,0.636,3212,0.636,3213,0.636,3214,0.636,3215,0.636,3216,0.636,3217,0.636,3218,0.636,3219,0.636,3220,0.636,3221,0.636,3222,0.636,3223,0.636,3224,0.636,3225,0.636,3226,0.636,3227,0.636,3228,0.636,3229,0.636,3230,0.636,3231,0.636,3232,0.636,3233,0.636,3234,0.636,3235,0.636,3236,0.636,3237,0.587,3238,0.636]],["component/259",[79,0.574]],["title/260-1",[19,14.115,78,34.766]],["name/260-1",[]],["text/260-1",[]],["component/260-1",[]],["title/260-2",[200,36.201]],["name/260-2",[]],["text/260-2",[]],["component/260-2",[]],["title/260",[653,57.12]],["name/260",[653,3.384]],["text/260",[5,0.64,6,0.886,7,2.234,8,0.904,10,2.281,11,2.298,13,0.696,14,2.135,19,1.406,27,0.485,31,3.205,34,0.445,37,1.437,40,0.972,43,0.9,46,0.401,47,0.436,49,1.176,52,0.389,58,0.513,60,0.535,63,0.803,64,1.626,66,0.566,70,0.595,72,0.698,78,0.72,81,0.688,85,0.944,86,0.944,88,2.177,90,2.165,92,1.257,105,0.464,111,2.07,114,2.031,115,2.091,121,2.216,122,0.886,124,2.318,125,1.129,126,0.726,135,1.946,136,1.624,138,0.469,145,0.568,154,1.033,159,0.704,166,0.633,179,1.517,195,2.233,196,2.094,199,1.154,200,0.598,201,3.252,210,0.995,221,1.059,222,2.188,229,1.5,230,1.984,231,1.724,237,2.07,239,1.483,240,2.603,248,1.483,251,0.772,259,3.888,260,0.886,264,3.341,266,3.713,269,2.279,270,1.535,271,1.5,273,2.119,275,1.024,277,2.307,278,1.467,280,1.535,283,1.535,285,1.667,287,0.944,288,0.944,290,1.667,292,1.535,294,1.305,295,3.567,298,0.944,300,3.38,303,0.944,307,1.724,309,1.618,311,1.618,390,0.758,460,0.944,461,0.608,462,0.862,464,0.961,471,1.136,473,1.928,486,0.586,492,1.332,496,0.732,499,0.644,508,2.238,512,0.683,519,1.535,520,0.821,522,0.772,523,3.473,524,2.293,525,1.595,526,0.629,527,0.772,529,0.84,548,2.019,564,1.149,568,1.024,573,1.495,591,0.665,601,1.35,610,0.55,615,0.744,618,0.583,623,0.709,654,1.05,655,0.738,656,1.157,657,2.113,658,1.157,659,1.157,660,3.602,662,1.157,663,1.157,664,1.157,665,1.157,666,1.157,667,1.157,668,1.157,669,2.812,670,1.157,671,1.157,672,1.157,673,1.157,674,1.157,675,0.83,676,2.113,677,1.157,678,1.157,679,2.113,680,2.917,681,1.157,682,2.113,683,1.157,684,2.113,685,1.157,686,1.115,687,1.157,688,1.157,689,1.157,690,2.113,691,1.157,692,1.024,694,1.117,695,1.024,696,0.56,697,1.455,698,1.157,699,1.467,700,0.648,701,2.38,702,3.435,703,1.08,704,0.98,705,0.772,706,1.724,707,2.528,708,1.024,709,0.803,710,0.64,711,1.157,712,1.157,713,0.98,714,1.667,715,1.372,716,1.618,717,3.642,718,0.886,719,0.873,720,0.944,721,1.655,722,1.724,723,2.339,724,1.452,725,2.582,726,2.758,727,1.517,728,1.024,729,0.851,730,1.024,731,1.931,732,0.961,733,1.08,734,0.764,735,0.84,736,0.608,737,1.79,738,0.944,739,2.113,740,1.024,741,1.157,742,1.024,743,0.726,744,0.485,745,0.758,746,0.661,747,0.98,748,0.72,749,0.83,750,1.024,751,0.886,752,1.157,753,1.024,754,0.98,755,0.605,756,1.157,757,0.795,758,0.922,759,0.674,760,1.5,761,0.84,762,0.751,763,1.024,764,0.772,816,1.774,1464,0.764,2814,0.899,2905,1.001,3066,1.694,3239,1.384,3240,5.024,3241,1.279]],["component/260",[79,0.574]],["title/261-1",[199,22.087,473,36.911]],["name/261-1",[]],["text/261-1",[]],["component/261-1",[]],["title/261-2",[199,18.369,201,20.263,700,26.03]],["name/261-2",[]],["text/261-2",[]],["component/261-2",[]],["title/261-3",[655,29.633,765,41.124,766,41.124]],["name/261-3",[]],["text/261-3",[]],["component/261-3",[]],["title/261",[201,24.364,767,24.868]],["name/261",[201,1.162,767,1.186]],["text/261",[7,1.625,14,0.988,38,1.877,40,0.936,70,2.077,78,2.514,84,2.885,102,2.694,118,2.337,121,2.134,123,1.911,133,2.747,144,1.869,199,2.882,201,1.762,208,2.438,209,2.835,210,2.858,216,2.971,243,3.575,277,3.338,455,3.294,473,5.356,474,9.346,491,4.646,493,2.514,502,2.934,531,2.934,655,2.576,700,2.263,702,2.494,736,2.122,744,1.694,746,2.307,748,2.514,768,3.186,770,7.289,772,4.039,773,4.039,774,3.892,775,4.039,777,3.294,778,4.039,779,4.039,780,4.039,781,4.039,782,4.039,783,4.039,784,4.039,786,4.039,787,4.039,788,3.238,789,4.039,790,3.494,791,3.092,792,4.039,793,2.438,794,3.421,795,2.403,796,2.576,797,4.039,798,3.294,799,2.934,800,3.691,801,4.039,802,2.514,803,3.294,804,2.235,805,2.804,806,3.575,807,4.039,808,3.092,809,2.337,2814,7.884,2906,4.222,2907,4.222,2908,4.222,2909,4.222,3242,11.668,3243,4.839,3244,4.839]],["component/261",[79,0.574]],["title/262-1",[20,17.101,810,41.124,3200,48.558]],["name/262-1",[]],["text/262-1",[]],["component/262-1",[]],["title/262-2",[70,28.723,811,55.853]],["name/262-2",[]],["text/262-2",[]],["component/262-2",[]],["title/262-3",[199,27.69]],["name/262-3",[]],["text/262-3",[]],["component/262-3",[]],["title/262-4",[812,61.99]],["name/262-4",[]],["text/262-4",[]],["component/262-4",[]],["title/262",[813,57.12]],["name/262",[813,3.384]],["text/262",[7,2.175,8,2.609,14,1.493,38,3.78,40,1.414,54,2.579,70,3.137,79,1.624,82,3.768,84,2.9,88,1.489,90,2.231,102,4.07,118,3.531,138,2.474,178,3.739,187,4.977,199,2.413,207,3.555,218,3.739,219,3.831,490,4.671,493,3.798,497,2.661,653,4.977,707,4.282,709,4.236,745,3.995,812,5.401,813,4.977,814,6.101,815,6.101,816,3.711,817,4.432,819,4.977,820,5.279,822,6.101,823,6.101,824,5.696,825,6.101,826,5.696,2115,5.88,3200,6.378,3245,7.31]],["component/262",[79,0.574]],["title/263-1",[241,26.523,731,16.304,827,31.37,828,35.2]],["name/263-1",[]],["text/263-1",[]],["component/263-1",[]],["title/263-2",[39,30.364,731,22.903]],["name/263-2",[]],["text/263-2",[]],["component/263-2",[]],["title/263",[111,18.634,803,37.893,829,35.567]],["name/263",[111,0.787,803,1.599,829,1.501]],["text/263",[4,3.471,7,1.076,14,1.181,19,0.937,30,0.751,34,1.857,35,1.97,36,0.883,38,1.016,40,0.507,46,1.285,52,2.14,56,1.665,58,0.969,60,3.201,64,2.144,66,2.361,71,2.575,73,2.879,74,1.361,81,1.301,88,0.533,93,1.419,104,1.003,105,2.281,108,1.079,109,1.274,111,2.554,115,1.09,119,1.049,127,0.998,138,0.887,139,1.301,143,1.21,154,1.813,158,1.33,166,1.196,167,2.794,169,2.985,201,1.617,212,1.162,240,1.608,241,4.247,246,3.039,295,2.972,397,1.107,400,1.225,408,1.21,412,1.674,430,1.21,451,1.407,463,2.762,477,1.301,479,1.274,483,1.588,486,3.223,488,0.877,516,1.361,540,1.935,547,1.783,548,4.132,552,1.383,555,2.574,564,1.188,565,2.631,570,1.233,572,1.458,589,3.054,590,2.689,594,1.458,599,0.762,618,1.101,645,1.935,694,1.155,697,1.09,705,1.458,721,1.241,731,3.769,734,1.445,739,1.283,744,1.555,793,1.32,795,1.301,796,1.395,798,1.783,802,1.361,804,1.21,827,4.487,828,1.935,830,2.186,831,2.522,832,2.308,833,1.935,834,1.852,835,1.472,836,1.534,837,3.221,838,6.124,839,1.935,840,2.473,841,1.783,842,1.674,843,3.574,844,2.839,845,1.432,846,2.186,847,2.186,848,2.186,849,2.497,850,2.186,851,2.694,852,2.206,853,1.935,854,1.395,855,2.186,856,1.935,857,1.935,858,1.608,859,1.935,860,0.977,861,4.828,862,1.588,863,3.995,864,1.985,865,2.694,866,2.255,867,1.892,868,2.186,869,2.662,870,1.292,871,1.588,872,1.783,873,1.552,874,2.839,875,3.282,876,2.186,877,2.118,878,1.783,879,2.186,880,1.674,881,1.674,882,2.186,883,1.935,884,1.518,885,1.432,886,1.935,887,2.186,888,2.186,889,2.186,890,1.935,891,2.662,892,2.041,893,1.33,894,1.518,895,1.383,896,1.935,897,1.518,898,1.217,899,1.725,900,1.149,901,2.175,902,1.361,903,1.783,904,1.588,905,2.107,906,2.186,907,1.935,908,1.651,909,1.33,910,1.852]],["component/263",[79,0.574]],["title/264",[64,13.904,410,33.718]],["name/264",[64,0.663,410,1.608]],["text/264",[45,3.194,52,2.786,54,2.653,64,2.31,67,2.738,88,2.264,108,3.099,145,3.084,240,2.761,410,6.195,430,3.474,478,4.506,501,3.735,508,2.984,548,3.517,573,3.308,596,3.657,744,2.633,767,2.795,877,3.585,911,5.431,912,5.12,913,4.952,914,4.806,915,3.971,916,4.806,917,5.557,918,4.405,919,4.877,920,6.277,921,6.277,922,7.338,923,4.617]],["component/264",[79,0.574]],["title/265-1",[0,57.12]],["name/265-1",[]],["text/265-1",[]],["component/265-1",[]],["title/265-2",[1,37.258,2,34.766]],["name/265-2",[]],["text/265-2",[]],["component/265-2",[]],["title/265-3",[46,19.357,592,26.429]],["name/265-3",[]],["text/265-3",[]],["component/265-3",[]],["title/265-4",[47,21.045,731,22.903]],["name/265-4",[]],["text/265-4",[]],["component/265-4",[]],["title/265-5",[52,18.776,64,13.904]],["name/265-5",[]],["text/265-5",[]],["component/265-5",[]],["title/265-6",[241,30.987,731,19.048,827,36.649]],["name/265-6",[]],["text/265-6",[]],["component/265-6",[]],["title/265",[3,32.112,4,23.978]],["name/265",[3,1.531,4,1.143]],["text/265",[1,1.481,2,3.039,3,2.159,4,1.612,5,1.228,6,0.931,7,1.28,10,0.91,11,0.917,14,2.635,20,2.114,27,2.694,30,1.29,32,1.481,34,0.854,40,0.87,41,1.285,46,2.706,47,1.415,49,1.226,52,2.497,56,0.997,58,1.665,60,2.657,64,1.43,67,0.968,71,2.21,72,1.34,73,1.901,74,2.338,84,1.055,88,2.113,90,0.812,105,0.89,108,1.096,111,2.304,119,1.802,137,1.285,138,2.605,149,2.267,150,2.753,169,3.012,213,1.36,218,1.36,219,1.046,223,0.89,295,1.036,300,1.453,408,2.079,449,1.193,461,1.166,463,1.654,477,2.235,479,1.293,486,1.124,488,1.507,492,1.715,493,1.382,497,2.802,499,1.236,500,1.118,508,1.785,558,1.453,561,1.541,564,1.207,573,2.486,578,1.593,592,4.565,599,0.774,636,1.255,697,1.107,700,1.244,721,2.131,731,2.859,746,1.268,762,1.441,767,0.988,795,1.321,804,1.228,832,1.382,838,3.325,839,3.325,854,1.416,860,1.679,869,1.593,877,1.268,900,1.166,915,1.404,924,2.22,925,2.639,926,3.325,927,2.018,928,2.22,929,1.965,930,2.876,931,4.849,932,2.876,933,2.267,934,5.084,935,1.612,936,1.428,937,2.072,938,2.22,939,5.195,940,2.072,941,1.676,942,1.844,943,1.844,944,6.423,945,1.525,946,1.285,947,1.371,948,1.481,949,2.22,950,4.882,951,1.321,952,2.22,953,1.244,954,2.22,955,1.51,956,1.699,957,1.404,958,1.965,959,1.633,960,2.22,961,2.22,962,1.404,963,1.35,964,1.311,965,1.193,966,2.22,967,1.36,1047,1.593,3239,1.453,3246,2.455]],["component/265",[79,0.574]],["title/266-1",[240,18.608,447,38.379]],["name/266-1",[]],["text/266-1",[]],["component/266-1",[]],["title/266-2",[8,23.884,447,38.379]],["name/266-2",[]],["text/266-2",[]],["component/266-2",[]],["title/266-3",[697,27.852,918,39.201]],["name/266-3",[]],["text/266-3",[]],["component/266-3",[]],["title/266-4",[430,30.914,877,31.902]],["name/266-4",[]],["text/266-4",[]],["component/266-4",[]],["title/266",[430,38.757]],["name/266",[430,2.296]],["text/266",[4,0.561,7,0.291,8,2.182,14,0.319,19,1.6,20,1.455,28,1.758,30,0.81,32,1.574,34,0.907,35,0.694,36,0.953,40,0.303,41,0.756,45,0.665,46,2.069,51,1.106,52,1.871,54,1.932,56,2.052,58,1.046,64,1.951,67,0.57,79,0.261,81,0.777,82,0.806,84,1.534,88,1.913,90,0.478,93,2.094,99,3.553,102,0.871,105,0.524,109,0.761,111,1.294,121,0.69,127,2.331,130,1.394,134,1.559,136,0.727,137,0.756,138,1.308,139,0.777,141,2.188,143,1.306,144,0.604,145,0.642,148,1.065,150,1.819,151,0.871,157,0.949,158,0.794,161,1.468,166,3.044,167,1.365,169,0.612,171,1.589,210,0.615,215,1,219,0.615,220,1.781,222,0.607,223,0.524,240,3.156,241,0.871,244,1.714,245,0.645,246,0.698,250,1.065,295,1.101,381,0.888,397,1.634,400,0.732,410,3.605,430,3.504,431,0.855,433,1.638,435,2.213,440,0.813,441,1.29,445,2.872,447,3.141,449,0.702,450,0.847,453,1.356,463,0.973,480,0.96,485,1.574,488,1.294,501,1.92,503,1.106,504,1.446,506,0.949,508,1.121,514,1.065,526,1.282,539,1.621,541,1.13,548,0.732,555,1.638,556,1,560,1.085,563,1.047,571,0.937,588,1,592,0.618,596,1.375,599,0.455,616,0.986,675,0.937,694,1.246,697,1.971,705,1.574,709,0.907,731,0.535,736,0.686,744,1.917,746,0.746,757,0.897,799,0.949,802,2.008,804,1.306,831,3.471,835,0.879,837,0.871,842,3.027,849,1.589,852,0.777,860,0.584,863,0.819,869,1.694,870,1.394,872,1.924,874,1.806,875,1.156,880,1,881,3.027,885,2.589,893,0.794,895,0.826,898,0.727,900,2.402,908,3.451,912,2.632,916,1,918,4.668,919,1.014,923,0.96,927,0.702,936,0.84,939,0.973,946,1.867,957,0.826,963,0.794,964,0.771,968,1.13,969,1.306,970,4.871,971,1,972,4.571,973,1.156,974,1.757,975,2.359,976,1.03,977,1.306,978,2.632,979,1.03,980,1.559,981,4.572,982,2.088,983,1.306,984,1.306,985,1.156,986,2.088,987,1.306,988,1,989,0.855,990,2.088,991,2.359,992,0.916,993,1.065,994,1.306,995,1.892,996,1.924,997,1.306,998,2.088,999,2.632,1000,1.156,1001,5.103,1002,1.065,1003,1.306,1004,1,1005,1.065,1006,1.03,1007,1,1008,1.915,1009,1.306,1010,0.916,1011,1.306,1012,2.359,1013,1.492,1014,1.306,1015,2.088,1016,1.306,1017,1.457,1018,1.306,1019,1.306,1020,1.156,1021,1.757,1022,1.694,1023,1.833,1024,1.306,1025,1.306,1026,1.306,1027,1,1028,1.306,1029,1.924,1030,1.306,1031,1.156,1032,2.436,1033,1.156,1034,1,1035,1,1036,2.359,1037,1.306,1038,1.306,1039,0.706,1040,1.306,1041,1.531,1042,1.156,1043,3.5,1044,1.047,1045,1.065,1046,2.088,1047,0.937,1048,1.306,1049,2.088,1050,2.359,1051,0.949,1052,0.783,1053,1.106,1054,1.306,1055,0.949,1056,0.706,1057,1.306,1058,1.306,1059,1.306,1060,0.927,1061,1,1062,1.998,1063,1.306,1064,1.306,1065,1.219,1066,1.065,1067,1.306,1068,0.949,1069,0.96,1070,1.156,1071,2.173,1072,1.306,1073,1.306,1074,1.306,1077,1.156,1078,2.359,1079,1.306,1080,2.359,1081,1.306,1082,1.306,1083,1.306,1084,1.306,1085,1.306,1086,1.306,1087,1.306]],["component/266",[79,0.574]],["title/267-1",[64,13.904,1088,38.379]],["name/267-1",[]],["text/267-1",[]],["component/267-1",[]],["title/267",[14,11.364,212,24.681,481,32.255]],["name/267",[212,1.415,481,1.849]],["text/267",[7,0.814,13,1.202,14,2.46,36,1.475,40,1.302,43,1.555,47,1.375,49,2.235,64,1.705,66,2.747,70,1.877,71,1.653,74,2.272,88,2.141,138,1.48,144,3.17,145,1.793,151,2.435,201,1.592,210,1.719,212,3.64,220,2.756,230,2.483,240,3.143,242,2.141,253,3.129,254,2.309,266,4.578,295,1.704,397,3.468,400,2.045,440,2.272,441,1.996,481,5.342,482,2.369,514,2.977,519,6.374,599,1.273,610,1.735,723,2.927,724,5.286,743,4.298,791,2.795,832,2.272,849,2.458,878,2.977,884,2.534,885,2.39,897,3.901,962,2.309,1008,1.768,1089,4.407,1090,2.927,1091,2.309,1092,3.231,1093,3.231,1094,2.309,1095,3.092,1096,2.977,1097,2.348,1098,1.66,1099,2.348,1100,3.65,1103,3.65,1104,3.65,1105,3.65,1106,3.65,1108,3.65,1109,5.588,1121,2.977,1122,2.977,1123,2.977,1124,3.408,1125,2.534,1126,2.927,1127,3.65,1128,3.65,1129,3.65,1130,3.314,1131,3.65,1135,5.619,1136,5.619,1145,3.65,1146,3.65,1149,3.65,3247,4.373,3248,4.373,3249,4.373]],["component/267",[79,0.574]],["title/268",[88,17.088]],["name/268",[83,2.18]],["text/268",[2,1.245,7,1.346,13,0.659,20,1.265,31,1.278,32,1.335,36,1.826,40,1.047,41,1.158,45,1.018,46,0.693,52,3.006,58,0.887,60,2.795,64,2.181,67,0.873,79,0.399,81,1.19,82,1.236,88,1.309,90,2.581,91,1.771,94,1.777,95,3.578,103,1.389,104,2.073,108,2.648,111,2.423,123,0.947,126,1.255,130,1.182,132,2.107,134,4.358,135,3.015,139,2.045,144,0.926,145,1.689,149,2.075,150,1.128,159,2.091,161,3.338,176,1.833,197,1.453,201,0.873,212,1.063,245,0.988,256,1.287,294,2.791,295,2.504,435,0.741,441,1.88,461,1.051,475,1.436,482,1.298,484,3.544,486,1.013,488,1.813,493,1.245,504,2.107,506,3.283,508,2.55,516,2.813,524,1.094,526,1.869,529,1.453,534,1.15,539,1.375,548,1.926,552,1.266,572,1.335,573,1.912,591,2.598,594,1.335,596,3.52,601,2.091,610,2.148,615,1.287,618,3.043,622,5.38,623,1.226,628,1.771,636,1.792,655,2.193,694,1.816,701,1.632,707,1.404,709,2.387,710,1.107,718,1.532,731,1.41,732,1.662,734,1.322,735,1.453,736,1.051,739,2.652,744,0.839,747,1.695,748,4.847,751,1.532,757,2.362,761,1.453,765,1.771,766,1.771,793,1.208,833,4.748,837,1.335,840,1.335,845,1.31,849,1.347,852,1.19,854,1.276,873,2.44,884,1.389,898,1.914,917,1.771,927,1.075,932,1.532,971,2.632,980,1.322,989,1.31,1007,1.532,1013,1.266,1041,1.298,1068,1.453,1125,2.387,1150,1.771,1151,2.883,1152,3.755,1153,5.758,1154,4.519,1155,2.859,1156,2.001,1157,2.001,1158,3.209,1159,1.771,1160,2.001,1161,2.001,1162,1.771,1163,3.437,1164,4.519,1165,1.771,1166,2.001,1167,2.001,1168,3.043,1169,3.043,1170,3.209,1171,3.437,1172,1.532,1173,1.771,1174,2.001,1175,1.771,1176,2.001,1177,1.868,1178,1.731,1179,2.001,1180,2.001,1181,2.001,1182,1.632,1183,2.001,1184,1.771,1185,1.771,1186,2.001,1187,2.001,1188,1.389,1189,1.632,1190,1.453,1191,1.771,1192,1.695,1193,1.632,1194,1.771,1195,1.771,1196,1.771,1197,2.001]],["component/268",[79,0.574]],["title/269",[1155,44.298]],["name/269",[1155,2.624]],["text/269",[7,1.931,14,2.285,34,2.11,36,2.217,40,2.008,52,1.844,64,1.884,67,2.393,89,3.5,90,2.768,99,3.265,104,2.517,111,2.201,137,3.176,144,2.539,176,2.225,201,2.393,246,4.044,294,3.389,295,2.561,465,3.732,488,2.201,497,2.393,500,2.764,502,3.986,508,3.598,510,3.265,564,2.983,573,2.698,697,2.736,700,3.075,709,3.81,744,2.301,836,3.851,860,2.453,1022,5.434,1151,3.5,1155,5.909,1169,4.857,1198,3.851,1199,3.939,1200,5.123,1201,4.857,1202,4.036,1203,3.114,1204,5.487,1205,5.487,1206,5.487,1207,5.487,1208,5.487]],["component/269",[79,0.574]],["title/270-1",[67,24.364,111,22.405]],["name/270-1",[]],["text/270-1",[]],["component/270-1",[]],["title/270-2",[64,11.564,1584,29.387,1587,35.074]],["name/270-2",[]],["text/270-2",[]],["component/270-2",[]],["title/270-3",[64,8.652,105,13.941,1584,21.986,1587,26.241,2697,28.873]],["name/270-3",[]],["text/270-3",[]],["component/270-3",[]],["title/270-4",[46,16.099,234,17.987,592,21.981]],["name/270-4",[]],["text/270-4",[]],["component/270-4",[]],["title/270",[46,19.357,592,26.429]],["name/270",[46,0.923,592,1.26]],["text/270",[2,0.934,4,3.178,7,1.121,13,0.494,14,2.2,20,0.984,28,1.39,30,1.727,34,1.39,35,2.672,36,1.772,40,1.166,41,0.869,46,3.074,47,2.101,49,1.179,52,2.394,54,2.357,56,0.674,58,0.666,60,1.672,64,1.388,66,1.307,71,1.636,72,0.906,73,1.354,74,1.664,82,0.927,88,0.366,89,0.958,90,0.549,92,0.893,93,0.974,94,0.776,102,1.001,104,1.658,105,0.602,106,1.919,108,0.741,109,0.875,111,2.857,118,1.547,119,2.104,127,0.686,128,1.569,130,0.887,137,0.869,139,0.893,141,1.48,143,0.831,145,0.738,146,0.875,147,0.958,154,2.145,157,1.091,164,1.091,169,1.254,208,0.906,209,1.054,214,1.042,219,0.707,234,1.399,245,0.741,256,0.966,397,1.354,400,0.841,435,1.339,452,1.149,458,0.992,461,0.789,465,1.021,466,1.134,477,0.893,480,1.104,482,0.974,484,0.807,485,1.783,486,2.22,488,2.018,492,0.686,500,0.756,508,3.236,526,1.453,534,2.078,548,0.841,551,0.992,552,2.286,561,1.042,564,1.965,571,1.919,573,2.639,590,1.489,591,0.863,592,4.256,594,1.783,596,0.875,597,0.793,599,0.524,615,2.822,616,1.134,631,0.807,636,0.893,637,0.983,639,1.272,640,1.225,694,1.413,702,0.927,705,1.001,715,2.346,716,1.149,721,1.517,731,2.921,732,1.247,734,2.898,735,1.091,736,0.789,744,1.121,793,3.649,796,0.958,802,0.934,804,2.427,832,0.934,837,1.001,858,1.104,860,0.671,870,1.58,873,1.065,877,0.858,885,1.751,890,1.329,891,1.078,898,0.836,901,0.881,902,1.664,903,1.225,909,0.913,915,1.691,923,1.104,927,0.807,929,1.329,931,3.311,932,1.149,936,0.966,946,1.547,962,1.691,992,1.054,995,3.517,1002,1.225,1041,0.974,1047,1.919,1075,1.966,1089,2.325,1091,0.95,1130,1.363,1162,1.329,1168,1.329,1188,1.042,1201,1.329,1202,1.966,1209,1.225,1210,1.225,1211,5.576,1212,1.065,1213,1.501,1214,1.992,1215,1.149,1216,1.329,1217,3.265,1218,4.832,1219,1.501,1220,2.898,1221,1.501,1222,1.091,1223,2.673,1224,1.104,1225,1.329,1226,1.329,1227,1.299,1228,1.501,1229,1.091,1230,1.329,1231,1.042,1232,1.225,1233,2.595,1234,1.501,1235,2.673,1236,4.386,1237,2.673,1238,1.091,1239,1.501,1240,1.329,1241,1.501,1242,1.501,1243,1.501,1244,1.501,1245,1.501,1246,2.047,1247,1.678,1248,1.501,1249,1.329,1250,1.329,1251,1.501,1252,1.329,1253,1.501,1254,1.225,1255,1.501,1584,0.95,1768,1.247,2041,2.265,2167,1.329,2180,1.329,2697,2.221,2824,1.402,2911,1.569,2912,1.569,2913,1.569,2914,1.569,2915,1.569,2916,1.402,2917,1.569,2918,1.569,2919,1.569,3246,1.66]],["component/270",[79,0.574]],["title/271-1",[19,17.696]],["name/271-1",[]],["text/271-1",[]],["component/271-1",[]],["title/271-2",[573,19.909,592,26.429]],["name/271-2",[]],["text/271-2",[]],["component/271-2",[]],["title/271",[726,42.764,3066,44.786]],["name/271",[3066,3.326]],["text/271",[4,1.98,5,1.574,6,1.602,7,1.174,10,1.166,11,1.175,13,0.53,14,1.288,19,1.929,28,2.237,30,0.553,31,2.338,34,1.093,35,0.855,38,1.322,39,2.507,40,2.152,41,1.646,43,1.964,46,1.825,47,1.738,48,3.437,49,0.525,52,0.541,56,1.277,58,2.58,64,0.401,65,2.28,66,1.39,67,0.702,73,4.702,84,0.765,87,1.537,88,1.125,104,1.304,105,0.646,106,4.514,109,0.938,111,1.85,118,0.931,120,1.054,130,1.68,134,1.064,138,1.549,142,1.29,145,1.397,150,0.907,154,0.787,166,0.88,168,1.738,169,1.333,176,0.653,179,2.041,184,2.46,199,2.083,219,0.758,222,1.322,223,1.532,228,1.002,229,1.142,230,1.095,234,2.039,240,1.273,256,1.829,397,0.815,398,0.938,416,1.064,453,0.925,471,0.865,473,1.064,477,2.744,478,2.041,497,0.702,521,2.362,551,1.064,572,1.074,573,1.877,592,2.492,597,0.85,599,0.561,601,1.768,623,3.228,631,1.528,636,1.944,637,1.054,694,3.074,704,2.409,705,1.074,715,1.044,721,2.168,724,3.169,726,2.925,731,1.166,734,1.064,743,2.397,744,0.675,746,0.919,755,0.841,767,2.345,794,1.363,796,1.027,816,3.203,820,1.392,824,2.655,826,2.655,931,1.215,936,1.035,941,1.215,947,1.756,951,0.958,964,0.951,989,1.054,1008,0.779,1010,1.13,1032,1.215,1052,1.704,1056,0.87,1071,1.084,1192,1.363,1224,1.184,1238,1.169,1316,1.503,1322,4.544,1348,1.337,1475,1.29,1555,2.147,1649,1.142,1715,1.074,1811,2.211,1866,1.845,1920,2.066,1985,1.215,1996,2.46,2107,1.503,2112,1.199,2169,1.313,2312,1.169,2404,2.28,2551,1.25,2570,2.581,2581,5.395,2611,1.363,2672,1.503,3066,6.494,3084,1.609,3109,3.145,3110,3.145,3111,7.793,3112,1.551,3113,1.551,3114,1.551,3115,1.551,3116,1.551,3117,1.682,3118,1.682,3119,1.78,3120,6.06,3121,5.076,3122,1.682,3123,1.682,3124,1.682,3125,1.78,3126,1.78,3127,1.551,3128,1.551,3129,1.682,3130,1.78,3131,3.145,3132,5.101,3133,1.682,3134,1.78,3135,1.78,3136,1.78,3137,1.78,3138,1.78,3139,1.78,3140,1.78,3141,1.551,3142,3.567,3143,2.843,3239,1.862,3250,1.928,3251,1.928,3252,1.928,3253,1.928,3254,1.928,3255,1.928]],["component/271",[79,0.574]],["title/272",[816,33.97,2920,44.786]],["name/272",[2920,3.326]],["text/272",[7,1.706,127,3.495,188,6.358,218,4.69,219,3.605,462,5.702,464,7.814,768,7.421,816,4.655,967,5.764,2631,6.243,2920,8.516,2921,8.001,2922,8.001,2923,8.001]],["component/272",[79,0.574]],["title/273",[816,42.588]],["name/273",[83,2.18]],["text/273",[7,2.278,38,3.589,47,2.909,125,4.126,223,3.097,227,6.092,239,5.419,816,6.217,927,4.149,2920,6.191,3066,6.191,3142,7.209,3143,7.721,3144,8.54,3145,8.54,3205,7.442]],["component/273",[79,0.574]],["title/274-1",[19,17.696]],["name/274-1",[]],["text/274-1",[]],["component/274-1",[]],["title/274-2",[573,19.909,592,26.429]],["name/274-2",[]],["text/274-2",[]],["component/274-2",[]],["title/274-3",[809,32.327,2178,45.561]],["name/274-3",[]],["text/274-3",[]],["component/274-3",[]],["title/274",[726,42.764,3205,53.831]],["name/274",[3205,3.998]],["text/274",[4,2.43,6,0.91,7,1.638,10,1.511,11,1.522,13,0.714,14,1.797,19,1.857,28,1.417,30,0.745,31,1.37,34,1.417,38,1.712,39,1.18,40,1.702,41,1.256,46,1.664,47,2.132,48,2.177,49,0.708,52,0.729,53,1.408,56,0.974,58,2.129,62,3.234,64,0.54,65,1.74,67,0.947,73,4.792,84,1.751,88,1.381,105,0.87,106,1.558,108,1.071,111,2.27,118,1.256,121,2.537,130,2.177,134,1.434,138,1.494,142,1.74,145,1.066,152,1.351,166,1.187,169,1.728,177,1.31,199,0.858,221,1.087,223,2.27,228,1.351,234,1.859,240,0.723,246,1.159,248,1.523,251,1.447,256,1.396,398,1.264,416,1.434,453,1.248,458,1.434,471,1.166,473,1.434,477,2.192,478,1.558,492,2.193,497,1.607,521,3.061,551,1.434,573,2.26,592,2.999,597,1.146,599,1.285,601,1.705,623,1.33,631,1.98,636,2.455,637,1.421,721,1.231,724,2.532,726,6.387,744,0.91,746,1.239,755,2.957,767,1.64,794,1.838,796,2.35,809,1.256,816,2.92,820,1.877,931,1.638,935,1.576,936,1.396,941,1.638,947,1.34,951,2.192,989,1.421,1008,1.051,1010,1.523,1052,1.3,1056,1.173,1062,3.121,1071,1.461,1076,2.862,1224,1.596,1238,1.576,1291,1.877,1322,4.537,1348,1.803,1532,1.638,1555,1.638,1649,1.54,1715,1.447,1811,1.256,1866,1.408,1985,1.638,1996,3.188,2112,1.617,2178,4.616,2312,1.576,2404,1.74,2570,3.345,2602,3.551,2611,1.838,2822,1.97,2957,3.851,3066,5.083,3112,2.091,3113,2.091,3114,2.091,3115,2.091,3116,2.091,3117,2.268,3118,2.268,3120,6.109,3121,4.627,3122,2.268,3123,2.268,3124,2.268,3127,2.091,3128,2.091,3129,2.268,3141,2.091,3149,2.268,3205,8.04,3256,2.6,3257,4.414,3258,4.414,3259,2.6,3260,2.6,3261,2.6,3262,2.6,3263,2.6,3264,2.6,3265,2.6,3266,2.6,3267,2.6,3268,2.6,3269,2.6]],["component/274",[79,0.574]],["title/275-1",[108,27.578,198,52.148]],["name/275-1",[]],["text/275-1",[]],["component/275-1",[]],["title/275-2",[19,17.696]],["name/275-2",[]],["text/275-2",[]],["component/275-2",[]],["title/275-3",[573,19.909,592,26.429]],["name/275-3",[]],["text/275-3",[]],["component/275-3",[]],["title/275-4",[39,30.364,60,25.843]],["name/275-4",[]],["text/275-4",[]],["component/275-4",[]],["title/275-5",[477,33.233,3146,61.774]],["name/275-5",[]],["text/275-5",[]],["component/275-5",[]],["title/275-6",[809,40.528]],["name/275-6",[]],["text/275-6",[]],["component/275-6",[]],["title/275",[125,24.82,239,32.604,816,28.253]],["name/275",[125,1.423,239,1.869]],["text/275",[4,2.165,5,1.012,6,1.565,7,1.202,10,0.749,11,0.755,13,1.776,14,2.203,19,1.803,28,1.939,30,0.876,31,1.182,34,0.703,36,2.18,38,1.185,39,1.728,40,1.865,41,1.476,42,4.401,43,1.086,45,0.503,46,1.102,47,2.262,48,1.878,49,0.322,52,0.332,56,0.443,58,2.063,60,0.457,62,1.231,64,0.635,66,1.247,67,0.797,70,0.508,71,0.828,73,4.595,82,0.61,84,1.773,87,1.378,88,1.695,89,0.63,102,1.219,105,1.496,106,2.282,108,0.902,109,0.576,111,1.496,119,1.525,125,4.811,128,0.58,130,1.507,134,0.653,138,1.034,141,1.412,142,0.792,145,1.562,146,0.576,147,0.63,149,0.596,152,1.138,154,0.483,161,0.615,163,1.491,165,1.037,166,0.999,167,1.058,168,0.689,169,1.196,176,0.401,177,0.596,179,0.709,199,1.475,200,0.511,208,0.596,210,0.861,222,0.459,223,1.023,228,0.615,234,1.633,239,4.214,240,0.329,246,0.528,252,0.625,256,1.176,381,0.672,390,0.647,397,0.5,398,1.852,408,0.547,416,1.208,462,0.736,471,0.531,473,0.653,477,3.21,478,0.709,483,0.718,484,0.531,492,1.165,497,1.84,548,0.554,551,0.653,571,0.709,573,1.923,579,0.736,580,0.922,592,3.082,597,0.522,599,0.344,601,1.18,615,0.636,618,0.921,623,0.605,631,0.982,636,2.095,686,0.952,694,1.347,700,0.554,704,0.837,705,0.659,721,0.561,724,1.256,731,1.73,734,0.653,744,1.07,746,0.564,754,0.837,755,1.333,758,0.431,767,1.135,768,0.779,774,0.952,795,0.588,796,1.166,798,1.491,809,0.572,816,4.223,820,1.581,835,1.231,860,1.14,866,0.601,898,0.55,899,0.779,913,0.779,925,0.988,931,0.746,935,1.853,936,0.636,941,1.926,947,1.129,951,0.588,953,0.554,965,0.531,980,0.653,989,0.647,1006,0.779,1008,0.885,1023,0.767,1039,0.534,1052,0.592,1056,0.534,1062,0.837,1071,0.665,1124,0.922,1137,0.572,1203,1.037,1214,1.362,1220,0.792,1224,0.727,1233,0.709,1238,0.718,1275,1.42,1278,0.701,1279,0.837,1322,3.529,1348,0.821,1555,0.746,1556,0.837,1584,0.625,1586,2.161,1588,0.922,1649,1.297,1715,2.489,1718,1.087,1747,0.837,1811,1.058,1866,0.641,1915,0.625,1916,3.483,1940,0.792,1981,0.792,1985,1.38,1996,0.855,1999,0.792,2000,0.922,2112,1.362,2167,0.874,2178,3.043,2187,0.874,2232,0.897,2404,0.792,2417,0.653,2423,1.761,2471,0.855,2581,1.953,2611,0.837,2690,1.033,2712,1.033,2791,0.922,2822,0.897,2926,1.033,3064,1.91,3112,0.952,3113,0.952,3114,0.952,3115,0.952,3116,1.761,3120,8.086,3121,3.064,3127,0.952,3128,0.952,3133,1.033,3141,0.952,3142,0.922,3147,1.033,3148,1.093,3149,1.033,3150,2.021,3151,1.033,3152,2.021,3153,2.021,3154,1.093,3155,1.093,3156,1.093,3157,1.093,3158,1.093,3159,1.093,3160,1.093,3161,1.093,3162,2.021,3163,1.093,3164,2.021,3165,4.126,3166,1.093,3167,1.093,3168,1.093,3169,1.093,3170,1.093,3171,1.093,3172,4.126,3173,4.126,3174,4.126,3175,2.021,3176,4.126,3177,4.126,3178,1.093,3179,2.021,3180,2.821,3181,1.093,3182,1.093,3183,1.093,3184,1.093,3239,1.197,3270,1.184,3271,1.184,3272,1.184,3273,5.054,3274,1.184,3275,2.19,3276,1.184,3277,1.184,3278,1.184,3279,1.184,3280,1.184,3281,1.184,3282,1.184,3283,1.184,3284,1.184,3285,1.184,3286,1.184,3287,1.184,3288,1.184,3289,1.184,3290,1.184,3291,1.184,3292,1.184,3293,1.184,3294,1.184,3295,1.184,3296,1.184]],["component/275",[79,0.574]],["title/276",[88,13.63,252,35.333]],["name/276",[83,2.18]],["text/276",[6,1.906,7,1.476,8,1.943,10,1.863,11,1.877,14,2.405,40,2.114,47,2.495,66,2.222,70,2.337,72,2.743,88,2.226,90,1.662,92,2.703,114,2.562,117,3.706,128,2.666,144,3.064,154,3.82,167,2.63,199,1.797,200,3.423,201,3.744,210,2.14,222,2.112,240,3.04,252,2.874,259,3.975,260,3.479,269,2.874,271,5.544,398,2.648,450,2.949,496,2.874,510,2.703,525,3.621,610,3.147,631,2.442,675,3.262,699,3.155,729,3.342,739,2.666,744,1.906,893,4.027,897,3.155,898,2.53,1090,3.643,1097,4.26,1098,3.011,1099,2.923,2356,7.001,2357,4.544,2358,4.544,2359,5.861,2522,2.763,2523,2.763,2556,4.242,2557,4.242,3239,2.975]],["component/276",[79,0.574]],["title/277-1",[19,17.696]],["name/277-1",[]],["text/277-1",[]],["component/277-1",[]],["title/277",[201,20.263,240,15.476,510,27.639]],["name/277",[201,0.855,240,0.653,510,1.167]],["text/277",[4,2.754,14,1.569,19,1.621,30,2.203,40,1.948,88,1.565,99,3.817,104,2.942,105,2.573,154,3.137,159,3.902,201,4.342,240,3.316,260,4.912,455,5.233,478,4.606,510,5.003,599,2.237,736,3.371,745,4.201,758,2.798,767,2.856,955,4.364,965,3.447,1027,4.912,1097,4.127,1098,2.917,1099,4.127,1175,5.679,1475,5.144,2117,5.679,2356,5.233,2359,5.679,2371,6.415,2372,6.415]],["component/277",[79,0.574]],["title/278-1",[19,17.696]],["name/278-1",[]],["text/278-1",[]],["component/278-1",[]],["title/278-2",[168,21.045,199,22.087]],["name/278-2",[]],["text/278-2",[]],["component/278-2",[]],["title/278",[269,35.333,270,40.577]],["name/278",[269,1.685,270,1.935]],["text/278",[6,1.211,7,1.041,10,1.184,11,1.193,13,1.936,14,1.652,19,1.18,28,1.111,30,1.604,40,1.565,46,1.001,48,5.306,49,0.943,60,1.336,64,0.719,88,1.648,90,1.056,105,3.35,118,4.293,165,1.639,168,2.99,199,1.142,201,2.947,207,3.936,210,2.2,217,1.619,223,1.874,240,1.556,245,1.426,246,1.543,259,1.47,264,3.315,269,4.273,270,3.393,398,2.722,421,1.58,453,1.661,488,2.359,522,5.293,524,4.056,525,1.58,570,3.316,589,1.827,599,1.629,696,1.399,720,3.81,758,1.26,764,3.923,777,3.81,788,5.416,871,2.098,900,1.518,953,1.619,1008,1.399,1017,1.784,1039,4.009,1052,1.731,1056,1.561,1069,2.124,1091,1.827,1098,1.313,1286,1.501,1364,2.006,1584,1.827,1811,1.672,1915,1.827,2042,2.279,2221,3.81,2312,5.765,2521,2.888,2522,1.757,2523,1.757,2524,2.888,2525,1.57,2526,2.888,2527,2.888,2528,2.499,2529,2.888,2530,2.557,2531,2.557,2532,2.888,2533,2.557,2534,2.557,2535,2.557,2536,2.557,2537,2.557,2538,5.98,2539,4.135,2540,4.715,2541,6.978,2542,4.135,2543,4.135,2544,2.557,2545,4.135,2546,2.557,2547,2.557,2548,4.135,2549,4.135,2550,2.557,2551,3.629,2552,2.557,2553,2.447,2554,2.557,2555,2.557,3239,1.891,3297,2.279]],["component/278",[79,0.574]],["title/279-1",[19,17.696]],["name/279-1",[]],["text/279-1",[]],["component/279-1",[]],["title/279-2",[168,21.045,199,22.087]],["name/279-2",[]],["text/279-2",[]],["component/279-2",[]],["title/279",[269,35.333,271,39.64]],["name/279",[269,1.685,271,1.89]],["text/279",[6,1.211,7,1.041,10,1.184,11,1.193,13,1.936,14,1.652,19,1.18,28,1.111,30,1.604,40,1.565,46,1.001,48,5.306,49,0.943,60,1.336,64,0.719,88,1.648,90,1.056,105,3.35,118,4.293,165,1.639,168,2.99,199,1.142,201,2.947,207,3.936,210,2.2,217,1.619,223,1.874,240,1.556,245,1.426,246,1.543,259,1.47,264,3.315,269,4.273,271,3.315,398,2.722,421,1.58,453,1.661,488,2.359,522,5.293,524,4.056,525,1.58,570,3.316,589,1.827,599,1.629,696,1.399,720,3.81,758,1.26,764,3.923,777,3.81,788,5.416,871,2.098,900,1.518,953,1.619,1008,1.399,1017,1.784,1039,4.009,1052,1.731,1056,1.561,1069,2.124,1091,1.827,1098,1.313,1286,1.501,1364,2.006,1584,1.827,1811,1.672,1915,1.827,2042,2.279,2221,3.81,2312,5.765,2522,1.757,2523,1.757,2525,1.57,2528,2.499,2530,2.557,2531,2.557,2533,2.557,2534,2.557,2535,2.557,2536,2.557,2537,2.557,2538,5.98,2539,4.135,2540,4.715,2541,6.978,2542,4.135,2543,4.135,2544,2.557,2545,4.135,2546,2.557,2547,2.557,2548,4.135,2549,4.135,2550,2.557,2551,3.629,2552,2.557,2553,2.447,2554,2.557,2555,2.557,2556,2.697,2557,2.697,2558,2.888,2559,2.888,2560,2.888,2561,2.888,3239,1.891,3297,2.279]],["component/279",[79,0.574]],["title/280-1",[19,17.696]],["name/280-1",[]],["text/280-1",[]],["component/280-1",[]],["title/280-2",[168,21.045,199,22.087]],["name/280-2",[]],["text/280-2",[]],["component/280-2",[]],["title/280",[88,13.63,273,40.577]],["name/280",[88,0.65,273,1.935]],["text/280",[6,1.686,7,1.348,10,1.648,11,1.661,13,1.991,14,1.978,19,1.016,27,2.536,28,1.546,40,2.111,43,3.096,48,5.382,49,1.312,64,1.001,81,4.325,88,2.116,168,2.739,199,1.59,210,2.848,217,2.253,218,2.464,223,1.613,259,2.046,273,4.393,421,2.198,453,2.311,488,2.426,524,4.422,525,2.198,599,2.82,610,3.455,696,1.947,728,5.353,748,2.502,758,1.754,764,4.034,939,2.995,1017,2.483,1039,2.173,1052,2.409,1098,1.828,1286,2.089,1572,3.559,1584,4.598,1915,2.543,2165,3.406,2416,3.279,2417,2.657,2522,2.445,2523,2.445,2525,2.185,2540,6.952,2541,5.647,2562,4.02,2563,4.02,2564,4.02,2565,4.02,2566,4.02,2567,4.02,2568,4.02,2569,6.787,2570,5.49,2571,5.646,2572,5.646,2573,8.086,2574,5.828,3239,2.633,3297,3.172]],["component/280",[79,0.574]],["title/281-1",[19,17.696]],["name/281-1",[]],["text/281-1",[]],["component/281-1",[]],["title/281-2",[168,21.045,199,22.087]],["name/281-2",[]],["text/281-2",[]],["component/281-2",[]],["title/281",[727,33.349,3062,44.771,3063,44.771]],["name/281",[727,1.408,3062,1.89,3063,1.89]],["text/281",[6,1.288,7,1.094,10,1.259,11,1.269,13,2.018,14,1.712,19,0.776,28,1.181,30,2.403,40,2.061,48,1.815,49,1.002,52,1.033,64,0.765,88,1.495,100,2.96,111,3.069,118,2.84,152,5.536,159,1.868,168,1.157,196,2.205,199,1.941,207,5.479,210,2.312,217,1.721,223,1.969,226,2.96,240,2.042,259,1.563,421,1.68,453,1.766,494,1.927,524,4.461,525,2.684,599,1.711,618,2.472,654,2.789,696,1.488,723,3.935,727,5.025,731,2.513,734,2.03,743,3.079,758,1.34,788,3.935,860,1.373,1008,1.488,1017,1.897,1039,1.66,1052,1.841,1069,2.259,1091,1.943,1098,1.397,1151,3.13,1158,5.722,1202,4.507,1286,1.596,1368,2.96,1466,2.96,1811,1.778,1915,1.943,2018,2.96,2220,2.868,2312,2.231,2452,4.73,2522,1.868,2523,1.868,2525,1.67,2528,4.246,2540,2.463,2541,7.461,2574,6.746,2631,5.709,2645,5.13,3062,7.863,3063,7.863,3239,2.011,3297,2.423,3298,3.68,3299,3.68,3300,3.68,3301,3.68,3302,3.68,3303,5.88,3304,3.68,3305,3.68,3306,3.68,3307,3.68,3308,3.68,3309,5.88,3310,5.88,3311,3.68,3312,3.68]],["component/281",[79,0.574]],["title/282-1",[19,17.696]],["name/282-1",[]],["text/282-1",[]],["component/282-1",[]],["title/282-2",[168,21.045,199,22.087]],["name/282-2",[]],["text/282-2",[]],["component/282-2",[]],["title/282",[280,50.872]],["name/282",[280,3.014]],["text/282",[6,1.848,7,1.443,10,1.807,11,1.82,13,1.451,14,2.069,19,2.277,20,1.622,28,1.694,30,2.223,33,4.956,40,1.96,47,2.439,64,1.097,88,1.075,118,2.55,149,2.66,168,2.439,199,1.742,210,3.049,217,2.469,222,2.048,223,1.767,240,3.002,259,2.242,280,7.257,388,3.373,416,2.912,421,2.409,453,2.533,488,3.078,494,2.765,512,3.825,524,3.54,551,2.912,572,2.939,589,4.095,599,1.536,696,2.134,736,2.315,758,1.922,860,1.97,933,2.66,953,2.469,957,2.787,1008,2.134,1017,2.721,1039,2.381,1052,3.88,1098,2.004,1142,3.423,1203,2.5,1286,2.29,1915,2.787,1919,3.533,2312,4.703,2522,2.68,2523,2.68,2525,2.395,2575,4.406,2576,4.406,2577,4.406,2578,4.406,2579,4.406,2580,4.406,2581,4.956,2582,6.473,3239,2.885,3297,3.476]],["component/282",[79,0.574]],["title/283-1",[19,17.696]],["name/283-1",[]],["text/283-1",[]],["component/283-1",[]],["title/283-2",[168,21.045,199,22.087]],["name/283-2",[]],["text/283-2",[]],["component/283-2",[]],["title/283",[283,50.872]],["name/283",[283,3.014]],["text/283",[6,2.506,7,1.788,10,2.45,11,2.469,13,1.967,14,2.368,19,1.51,20,2.2,40,1.385,64,1.488,88,1.458,168,3.647,199,2.363,210,3.778,217,3.348,219,2.815,223,2.397,259,3.041,282,5.29,283,6.578,421,3.268,453,3.436,524,4.387,599,2.084,758,2.607,1017,3.69,1039,3.23,1052,3.581,1098,2.717,1286,3.106,1915,3.78,2522,3.634,2523,3.634,2525,3.249,2583,5.976,2584,5.976,2585,5.976,2586,5.976,2587,5.976,2588,5.976,3239,3.913,3297,4.715]],["component/283",[79,0.574]],["title/284-1",[19,17.696]],["name/284-1",[]],["text/284-1",[]],["component/284-1",[]],["title/284",[88,9.703,277,21.874,573,14.173,727,28.545]],["name/284",[88,0.379,277,0.854,573,0.553,727,1.114]],["text/284",[6,1.718,7,1.367,10,1.679,11,1.692,13,1.348,14,1.997,19,1.55,30,3.001,40,2.025,56,2.753,64,1.527,88,1.794,168,1.543,169,2.876,210,2.889,217,2.295,223,1.643,240,2.043,259,2.084,277,2.253,287,3.341,288,3.341,421,2.24,438,4.258,453,2.355,486,3.105,494,2.57,522,4.091,524,3.353,525,2.24,573,1.46,599,3.048,610,1.947,696,1.984,727,2.94,758,1.787,764,4.091,909,2.491,1017,2.529,1039,2.214,1052,2.454,1056,3.314,1098,1.862,1286,2.129,1332,3.626,1749,5.799,1915,2.591,2522,2.491,2523,2.491,2525,2.227,2551,3.182,2581,6.692,2605,5.429,2620,3.824,2647,4.096,2648,4.096,2649,6.132,2650,4.096,2651,4.096,2652,4.096,2653,6.132,2654,4.096,2655,4.096,2656,4.096,2657,4.096,2658,3.824,2659,8.161,2660,4.096,2661,4.096,2662,4.096,2663,5.725,2664,4.096,2665,6.132,2666,4.096,3239,2.682,3297,3.231]],["component/284",[79,0.574]],["title/285-1",[19,17.696]],["name/285-1",[]],["text/285-1",[]],["component/285-1",[]],["title/285",[277,30.727,278,38.782]],["name/285",[277,1.465,278,1.849]],["text/285",[6,2.178,7,1.624,8,4.536,10,2.129,11,2.145,13,1.71,14,2.058,19,2.305,30,1.783,40,2.114,43,3.885,45,2.643,64,1.293,65,4.164,88,1.267,168,1.957,210,3.431,217,2.91,223,2.083,234,2.011,259,2.643,277,2.857,278,5.058,390,3.401,421,2.84,453,2.986,524,3.984,599,1.811,696,2.515,758,2.265,1017,3.207,1039,2.807,1052,3.112,1098,2.361,1286,2.699,1811,3.006,1915,3.285,2522,3.158,2523,3.158,2525,2.823,2581,3.976,2667,5.193,2668,5.193,2669,5.193,2670,5.193,2671,5.193,2672,6.801,2673,7.284,3239,3.401,3297,4.097]],["component/285",[79,0.574]],["title/286-1",[19,17.696]],["name/286-1",[]],["text/286-1",[]],["component/286-1",[]],["title/286",[292,50.872]],["name/286",[292,3.014]],["text/286",[6,2.346,7,1.709,10,2.293,11,2.31,13,1.841,14,2.141,19,1.413,27,2.346,40,1.296,64,1.392,88,1.365,168,2.107,210,3.612,217,4.297,223,2.243,259,2.846,292,5.571,421,3.058,453,3.215,524,4.194,599,1.95,610,4.16,696,2.709,731,2.293,758,2.44,1008,2.709,1017,3.454,1039,3.023,1052,4.596,1098,2.543,1286,2.907,1536,4.562,1915,3.538,2017,4.412,2036,4.282,2522,3.401,2523,3.401,2525,3.04,2729,5.222,2734,7.669,2735,5.592,2736,5.592,2737,5.592,2738,5.592,2739,5.592,2740,5.592,2741,5.592,2742,5.592,2743,5.39,2744,5.592,3239,3.662,3297,4.412]],["component/286",[79,0.574]],["title/287-1",[19,17.696]],["name/287-1",[]],["text/287-1",[]],["component/287-1",[]],["title/287",[468,63.571]],["name/287",[468,3.766]],["text/287",[6,1.794,7,1.411,10,1.754,11,1.767,13,2.085,14,2.585,19,1.6,20,1.574,27,3.163,31,1.59,40,0.991,58,1.896,64,1.877,88,2.354,123,2.024,180,2.683,210,2.983,212,2.272,217,2.396,223,1.715,228,4.694,259,2.176,294,2.641,421,2.339,453,2.459,468,3.882,497,2.762,512,2.526,524,3.463,599,1.491,610,2.033,618,2.154,636,1.429,758,1.865,800,2.601,860,1.912,1017,2.641,1039,2.311,1052,2.563,1098,1.945,1286,2.223,1718,2.544,1915,4.006,2363,4.546,2365,3.429,2366,3.229,2367,3.07,2368,3.07,2369,3.07,2417,2.826,2525,2.325,2750,3.145,2756,3.145,2757,3.145,2758,3.145,2759,3.145,2760,3.145,2761,3.145,2762,3.145,2763,3.322,2764,3.322,2765,3.145,2766,3.145,3239,2.8,3297,3.374,3313,5.124,3314,5.124,3315,5.124,3316,7.587,3317,5.124,3318,5.124,3319,5.124,3320,5.124,3321,5.124,3322,5.124,3323,5.124,3324,5.124,3325,5.124,3326,5.124]],["component/287",[79,0.574]],["title/288-1",[19,17.696]],["name/288-1",[]],["text/288-1",[]],["component/288-1",[]],["title/288",[470,53.613]],["name/288",[470,3.176]],["text/288",[6,1.802,7,1.417,10,1.762,11,1.775,13,2.092,14,2.588,19,1.606,20,1.582,27,3.172,31,1.598,40,0.996,58,1.905,64,1.883,88,2.278,90,1.572,123,2.033,180,2.696,210,2.994,212,2.283,217,2.408,223,1.724,228,4.708,259,2.187,294,2.654,421,2.35,453,2.471,470,4.866,497,2.772,512,2.539,524,3.476,525,2.35,599,1.499,610,2.043,618,2.165,636,1.436,758,1.875,800,2.614,860,1.921,1017,2.654,1039,2.323,1052,2.575,1098,1.954,1286,2.234,1718,2.557,1915,4.021,2363,4.563,2364,3.804,2365,3.446,2366,3.245,2367,3.085,2368,3.085,2369,3.085,2417,2.84,2525,2.336,2745,4.297,2746,4.297,2747,6.356,2748,4.297,2749,4.297,2750,3.161,2751,4.297,2752,4.297,2753,4.297,2754,4.297,2755,4.297,2756,3.161,2757,3.161,2758,3.161,2759,3.161,2760,3.161,2761,3.161,2762,3.161,2763,3.339,2764,3.339,2765,3.161,2766,3.161,3239,2.814,3297,3.39]],["component/288",[79,0.574]],["title/289-1",[19,17.696]],["name/289-1",[]],["text/289-1",[]],["component/289-1",[]],["title/289",[277,38.523]],["name/289",[277,2.282]],["text/289",[6,1.82,7,1.427,10,1.78,11,1.793,13,2.108,14,2.593,19,1.618,20,1.598,27,3.191,31,1.614,40,1.006,58,1.924,64,1.894,88,2.287,123,2.054,180,2.723,210,3.016,212,2.306,217,2.432,223,1.741,228,4.735,259,2.209,277,2.388,294,2.68,421,2.373,453,2.495,497,2.793,512,2.564,524,3.501,599,1.513,610,2.063,618,2.186,636,1.45,758,1.893,800,2.64,860,1.94,1017,2.68,1039,2.346,1052,2.601,1098,1.974,1286,2.256,1718,2.582,1915,4.05,2363,4.596,2365,3.48,2366,3.277,2367,3.116,2368,3.116,2369,3.116,2417,2.868,2525,2.359,2750,3.192,2756,3.192,2757,3.192,2758,3.192,2759,3.192,2760,3.192,2761,3.192,2762,3.192,2763,3.372,2764,3.372,2765,3.192,2766,3.192,2773,4.34,2774,4.34,2775,4.34,2776,6.402,2777,4.34,2778,4.34,2779,4.34,2780,4.34,2781,4.34,2782,4.34,2783,4.34,2784,4.34,3239,2.842,3297,3.424]],["component/289",[79,0.574]],["title/290-1",[19,17.696]],["name/290-1",[]],["text/290-1",[]],["component/290-1",[]],["title/290",[469,53.613]],["name/290",[469,3.176]],["text/290",[6,1.82,7,1.427,10,1.78,11,1.793,13,2.108,14,2.593,19,1.618,20,1.598,27,3.191,31,1.614,40,1.006,58,1.924,64,1.894,88,2.287,123,2.054,180,2.723,210,3.016,212,2.306,217,2.432,223,1.741,228,4.735,259,2.209,294,2.68,421,2.373,453,2.495,469,4.902,497,2.793,512,2.564,524,3.501,599,1.513,610,2.063,618,2.186,636,1.45,758,1.893,800,2.64,860,1.94,1017,2.68,1039,2.346,1052,2.601,1098,1.974,1286,2.256,1718,2.582,1915,4.05,2363,4.596,2366,3.277,2367,3.116,2368,3.116,2369,3.116,2417,2.868,2525,2.359,2750,3.192,2756,3.192,2757,3.192,2758,3.192,2759,3.192,2760,3.192,2761,3.192,2762,3.192,2763,3.372,2764,3.372,2765,3.192,2766,3.192,2785,4.34,2786,4.34,2787,6.402,2788,4.34,2789,4.34,2790,4.34,2791,4.052,2792,4.34,2793,4.34,2794,4.34,2795,4.34,2796,4.34,3239,2.842,3297,3.424]],["component/290",[79,0.574]],["title/291-1",[19,17.696]],["name/291-1",[]],["text/291-1",[]],["component/291-1",[]],["title/291",[2797,57.12]],["name/291",[2797,3.384]],["text/291",[6,1.946,7,1.498,10,1.903,11,1.917,13,2.213,14,2.566,19,1.699,20,1.708,27,1.946,31,1.725,40,1.075,58,2.058,64,1.968,88,2.115,123,2.196,180,2.912,210,3.167,212,2.465,217,2.6,223,1.861,228,4.921,259,2.361,294,2.866,421,2.538,453,2.668,466,3.504,497,2.933,512,2.742,524,3.677,599,1.618,610,2.206,636,1.551,758,2.024,800,2.822,860,2.075,1017,2.866,1039,2.508,1052,2.781,1098,2.11,1286,2.412,1718,2.761,1915,4.253,2363,4.827,2367,3.331,2368,3.331,2369,3.331,2525,2.523,2750,3.413,2756,3.413,2757,3.413,2758,3.413,2759,3.413,2760,3.413,2761,3.413,2762,3.413,2765,3.413,2766,3.413,2797,5.484,2798,4.64,2799,4.64,2800,6.723,2801,4.64,2802,4.64,2803,4.64,2804,4.64,2805,4.64,2806,4.64,3239,3.039,3297,3.661]],["component/291",[79,0.574]],["title/292",[64,13.904,488,22.405]],["name/292",[83,2.18]],["text/292",[7,1.074,14,2.505,30,1.655,46,2.799,47,1.816,52,1.62,64,1.72,67,3.014,71,3.657,73,2.44,74,4.301,81,2.868,88,1.686,104,3.169,130,2.848,138,1.955,141,2.668,150,4.554,169,2.26,245,2.38,435,1.786,449,2.59,488,4.107,492,2.201,496,3.049,500,3.48,508,3.285,534,2.771,573,2.879,590,2.684,592,3.269,731,3.617,744,2.022,767,2.146,923,3.545,925,2.605,933,4.171,967,2.954,1039,2.605,1123,3.932,1137,3.999,1214,3.591,1767,6.117,1921,5.885,1992,3.101,2112,3.591,2280,4.82,2281,4.5,2282,4.5]],["component/292",[79,0.574]],["title/293-1",[52,13.366,573,14.173,2216,30.443,2373,35.2]],["name/293-1",[]],["text/293-1",[]],["component/293-1",[]],["title/293-2",[40,9.214,64,9.898,1464,26.276,1992,25.582]],["name/293-2",[]],["text/293-2",[]],["component/293-2",[]],["title/293",[137,32.327,578,40.098]],["name/293",[137,1.541,578,1.912]],["text/293",[4,2.092,7,1.086,13,1.605,14,2.512,20,1.794,31,1.812,34,1.874,38,2.265,40,1.614,46,1.689,52,3.279,71,2.207,87,2.634,88,1.189,101,4.315,105,2.794,119,2.338,144,2.255,145,3.422,225,5.411,232,3.976,234,1.887,479,2.84,486,2.468,492,3.181,497,2.126,499,2.714,508,3.311,510,2.9,573,2.897,596,4.058,597,2.575,599,2.429,631,2.619,633,3.732,636,1.629,852,2.9,904,3.541,947,3.01,962,4.406,1013,3.083,1053,4.129,1254,3.976,1464,3.221,1663,3.732,1672,3.908,1716,3.384,1917,3.976,1921,3.251,1925,4.315,2032,4.315,2216,6.222,2234,4.315,2373,4.315,2374,4.874,2375,4.874,2376,4.874,2377,4.315,2378,4.874,2379,4.874,2380,4.874]],["component/293",[79,0.574]],["title/294-1",[143,29.941,1527,31.552,2815,27.002,2930,32.449]],["name/294-1",[]],["text/294-1",[]],["component/294-1",[]],["title/294-2",[136,22.142,143,22.007,2815,30.891,2931,37.124]],["name/294-2",[]],["text/294-2",[]],["component/294-2",[]],["title/294",[40,10.764,64,11.564,143,25.711]],["name/294",[143,1.474,2815,2.069]],["text/294",[3,1.602,7,1.011,13,0.918,14,1.909,20,1.026,34,1.072,35,4.713,36,1.126,40,1.533,45,1.418,46,0.966,47,2.941,52,2.223,54,1.178,64,2.37,66,1.363,67,1.216,72,3.464,89,1.778,90,1.019,95,1.859,102,3.027,104,2.081,106,3.257,108,1.376,111,2.653,118,1.613,126,1.749,127,2.072,134,4.371,136,1.552,138,1.13,143,5.047,166,1.524,167,2.626,169,2.691,171,1.877,199,1.102,209,1.956,228,1.735,234,3.186,388,2.134,390,1.825,421,1.524,449,1.498,486,2.905,492,1.273,504,2.78,505,2.315,508,2.157,569,2.681,573,2.933,578,2.001,591,1.602,611,1.877,623,1.708,631,1.498,636,0.931,675,2.001,694,2.397,702,1.721,707,1.956,731,1.143,734,1.842,744,1.903,749,2.001,767,1.241,796,2.894,804,3.176,817,2.025,836,1.956,849,1.877,854,1.778,858,2.05,863,1.749,865,2.025,893,1.695,943,2.315,946,2.626,962,2.87,963,1.695,964,1.647,974,2.076,976,2.199,1008,1.35,1075,3.337,1233,2.001,1473,2.165,1584,1.763,1587,2.104,1618,2.53,1952,2.165,1995,2.315,2041,4.861,2186,2.53,2215,2.53,2306,2.315,2438,2.53,2697,3.769,2815,5.657,2916,2.602,2930,2.602,2931,6.175,2932,2.913,2934,2.913,2935,2.913,2936,2.913,2937,2.913,2938,2.913,2939,2.787,2940,2.913,2944,2.913,2945,2.913,2946,4.743,2947,2.913,2948,2.913,2949,2.913,2950,2.913,2951,2.913,2952,2.913,2953,2.913,2954,2.913,2974,2.913,2975,3.082]],["component/294",[79,0.574]],["title/295-1",[46,16.099,52,15.616,592,21.981]],["name/295-1",[]],["text/295-1",[]],["component/295-1",[]],["title/295-2",[20,17.101,52,15.616,573,16.559]],["name/295-2",[]],["text/295-2",[]],["component/295-2",[]],["title/295-3",[52,15.616,573,16.559,962,29.387]],["name/295-3",[]],["text/295-3",[]],["component/295-3",[]],["title/295",[52,18.776,64,13.904]],["name/295",[83,2.18]],["text/295",[3,2.929,4,1.382,7,1.135,14,2.213,20,3.065,27,3.284,28,2.763,34,1.959,35,2.706,45,1.638,46,2.713,47,2.708,49,1.662,52,3.598,54,2.153,60,1.489,64,1.573,71,2.306,73,1.63,88,0.785,108,2.515,119,1.544,138,2.066,141,1.782,145,1.582,169,2.389,208,1.943,219,1.516,220,2.43,381,2.189,449,1.73,458,2.127,492,1.47,493,2.004,508,3.005,573,3.878,592,3.705,597,2.691,731,1.32,744,2.136,755,1.682,802,2.004,851,2.339,866,3.098,893,1.958,925,1.74,931,2.43,941,2.43,962,5.721,967,1.973,1010,2.259,1203,4.078,1217,2.089,1240,2.85,1464,3.366,1465,2.071,1511,3.701,1866,2.089,1920,2.339,2004,2.626,2306,2.674,2381,3.219,2382,3.219,2383,3.219,2384,3.219,2385,3.219,2386,3.219,2387,3.219,2388,3.219,2389,3.219,2390,3.219,2391,2.85,2392,3.219,2393,3.219,2394,5.094,2395,3.219,2396,3.219]],["component/295",[79,0.574]],["title/296-1",[52,18.776,500,28.134]],["name/296-1",[]],["text/296-1",[]],["component/296-1",[]],["title/296-2",[52,18.776,1921,37.258]],["name/296-2",[]],["text/296-2",[]],["component/296-2",[]],["title/296-3",[453,40.259]],["name/296-3",[]],["text/296-3",[]],["component/296-3",[]],["title/296-4",[234,21.627,484,30.014]],["name/296-4",[]],["text/296-4",[]],["component/296-4",[]],["title/296",[52,15.616,500,23.399,1921,30.987]],["name/296",[449,1.054,500,0.988,1921,1.308]],["text/296",[7,1.832,13,1.368,14,1.016,30,2.128,31,1.544,34,1.597,38,1.931,40,1.718,46,3.047,52,3.782,89,2.65,104,1.905,130,2.454,145,2.041,154,2.031,199,1.643,217,2.328,219,1.957,221,2.082,484,3.33,500,4.645,573,3.134,588,3.181,590,2.313,596,2.421,611,2.798,631,2.232,633,6.732,749,4.449,767,1.85,845,4.058,866,2.527,885,2.72,901,2.437,904,3.018,915,2.628,962,4.69,1005,3.389,1013,5.199,1015,3.678,1068,4.503,1123,3.389,1151,3.954,1465,5.657,1917,3.389,1921,5.483,2397,4.154,2398,4.154,2399,6.197,2400,4.154,2401,4.154,2402,4.154,2403,4.154,2404,3.331]],["component/296",[79,0.574]],["title/297-1",[492,31.979]],["name/297-1",[]],["text/297-1",[]],["component/297-1",[]],["title/297",[2195,54.403]],["name/297",[2195,3.223]],["text/297",[7,1.565,14,1.206,20,1.814,28,1.895,34,2.7,38,2.291,40,1.627,46,3.393,47,1.857,52,3.291,64,2.036,73,2.495,88,1.996,99,2.933,105,1.977,106,5.04,108,2.434,130,4.831,138,1.999,163,4.021,169,2.311,223,1.977,251,3.288,398,4.091,488,1.977,508,2.343,573,2.915,623,4.302,636,2.733,694,2.604,925,2.664,939,3.672,942,4.095,1152,4.095,1203,2.797,1254,4.021,1660,4.176,2180,4.363,2195,8.002,2415,4.75,2471,4.265,2743,4.75,3327,5.451,3328,5.905,3329,5.451,3330,5.905,3331,5.905,3332,5.905,3333,5.905,3334,5.905,3335,5.905]],["component/297",[79,0.574]],["title/298-1",[34,21.478,499,31.104]],["name/298-1",[]],["text/298-1",[]],["component/298-1",[]],["title/298-2",[421,38.293]],["name/298-2",[]],["text/298-2",[]],["component/298-2",[]],["title/298",[34,13.365,52,11.683,421,19.006,499,19.354,877,19.851]],["name/298",[421,2.269]],["text/298",[7,1.422,13,2.1,14,1.56,34,2.917,39,2.348,40,1.001,46,3.575,47,2.403,52,3.409,54,1.825,64,1.888,88,1.054,92,2.57,119,3.061,123,2.044,150,2.435,157,3.138,169,2.991,207,2.516,208,2.607,245,2.132,295,3.541,381,4.339,421,3.488,461,2.269,484,2.321,499,3.552,531,3.138,558,2.828,567,3.523,573,2.274,632,3.523,700,3.574,710,3.531,767,1.923,795,2.57,808,3.307,844,3.307,863,2.71,873,3.065,877,2.467,902,2.688,951,2.57,1049,3.823,1060,3.065,1190,3.138,1203,2.451,1224,3.176,1229,3.138,1238,4.634,1339,3.176,1351,2.779,1465,4.88,1536,3.523,1612,3.523,1614,3.823,1615,3.823,2021,3.823,2164,3.737,2404,3.463,2405,3.588,2406,4.319,2407,4.319,2408,4.319,2409,4.319,2410,4.319,2411,4.319,2412,4.319,2413,4.319,2414,4.319,2415,4.162]],["component/298",[79,0.574]],["title/299",[597,29.51,598,39.64]],["name/299",[597,1.407,598,1.89]],["text/299",[4,2.548,7,1.323,14,2.593,27,3.349,30,2.742,31,2.969,41,3.435,71,2.687,88,1.448,90,2.171,144,2.746,199,2.347,234,2.298,295,3.728,497,2.589,597,4.219,598,6.404,618,4.022,636,2.668,915,3.755,947,4.931,953,3.326,962,3.755,1071,3.997,1716,4.121,1779,4.544,1920,4.312,1926,5.254,2340,5.254,2377,5.254,2416,4.841,2417,5.277,2418,7.985,2419,5.935,2420,5.935,2421,5.935]],["component/299",[79,0.574]],["title/300-1",[56,20.856,433,32.255,1738,46.453]],["name/300-1",[]],["text/300-1",[]],["component/300-1",[]],["title/300-2",[240,15.476,441,25.403,999,37.893]],["name/300-2",[]],["text/300-2",[]],["component/300-2",[]],["title/300-3",[8,29.944]],["name/300-3",[]],["text/300-3",[]],["component/300-3",[]],["title/300",[430,38.757]],["name/300",[430,2.296]],["text/300",[4,2.76,8,3.118,14,1.573,19,1.843,28,1.271,30,3.025,36,1.335,38,2.988,40,0.766,56,3.56,64,1.815,71,2.911,88,1.779,114,1.863,120,3.405,144,1.529,147,2.108,161,2.057,166,1.807,168,3.32,219,1.556,240,3.265,255,2.695,397,1.673,430,4.389,431,4.21,433,4.464,435,2.938,436,3.981,438,2.294,440,4.002,441,4.605,443,3.733,445,4.671,496,2.09,501,1.966,556,2.53,563,4.17,573,1.178,599,1.152,696,3.114,746,1.887,758,1.441,870,1.952,898,1.84,899,2.607,916,2.53,981,2.53,992,2.319,999,2.695,1008,1.6,1034,3.981,1035,2.53,1043,4.603,1044,2.65,1051,2.401,1056,2.81,1060,2.345,1077,2.925,1094,2.09,1716,4.464,1739,2.925,1740,3.611,1741,2.925,1742,2.925,1743,5.692,1744,3.304,1745,3.304,1746,4.923,1747,2.799,1748,3.304,1749,2.607,1750,2.925,1751,2.925,1752,2.695,1753,3.304,1754,3.304,1755,2.925,1756,2.925,1757,3.304,1758,2.925,1759,3.304,1760,3.304,1761,3.304,1762,2.925,1763,3.304,1764,3.304,1765,3.304]],["component/300",[79,0.574]],["title/301-1",[759,40.802]],["name/301-1",[]],["text/301-1",[]],["component/301-1",[]],["title/301-2",[19,14.115,758,24.364]],["name/301-2",[]],["text/301-2",[]],["component/301-2",[]],["title/301-3",[450,36.25,743,35.046]],["name/301-3",[]],["text/301-3",[]],["component/301-3",[]],["title/301",[19,17.696]],["name/301",[83,2.18]],["text/301",[5,1.375,6,1.042,7,1.646,10,1.019,11,1.027,13,0.818,14,2.534,19,2.325,30,0.853,33,1.903,34,1.588,36,1.004,38,1.155,40,1.43,43,1.059,46,0.861,47,1.996,49,1.347,64,1.536,71,3.971,73,3.963,74,1.547,88,1.91,90,2.256,92,2.457,115,2.059,116,2.2,127,1.135,132,1.523,136,1.384,138,1.008,154,1.215,156,1.784,159,1.511,168,0.936,175,2.105,179,4.429,197,1.805,199,1.633,201,1.084,210,1.171,217,1.393,222,1.155,229,4.379,230,4.197,231,5.033,234,0.962,240,2.055,253,2.95,254,3.351,300,2.704,301,2.2,381,1.69,390,2.704,397,2.091,408,3.789,435,0.921,449,1.335,488,0.997,494,1.559,499,1.384,508,1.181,526,1.351,539,1.708,573,0.886,592,2.507,593,2.2,599,0.867,611,1.674,717,1.627,723,4.247,725,3.655,731,1.019,736,1.306,743,2.591,758,1.801,759,1.448,893,1.511,894,1.726,933,1.5,958,2.2,967,1.523,1008,1.204,1097,1.599,1098,1.13,1099,1.599,1109,4.321,1247,1.559,1257,2.2,1286,1.292,1287,3.64,1391,1.744,1715,2.754,1746,1.903,1766,1.903,1767,2.2,1768,2.065,1769,2.485,1770,2.485,1771,2.2,1772,2.2,1773,2.485,1774,2.485,1775,1.903,1776,2.485,1777,2.485,1778,2.485,1779,5.655,1780,2.485,1781,3.655,1782,2.485,1783,2.485,1784,2.485,1785,2.2,1786,5.585,1787,2.485,1788,2.485,1789,2.485,1790,2.485,1791,6.846,1792,3.43,1793,2.485,1794,2.485,1795,2.485,1796,4.129,1797,2.485,1798,2.485,1799,2.485,1800,2.485,3239,1.627]],["component/301",[79,0.574]],["title/302",[240,18.608,428,38.782]],["name/302",[240,0.887,428,1.849]],["text/302",[4,1.687,7,2.153,13,1.294,14,2.1,28,1.511,30,2.462,31,1.461,36,1.588,40,2.093,66,3.506,71,1.779,73,1.989,88,2.204,89,2.507,93,2.55,105,3.874,111,3.623,113,3.479,119,1.885,120,3.892,154,1.921,176,1.594,201,1.714,208,3.588,234,2.302,240,3.357,246,3.176,428,6.512,431,2.573,461,2.065,479,2.29,599,1.37,615,2.528,700,2.202,710,3.29,744,2.493,759,2.29,832,2.446,857,3.479,895,2.486,898,2.188,925,4.32,992,2.758,1032,2.967,1076,4.618,1142,3.053,1740,2.728,1766,3.009,1801,3.929,1802,3.929,1803,3.479,1804,3.009,1805,3.479,1806,3.1,1807,3.929,1808,3.929,1809,5.944,1810,5.944,1811,2.274,1812,8.585,1813,3.929]],["component/302",[79,0.574]],["title/303-1",[217,31.298,696,27.051]],["name/303-1",[]],["text/303-1",[]],["component/303-1",[]],["title/303-2",[253,31.104,254,35.333]],["name/303-2",[]],["text/303-2",[]],["component/303-2",[]],["title/303-3",[430,30.914,431,36.575]],["name/303-3",[]],["text/303-3",[]],["component/303-3",[]],["title/303-4",[56,20.856,430,25.711,433,32.255]],["name/303-4",[]],["text/303-4",[]],["component/303-4",[]],["title/303-5",[64,9.898,240,13.247,440,24.749,441,21.744]],["name/303-5",[]],["text/303-5",[]],["component/303-5",[]],["title/303-6",[64,9.898,240,13.247,441,21.744,443,28.545]],["name/303-6",[]],["text/303-6",[]],["component/303-6",[]],["title/303-7",[40,8.053,64,8.652,240,11.579,440,21.633,445,25.249]],["name/303-7",[]],["text/303-7",[]],["component/303-7",[]],["title/303-8",[49,18.227,554,45.561]],["name/303-8",[]],["text/303-8",[]],["component/303-8",[]],["title/303",[168,26.384]],["name/303",[168,1.563]],["text/303",[8,2.62,14,1.961,19,1.467,20,0.412,28,1.573,30,2.701,31,0.416,35,2.174,36,1.145,38,0.52,40,1.655,43,2.734,45,0.569,47,0.421,49,1.335,54,0.473,56,3.298,58,0.496,60,0.948,62,1.38,64,2.031,67,0.894,73,0.566,84,0.974,88,2.155,105,0.822,114,0.631,120,2.679,123,0.529,126,0.702,127,0.936,137,0.647,141,1.134,143,0.619,147,1.307,158,1.724,163,1.671,166,1.55,168,1.322,169,0.524,199,0.442,201,1.237,217,0.627,218,1.255,219,1.652,222,0.52,240,3.479,241,0.746,242,2.699,252,1.296,253,3.574,254,1.296,255,1.671,397,0.566,400,0.627,408,4.437,410,2.118,412,2.171,416,3.837,419,4.445,421,2.516,424,1.968,426,2.51,428,1.968,430,3.698,431,2.297,433,2.841,435,2.019,436,2.686,438,1.968,440,2.864,441,2.98,443,3.625,445,2.549,447,2.411,448,2.171,457,0.912,475,0.803,480,0.822,485,2.729,486,2.329,492,0.511,493,0.696,496,1.296,504,0.685,534,1.178,557,1.671,599,0.39,606,0.812,651,0.99,696,0.542,697,1.414,706,0.912,718,0.856,736,1.076,746,0.639,754,0.947,758,0.488,759,0.652,760,0.794,767,0.498,799,1.488,802,2.864,829,1.569,841,0.912,863,0.702,870,2.073,881,0.856,883,0.99,898,0.623,902,1.275,908,0.844,909,2.798,918,1.438,927,0.601,933,0.675,935,1.488,955,1.393,964,0.661,970,0.912,974,2.614,979,0.882,981,2.171,982,0.99,992,1.438,1006,0.882,1008,0.992,1021,1.526,1032,2.14,1034,0.856,1035,0.856,1039,1.532,1041,1.33,1044,0.897,1051,0.812,1056,3.138,1061,0.856,1066,0.912,1071,0.753,1076,0.869,1098,1.86,1148,0.929,1151,1.307,1185,0.99,1188,0.776,1203,0.635,1212,1.454,1218,0.794,1222,0.812,1229,0.812,1268,1.044,1277,0.822,1282,0.856,1337,1.488,1472,0.947,1660,0.947,1739,1.814,1740,1.968,1741,1.814,1742,2.51,1749,0.882,1750,3.106,1751,0.99,1752,2.313,1755,0.99,1756,1.814,1758,0.99,1762,0.99,1781,0.99,1806,1.616,1811,0.647,1814,1.118,1815,4.601,1816,1.814,1817,1.118,1818,1.118,1819,1.118,1820,1.118,1821,1.118,1822,1.118,1823,1.118,1824,1.118,1825,2.049,1826,1.118,1827,2.049,1828,1.118,1829,0.947,1830,1.118,1831,0.99,1832,1.118,1833,0.99,1834,3.508,1835,1.118,1836,4.434,1837,1.118,1838,2.835,1839,1.118,1840,1.118,1841,2.049,1842,1.118,1843,2.049,1844,1.118,1845,0.897,1846,1.118,1847,1.118,1848,2.049,1849,0.99,1850,1.118,1851,2.835,1852,1.118,1853,0.99,1854,1.118,1855,0.968,1856,1.118,1857,1.118,1858,0.947,1859,0.947,1860,3.106,1861,1.814,1862,1.118,1863,4.824,1864,1.814]],["component/303",[79,0.574]],["title/304-1",[19,17.696]],["name/304-1",[]],["text/304-1",[]],["component/304-1",[]],["title/304",[60,21.494,88,11.336,397,23.519]],["name/304",[3336,4.97]],["text/304",[3,1.871,4,2.733,7,0.725,14,1.558,19,0.823,20,2.662,34,2.448,36,2.573,40,0.754,47,1.226,52,1.094,54,1.376,60,4.718,64,2.43,66,2.513,84,1.547,88,2.457,93,2.113,95,3.428,108,2.537,127,1.486,128,1.91,139,3.057,141,1.802,144,1.506,156,2.337,166,1.78,167,1.884,169,1.526,212,1.729,223,1.306,228,2.026,240,2.121,246,1.739,251,3.428,397,5.025,398,1.897,400,4.052,430,1.802,447,2.237,475,2.337,500,1.64,548,2.879,559,2.816,590,1.813,592,1.54,610,1.547,694,1.72,700,3.568,719,2.458,729,2.394,734,2.151,744,1.365,749,6.006,759,2.994,831,2.214,843,4.953,852,1.937,864,2.955,865,2.365,869,2.337,914,2.492,925,1.759,945,2.237,980,2.151,995,2.61,1022,2.337,1199,2.337,1214,2.425,1238,2.365,1254,2.655,1278,2.31,1660,2.757,1715,2.171,1836,3.137,2006,3.137,2082,2.816,2112,2.425,2164,4.446,2169,2.655,2170,3.137,2822,2.955,2974,3.402,3237,3.6,3329,3.6,3337,3.9,3338,3.9,3339,3.9,3340,3.9,3341,6.157,3342,3.9,3343,3.9,3344,3.9,3345,3.9,3346,3.9,3347,3.9]],["component/304",[79,0.574]],["title/305",[88,11.336,240,15.476,408,25.711]],["name/305",[88,0.478,240,0.653,408,1.085]],["text/305",[7,0.9,13,1.33,14,2.316,19,1.534,27,2.545,38,1.877,40,0.936,43,2.585,45,2.055,49,2.379,88,2.476,143,2.235,168,2.286,222,1.877,240,3.581,241,2.694,253,4.059,408,5.514,410,4.4,412,4.646,416,6.03,419,4.646,421,4.432,424,5.061,589,3.839,606,2.934,631,2.17,696,1.956,726,4.646,1008,1.956,1062,3.421,1097,2.598,1098,2.759,1099,2.598,1102,3.667,1775,3.092,1811,2.337,1860,3.575,1863,3.575,1864,3.575,1865,4.039,1866,2.621,1867,6.068,1868,4.039,1869,4.039,1870,4.039,1871,4.039,1872,4.039,1873,4.039,1874,4.039,1875,4.039,1876,4.039,1877,4.039,1878,4.039,1879,4.039,1880,3.575,1881,4.039,1882,4.039,1883,3.575,1884,4.039]],["component/305",[79,0.574]],["title/306-1",[253,31.104,453,32.112]],["name/306-1",[]],["text/306-1",[]],["component/306-1",[]],["title/306-2",[19,14.115,253,31.104]],["name/306-2",[]],["text/306-2",[]],["component/306-2",[]],["title/306",[40,12.943,253,31.104]],["name/306",[40,0.617,253,1.483]],["text/306",[4,1.614,7,1.555,8,1.608,14,2.388,19,2.244,28,1.446,30,1.974,38,1.748,40,1.617,64,2.21,67,1.64,70,1.934,71,2.603,73,1.904,88,2.055,90,1.375,123,1.779,127,1.717,141,2.081,145,1.848,151,2.508,168,2.166,212,1.998,219,1.771,223,1.508,229,2.669,230,2.558,240,2.958,246,2.009,253,5.723,254,4.414,300,2.462,390,2.462,408,4.325,416,5.867,419,4.401,441,2.056,486,3.533,599,2.004,696,1.821,699,4.845,909,3.496,946,2.176,1066,3.067,1097,2.419,1098,1.71,1099,2.419,1148,4.775,1151,2.399,1287,2.584,1672,3.015,1715,2.508,1716,2.611,1743,3.329,1746,2.879,1772,3.329,1775,2.879,1779,2.879,1785,3.329,1786,3.067,1816,5.089,1831,3.329,1885,3.624,1886,3.76,1887,3.76,1888,3.76,1889,3.76,1890,3.329,1891,3.76,1892,3.76,1893,3.76,1894,3.76,1895,3.76,1896,3.76,1897,3.76]],["component/306",[79,0.574]],["title/307",[525,30.544,2283,49.446]],["name/307",[525,1.456,2283,2.357]],["text/307",[4,2.92,7,1.051,10,3.271,13,1.552,30,1.619,40,1.093,64,1.693,70,2.425,87,2.549,88,2.354,90,1.725,105,1.892,146,2.748,195,6.687,196,4.883,222,3.161,223,1.892,248,4.774,398,3.963,403,3.426,408,2.61,459,5.208,499,2.626,512,2.786,523,3.991,524,2.579,525,3.72,529,4.941,601,2.182,610,2.242,618,2.375,719,3.56,735,3.426,748,2.935,761,3.426,800,2.868,804,2.61,927,2.534,956,3.611,1247,2.959,1252,4.175,2036,3.611,2284,6.802,2285,4.716,2286,6.802,2287,6.802,2291,6.802,2292,5.548,2293,4.716,2296,4.716,2553,3.995,2602,4.545,2927,4.929,2929,4.929,2957,4.929,2958,5.216,2959,5.216,2960,5.216,2961,5.216,2962,5.216,2963,5.216,2964,5.216,2966,5.216,2967,5.216,3239,4.454,3348,5.65]],["component/307",[79,0.574]],["title/308",[523,32.769,601,25.843]],["name/308",[83,2.18]],["text/308",[7,2.108,13,2.148,30,1.161,31,1.969,40,1.227,52,1.137,64,2.29,70,1.739,84,1.607,88,2.479,90,2.387,99,2.012,103,2.348,105,2.962,111,1.356,114,2.986,115,1.686,121,2.797,123,1.6,127,1.544,135,2.255,136,2.948,159,2.056,166,2.895,167,1.957,169,1.585,184,2.925,195,4.996,196,3.801,200,1.748,201,1.475,223,1.356,227,2.668,237,4.631,240,1.126,246,1.807,295,1.578,300,2.214,303,2.758,307,4.319,309,4.054,311,4.054,397,1.712,398,1.97,404,2.139,493,2.105,499,1.883,508,1.607,523,5.785,524,4.038,525,3.569,526,1.838,527,2.255,529,2.456,530,3.157,573,1.887,592,1.6,601,3.709,610,1.607,618,2.667,655,2.157,695,2.993,696,1.638,702,2.088,709,2.348,731,1.386,748,2.105,758,1.475,760,3.758,761,2.456,762,2.194,763,2.993,764,2.255,767,1.505,804,1.871,840,2.255,971,2.589,989,2.214,1004,2.589,1008,1.638,1094,2.139,1121,2.758,1122,2.758,1126,2.711,1155,2.139,1165,2.993,1362,2.758,1485,2.758,1988,2.993,2297,3.157,2298,3.381,2299,3.381,2300,3.381,2301,3.381,2968,3.74]],["component/308",[79,0.574]],["title/309-1",[592,33.134]],["name/309-1",[]],["text/309-1",[]],["component/309-1",[]],["title/309-2",[573,24.961]],["name/309-2",[]],["text/309-2",[]],["component/309-2",[]],["title/309-3",[49,18.227,424,38.782]],["name/309-3",[]],["text/309-3",[]],["component/309-3",[]],["title/309-4",[403,50.872]],["name/309-4",[]],["text/309-4",[]],["component/309-4",[]],["title/309",[70,28.723,523,32.769]],["name/309",[70,1.369,523,1.562]],["text/309",[4,2.18,14,2.617,27,1.345,28,2.425,30,1.101,40,0.743,43,2.163,46,2.485,49,2.34,54,2.665,62,2.16,64,0.798,88,1.239,121,1.694,123,1.518,139,1.908,155,6.349,189,4.496,207,2.959,240,2.101,253,1.786,403,2.33,424,3.526,441,4.274,452,2.455,465,2.181,494,2.012,557,2.616,573,2.248,592,2.403,696,3.054,701,2.616,710,4.601,736,1.685,742,2.839,835,2.16,860,4.038,927,1.723,939,2.389,959,3.736,988,3.889,1017,3.137,1021,5.823,1056,3.876,1137,1.856,1155,2.029,1210,5.144,1247,4.5,1270,2.421,1349,4.143,1427,2.181,1920,5.21,2120,2.839,2302,3.207,2303,5.079,2304,3.207,2305,3.207,2306,2.664,2307,3.207,2308,6.305,2309,3.207,2310,3.207,2311,3.207,2312,3.69,2313,5.079,2314,3.207,2315,3.207,2316,3.207,2317,3.207,2318,3.207,2319,3.207,2320,3.207,2321,3.207,2322,3.207,2323,3.207,2324,3.207,2325,3.207,2326,3.207,2327,3.207,2328,6.305,2329,6.305,2330,6.305,2331,6.305,2332,6.305]],["component/309",[79,0.574]],["title/310-1",[523,32.769,524,30.544]],["name/310-1",[]],["text/310-1",[]],["component/310-1",[]],["title/310-2",[19,17.696]],["name/310-2",[]],["text/310-2",[]],["component/310-2",[]],["title/310",[832,43.586]],["name/310",[832,2.582]],["text/310",[4,2.501,5,2.118,6,1.605,7,1.757,10,1.569,11,1.581,13,2.596,14,2.489,30,2,31,2.931,36,1.546,38,1.778,40,1.634,43,3.004,46,1.326,47,1.442,52,1.286,64,0.952,67,1.669,71,1.732,74,2.382,87,2.068,88,1.721,105,1.535,108,2.876,111,1.535,132,2.345,138,1.552,146,2.229,152,2.382,210,1.802,213,2.345,214,4.045,222,2.707,234,1.481,309,2.929,311,2.929,398,2.229,512,3.441,523,4.978,524,4.888,551,2.528,573,1.364,592,1.81,601,1.77,610,1.819,654,3.474,715,2.483,719,2.889,744,2.443,755,1.999,764,5.26,804,2.118,901,2.245,965,2.056,1094,2.42,1137,2.214,1254,3.121,1382,3.387,1532,2.889,2282,3.572,2292,3.121,2333,3.826,2334,3.572,2336,3.826,2337,3.826,2338,3.826,2339,3.826,2340,3.387,2341,3.826,2342,3.826,2343,3.826,2344,3.826,2345,3.826,2346,3.826,2347,3.826,2348,5.825,2349,3.826,2350,3.826,2351,3.826,2352,3.826,2354,3.826,2355,3.826,2471,3.31,2969,4.232,2970,4.232,2971,4.232,2972,4.232,2973,4.232,3239,2.505]],["component/310",[79,0.574]],["title/311",[19,17.696]],["name/311",[19,1.048]],["text/311",[5,3.401,6,2.577,7,1.821,10,2.519,11,2.538,13,2.023,19,1.553,28,2.363,30,2.11,66,3.004,115,3.064,132,3.765,165,3.487,200,3.176,208,3.709,221,4.096,222,3.798,248,5.736,435,2.277,492,2.806,599,2.143,722,5.012,746,3.509,965,3.302,1052,3.682,1111,4.36,1322,3.794,1337,4.464,1338,5.439,1339,4.519,1340,5.439,1341,7.234,1342,5.439,1343,5.439,1344,6.144,1345,6.144,1346,5.439,1347,6.144,1348,5.104,1349,5.012,1350,5.012,1351,3.953,1352,5.439,3239,4.023]],["component/311",[79,0.574]],["title/312",[47,21.045,435,20.697]],["name/312",[47,1.003,435,0.987]],["text/312",[13,1.496,14,2.588,20,1.673,27,3.6,36,1.836,40,1.81,47,3.438,58,2.015,64,1.131,67,1.982,105,1.823,115,3.895,138,1.843,143,2.515,150,2.562,156,3.262,168,2.495,219,2.14,221,2.277,223,1.823,233,2.828,246,2.428,435,2.895,492,3.024,497,3.407,569,2.684,601,3.064,805,3.155,817,3.301,841,3.706,900,2.387,957,2.874,964,3.912,1061,3.479,1353,5.96,1354,5.069,1355,5.069,1356,5.861,1357,5.981,1358,3.479,1359,3.479,1360,3.479,1361,3.155,1362,3.706,1363,4.022,1364,3.155,1365,3.155,1366,4.022,1367,4.022,1368,4.379,1369,3.479,1370,4.022,1371,4.544,1372,4.022,1373,6.621,1374,6.621,1375,6.621,1376,4.544,1377,4.544]],["component/312",[79,0.574]],["title/313-1",[435,25.948]],["name/313-1",[]],["text/313-1",[]],["component/313-1",[]],["title/313-2",[221,27.992,492,25.508]],["name/313-2",[]],["text/313-2",[]],["component/313-2",[]],["title/313",[58,24.765,435,20.697]],["name/313",[58,1.181,435,0.987]],["text/313",[14,2.784,20,2.312,27,3.553,28,0.33,30,1.581,31,1.839,34,0.33,36,0.649,40,0.199,43,3.13,49,1.094,64,0.706,139,0.511,165,0.488,176,0.348,199,0.34,221,0.805,222,0.399,223,0.345,233,4.161,251,0.573,435,1.567,492,0.392,497,4.497,570,3.127,601,2.566,636,1.653,736,0.452,767,0.383,804,0.476,860,4.258,891,1.153,925,4.373,947,4.008,948,2.236,951,0.511,953,4.964,965,0.462,1022,0.617,1039,0.464,1121,2.734,1198,0.603,1247,1.007,1351,0.553,1378,0.761,1379,0.761,1380,0.859,1381,2.838,1382,0.761,1383,8.472,1384,0.859,1385,0.859,1386,9.282,1387,8.383,1388,0.859,1389,7.984,1390,0.859,1391,0.603,1392,0.859,1393,2.26,1394,2.967,1395,5.122,1396,2.967,1397,0.859,1398,1.606,1399,2.26,1400,0.859,1401,0.859,1402,0.859,1403,1.421,1404,6.685,1405,6.685,1406,0.859,1407,4.946,1408,1.421,1409,2.838,1410,2.838,1411,2.512,1412,1.421,1413,1.421,1414,2.838,1415,2.838,1416,1.421,1417,2.512,1418,2.512,1419,1.606,1420,2.512,1421,2.512,1422,2.838,1423,2.838,1424,0.859,1425,4.604,1426,1.421,1427,2.28,1428,1.606,1429,0.859,1430,1.606,1431,0.859,1432,0.859,1433,1.421,1434,1.421,1435,0.859,1436,0.859,1437,2.26,1438,0.859,1439,1.606,1440,0.859,1441,0.859,1442,0.859,1443,4.604,1444,0.859,1445,5.546,1446,1.606,1447,1.606,1448,1.606,1449,1.606,1450,0.859,1451,5.259,1452,0.859,1453,0.859,1454,0.859,1455,0.859,1456,0.859,1457,0.859,1458,0.859,1459,1.606,1460,0.859]],["component/313",[79,0.574]],["title/314",[115,27.852,435,20.697]],["name/314",[83,2.18]],["text/314",[7,0.257,13,0.695,14,2.764,19,0.292,20,2.296,27,3.516,30,1.908,31,1.917,34,0.444,40,0.489,46,1.452,47,0.435,49,0.377,54,0.488,56,0.519,58,0.512,64,1.171,66,0.565,78,0.719,81,0.687,82,1.8,84,1.003,87,1.141,115,2.089,123,0.547,149,0.697,151,0.771,154,0.565,165,0.656,167,0.669,168,0.435,197,0.839,208,0.697,209,0.811,221,1.46,233,3.682,400,0.647,428,0.802,435,2.311,461,0.607,492,1.643,497,4.334,508,1.003,516,0.719,520,1.498,547,0.942,570,3.68,590,0.643,591,0.664,601,2.177,604,1.722,631,0.621,636,1.857,739,0.678,744,0.885,755,0.604,767,0.514,809,1.222,816,0.703,831,0.786,860,4.028,897,0.802,900,1.531,901,0.678,909,0.703,925,3.918,947,3.185,948,2.401,953,4.375,964,0.683,986,1.023,1004,0.885,1055,0.839,1061,0.885,1125,0.802,1182,0.942,1192,0.979,1215,0.885,1322,1.303,1337,1.533,1339,0.85,1343,1.023,1346,1.023,1350,0.942,1352,3.186,1353,6.802,1354,5.846,1355,5.846,1356,1.023,1361,0.802,1365,2.499,1366,2.58,1367,1.023,1369,0.885,1370,1.023,1394,1.869,1395,3.837,1396,1.869,1403,1.023,1408,1.023,1411,2.58,1412,1.023,1413,1.023,1416,1.023,1417,1.869,1418,1.869,1420,1.869,1421,1.869,1426,1.023,1427,2.448,1433,1.023,1434,1.869,1461,2.034,1462,1.155,1463,1.079,1464,1.395,1465,0.743,1466,1.113,1467,1.155,1468,1.023,1469,1.155,1470,1.869,1471,1.155,1472,0.979,1473,0.898,1474,0.911,1475,0.926,1476,1.155,1477,1.155,1478,0.979,1479,1.155,1480,1.155,1481,1.155,1482,1.155,1483,5.558,1484,5.558,1485,0.942,1486,5.915,1487,2.111,1488,2.111,1489,2.111,1490,2.111,1491,2.111,1492,2.111,1493,2.111,1494,5.558,1495,1.155,1496,1.155,1497,1.155,1498,1.155,1499,2.111,1500,1.155,1501,1.155,1502,2.914,1503,1.155,1504,1.155,1505,2.111,1506,2.914,1507,1.155,1508,1.155,1509,1.155,1510,1.155,1511,1.533,1512,1.155,1513,1.155,1514,1.155,1515,1.155,1516,1.155,1517,1.155,1518,1.155,1519,1.155,1520,2.914,1521,1.155,1522,1.155,1523,1.155,1524,1.155,1525,2.111,1526,1.155,1527,1.049,1528,1.155,1529,1.155,1530,1.155]],["component/314",[79,0.574]],["title/315",[809,40.528]],["name/315",[809,2.401]],["text/315",[7,1.057,13,1.561,14,2.364,20,1.745,31,2.539,40,1.099,47,3.015,49,1.547,64,1.18,115,2.364,128,2.782,131,4.197,132,2.906,146,2.763,159,2.884,169,2.223,213,2.906,214,3.292,221,2.376,237,4.846,435,3.244,450,3.077,461,3.588,497,2.979,564,2.578,636,2.282,702,2.928,755,2.478,776,3.63,796,3.025,800,2.884,809,3.952,900,2.491,925,4.325,951,2.821,953,2.657,955,3.225,1353,3.292,1357,3.63,1358,3.63,1359,3.63,1360,3.63,1365,3.292,1391,3.328,1427,3.225,1531,3.868,1532,6.042,1533,6.828,1534,7.751,1535,8.002,1536,3.868,1537,4.741,1538,4.741,1539,4.741,1540,4.741,1541,4.741,1542,4.741,1543,4.197,1544,4.197,1545,4.197,1546,4.427,1547,4.741,1548,4.197,1549,4.741,1550,4.102]],["component/315",[79,0.574]],["title/316",[39,30.364,115,27.852]],["name/316",[39,1.448,115,1.328]],["text/316",[14,2.389,20,2.57,40,1.617,47,3.345,115,3.481,138,2.831,176,2.831,435,2.587,502,5.071,694,3.688,806,6.179,967,4.277,1017,4.311,1055,5.071,1212,4.954,1353,4.846,1357,5.344,1358,5.344,1359,5.344,1360,5.344,1532,5.27,1534,7.86,1543,6.179,1551,6.179,1552,6.179,1553,6.179,1554,6.179,1555,5.27]],["component/316",[79,0.574]],["title/317",[435,20.697,461,29.348]],["name/317",[435,0.987,461,1.399]],["text/317",[28,2.561,34,3.313,36,2.691,39,3.621,64,2.145,67,2.905,103,4.624,115,4.296,138,2.701,149,4.021,168,3.599,461,5.629,499,3.709,504,4.081,570,3.756,636,2.225,744,2.793,964,3.935,1091,4.213,1306,5.099,1364,4.624,1464,4.401,1556,5.642,1557,6.66,1558,6.66,1559,6.66,1560,6.66,1561,6.66]],["component/317",[79,0.574]],["title/318",[84,33.287]],["name/318",[84,1.972]],["text/318",[14,2.447,20,1.772,35,1.593,36,1.211,39,1.63,40,1.87,47,2.272,48,3.562,53,1.946,56,2.161,62,2.019,64,1.501,84,4.437,105,1.202,108,1.48,115,4.229,119,1.438,136,1.669,139,1.784,146,2.804,165,1.701,219,1.412,435,2.558,458,3.18,461,3.168,480,2.205,508,1.425,517,4.26,565,2.127,573,1.069,591,1.723,599,1.045,637,1.963,705,2,710,1.659,721,1.701,736,1.575,740,4.26,744,1.257,802,2.996,845,1.963,860,1.34,866,1.823,869,2.152,895,3.044,900,1.575,907,2.654,909,1.823,927,1.611,935,2.178,965,1.611,1017,2.972,1022,2.152,1055,2.178,1056,1.62,1060,2.127,1198,2.104,1275,2.329,1287,2.06,1318,6.165,1351,1.929,1353,4.186,1357,4.616,1358,3.685,1359,3.685,1360,3.685,1361,3.342,1362,2.445,1364,2.081,1365,2.081,1372,2.654,1531,2.445,1544,7.144,1545,5.338,1551,7.144,1552,5.338,1553,2.654,1554,4.26,1562,2.654,1563,4.813,1564,4.813,1565,6.029,1566,2.998,1567,4.813,1568,4.813,1569,2.998,1570,2.998,1571,2.998,1572,2.654,1573,2.081,1574,2.998,1575,2.998,1576,2.998,1577,2.998,1578,2.998,1579,2.998,1580,2.998,1581,2.998,1582,2.998,1583,2.998,1584,1.896,1585,2.998,1586,2.54,1587,2.263,1588,2.799,1589,2.998,1590,4.813,1591,6.902]],["component/318",[79,0.574]],["title/319",[809,40.528]],["name/319",[83,2.18]],["text/319",[5,3.743,7,1.507,14,1.655,19,2.199,138,2.743,210,3.186,219,3.186,702,4.177,755,4.547,800,4.114,804,3.743,809,5.568,1041,4.39,1391,4.747,1546,6.315,1923,5.73,2192,5.988,2334,6.315,2459,6.315,3190,7.48,3191,7.48,3192,11.234,3193,7.48,3194,7.48,3195,7.48,3196,7.48,3197,7.48,3198,7.48,3199,7.48]],["component/319",[79,0.574]],["title/320",[19,17.696]],["name/320",[19,1.048]],["text/320",[5,2.568,6,1.946,7,1.034,10,1.903,11,1.917,13,1.528,14,2.121,19,1.173,27,2.82,40,1.832,43,1.977,45,2.361,49,2.829,104,3.084,105,1.861,137,2.686,165,2.633,200,2.399,221,3.369,222,3.674,223,1.861,248,4.719,397,2.349,465,3.156,492,2.119,497,3.781,520,3.293,527,4.485,601,3.111,636,2.642,655,2.96,722,3.785,746,2.65,755,2.425,829,3.553,901,2.723,910,3.931,951,2.761,959,3.413,965,3.613,1007,3.553,1203,3.815,1247,2.912,1322,5.353,1337,3.371,1338,4.108,1339,4.945,1340,4.108,1341,5.952,1342,4.108,1592,4.64,1593,4.64,1594,6.723,1595,4.64,1596,4.64,1597,4.64,1598,3.785,1599,4.64,1600,4.333,1601,3.785,1602,4.64,1603,4.64,1604,4.64,1605,4.64,1606,4.64,3239,3.039]],["component/320",[79,0.574]],["title/321",[945,48.115]],["name/321",[83,2.18]],["text/321",[7,0.487,14,2.663,20,0.805,31,2.572,34,2.448,35,1.162,36,0.883,40,0.507,46,3.185,47,0.824,49,2.257,52,2.14,56,0.982,67,1.617,70,1.124,92,1.301,104,2.214,108,1.079,114,2.091,115,1.09,119,1.049,127,0.998,137,1.265,138,0.887,144,1.716,165,1.241,167,1.265,169,1.025,176,0.887,200,1.13,207,1.274,213,1.34,221,2.85,222,2.959,233,3.005,245,1.079,435,0.81,482,1.419,492,2.908,497,4.368,527,3.794,566,3.025,569,1.292,573,2.027,587,1.935,601,3.412,623,1.34,636,1.613,710,4.081,718,1.674,739,1.283,744,0.917,751,1.674,753,1.935,755,1.938,805,1.518,808,1.674,809,2.146,851,1.588,859,3.282,860,2.846,891,1.569,893,1.33,897,1.518,901,2.175,925,2.004,945,5.555,946,1.265,947,2.29,948,2.473,951,4.116,953,4.53,965,2.594,1045,1.783,1093,1.935,1125,1.518,1151,1.395,1215,1.674,1306,1.674,1322,1.35,1337,1.588,1361,1.518,1532,1.651,1598,6.015,1607,2.186,1608,2.186,1609,2.186,1610,1.935,1611,2.186,1612,3.938,1613,2.186,1614,1.935,1615,1.935,1616,2.186,1617,2.186,1618,1.985,1619,4.828,1620,3.282,1621,1.935,1622,3.282,1623,3.282,1624,3.282,1625,3.282,1626,3.708,1627,5.034,1628,5.687,1629,3.282,1630,3.282,1631,3.708,1632,3.708,1633,2.186,1634,3.708,1635,2.186,1636,2.186,1637,1.935,1638,2.186,1639,1.935,1640,2.186]],["component/321",[79,0.574]],["title/322",[453,40.259]],["name/322",[453,2.385]],["text/322",[7,0.611,13,1.475,14,2.736,30,2.25,31,2.684,34,1.055,40,0.636,46,3.144,49,2.356,52,1.908,84,1.304,104,1.258,111,1.1,114,4.369,133,1.866,200,1.418,221,2.245,222,1.275,223,1.1,233,4.078,492,1.253,497,4.378,526,2.435,527,5.687,566,2.238,569,1.621,573,1.597,601,3.782,636,2.413,710,3.626,795,2.665,805,1.905,860,3.464,925,3.068,945,6.896,947,2.766,948,3.786,951,2.665,953,4.777,1306,2.1,1395,2.238,1598,6.32,1612,3.654,1620,3.965,1621,3.965,1622,5.8,1623,2.428,1624,3.965,1625,3.965,1627,3.965,1629,2.428,1630,2.428,1637,2.428,1641,5.676,1642,2.743,1643,4.479,1644,2.743,1645,2.428,1646,2.743,1647,6.117,1648,2.743,1649,1.947,1650,2.743,1651,4.479]],["component/322",[79,0.574]],["title/323-1",[138,22.651,697,27.852]],["name/323-1",[]],["text/323-1",[]],["component/323-1",[]],["title/323-2",[1652,49.446,1653,42.764]],["name/323-2",[]],["text/323-2",[]],["component/323-2",[]],["title/323-3",[125,29.843,1654,49.446]],["name/323-3",[]],["text/323-3",[]],["component/323-3",[]],["title/323-4",[491,42.764,1655,49.446]],["name/323-4",[]],["text/323-4",[]],["component/323-4",[]],["title/323",[138,18.839,152,28.915,1653,35.567]],["name/323",[138,0.795,152,1.22,1653,1.501]],["text/323",[7,2.076,40,1.264,41,3.156,67,2.379,88,1.331,111,3.023,125,4.027,138,3.056,145,2.679,152,3.394,154,2.666,166,2.982,222,2.534,223,2.187,397,3.816,491,5.77,590,3.036,697,2.719,702,3.367,731,2.236,800,3.316,851,3.961,880,4.175,916,4.175,955,5.126,965,2.93,1212,3.87,1230,4.827,1652,6.672,1653,7.133,1654,4.827,1655,7.646,1656,5.453,1657,9.778,1658,5.453,1659,5.453,1660,6.385,1661,5.453,1662,7.536,1663,4.175,1664,7.536,1665,5.453,1666,5.453,1667,5.453,1668,5.453]],["component/323",[79,0.574]],["title/324-1",[28,21.478,49,18.227]],["name/324-1",[]],["text/324-1",[]],["component/324-1",[]],["title/324-2",[697,34.919]],["name/324-2",[]],["text/324-2",[]],["component/324-2",[]],["title/324-3",[90,12.711,599,12.119,1203,19.723,1464,22.968,2814,27.002]],["name/324-3",[]],["text/324-3",[]],["component/324-3",[]],["title/324",[49,15.159,471,24.962,564,25.254]],["name/324",[49,0.64,471,1.054,564,1.066]],["text/324",[5,3.1,6,2.349,7,1.711,10,2.297,11,2.314,13,1.197,14,1.37,27,1.525,31,1.351,35,1.931,40,0.842,49,3.075,50,2.673,84,1.728,90,1.329,99,2.163,104,1.667,127,1.66,136,2.024,145,1.786,168,1.37,200,1.879,221,2.807,223,1.458,240,1.211,244,4.069,266,4.065,295,3.19,298,4.569,471,3.671,473,3.701,484,1.953,494,2.281,509,3.218,510,2.163,511,3.218,512,2.147,521,3.02,528,2.965,558,2.38,564,3.045,573,1.296,574,3.218,655,2.319,697,2.793,710,2.012,730,3.218,759,3.263,870,2.147,925,3.027,930,2.783,936,2.339,951,2.163,965,1.953,1125,2.524,1188,2.524,1203,2.063,1231,2.524,1427,2.472,1555,2.744,1610,3.218,1669,3.635,1670,3.635,1671,3.3,1672,2.914,1673,3.635,1674,4.069,1675,3.635,1676,3.218,1677,2.965,1678,3.635,1679,3.635,1680,3.635,1681,3.635,1682,5.601,1683,3.635,1684,3.635,1685,3.635,1686,3.635,1687,3.635,1688,3.635,1689,3.635,1690,3.635,1691,3.635,1692,3.635,1693,3.635,1694,3.635,1695,3.635,1696,3.218,1697,3.635,1698,3.145,1699,3.635,1700,3.635,1701,3.635,1702,3.635,1703,3.635,1704,3.635,1705,3.635,1706,3.3,1707,3.635,1708,3.635,1709,3.635,1710,3.635,1711,3.635,1712,3.635,1713,3.635,1714,3.635,1715,3.736,1716,3.889,1717,3.635,2905,3.145,2955,3.799,3239,3.667]],["component/324",[79,0.574]],["title/325-1",[90,20.428,258,49.446]],["name/325-1",[]],["text/325-1",[]],["component/325-1",[]],["title/325-2",[90,20.428,746,31.902]],["name/325-2",[]],["text/325-2",[]],["component/325-2",[]],["title/325-3",[90,20.428,785,49.446]],["name/325-3",[]],["text/325-3",[]],["component/325-3",[]],["title/325-4",[90,20.428,2814,43.394]],["name/325-4",[]],["text/325-4",[]],["component/325-4",[]],["title/325",[90,16.99,176,18.839,199,18.369]],["name/325",[90,0.717,176,0.795,199,0.775]],["text/325",[4,1.101,7,1.402,14,1.942,20,0.944,27,1.076,28,1.63,30,0.881,39,1.395,40,0.982,45,1.306,46,2.414,47,0.967,49,2.273,54,1.084,64,0.639,66,1.255,87,1.387,90,2.301,94,1.326,109,1.495,112,2.22,114,1.447,123,2.564,150,1.447,176,2.825,199,2.967,200,2.192,201,1.849,210,1.208,219,2.552,221,1.286,234,0.993,240,1.412,244,3.08,245,2.675,256,1.651,266,3.744,295,3.503,435,1.571,461,1.348,465,1.745,473,1.695,484,4.461,486,2.146,488,1.701,508,2.575,510,1.527,516,1.597,526,2.305,531,1.864,551,1.695,552,2.682,553,2.057,555,2.944,558,4.562,565,1.821,570,1.447,573,1.931,591,3.115,596,1.495,597,2.24,599,1.478,601,1.187,616,1.937,636,2.774,641,4.796,697,2.114,699,1.781,731,1.738,758,1.849,767,1.142,776,3.246,785,3.753,790,2.22,793,3.271,795,1.527,816,1.56,831,1.745,834,2.173,884,1.781,894,1.781,900,1.348,909,1.56,914,3.246,925,1.387,930,1.964,1023,3.294,1075,1.887,1089,2.728,1110,3.294,1159,3.753,1173,3.753,1194,3.753,1196,3.753,1202,1.887,1203,2.406,1209,2.093,1217,1.665,1218,3.845,1365,1.781,1369,3.246,1464,2.802,1465,1.651,1468,2.271,1584,1.623,1587,1.937,1649,1.821,1674,3.936,1718,4.145,1719,6.292,1720,4.239,1721,1.781,1722,2.093,1723,2.566,1724,2.566,1725,2.271,1726,2.566,1727,2.566,1728,2.566,1729,2.093,1730,4.239,1731,3.592,1732,2.566,1733,2.566,1734,2.566,1735,2.093,1736,2.566,1737,2.566,2905,5.444]],["component/325",[79,0.574]],["title/326-1",[111,15.95,236,26.78,636,13.286,748,24.749]],["name/326-1",[]],["text/326-1",[]],["component/326-1",[]],["title/326",[234,17.987,236,31.287,636,15.522]],["name/326",[234,0.759,236,1.321,636,0.655]],["text/326",[4,3.533,13,2.33,14,2.75,20,1.835,36,2.014,40,1.155,46,2.453,47,1.878,49,1.627,67,2.175,71,3.726,88,2.008,111,2,118,2.885,210,2.348,234,1.93,236,3.358,479,2.905,486,2.524,488,2,553,6.598,569,2.945,571,3.579,610,2.37,636,2.365,721,2.829,748,3.103,759,2.905,805,3.461,832,3.103,835,3.358,860,4.005,927,2.679,946,2.885,1318,4.067,1804,3.817,1898,8.229,1899,8.229,1900,4.985,1901,4.985,1902,4.985,1903,4.985,1904,4.985,1905,4.985,1906,4.985,1907,4.985,1908,4.985,1909,4.985]],["component/326",[79,0.574]],["title/327",[49,12.975,234,15.396,471,21.366,498,25.364]],["name/327",[49,0.506,234,0.601,471,0.834,498,0.99]],["text/327",[4,2.514,13,1.928,20,2.156,31,3.569,34,2.252,49,3.132,79,1.169,81,3.484,89,3.735,94,4.633,104,2.686,114,3.302,119,2.809,138,3.209,144,2.709,161,3.645,219,2.758,234,3.064,295,2.733,450,3.8,471,4.252,492,2.674,498,5.717,596,3.412,601,2.709,611,3.944,636,2.644,767,2.607,967,3.588,1276,5.184,1555,5.974,1645,5.184,1718,3.484,1804,4.483,1910,5.184,1911,5.855,1912,5.855,1913,5.855,1914,5.855,1915,3.704,1916,5.467]],["component/327",[79,0.574]],["title/328",[52,15.616,234,17.987,915,29.387]],["name/328",[52,0.659,234,0.759,915,1.24]],["text/328",[7,1.002,14,2.659,30,1.544,31,3.175,34,2.527,36,1.817,40,1.042,52,2.871,71,2.036,88,1.604,138,1.824,217,2.52,219,2.118,234,1.741,449,2.416,477,2.676,484,2.416,486,2.277,492,2.054,497,3.387,500,3.911,534,2.585,597,4.8,601,2.081,631,2.416,636,1.503,755,2.35,860,3.819,915,2.845,953,2.52,967,2.756,1097,2.893,1098,2.045,1099,2.893,1111,4.664,1151,2.869,1217,2.919,1349,5.36,1351,2.893,1427,4.47,1766,3.443,1917,6.967,1918,4.497,1919,3.606,1920,3.267,1921,5.18,1922,6.571,1923,3.81,1924,4.497,1925,5.817,1926,3.981,1927,4.497,1928,4.497,1929,4.497,1930,4.497,1931,4.497,1932,3.981,1933,4.497,1934,3.981]],["component/328",[79,0.574]],["title/329-1",[31,26.034]],["name/329-1",[]],["text/329-1",[]],["component/329-1",[]],["title/329-2",[234,17.987,266,27.639,471,24.962]],["name/329-2",[]],["text/329-2",[]],["component/329-2",[]],["title/329-3",[13,15.293,34,17.863,570,26.194]],["name/329-3",[]],["text/329-3",[]],["component/329-3",[]],["title/329",[49,15.159,234,17.987,471,24.962]],["name/329",[49,0.64,234,0.759,471,1.054]],["text/329",[7,1.263,14,2.669,20,0.801,27,0.912,28,2.18,30,0.747,31,2.107,34,2.18,38,1.011,40,1.471,43,1.573,45,1.879,47,1.391,49,2.939,52,2.319,54,0.919,58,2.815,62,1.465,64,0.542,66,1.064,67,0.949,71,0.985,84,1.034,88,1.174,90,0.796,95,1.451,109,1.268,119,1.044,123,1.747,135,1.451,138,2.299,144,1.708,145,1.069,146,1.268,152,1.354,156,1.562,207,1.268,218,1.333,221,1.85,223,0.873,232,3.012,233,1.354,234,2.458,244,2.682,245,1.074,266,2.197,404,1.376,435,1.782,449,1.169,452,1.665,471,4.487,488,0.873,497,0.949,506,1.58,516,2.298,526,2.007,558,2.418,561,1.51,569,1.285,570,2.712,573,2.263,579,1.621,590,1.211,591,2.123,597,2.541,599,0.759,631,1.169,632,1.774,636,2.586,715,1.412,721,1.234,731,0.892,739,1.276,743,1.365,744,0.912,757,1.495,767,1.644,804,1.204,851,1.58,852,2.197,860,2.151,870,2.181,872,3.012,895,1.376,915,1.376,930,1.665,967,2.263,970,1.774,973,1.926,979,1.716,988,1.665,1008,1.054,1013,1.376,1055,1.58,1056,1.176,1089,3.095,1091,1.376,1110,1.69,1125,1.51,1189,1.774,1190,1.58,1198,1.527,1203,1.234,1217,2.396,1220,1.744,1238,1.58,1287,1.495,1473,2.868,1556,3.128,1649,2.62,1674,1.58,1677,1.774,1721,1.51,1766,1.665,1803,1.926,1811,1.259,1845,1.744,1866,1.412,1932,1.926,1934,1.926,1935,2.175,1936,2.175,1937,3.692,1938,2.175,1939,2.175,1940,1.744,1941,2.175,1942,3.692,1943,2.175,1944,2.175,1945,2.175,1946,2.175,1947,2.175,1948,2.175,1949,1.926,1950,2.175,1951,2.175,1952,1.69,1953,2.175,1954,1.926,1955,2.175,1956,2.175,1957,2.175,1958,2.175,1959,1.926,1960,2.175,1961,2.175,1962,2.175,1963,2.175,1964,2.175,1965,2.175,1966,2.175,1967,2.175,1968,6.899,1969,2.175,1970,2.175,1971,2.175,1972,2.175,1973,2.175,1974,2.175,1975,2.175,1976,2.175,1977,2.175,1978,2.175,1979,2.175]],["component/329",[79,0.574]],["title/330",[54,14.689,60,16.081,87,18.784,88,8.481,435,12.879]],["name/330",[54,0.543,60,0.594,87,0.694,88,0.313,435,0.476]],["text/330",[14,1.829,27,1.768,28,1.621,30,1.447,31,1.567,36,1.703,40,1.452,43,1.795,46,2.869,49,2.44,52,1.417,54,2.648,64,1.049,67,2.733,71,1.908,87,2.278,88,1.028,99,2.508,111,1.691,119,2.022,123,2.964,127,2.861,154,2.061,176,1.709,216,4.608,234,2.426,295,4.704,435,3.067,450,2.735,453,2.423,461,2.214,485,2.811,488,3.549,504,2.583,526,3.406,534,2.423,548,2.362,565,2.991,575,3.438,596,2.456,597,5.211,598,5.875,599,2.184,636,2.093,717,2.76,744,1.768,853,3.731,898,2.347,900,2.214,902,2.623,933,2.544,1004,3.227,1008,2.041,1039,4.474,1193,3.438,1511,3.062,1718,2.508,1725,3.731,1792,3.501,1980,4.214,1981,3.379,1982,4.214,1983,6.264,1984,4.214,1985,3.182,1986,3.731,1987,6.264]],["component/330",[79,0.574]],["title/331-1",[64,11.564,589,29.387,731,19.048]],["name/331-1",[]],["text/331-1",[]],["component/331-1",[]],["title/331-2",[731,19.048,840,30.987,996,37.893]],["name/331-2",[]],["text/331-2",[]],["component/331-2",[]],["title/331",[60,25.843,64,13.904]],["name/331",[60,1.232,64,0.663]],["text/331",[7,1.694,32,3.683,40,1.28,45,2.81,54,2.334,56,2.479,58,2.448,64,2.332,82,3.41,92,3.285,99,4.523,111,2.215,225,4.29,295,2.578,435,3.64,448,4.228,484,2.967,488,3.757,500,3.829,508,3.614,539,3.794,561,3.834,610,2.625,631,4.085,637,3.616,694,2.917,717,3.616,731,2.264,736,2.901,767,3.871,862,4.011,893,3.358,894,3.834,914,4.228,996,4.504,1041,3.584,1214,5.664,1232,4.504,1721,3.834,1988,4.888,1989,5.522,1990,5.522,1991,5.522,1992,3.553,1993,4.228,1994,5.522,1995,4.587]],["component/331",[79,0.574]],["title/332-1",[7,8.862,237,28.219,573,14.173,1992,25.582]],["name/332-1",[]],["text/332-1",[]],["component/332-1",[]],["title/332-2",[108,22.937,435,17.214,636,15.522]],["name/332-2",[]],["text/332-2",[]],["component/332-2",[]],["title/332",[64,13.904,1992,35.935]],["name/332",[64,0.663,1992,1.713]],["text/332",[7,1.63,30,1.794,31,1.942,40,1.211,46,2.535,49,2.755,52,1.756,64,2.101,90,1.911,94,3.782,119,2.506,127,2.386,147,3.332,218,3.201,219,3.446,222,2.428,233,3.252,245,3.612,250,4.261,295,3.415,435,2.711,477,3.108,484,2.807,486,2.645,488,2.934,498,3.332,534,3.003,538,4.261,564,2.84,573,1.862,575,4.261,579,5.45,601,2.417,631,2.807,636,1.746,699,3.627,744,2.191,750,4.625,793,3.154,852,3.108,893,3.177,898,2.909,980,3.452,1039,2.823,1094,3.305,1193,4.261,1199,3.75,1202,3.842,1322,3.226,1474,4.122,1531,4.261,1639,4.625,1649,3.708,1866,3.39,1992,3.361,1996,4.52,1997,5.224,1998,4.261,1999,4.189,2000,4.878,2001,5.224]],["component/332",[79,0.574]],["title/333-1",[7,8.862,52,13.366,64,9.898,295,18.561]],["name/333-1",[]],["text/333-1",[]],["component/333-1",[]],["title/333-2",[7,6.88,36,12.472,40,7.153,46,10.697,111,12.382,127,14.097]],["name/333-2",[]],["text/333-2",[]],["component/333-2",[]],["title/333-3",[88,6.775,126,17.42,144,12.846,240,15.069,946,16.068,1051,20.17]],["name/333-3",[]],["text/333-3",[]],["component/333-3",[]],["title/333-4",[7,6.188,39,15.093,66,13.576,105,11.137,548,15.557,731,11.384,793,16.76]],["name/333-4",[]],["text/333-4",[]],["component/333-4",[]],["title/333",[88,13.63,240,18.608]],["name/333",[88,0.65,240,0.887]],["text/333",[7,1.432,19,1.102,32,4.287,36,3.083,39,4.148,46,1.512,52,1.466,56,1.958,64,2.337,67,1.903,105,1.75,107,3.34,108,2.154,111,3.06,119,2.093,123,2.064,126,2.737,128,2.559,130,2.577,134,2.883,151,4.287,158,2.653,164,3.169,201,1.903,217,2.444,240,2.804,245,2.154,246,2.331,278,3.029,295,3.929,435,1.616,440,2.715,441,2.385,443,3.131,483,3.169,508,2.073,548,5.439,569,3.796,577,3.861,579,3.25,591,2.508,599,1.521,631,2.344,715,2.831,717,2.856,761,3.169,762,2.831,767,1.942,791,4.92,793,2.633,852,2.595,858,3.208,862,3.169,873,3.096,874,3.34,900,3.376,927,2.344,957,2.759,971,3.34,993,3.558,1150,3.861,1199,3.131,1231,3.029,1233,3.131,1278,3.096,1721,3.029,1866,4.171,2002,4.92,2003,4.362,2004,3.558,2005,4.362,2006,4.204,2007,3.861,2008,4.362,2009,4.073,2010,4.362]],["component/333",[79,0.574]],["title/334-1",[7,6.88,35,16.4,90,11.29,200,15.958,201,13.465,202,27.327]],["name/334-1",[]],["text/334-1",[]],["component/334-1",[]],["title/334-2",[7,10.354,484,24.962,1089,29.887]],["name/334-2",[]],["text/334-2",[]],["component/334-2",[]],["title/334",[90,20.428,176,22.651]],["name/334",[90,0.974,176,1.08]],["text/334",[90,2.751,197,5.464,200,3.889,458,4.971,459,5.759,479,4.383,481,6.461,636,2.513,751,5.759,755,3.931,776,5.759,1089,4.839,1199,5.4,1247,4.72,1277,5.532,1550,6.508,1940,6.031,2002,7.125,2013,7.522,2014,7.522,2015,7.522]],["component/334",[79,0.574]],["title/335-1",[7,10.354,144,21.494,421,25.403]],["name/335-1",[]],["text/335-1",[]],["component/335-1",[]],["title/335-2",[7,10.354,486,23.519,1075,34.167]],["name/335-2",[]],["text/335-2",[]],["component/335-2",[]],["title/335-3",[7,8.862,199,15.723,242,23.328,1013,25.153]],["name/335-3",[]],["text/335-3",[]],["component/335-3",[]],["title/335-4",[7,7.746,13,11.442,64,8.652,623,21.298,2016,34.754]],["name/335-4",[]],["text/335-4",[]],["component/335-4",[]],["title/335-5",[7,4.753,13,7.021,14,5.217,60,9.868,516,13.275,618,10.743,1153,17.397,2017,16.826,2018,20.555,2019,21.327]],["name/335-5",[]],["text/335-5",[]],["component/335-5",[]],["title/335-6",[7,7.746,144,16.081,150,19.598,177,20.981,731,14.251]],["name/335-6",[]],["text/335-6",[]],["component/335-6",[]],["title/335-7",[7,8.862,118,23.013,456,32.434,714,31.37]],["name/335-7",[]],["text/335-7",[]],["component/335-7",[]],["title/335",[2020,61.99]],["name/335",[2020,3.673]],["text/335",[7,1.094,10,1.259,11,1.269,13,1.011,32,2.049,36,2.476,38,2.281,39,1.67,40,1.137,47,1.849,49,1.002,52,2.353,54,1.298,64,2.132,72,1.854,84,1.46,87,1.66,88,0.75,95,2.049,103,2.133,104,2.251,107,2.352,111,2.458,121,1.623,126,1.927,127,1.403,136,1.71,139,1.828,143,2.716,144,2.271,147,3.909,151,2.049,164,2.231,181,2.506,188,2.552,210,1.447,212,1.632,221,1.539,240,2.549,242,2.879,252,1.943,254,1.943,266,4.164,410,1.854,421,1.68,435,2.271,451,1.976,456,2.506,457,2.506,459,2.352,460,2.506,461,1.614,462,2.288,478,2.205,479,1.79,481,3.407,486,3.103,488,1.232,516,1.912,519,3.565,534,1.766,548,1.721,552,1.943,555,2.133,572,2.049,589,1.943,590,1.71,602,2.231,622,2.506,636,1.026,692,2.719,697,1.532,699,2.133,700,1.721,710,1.7,717,2.011,721,1.743,724,3.372,729,4.507,731,2.513,739,1.802,743,3.079,744,2.058,746,1.754,760,2.18,762,3.977,769,2.96,791,2.352,795,1.828,796,1.959,819,2.506,852,1.828,862,2.231,863,3.079,865,2.231,867,4.246,870,1.815,896,2.719,902,1.912,904,2.231,909,1.868,911,2.658,927,1.651,935,3.565,957,1.943,963,1.868,1008,1.488,1010,3.444,1047,2.205,1056,1.66,1094,3.104,1153,2.506,1172,2.352,1178,2.658,1287,2.111,1478,2.602,1806,3.872,2002,6.246,2021,2.719,2022,3.072,2023,3.072,2024,3.072,2025,3.072,2026,3.072,2027,3.072,2028,3.072,2029,3.072,2030,3.072,2031,3.072,2032,2.719,2033,3.072,2034,3.072,2035,2.719,2036,2.352,3241,3.397]],["component/335",[79,0.574]],["title/336-1",[94,28.875,245,27.578]],["name/336-1",[]],["text/336-1",[]],["component/336-1",[]],["title/336-2",[94,28.875,877,31.902]],["name/336-2",[]],["text/336-2",[]],["component/336-2",[]],["title/336-3",[94,24.015,636,15.522,877,26.533]],["name/336-3",[]],["text/336-3",[]],["component/336-3",[]],["title/336-4",[94,24.015,877,26.533,1735,37.893]],["name/336-4",[]],["text/336-4",[]],["component/336-4",[]],["title/336-5",[28,21.478,1088,38.379]],["name/336-5",[]],["text/336-5",[]],["component/336-5",[]],["title/336-6",[28,17.863,1088,31.919,1674,33.748]],["name/336-6",[]],["text/336-6",[]],["component/336-6",[]],["title/336-7",[14,8.502,28,13.365,54,14.689,573,12.389,1088,23.881]],["name/336-7",[]],["text/336-7",[]],["component/336-7",[]],["title/336-8",[145,34.406]],["name/336-8",[]],["text/336-8",[]],["component/336-8",[]],["title/336-9",[234,27.114]],["name/336-9",[]],["text/336-9",[]],["component/336-9",[]],["title/336-10",[119,19.077,410,24.003,564,21.616,636,13.286]],["name/336-10",[]],["text/336-10",[]],["component/336-10",[]],["title/336",[49,15.159,94,24.015,498,29.633]],["name/336",[83,2.18]],["text/336",[3,0.938,7,0.364,13,0.197,14,2.254,19,0.151,20,2.096,27,2.596,28,1.243,30,0.391,31,0.423,35,0.317,36,1.882,38,0.529,40,0.483,41,0.659,42,0.929,43,1.984,45,0.58,46,1.695,47,0.429,49,2.384,53,0.388,54,0.881,56,0.511,58,0.265,60,0.276,61,0.529,63,0.791,64,0.886,66,1.408,67,1.256,71,0.516,73,0.577,79,0.119,81,0.355,82,0.369,84,0.776,87,0.323,90,0.417,92,0.355,93,0.388,94,3.828,95,1.089,102,0.399,104,0.522,105,0.457,108,1.422,109,0.348,111,1.55,119,2.452,120,0.391,121,0.316,123,0.772,126,0.375,127,1.894,128,0.958,130,0.353,132,0.366,136,0.333,137,0.346,138,1.311,141,1.97,142,0.479,143,0.63,144,1.156,145,0.802,146,1.214,147,1.041,149,0.688,150,0.642,152,0.372,154,0.557,157,0.827,158,1.751,161,2.9,164,0.434,165,0.339,166,0.623,167,1.206,169,1.171,171,1.099,180,0.715,199,0.236,205,3.151,207,0.348,209,0.419,213,1.277,214,0.791,216,0.439,217,0.335,219,0.537,222,0.278,223,0.24,233,0.372,234,1.605,240,1.077,245,1.029,246,0.872,251,1.089,252,0.378,254,1.58,256,0.733,266,0.355,381,0.406,397,0.302,398,0.348,400,1.167,410,2.813,424,0.415,435,1.067,447,0.783,449,0.877,451,0.384,458,0.753,471,1.913,472,0.529,475,1.793,477,1.24,479,1.455,482,0.739,483,0.434,484,0.321,485,0.399,488,1.869,489,0.529,490,0.457,492,0.52,495,0.529,496,0.378,497,0.909,498,2.464,502,0.434,505,0.496,506,0.827,508,0.284,513,0.529,519,0.827,523,0.958,527,0.76,528,0.487,531,0.434,534,1.436,538,0.487,548,0.335,550,0.899,551,0.395,552,2.045,554,0.487,558,0.391,559,0.517,564,1.757,567,0.487,569,0.673,571,0.818,573,0.582,588,0.872,590,1.603,591,0.343,592,0.283,594,2.156,596,0.348,597,3.1,599,0.208,601,0.527,602,0.827,604,0.487,606,1.514,611,2.602,615,0.733,617,0.529,618,0.574,620,1.7,623,1,624,0.929,636,2.621,637,0.746,675,0.818,694,1.88,696,0.289,697,0.298,700,0.335,705,0.76,707,1.146,710,0.903,716,0.457,721,0.339,724,1.432,731,1.91,734,0.395,735,0.434,736,0.314,738,0.929,739,0.668,743,0.375,744,1.62,745,0.746,755,0.595,759,0.664,767,0.727,768,0.471,795,0.971,796,0.727,802,0.372,804,0.63,805,0.415,808,0.457,809,0.346,819,0.487,831,1.11,835,0.402,836,0.799,837,1.089,840,0.399,842,0.872,844,0.872,845,2.116,849,0.402,852,1.713,854,1.329,860,0.509,862,0.827,863,0.715,865,0.434,870,0.673,871,0.434,877,0.651,878,0.929,880,1.25,884,0.415,885,1.636,886,1.008,891,0.429,895,0.378,897,0.415,898,0.333,900,2.03,901,0.958,902,1.792,912,0.929,913,0.471,914,0.457,922,0.529,927,1.342,932,0.457,934,1.008,936,0.384,942,0.496,943,0.496,946,0.346,956,1.595,957,0.378,959,0.439,964,0.353,965,0.321,974,0.849,976,0.471,980,1.651,981,1.25,988,0.457,989,0.391,990,1.844,992,0.799,993,0.487,995,0.479,998,0.529,1002,0.487,1007,0.457,1010,0.419,1013,0.378,1021,0.445,1022,1.172,1023,0.464,1027,0.457,1029,1.332,1032,0.451,1041,0.388,1046,1.445,1052,0.358,1056,0.323,1060,1.479,1068,1.186,1069,0.439,1070,0.529,1071,1.403,1088,0.783,1089,2.668,1091,0.721,1092,0.529,1094,0.378,1096,0.487,1110,1.619,1126,0.479,1137,0.659,1142,0.464,1182,0.487,1184,0.529,1189,0.487,1190,0.434,1191,3.905,1198,0.419,1209,0.487,1215,0.457,1216,0.529,1217,1.059,1218,0.424,1220,2.003,1222,0.434,1224,0.439,1225,0.529,1233,0.429,1246,0.457,1249,1.844,1272,1.383,1278,1.158,1279,0.965,1282,0.457,1285,3.151,1322,0.369,1350,0.487,1351,0.384,1354,1.912,1355,1.25,1361,0.415,1378,0.529,1379,0.529,1391,0.419,1465,0.733,1470,0.529,1473,0.464,1474,1.971,1475,0.479,1511,2.586,1601,0.487,1663,0.457,1674,2.092,1676,1.008,1715,0.76,1718,0.678,1721,0.415,1722,1.7,1735,0.487,1747,0.506,1752,0.487,1768,0.496,1805,0.529,1811,1.871,1855,0.517,1858,0.965,1859,0.965,1940,0.479,1949,0.529,1952,0.885,1959,1.008,1981,0.479,1985,0.451,1992,0.384,1993,0.457,1998,0.487,1999,1.309,2002,0.457,2004,1.7,2007,0.529,2037,0.597,2038,0.529,2039,0.597,2040,1.139,2041,0.506,2042,0.471,2043,0.558,2044,1.139,2045,0.597,2046,1.139,2047,1.632,2048,2.498,2049,1.139,2050,1.139,2051,0.597,2052,3.232,2053,1.008,2054,0.597,2055,0.597,2056,1.139,2057,1.139,2058,0.597,2059,0.597,2060,0.597,2061,0.597,2062,0.597,2063,0.597,2064,0.597,2065,0.597,2066,0.597,2067,0.597,2068,1.139,2069,0.597,2070,0.597,2071,0.597,2072,0.597,2073,1.524,2074,0.597,2075,0.529,2076,1.139,2077,0.597,2078,1.063,2079,0.597,2080,1.008,2081,0.597,2082,0.517,2083,0.597,2084,0.597,2085,1.008,2086,1.139,2087,0.597,2088,0.597,2089,1.008,2090,1.139,2091,0.597,2092,0.529,2093,0.597,2094,0.529,2095,0.597,2096,0.597,2097,0.529,2098,0.597,2099,0.597,2100,0.597,2101,0.529,2102,0.529,2103,0.597,2104,0.597,2105,1.139,2106,1.632,2107,0.558,2108,0.597,2109,0.597,2110,0.529,2111,1.632,2112,0.445,2113,0.597,2114,0.597,2115,0.576,2116,0.597,2117,0.529,2118,0.597,2119,0.597,2120,1.844,2121,0.597,2122,0.597,2123,0.597,2124,0.597,2125,0.597,2126,0.597,2127,0.597,2128,0.597,2129,0.597,2130,1.139,2131,0.597,2132,0.597,2133,0.597,2134,0.597,2135,0.597,2136,0.597,2137,0.597,2138,0.597,2139,0.597,2140,0.597,2141,0.597,2142,0.597,2143,0.597,2144,0.597,2145,0.597,2146,0.597,2147,0.597,2148,0.597,2149,0.597,2150,0.597,2151,0.597,2152,0.597,2153,0.597,2154,0.929,2155,0.529,2156,0.597,2157,0.597,2158,1.139,2159,0.597,2160,0.597,2161,0.597,2162,0.529,2163,0.597,2164,1.803,2165,0.506,2166,1.139,2167,0.529,2168,0.529,2169,0.487,2170,0.576,2171,0.529,2172,0.529,2173,0.597,2174,0.597,2175,0.597,2176,0.597,2177,0.597,2178,0.929,2179,0.597,2180,0.529,2181,0.597,2182,0.597,2183,0.597,2184,0.597,2185,0.597,2186,0.542,2187,0.529,2188,0.597,2189,0.597,2190,0.597,2191,0.597,2192,0.529,2193,0.597,2194,0.597,2195,0.464,2196,0.597,2197,0.597,2198,0.597,2199,0.597,2200,0.597,2201,0.597,2202,0.597,2203,0.597,2204,0.529,2205,1.632,2206,0.597,2207,0.597,2208,0.597,2209,0.597,2210,0.597,2211,0.597,2212,0.597,2213,0.597,2214,0.597,2215,0.542,2216,0.457,2217,0.597,2218,0.597,2219,0.517,2220,0.558,2221,0.487,2222,0.597,2223,0.597,2224,0.597,2225,0.487,2226,0.597,2227,0.529,2228,0.597]],["component/336",[79,0.574]],["title/337",[618,28.134,2229,45.561]],["name/337",[618,1.341,2229,2.172]],["text/337",[14,2.369,19,0.901,20,1.831,27,1.495,28,1.371,30,1.224,31,1.325,34,1.013,36,2.009,38,0.686,40,0.61,43,0.629,45,1.34,46,0.913,47,0.992,49,1.163,50,1.086,53,0.958,58,0.654,64,0.656,66,0.722,67,1.149,73,0.747,78,0.919,87,1.423,88,0.36,94,4.337,104,0.677,105,1.056,108,1.3,109,0.86,111,0.592,119,0.708,121,0.78,127,1.203,128,1.545,138,1.757,141,1.457,144,1.218,146,1.534,148,1.204,154,1.743,158,0.898,165,1.494,169,0.692,171,4.948,212,0.784,213,0.904,214,1.025,215,1.13,219,1.24,220,1.988,234,0.571,236,0.994,240,0.877,245,1.3,251,0.985,295,0.689,400,0.827,404,0.934,436,3.316,440,2.219,466,1.114,479,2.077,482,2.314,488,0.592,498,2.274,501,3.283,504,0.904,523,0.866,550,1.164,561,3.007,564,0.802,590,2.412,594,1.757,597,3.378,599,0.515,601,1.218,602,1.072,610,1.252,618,1.796,620,1.204,633,1.13,636,0.88,637,0.966,694,1.391,702,0.911,715,0.958,721,0.838,738,4.501,744,1.495,745,1.724,759,2.524,767,0.657,795,0.878,799,2.59,809,1.524,817,2.59,831,1.791,836,1.848,837,0.985,840,0.985,856,1.307,865,1.072,877,2.036,881,1.13,884,1.025,895,0.934,900,1.873,901,2.541,902,0.919,908,1.114,926,1.307,933,0.891,936,2.294,941,2.692,945,1.014,946,0.854,948,0.985,955,1.004,957,0.934,964,2.938,965,1.415,976,1.164,978,1.204,980,1.74,1006,4.353,1008,0.715,1020,2.331,1029,2.148,1031,1.307,1033,2.331,1035,2.016,1041,0.958,1052,0.884,1068,2.59,1071,0.994,1095,3.669,1172,1.13,1190,1.072,1222,3.147,1226,2.331,1227,2.278,1229,1.913,1231,1.025,1247,0.926,1250,2.331,1270,1.114,1277,1.086,1351,0.95,1353,1.828,1354,3.807,1355,3.316,1364,1.025,1369,1.13,1391,1.036,1511,1.072,1601,1.204,1677,1.204,1715,0.985,1716,1.025,1722,1.204,1811,2.878,1853,5.299,1866,1.709,1954,1.307,1981,2.111,1993,1.13,1998,1.204,1999,2.111,2053,2.331,2075,1.307,2080,1.307,2082,1.277,2092,1.307,2094,2.331,2097,1.307,2101,2.331,2102,3.156,2110,1.307,2112,1.1,2154,1.204,2172,1.307,2227,1.307,2229,1.204,2230,1.476,2231,2.633,2232,1.34,2233,1.476,2234,1.307,2235,1.476,2236,1.476,2237,1.476,2238,1.476,2239,1.476,2240,1.476,2241,1.476,2242,1.476,2243,1.476,2244,1.476,2245,4.973,2246,1.476,2247,7.346,2248,1.476,2249,3.565,2250,2.633,2251,1.476,2252,2.633,2253,1.476,2254,1.476,2255,2.633,2256,3.565,2257,3.565,2258,6.393,2259,5.986,2260,4.331,2261,4.973,2262,2.633,2263,1.476,2264,2.458,2265,1.476,2266,3.565,2267,1.378,2268,1.476,2269,1.476,2270,1.476,2271,1.476,2272,1.476,2273,1.34,2274,1.476,2275,1.476,2276,1.422,2277,1.307,2278,1.476,2279,1.476]],["component/337",[79,0.574]],["title/338-1",[79,13.98]],["name/338-1",[]],["text/338-1",[]],["component/338-1",[]],["title/338-2",[245,34.575]],["name/338-2",[]],["text/338-2",[]],["component/338-2",[]],["title/338",[54,19.634,500,23.399,501,27.639]],["name/338",[54,0.829,500,0.988,501,1.167]],["text/338",[4,1.498,14,1.837,30,1.198,34,1.342,40,0.809,43,1.486,46,2.985,54,4.202,56,2.436,57,4.597,60,2.511,79,0.697,88,0.851,93,2.265,99,4.469,105,1.4,128,2.047,141,3.685,158,4.05,166,1.908,169,2.545,207,2.033,212,1.854,223,1.4,234,1.351,245,1.723,404,2.207,408,1.931,438,4.623,475,2.505,488,1.4,500,4.683,501,4.469,526,1.897,599,2.322,613,3.089,636,1.166,710,1.931,731,1.431,744,2.276,776,2.672,793,3.276,845,2.285,852,3.229,854,2.226,866,2.122,885,2.285,894,2.423,901,2.047,902,2.172,904,2.535,918,2.449,919,2.711,923,2.566,927,1.875,968,3.019,974,2.6,980,2.306,1000,3.089,1027,2.672,1034,4.155,1047,2.505,1096,2.846,1152,2.899,1155,2.207,1188,2.423,1210,2.846,1212,2.476,1217,3.522,1465,3.491,1573,2.423,1721,2.423,1729,2.846,1740,2.423,1849,3.089,1919,2.798,1952,2.711,1985,2.635,1986,3.089,2035,3.089,2162,3.089,2195,2.711,2204,3.089,2405,5.532,2437,3.489,2438,3.168,2439,6.658,2440,3.489,2441,3.489,2442,3.489,2443,3.089,2444,3.489,2445,3.489,2446,3.489,2447,3.489,2448,3.489,2449,3.489,2450,3.489,2451,3.489,2452,5.23,2453,3.489,2454,3.489,2455,2.672]],["component/338",[79,0.574]],["title/339-1",[14,18.744]],["name/339-1",[]],["text/339-1",[]],["component/339-1",[]],["title/339-2",[1188,48.621]],["name/339-2",[]],["text/339-2",[]],["component/339-2",[]],["title/339-3",[1718,33.233,2225,45.561]],["name/339-3",[]],["text/339-3",[]],["component/339-3",[]],["title/339",[488,22.405,500,28.134]],["name/339",[83,2.18]],["text/339",[4,1.057,7,0.549,14,2.434,20,1.508,31,0.915,34,0.947,35,2.177,36,1.656,40,0.777,43,0.583,45,1.253,46,2.985,49,1.095,54,2.593,56,0.615,63,1.71,64,1.426,66,1.204,67,1.074,88,0.334,90,0.501,104,1.879,105,1.346,107,1.048,111,1.644,121,0.723,123,0.648,124,0.881,136,0.763,138,1.662,139,1.465,144,0.634,146,2.387,149,0.827,154,0.67,156,1.768,158,1.498,159,0.833,165,1.397,166,0.749,167,3.046,169,1.155,171,0.922,196,0.983,207,2.753,208,1.486,221,1.681,256,1.584,398,0.798,400,1.88,435,0.507,448,1.048,449,1.323,477,0.815,482,0.889,488,2.949,490,1.048,492,2.158,496,0.866,497,1.463,500,4.338,504,0.839,516,1.533,520,0.972,534,0.787,552,1.558,556,1.048,569,0.809,570,1.388,591,1.416,592,1.165,594,0.913,597,1.772,601,0.634,602,3.433,606,0.995,611,2.259,636,1.914,637,0.897,643,1.212,655,0.873,694,1.301,697,1.673,707,0.961,708,2.18,714,1.08,715,0.889,716,1.048,717,0.897,731,0.561,739,0.803,744,2.723,755,0.716,757,1.692,760,0.972,793,0.827,799,0.995,804,2.268,810,1.212,817,2.437,836,1.728,837,1.642,840,2.238,842,1.048,844,1.048,845,2.197,854,3.357,858,1.007,860,1.832,863,0.859,866,1.498,895,0.866,898,2.282,901,1.968,903,2.008,913,1.943,933,0.827,945,1.692,946,0.793,947,3.537,948,0.913,963,0.833,964,2.421,965,3.296,967,0.839,978,1.117,985,3.627,989,0.897,1005,1.117,1008,1.193,1010,0.961,1013,0.866,1017,1.521,1039,1.331,1045,2.008,1056,0.74,1088,0.941,1089,0.881,1122,1.117,1137,3.942,1172,1.885,1195,1.212,1199,0.983,1203,1.904,1222,0.995,1229,0.995,1231,0.951,1232,2.008,1233,0.983,1322,0.846,1361,0.951,1363,1.212,1485,2.736,1548,2.18,1586,1.16,1663,1.048,1696,7.071,1698,2.903,1729,2.008,1833,2.18,1845,3.789,1910,1.212,1923,1.16,1993,1.048,2036,1.048,2089,1.212,2155,1.212,2168,3.627,2169,1.117,2171,1.212,2178,2.008,2195,2.606,2216,1.048,2219,1.185,2225,1.117,2277,1.212,2443,1.212,2456,1.369,2457,1.369,2458,1.369,2459,1.278,2460,1.369,2461,1.369,2462,4.725,2463,1.369,2464,1.369,2465,3.355,2466,1.369,2467,1.369,2468,1.369,2469,1.369,2470,1.369,2471,1.185,2472,1.369,2473,2.462,2474,4.097,2475,7.096,2476,2.462,2477,1.369,2478,1.369,2479,1.369,2480,1.32,2481,1.369,2482,1.369,2483,1.369,2484,4.097,2485,2.462,2486,1.369,2487,1.369,2488,1.369,2489,1.369,2490,1.369,2491,1.369,2492,2.462,2493,1.369,2494,1.369,2495,1.369,2496,1.369,2497,1.369,2498,1.369,2499,1.369,2500,1.369,2501,1.369,2502,1.369,2503,1.369,2504,1.369,2505,1.369,2506,1.369,2507,1.369,2508,1.369,2509,1.369,2510,1.369,2511,1.369,2512,1.369,2513,1.369]],["component/339",[79,0.574]],["title/340-1",[968,60.586]],["name/340-1",[]],["text/340-1",[]],["component/340-1",[]],["title/340-2",[19,17.696]],["name/340-2",[]],["text/340-2",[]],["component/340-2",[]],["title/340-3",[40,16.226]],["name/340-3",[]],["text/340-3",[]],["component/340-3",[]],["title/340-4",[898,38.995]],["name/340-4",[]],["text/340-4",[]],["component/340-4",[]],["title/340",[500,28.134,697,27.852]],["name/340",[500,1.341,697,1.328]],["text/340",[7,0.988,8,1.158,19,1.12,20,2.394,28,3.126,30,1.932,31,2.863,40,1.507,43,1.154,46,1.536,48,1.6,52,0.911,56,1.216,64,2.303,73,1.372,83,2.329,88,0.661,89,1.728,90,1.621,94,2.292,99,4.268,104,1.243,105,2.609,106,1.945,111,1.087,112,4.869,127,2.97,130,1.6,134,1.79,139,1.612,141,1.499,145,1.331,154,1.325,157,1.968,158,1.648,163,3.616,166,1.481,168,1.021,169,2.079,210,1.276,222,1.259,227,2.137,234,1.049,266,1.612,397,1.372,400,1.518,435,1.004,441,1.481,443,1.945,450,1.758,458,1.79,471,1.456,477,1.612,488,3.403,500,3.613,508,1.288,536,2.344,541,2.344,563,2.172,573,1.58,599,0.945,601,1.253,616,2.045,623,2.717,636,0.905,655,1.728,669,2.611,694,2.342,697,3.841,700,1.518,704,2.295,729,1.993,744,3.23,757,3.046,767,2.506,796,1.728,835,1.825,867,2.344,908,2.045,909,1.648,918,1.901,919,2.105,946,1.568,959,1.993,1008,1.312,1013,1.714,1017,1.673,1041,1.758,1044,2.172,1051,1.968,1060,1.923,1178,2.344,1198,1.901,1203,3.691,1214,2.018,1227,2.344,1247,1.7,1270,2.045,1278,1.923,1461,2.611,1649,3.994,1672,2.172,1698,2.344,1718,1.612,1811,2.566,1845,2.172,1855,2.344,1885,2.611,2169,2.21,2219,4.869,2220,2.529,2276,2.611,2480,2.611,2516,4.139,2939,2.709,3151,2.832,3327,2.996,3349,3.246,3350,3.246,3351,3.246,3352,3.246,3353,3.246,3354,5.312,3355,3.246,3356,10.164,3357,3.246,3358,3.246,3359,3.246,3360,3.246,3361,3.246,3362,3.246,3363,3.246,3364,3.246,3365,3.246,3366,3.246,3367,3.246]],["component/340",[79,0.574]],["title/341-1",[54,14.689,105,13.941,500,17.506,963,21.138,1137,20.115]],["name/341-1",[]],["text/341-1",[]],["component/341-1",[]],["title/341-2",[1573,38.782,2455,42.764]],["name/341-2",[]],["text/341-2",[]],["component/341-2",[]],["title/341",[963,21.138,1137,20.115,1246,26.61,1573,24.132,2455,26.61]],["name/341",[963,0.781,1137,0.743,1246,0.983,1573,0.891,2455,0.983]],["text/341",[3,4.053,7,1.105,13,1.632,28,2.711,34,2.711,46,1.718,54,4.146,56,3.165,67,2.162,105,3.291,109,2.888,132,3.038,488,3.584,497,2.162,499,2.76,500,5.195,501,4.194,539,3.406,570,2.795,573,3.185,696,2.401,767,2.207,795,4.194,860,3.668,866,3.015,869,3.559,927,3.788,963,3.015,1137,5.841,1155,3.136,1275,3.851,1351,4.535,1465,5.278,1562,4.388,1573,4.895,1740,3.442,1829,4.199,2514,4.957,2515,4.957,2516,4.628,2517,4.957,2518,4.957,2519,4.957,2520,4.957]],["component/341",[79,0.574]],["title/342",[242,32.769,451,35.935]],["name/342",[242,1.562,451,1.713]],["text/342",[7,2.055,14,2.609,19,1.872,30,1.827,46,1.844,70,2.736,71,2.409,73,2.693,88,1.808,90,2.71,108,2.627,128,3.121,229,3.775,230,3.618,242,5.408,300,3.483,404,4.687,408,4.1,413,4.709,451,4.766,599,1.855,636,1.778,759,3.1,894,3.694,963,3.235,1097,3.423,1098,2.419,1099,3.423,1365,3.694,1731,4.507,1746,4.073,1771,4.709,1775,4.073,1779,4.073,1786,4.339,1861,4.709,1880,4.709,1883,4.709,1890,4.709,2422,5.32,2423,5.127,2424,5.32,2425,5.32,2426,5.32,2427,5.32,2428,5.32,2429,5.32,2430,5.32,2431,5.32,2432,5.32,2433,5.32]],["component/342",[79,0.574]],["title/343",[242,32.769,449,30.014]],["name/343",[242,1.562,449,1.431]],["text/343",[13,1.995,14,2.231,34,2.33,38,2.816,43,2.581,71,3.666,88,2.375,127,2.767,134,4.004,201,2.643,210,2.854,240,2.018,242,5.951,246,3.237,252,3.833,441,3.313,449,4.351,451,3.898,510,3.605,536,5.242,572,4.042,590,3.374,700,3.395,710,3.353,739,3.555,745,3.967,757,4.163,762,3.932,802,3.771,863,3.802,1047,4.35,1109,4.942,1231,4.207,1278,4.3,2038,5.364,2154,4.942,2391,5.364,2434,6.059,2435,6.059,2436,6.059]],["component/343",[79,0.574]],["title/344-1",[0,57.12]],["name/344-1",[]],["text/344-1",[]],["component/344-1",[]],["title/344-2",[1,37.258,2,34.766]],["name/344-2",[]],["text/344-2",[]],["component/344-2",[]],["title/344",[3,32.112,4,23.978]],["name/344",[3,1.531,4,1.143]],["text/344",[1,2.328,2,2.172,5,1.931,6,1.464,7,1.209,8,4.251,10,1.431,11,1.442,12,4.837,13,2.473,14,2.47,15,4.426,16,5.911,17,4.426,18,5.895,19,2.272,20,1.285,22,2.846,23,3.489,24,3.489,25,4.426,26,4.804,27,2.793,28,2.888,29,4.804,30,1.863,31,2.017,32,2.328,33,4.155,34,1.342,35,1.854,36,2.69,37,5.109,38,1.622,39,1.897,40,1.996,41,2.02,42,2.846,43,2.311,44,3.489,45,1.776,46,1.209,47,2.83,48,2.062,49,1.771,50,2.566,51,2.956,52,1.824,53,3.522,54,1.475,55,2.753,56,2.436,57,2.956,58,1.547,59,3.489,60,1.615,61,3.089,62,2.35,63,2.423,64,0.869,65,2.798,66,1.706,67,1.522,68,3.489,69,5.098,70,2.791,71,2.457,72,2.106,73,2.747,74,2.172,76,2.846,77,3.489,78,2.172,88,0.851,152,2.172,210,2.556,300,2.285,598,2.476,755,1.823,936,2.245,3239,2.285]],["component/344",[79,0.574]],["title/345-1",[80,70.023]],["name/345-1",[]],["text/345-1",[]],["component/345-1",[]],["title/345-2",[37,31.597,81,27.639,82,28.688]],["name/345-2",[]],["text/345-2",[]],["component/345-2",[]],["title/345-3",[12,50.872]],["name/345-3",[]],["text/345-3",[]],["component/345-3",[]],["title/345-4",[16,50.872]],["name/345-4",[]],["text/345-4",[]],["component/345-4",[]],["title/345-5",[8,29.944]],["name/345-5",[]],["text/345-5",[]],["component/345-5",[]],["title/345-6",[53,45.447]],["name/345-6",[]],["text/345-6",[]],["component/345-6",[]],["title/345",[8,29.944]],["name/345",[83,2.18]],["text/345",[3,1.683,7,1.323,8,4.436,12,2.127,13,2.877,19,0.74,28,3.229,31,2.531,36,1.908,37,5.43,40,2.195,43,1.247,48,3.506,49,0.955,52,2.288,53,3.064,56,1.314,60,1.354,62,1.972,63,2.033,64,1.987,72,2.85,84,1.391,85,2.388,86,2.388,87,1.582,88,1.448,89,3.012,90,2.17,91,2.591,92,2.809,93,1.9,94,2.441,95,1.953,96,2.927,97,2.927,98,2.591,99,2.809,100,2.821,101,2.591,102,1.953,103,2.033,104,1.343,105,2.38,106,2.101,107,2.241,108,1.445,109,1.706,110,2.927,111,1.894,112,2.533,113,2.591,114,2.662,115,1.46,116,2.591,117,2.388,118,1.694,119,1.404,120,1.917,121,1.547,122,2.241,123,1.385,124,1.883,125,1.564,126,2.962,127,2.156,128,1.717,129,2.927,130,1.729,131,2.591,132,3.636,133,3.211,134,3.12,135,1.953,136,1.63,137,2.733,138,1.915,139,1.742,140,2.927,141,1.62,142,3.786,143,1.62,144,1.354,145,1.438,146,1.706,147,3.012,148,2.388,149,1.767,150,1.651,151,1.953,152,1.822,153,4.721,154,4.107,155,2.591,156,3.39,157,2.127,158,3.609,159,1.78,160,2.48,161,1.822,162,2.927,163,2.388,164,2.127,165,1.661,166,1.601,167,1.694,168,1.103,169,1.373,170,2.733,171,1.972]],["component/345",[79,0.574]],["title/346-1",[3,32.112,4,23.978]],["name/346-1",[]],["text/346-1",[]],["component/346-1",[]],["title/346-2",[0,57.12]],["name/346-2",[]],["text/346-2",[]],["component/346-2",[]],["title/346-3",[1,37.258,2,34.766]],["name/346-3",[]],["text/346-3",[]],["component/346-3",[]],["title/346-4",[2631,57.12]],["name/346-4",[]],["text/346-4",[]],["component/346-4",[]],["title/346-5",[525,38.293]],["name/346-5",[]],["text/346-5",[]],["component/346-5",[]],["title/346-6",[19,17.696]],["name/346-6",[]],["text/346-6",[]],["component/346-6",[]],["title/346-7",[2977,55.853,2978,55.853]],["name/346-7",[]],["text/346-7",[]],["component/346-7",[]],["title/346-8",[19,11.74,28,17.863,92,27.639]],["name/346-8",[]],["text/346-8",[]],["component/346-8",[]],["title/346-9",[2979,70.023]],["name/346-9",[]],["text/346-9",[]],["component/346-9",[]],["title/346",[264,49.696]],["name/346",[83,2.18]],["text/346",[1,1.06,2,0.989,5,1.556,6,0.666,7,1.164,10,0.651,11,0.656,13,2.408,14,2.583,19,1.459,20,2.125,27,1.917,30,1.793,31,2.321,34,1.081,38,0.738,40,1.867,43,0.677,46,0.551,47,1.425,48,1.661,49,1.234,52,0.945,54,0.672,56,0.713,64,0.396,66,0.777,67,1.226,70,0.817,72,0.959,81,0.945,84,1.336,90,1.028,94,0.821,104,0.729,111,1.128,132,0.974,135,1.875,136,0.885,138,1.533,144,0.735,154,1.375,200,1.955,201,1.993,210,0.748,222,0.738,234,0.615,240,0.937,245,0.784,246,1.502,248,1.115,251,1.06,252,1.779,253,0.885,264,4.431,266,1.673,404,1.005,435,1.042,438,1.103,450,1.031,477,0.945,484,0.854,488,1.128,494,1.764,496,1.779,497,2.518,499,0.885,508,0.755,510,0.945,525,4.616,569,0.939,570,2.132,573,2.225,590,1.566,599,0.554,601,1.301,610,3.329,636,2.34,694,1.485,703,1.483,704,4.891,706,3.085,713,1.346,719,1.2,737,2.382,744,0.666,755,0.83,759,1.638,767,1.684,804,0.879,832,1.75,871,1.154,874,1.216,893,0.966,900,1.477,925,3.12,940,1.483,951,2.25,959,1.169,1065,2.625,1091,1.005,1137,0.92,1151,1.014,1214,1.184,1217,2.966,1272,1.346,1463,4.266,1474,1.253,2017,1.253,2073,1.483,2264,5.829,2292,3.727,2569,1.483,2627,1.483,2631,6.737,2658,1.483,2977,1.589,2978,1.589,2979,2.811,2980,3.109,2981,1.589,2982,4.182,2983,1.757,2984,1.757,2985,1.757,2986,1.757,2987,1.757,2988,1.757,2989,4.182,2990,4.182,2991,3.109,2992,4.182,2993,3.109,2994,4.182,2995,4.182,2996,3.109,2997,3.109,2998,3.109,2999,3.109,3000,1.757,3001,1.757,3002,1.757,3003,1.757,3004,1.757,3005,1.757,3006,1.757,3007,3.109,3008,1.757,3009,1.757,3010,1.757,3011,1.757,3012,1.757,3013,1.757,3014,3.109,3015,1.757,3016,1.757,3017,1.757,3018,1.757,3019,3.109,3020,1.757,3021,4.182,3022,1.757,3023,1.757,3024,1.757,3025,1.757,3026,1.757,3027,3.109,3028,1.757,3029,3.109,3030,1.757,3031,3.109,3032,3.109,3033,3.109,3034,3.109,3035,1.757,3036,1.757,3037,1.757,3038,1.757,3039,1.757,3040,1.757,3041,3.109,3042,3.109,3043,1.757,3044,1.757,3045,3.109,3046,3.109,3047,1.757,3048,3.109,3049,1.757,3050,1.757,3051,1.757,3052,1.757,3053,1.757,3054,1.757,3055,1.757,3056,1.757,3057,1.757,3058,1.757,3059,1.757,3239,1.04]],["component/346",[79,0.574]],["title/347-1",[0,57.12]],["name/347-1",[]],["text/347-1",[]],["component/347-1",[]],["title/347-2",[453,40.259]],["name/347-2",[]],["text/347-2",[]],["component/347-2",[]],["title/347-3",[49,18.227,484,30.014]],["name/347-3",[]],["text/347-3",[]],["component/347-3",[]],["title/347-4",[3368,77.446]],["name/347-4",[]],["text/347-4",[]],["component/347-4",[]],["title/347-5",[19,10.048,49,12.975,218,24.367,493,24.749]],["name/347-5",[]],["text/347-5",[]],["component/347-5",[]],["title/347-6",[38,25.958,87,30.187]],["name/347-6",[]],["text/347-6",[]],["component/347-6",[]],["title/347-7",[1247,35.046,3369,61.774]],["name/347-7",[]],["text/347-7",[]],["component/347-7",[]],["title/347",[135,46.711]],["name/347",[83,2.18]],["text/347",[3,1.471,5,1.416,6,1.073,7,1.205,8,1.094,10,1.049,11,1.057,13,0.842,14,2.103,19,1.069,20,1.99,30,1.856,31,1.572,34,0.984,40,1.736,46,1.466,47,1.593,49,3.375,64,1.346,70,2.175,84,1.216,87,1.383,88,1.032,90,0.936,94,1.322,108,1.263,115,1.276,128,1.501,133,1.74,135,7.071,144,1.184,149,1.544,159,1.556,168,0.964,169,1.2,200,1.322,201,1.116,218,5.269,222,1.189,234,1.638,266,3.217,295,1.974,458,1.69,484,2.905,493,5.886,498,1.632,504,1.568,534,3.999,539,1.758,558,1.675,569,1.511,573,0.912,596,2.464,599,1.475,631,1.375,636,0.855,650,2.465,696,1.239,706,2.087,714,2.018,717,1.675,724,1.758,736,1.344,743,1.605,747,2.167,759,3.15,800,1.556,831,1.74,832,3.365,854,1.632,860,1.144,866,1.556,870,3.194,891,1.836,893,1.556,905,2.465,915,1.618,925,3.395,927,3.375,965,1.375,1013,1.618,1060,1.815,1111,1.815,1151,1.632,1152,3.513,1217,4.514,1247,1.605,1391,3.795,1671,2.322,1804,1.959,1811,1.481,1858,2.167,1859,2.167,1919,3.391,2405,2.125,2732,2.558,2981,5.406,3091,2.829,3092,7.693,3093,4.677,3094,2.829,3095,2.829,3096,4.677,3097,4.677,3239,1.675,3368,4.677,3369,2.829,3370,5.067,3371,3.065,3372,3.065,3373,3.065,3374,3.065,3375,3.065,3376,3.065]],["component/347",[79,0.574]],["title/348",[19,17.696]],["name/348",[83,2.18]],["text/348",[1,3.233,2,3.017,7,1.08,8,3.464,12,3.521,13,2.667,14,2.382,15,3.954,16,5.04,17,3.954,19,2.591,22,5.659,25,3.954,26,4.291,27,2.033,28,1.864,29,4.291,30,2.382,31,1.802,33,3.711,34,1.864,37,3.297,40,2.323,43,2.064,69,7.165,76,3.954,78,3.017,104,2.223,133,3.297,168,1.826,176,1.966,201,2.114,240,2.311,397,2.454,401,3.954,485,3.233,488,1.944,492,2.213,494,3.041,526,2.635,592,2.293,636,1.62,721,2.75,758,2.114,965,2.604,1256,4.847,1257,4.291,1258,4.847,1259,4.847,1260,4.847,1261,4.847,1262,4.847,1263,4.291,1264,4.847,1265,4.847,1266,4.847,1267,4.847]],["component/348",[79,0.574]],["title/349",[168,26.384]],["name/349",[168,1.563]],["text/349",[8,4.264,19,1.978,28,3.01,31,2.468,35,1.49,37,4.516,38,1.304,40,1.336,41,4.531,42,6.386,43,3.787,48,3.922,49,2.555,52,1.938,53,4.309,55,2.213,60,2.667,63,1.948,69,2.148,72,1.693,88,1.113,105,1.125,145,2.241,150,1.582,160,2.376,168,2.172,215,2.148,222,2.12,236,1.889,240,1.519,388,3.492,390,5.631,392,2.619,394,3.864,397,2.918,398,4.562,400,3.23,401,2.288,403,3.313,404,4.2,431,1.837,461,1.474,488,1.125,494,1.76,501,1.669,555,3.167,624,3.72,636,2.616,696,1.358,697,1.399,700,2.556,749,3.274,758,1.99,767,2.031,933,1.693,1039,2.465,1095,6.189,1218,1.991,1269,2.805,1270,4.352,1271,4.561,1272,4.883,1273,4.038,1274,2.805,1275,3.543,1276,2.483,1277,2.063,1278,3.237,1279,3.864,1280,4.561,1281,2.805,1282,3.492,1427,4.969,1866,4.741,1995,2.33,2085,2.483,2165,6.189,3098,3.102,3099,3.102,3100,3.102,3101,3.102,3102,8.079]],["component/349",[79,0.574]],["title/350-1",[8,19.864,55,36.649,73,23.519]],["name/350-1",[]],["text/350-1",[]],["component/350-1",[]],["title/350-2",[125,29.843,138,22.651]],["name/350-2",[]],["text/350-2",[]],["component/350-2",[]],["title/350",[88,17.088]],["name/350",[88,1.012]],["text/350",[4,1.105,7,1.405,8,4.275,12,1.869,13,0.847,14,2.609,15,2.099,16,3.087,17,2.099,19,2.101,20,0.947,22,2.099,25,2.099,28,2.088,30,0.884,40,1.461,43,1.096,47,2.629,48,2.511,49,2.057,51,2.18,52,0.865,53,4.877,55,4.283,57,5.34,58,1.141,60,1.191,64,1.569,65,2.063,69,3.254,71,1.165,72,1.553,73,2.749,74,1.602,76,2.099,78,1.602,88,2.028,106,1.847,111,2.529,122,1.97,124,1.656,125,1.375,127,1.175,130,1.52,133,1.75,138,1.044,141,1.424,166,1.407,168,0.97,169,1.207,210,1.212,253,1.433,254,2.688,388,1.97,396,3.6,397,2.152,398,3.673,399,3.6,400,2.381,407,2.278,408,2.352,414,2.278,416,1.7,488,1.032,492,1.175,501,1.531,522,1.716,572,1.716,599,0.897,614,2.402,615,1.656,623,1.577,639,2.18,640,2.099,694,1.36,736,1.352,745,1.685,758,1.122,835,2.862,845,2.783,860,1.15,866,1.565,885,1.685,956,1.97,964,1.52,980,1.7,1056,3.407,1094,1.628,1111,6.6,1177,2.402,1198,1.806,1263,3.762,1270,1.943,1273,2.278,1283,2.573,1284,4.25,1285,3.762,1286,2.209,1287,4.331,1288,2.573,1291,2.226,1292,2.573,1293,2.573,1294,2.573,1295,2.573,1296,2.573,1297,2.573,1298,3.762,1299,2.573,1300,2.573,1301,2.278,1302,2.278,1303,2.278,1304,2.278,1305,2.278,1472,2.18,3103,2.846,3104,2.846,3105,2.846,3106,2.846,3107,2.846,3108,2.846]],["component/350",[79,0.574]],["title/351-1",[125,29.843,138,22.651]],["name/351-1",[]],["text/351-1",[]],["component/351-1",[]],["title/351",[8,17.003,120,26.037,121,21.008,124,25.582]],["name/351",[8,0.664,120,1.016,121,0.82,124,0.998]],["text/351",[5,2.999,6,2.273,7,1.919,8,3.681,10,2.222,11,2.239,14,2.106,19,1.896,40,1.256,43,2.308,47,2.042,104,2.485,118,3.136,122,4.149,124,5.538,125,2.895,154,2.65,161,3.373,168,3.243,200,2.801,210,2.552,213,3.321,263,4.797,295,2.53,390,3.548,522,5.742,526,2.946,599,1.89,636,1.811,749,3.89,933,3.271,1111,5.326,1291,4.688,1298,6.643,1301,4.797,1302,4.797,1303,4.797,1304,4.797,1305,4.797,1306,4.149,1307,5.419,1308,5.419,1309,7.504,1310,5.419,1311,5.419,1312,5.419,1313,5.419,1314,5.419,1315,5.419,1316,5.059,1317,5.419,3239,3.548]],["component/351",[79,0.574]],["title/352",[8,23.884,125,29.843]],["name/352",[8,1.139,125,1.423]],["text/352",[5,2.515,6,1.906,7,1.476,8,4.464,10,1.863,11,1.877,13,2.18,14,2.232,16,3.301,18,4.022,19,1.148,20,1.673,31,1.689,40,1.534,114,3.734,121,2.401,125,5.384,127,2.075,176,2.685,180,2.851,200,2.349,210,3.119,213,2.784,218,2.784,239,5.483,256,2.923,404,4.942,497,3.407,636,2.212,694,2.401,702,4.089,755,4.082,794,3.849,832,2.828,849,3.06,854,2.898,899,5.224,951,2.703,953,2.546,989,2.975,1318,5.401,1319,4.544,1320,6.621,1321,4.544,1322,2.806,1323,4.544,1324,4.544,1325,4.544,1326,4.544,1327,4.544,1328,4.544,1329,4.544,1330,4.544,1331,4.544,1332,4.022,1333,4.544,1334,4.544,1335,4.544,1336,4.544,3239,2.975]],["component/352",[79,0.574]]],"invertedIndex":[["",{"_index":14,"title":{"11":{},"94":{},"175":{},"267":{},"49-5":{},"50-7":{},"67-1":{},"143-7":{},"150-5":{},"169-1":{},"197-7":{},"212-5":{},"224-1":{},"335-5":{},"336-7":{},"339-1":{}},"name":{},"text":{"1":{},"3":{},"4":{},"5":{},"6":{},"7":{},"9":{},"10":{},"11":{},"13":{},"14":{},"15":{},"17":{},"18":{},"19":{},"21":{},"22":{},"23":{},"24":{},"25":{},"27":{},"28":{},"29":{},"30":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"42":{},"43":{},"44":{},"50":{},"51":{},"52":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"94":{},"96":{},"97":{},"98":{},"100":{},"104":{},"106":{},"107":{},"108":{},"111":{},"112":{},"113":{},"114":{},"115":{},"116":{},"117":{},"118":{},"119":{},"120":{},"121":{},"122":{},"124":{},"125":{},"126":{},"127":{},"128":{},"130":{},"131":{},"132":{},"133":{},"135":{},"136":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"143":{},"144":{},"145":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{},"165":{},"166":{},"167":{},"168":{},"169":{},"171":{},"173":{},"174":{},"175":{},"177":{},"178":{},"181":{},"182":{},"184":{},"185":{},"186":{},"187":{},"188":{},"189":{},"190":{},"191":{},"192":{},"194":{},"195":{},"196":{},"197":{},"198":{},"199":{},"200":{},"201":{},"202":{},"203":{},"204":{},"205":{},"206":{},"207":{},"213":{},"215":{},"216":{},"217":{},"218":{},"219":{},"220":{},"221":{},"222":{},"223":{},"224":{},"226":{},"227":{},"228":{},"229":{},"230":{},"231":{},"232":{},"233":{},"234":{},"235":{},"236":{},"237":{},"238":{},"240":{},"241":{},"242":{},"243":{},"246":{},"248":{},"249":{},"250":{},"251":{},"252":{},"254":{},"255":{},"256":{},"257":{},"258":{},"259":{},"260":{},"261":{},"262":{},"263":{},"265":{},"266":{},"267":{},"269":{},"270":{},"271":{},"274":{},"275":{},"276":{},"277":{},"278":{},"279":{},"280":{},"281":{},"282":{},"283":{},"284":{},"285":{},"286":{},"287":{},"288":{},"289":{},"290":{},"291":{},"292":{},"293":{},"294":{},"295":{},"296":{},"297":{},"298":{},"299":{},"300":{},"301":{},"302":{},"303":{},"304":{},"305":{},"306":{},"309":{},"310":{},"312":{},"313":{},"314":{},"315":{},"316":{},"318":{},"319":{},"320":{},"321":{},"322":{},"324":{},"325":{},"326":{},"328":{},"329":{},"330":{},"336":{},"337":{},"338":{},"339":{},"342":{},"343":{},"344":{},"346":{},"347":{},"348":{},"350":{},"351":{},"352":{}},"component":{}}],["0",{"_index":1021,"title":{},"name":{},"text":{"10":{},"37":{},"50":{},"55":{},"74":{},"93":{},"111":{},"140":{},"143":{},"156":{},"174":{},"181":{},"189":{},"197":{},"266":{},"303":{},"309":{},"336":{}},"component":{}}],["0,688",{"_index":2262,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["0,750",{"_index":2263,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["0,944",{"_index":2270,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["0.0",{"_index":1020,"title":{},"name":{},"text":{"10":{},"51":{},"93":{},"144":{},"174":{},"198":{},"266":{},"337":{}},"component":{}}],["0.01",{"_index":1742,"title":{},"name":{},"text":{"34":{},"37":{},"137":{},"140":{},"186":{},"189":{},"300":{},"303":{}},"component":{}}],["0.0;1.0",{"_index":1827,"title":{},"name":{},"text":{"37":{},"140":{},"189":{},"303":{}},"component":{}}],["0.1",{"_index":1030,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["0.6",{"_index":2274,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["0.636",{"_index":2065,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["0.7",{"_index":2257,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["0.708",{"_index":2062,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["0.75",{"_index":1034,"title":{},"name":{},"text":{"10":{},"34":{},"37":{},"66":{},"93":{},"137":{},"140":{},"168":{},"174":{},"186":{},"189":{},"223":{},"266":{},"300":{},"303":{},"338":{}},"component":{}}],["0.750",{"_index":2059,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["0.8",{"_index":2254,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["0.9",{"_index":1031,"title":{},"name":{},"text":{"10":{},"51":{},"93":{},"144":{},"174":{},"198":{},"266":{},"337":{}},"component":{}}],["04",{"_index":2322,"title":{},"name":{},"text":{"55":{},"111":{},"181":{},"309":{}},"component":{}}],["05.00.02",{"_index":9,"title":{},"name":{},"text":{"1":{},"4":{},"9":{},"18":{},"19":{},"20":{},"28":{},"32":{},"35":{},"53":{},"56":{},"57":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{}},"component":{}}],["06.01.00",{"_index":2807,"title":{},"name":{},"text":{"84":{},"87":{},"92":{},"103":{},"109":{},"112":{},"113":{},"121":{},"122":{},"123":{},"131":{},"135":{},"138":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{},"165":{}},"component":{}}],["07.01.00",{"_index":2956,"title":{},"name":{},"text":{"173":{},"179":{},"182":{},"184":{},"187":{},"200":{},"213":{},"215":{},"217":{},"220":{},"226":{},"227":{},"228":{},"229":{},"230":{},"231":{},"232":{},"233":{},"234":{},"235":{},"236":{},"237":{},"241":{},"242":{},"243":{},"246":{},"247":{},"256":{}},"component":{}}],["08",{"_index":3173,"title":{},"name":{},"text":{"246":{},"275":{}},"component":{}}],["08.01.01",{"_index":3239,"title":{},"name":{},"text":{"260":{},"265":{},"271":{},"275":{},"276":{},"278":{},"279":{},"280":{},"281":{},"282":{},"283":{},"284":{},"285":{},"286":{},"287":{},"288":{},"289":{},"290":{},"291":{},"301":{},"307":{},"310":{},"311":{},"320":{},"324":{},"344":{},"346":{},"347":{},"351":{},"352":{}},"component":{}}],["1",{"_index":1056,"title":{},"name":{},"text":{"10":{},"27":{},"34":{},"37":{},"43":{},"49":{},"50":{},"55":{},"67":{},"69":{},"70":{},"74":{},"75":{},"93":{},"107":{},"111":{},"130":{},"137":{},"140":{},"143":{},"150":{},"151":{},"152":{},"156":{},"157":{},"169":{},"174":{},"181":{},"186":{},"189":{},"195":{},"197":{},"212":{},"224":{},"226":{},"227":{},"231":{},"240":{},"243":{},"246":{},"254":{},"266":{},"271":{},"274":{},"275":{},"278":{},"279":{},"284":{},"300":{},"303":{},"309":{},"318":{},"329":{},"335":{},"336":{},"339":{},"350":{}},"component":{}}],["1,000,000",{"_index":2448,"title":{},"name":{},"text":{"66":{},"168":{},"223":{},"338":{}},"component":{}}],["1.0",{"_index":1006,"title":{},"name":{},"text":{"10":{},"37":{},"51":{},"93":{},"140":{},"144":{},"174":{},"189":{},"198":{},"246":{},"266":{},"275":{},"303":{},"337":{}},"component":{}}],["1.000",{"_index":2057,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["1.7.30",{"_index":2335,"title":{},"name":{},"text":{"56":{},"112":{}},"component":{}}],["1.7.32",{"_index":2970,"title":{},"name":{},"text":{"182":{},"310":{}},"component":{}}],["1.8",{"_index":1341,"title":{},"name":{},"text":{"20":{},"28":{},"123":{},"131":{},"247":{},"256":{},"311":{},"320":{}},"component":{}}],["10",{"_index":1032,"title":{},"name":{},"text":{"10":{},"36":{},"37":{},"50":{},"93":{},"139":{},"140":{},"143":{},"174":{},"188":{},"189":{},"197":{},"266":{},"271":{},"302":{},"303":{},"336":{}},"component":{}}],["100",{"_index":908,"title":{},"name":{},"text":{"7":{},"10":{},"37":{},"51":{},"90":{},"93":{},"140":{},"144":{},"171":{},"174":{},"189":{},"198":{},"263":{},"266":{},"303":{},"337":{},"340":{}},"component":{}}],["1000",{"_index":3355,"title":{},"name":{},"text":{"340":{}},"component":{}}],["10000",{"_index":1332,"title":{},"name":{},"text":{"19":{},"75":{},"122":{},"157":{},"231":{},"242":{},"284":{},"352":{}},"component":{}}],["10000000",{"_index":1844,"title":{},"name":{},"text":{"37":{},"140":{},"189":{},"303":{}},"component":{}}],["1000000000",{"_index":1758,"title":{},"name":{},"text":{"34":{},"37":{},"137":{},"140":{},"186":{},"189":{},"300":{},"303":{}},"component":{}}],["1000000000000000028",{"_index":2303,"title":{},"name":{},"text":{"55":{},"111":{},"181":{},"309":{}},"component":{}}],["1000000000000000029",{"_index":2315,"title":{},"name":{},"text":{"55":{},"111":{},"181":{},"309":{}},"component":{}}],["1000000000000000030",{"_index":2316,"title":{},"name":{},"text":{"55":{},"111":{},"181":{},"309":{}},"component":{}}],["1000000000000000031",{"_index":2317,"title":{},"name":{},"text":{"55":{},"111":{},"181":{},"309":{}},"component":{}}],["1000055:contact",{"_index":2054,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["1000056:contact",{"_index":2055,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["1000m",{"_index":3054,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["1012345:com.my.app.entities.ord",{"_index":2122,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["1024*1024*8",{"_index":1754,"title":{},"name":{},"text":{"34":{},"137":{},"186":{},"300":{}},"component":{}}],["1024^2",{"_index":1824,"title":{},"name":{},"text":{"37":{},"140":{},"189":{},"303":{}},"component":{}}],["1024^2*8",{"_index":1826,"title":{},"name":{},"text":{"37":{},"140":{},"189":{},"303":{}},"component":{}}],["107",{"_index":86,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"85":{},"86":{},"87":{},"214":{},"216":{},"217":{},"259":{},"260":{},"345":{}},"component":{}}],["1099",{"_index":2987,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["10_000_000",{"_index":1745,"title":{},"name":{},"text":{"34":{},"137":{},"186":{},"300":{}},"component":{}}],["11",{"_index":474,"title":{},"name":{},"text":{"3":{},"5":{},"86":{},"88":{},"216":{},"218":{},"259":{},"261":{}},"component":{}}],["110",{"_index":2314,"title":{},"name":{},"text":{"55":{},"111":{},"181":{},"309":{}},"component":{}}],["11:17:53",{"_index":1549,"title":{},"name":{},"text":{"24":{},"127":{},"251":{},"315":{}},"component":{}}],["1337",{"_index":2341,"title":{},"name":{},"text":{"56":{},"112":{},"182":{},"310":{}},"component":{}}],["14",{"_index":785,"title":{"33-3":{},"136-3":{},"185-3":{},"325-3":{}},"name":{},"text":{"5":{},"136":{},"185":{},"325":{}},"component":{}}],["15",{"_index":776,"title":{},"name":{},"text":{"5":{},"24":{},"48":{},"66":{},"127":{},"136":{},"149":{},"168":{},"185":{},"211":{},"223":{},"251":{},"315":{},"325":{},"334":{},"338":{}},"component":{}}],["15:16:02.979",{"_index":3175,"title":{},"name":{},"text":{"246":{},"275":{}},"component":{}}],["15:16:02.994",{"_index":3180,"title":{},"name":{},"text":{"246":{},"275":{}},"component":{}}],["15t13:32:26.003z",{"_index":2323,"title":{},"name":{},"text":{"55":{},"111":{},"181":{},"309":{}},"component":{}}],["16",{"_index":769,"title":{},"name":{},"text":{"5":{},"49":{},"150":{},"212":{},"335":{}},"component":{}}],["17",{"_index":2814,"title":{"135-3":{},"136-4":{},"184-3":{},"185-4":{},"324-3":{},"325-4":{}},"name":{},"text":{"86":{},"87":{},"88":{},"216":{},"217":{},"218":{},"259":{},"260":{},"261":{}},"component":{}}],["18",{"_index":3242,"title":{},"name":{},"text":{"261":{}},"component":{}}],["18469",{"_index":3176,"title":{},"name":{},"text":{"246":{},"275":{}},"component":{}}],["19.7.0.0",{"_index":2775,"title":{},"name":{},"text":{"81":{},"163":{},"235":{},"289":{}},"component":{}}],["192",{"_index":3075,"title":{},"name":{},"text":{"216":{},"259":{}},"component":{}}],["194][272][273][278][280",{"_index":2810,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["1_000_000",{"_index":3360,"title":{},"name":{},"text":{"340":{}},"component":{}}],["1_000_000_000",{"_index":1765,"title":{},"name":{},"text":{"34":{},"137":{},"186":{},"300":{}},"component":{}}],["1n",{"_index":1847,"title":{},"name":{},"text":{"37":{},"140":{},"189":{},"303":{}},"component":{}}],["2",{"_index":935,"title":{},"name":{},"text":{"9":{},"27":{},"37":{},"49":{},"74":{},"92":{},"130":{},"140":{},"150":{},"156":{},"173":{},"189":{},"212":{},"254":{},"265":{},"274":{},"275":{},"303":{},"318":{},"335":{}},"component":{}}],["2.0",{"_index":826,"title":{},"name":{},"text":{"6":{},"89":{},"219":{},"243":{},"262":{},"271":{}},"component":{}}],["2.1",{"_index":186,"title":{"3-32":{},"86-37":{},"216-44":{},"259-53":{}},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["2.1.0.releas",{"_index":3148,"title":{},"name":{},"text":{"246":{},"275":{}},"component":{}}],["2.11.1",{"_index":3260,"title":{},"name":{},"text":{"274":{}},"component":{}}],["2.14.7",{"_index":3315,"title":{},"name":{},"text":{"287":{}},"component":{}}],["2.2",{"_index":185,"title":{"3-28":{},"86-33":{},"216-40":{},"259-49":{}},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["2.7.1",{"_index":2746,"title":{},"name":{},"text":{"79":{},"161":{},"234":{},"288":{}},"component":{}}],["2.8",{"_index":681,"title":{},"name":{},"text":{"4":{},"87":{},"217":{},"260":{}},"component":{}}],["2.x",{"_index":3147,"title":{},"name":{},"text":{"246":{},"259":{},"275":{}},"component":{}}],["20",{"_index":2476,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["20.0",{"_index":787,"title":{},"name":{},"text":{"5":{},"88":{},"218":{},"261":{}},"component":{}}],["2000",{"_index":2472,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["2010",{"_index":2467,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["2011",{"_index":2468,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["2012",{"_index":2469,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["2018",{"_index":2470,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["2019",{"_index":1548,"title":{},"name":{},"text":{"24":{},"67":{},"127":{},"169":{},"224":{},"251":{},"315":{},"339":{}},"component":{}}],["2020",{"_index":2321,"title":{},"name":{},"text":{"55":{},"111":{},"181":{},"309":{}},"component":{}}],["2021",{"_index":3172,"title":{},"name":{},"text":{"246":{},"275":{}},"component":{}}],["205",{"_index":3087,"title":{},"name":{},"text":{"216":{},"259":{}},"component":{}}],["225",{"_index":193,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["226",{"_index":2823,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["23",{"_index":3174,"title":{},"name":{},"text":{"246":{},"275":{}},"component":{}}],["234",{"_index":2826,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["240",{"_index":2825,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["25",{"_index":1036,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["254",{"_index":2819,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["255",{"_index":2820,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["26",{"_index":789,"title":{},"name":{},"text":{"5":{},"88":{},"218":{},"261":{}},"component":{}}],["265",{"_index":2818,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["277",{"_index":3238,"title":{},"name":{},"text":{"259":{}},"component":{}}],["279",{"_index":2811,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["281",{"_index":2813,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["282",{"_index":3088,"title":{},"name":{},"text":{"216":{},"259":{}},"component":{}}],["2898",{"_index":2330,"title":{},"name":{},"text":{"55":{},"111":{},"181":{},"309":{}},"component":{}}],["2930",{"_index":2332,"title":{},"name":{},"text":{"55":{},"111":{},"181":{},"309":{}},"component":{}}],["2^n",{"_index":1886,"title":{},"name":{},"text":{"39":{},"142":{},"191":{},"306":{}},"component":{}}],["2gb",{"_index":1851,"title":{},"name":{},"text":{"37":{},"140":{},"189":{},"303":{}},"component":{}}],["3",{"_index":62,"title":{},"name":{},"text":{"1":{},"2":{},"27":{},"37":{},"43":{},"55":{},"84":{},"85":{},"107":{},"111":{},"130":{},"140":{},"181":{},"189":{},"195":{},"213":{},"214":{},"254":{},"259":{},"274":{},"275":{},"303":{},"309":{},"318":{},"329":{},"344":{},"345":{}},"component":{}}],["3.0",{"_index":184,"title":{"3-24":{},"86-29":{},"216-36":{},"259-45":{}},"name":{},"text":{"54":{},"110":{},"180":{},"271":{},"308":{}},"component":{}}],["3.0.1",{"_index":183,"title":{"3-22":{},"86-27":{},"216-34":{},"259-43":{}},"name":{},"text":{},"component":{}}],["3.32.3",{"_index":2799,"title":{},"name":{},"text":{"83":{},"165":{},"237":{},"291":{}},"component":{}}],["3.8.1",{"_index":1340,"title":{},"name":{},"text":{"20":{},"28":{},"123":{},"131":{},"247":{},"256":{},"311":{},"320":{}},"component":{}}],["3.x",{"_index":3225,"title":{},"name":{},"text":{"259":{}},"component":{}}],["30",{"_index":2453,"title":{},"name":{},"text":{"66":{},"168":{},"223":{},"338":{}},"component":{}}],["3000",{"_index":2730,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["303",{"_index":3085,"title":{},"name":{},"text":{"216":{},"259":{}},"component":{}}],["323",{"_index":3082,"title":{},"name":{},"text":{"216":{},"259":{}},"component":{}}],["326",{"_index":3081,"title":{},"name":{},"text":{"216":{},"259":{}},"component":{}}],["343",{"_index":3080,"title":{},"name":{},"text":{"216":{},"259":{}},"component":{}}],["351",{"_index":3074,"title":{},"name":{},"text":{"216":{},"259":{}},"component":{}}],["354",{"_index":3078,"title":{},"name":{},"text":{"216":{},"259":{}},"component":{}}],["359",{"_index":3210,"title":{},"name":{},"text":{"259":{}},"component":{}}],["368",{"_index":3236,"title":{},"name":{},"text":{"259":{}},"component":{}}],["369",{"_index":3235,"title":{},"name":{},"text":{"259":{}},"component":{}}],["371",{"_index":3219,"title":{},"name":{},"text":{"259":{}},"component":{}}],["376",{"_index":3218,"title":{},"name":{},"text":{"259":{}},"component":{}}],["377",{"_index":3067,"title":{},"name":{},"text":{"216":{},"259":{}},"component":{}}],["384",{"_index":3070,"title":{},"name":{},"text":{"216":{},"259":{}},"component":{}}],["386",{"_index":3073,"title":{},"name":{},"text":{"216":{},"259":{}},"component":{}}],["387",{"_index":3072,"title":{},"name":{},"text":{"216":{},"259":{}},"component":{}}],["388][398",{"_index":3068,"title":{},"name":{},"text":{"216":{},"259":{}},"component":{}}],["395",{"_index":3077,"title":{},"name":{},"text":{"216":{},"259":{}},"component":{}}],["397][394",{"_index":3076,"title":{},"name":{},"text":{"216":{},"259":{}},"component":{}}],["4",{"_index":1287,"title":{},"name":{},"text":{"17":{},"27":{},"35":{},"39":{},"43":{},"49":{},"100":{},"107":{},"130":{},"138":{},"142":{},"150":{},"187":{},"191":{},"195":{},"212":{},"240":{},"254":{},"259":{},"301":{},"306":{},"318":{},"329":{},"335":{},"350":{}},"component":{}}],["4.0",{"_index":182,"title":{"3-18":{},"86-23":{},"216-30":{},"259-39":{}},"name":{},"text":{},"component":{}}],["4.1",{"_index":181,"title":{"3-14":{},"86-19":{},"216-26":{},"259-35":{}},"name":{},"text":{"3":{},"49":{},"86":{},"150":{},"212":{},"216":{},"259":{},"335":{}},"component":{}}],["402",{"_index":3065,"title":{},"name":{},"text":{"216":{},"259":{}},"component":{}}],["408",{"_index":3234,"title":{},"name":{},"text":{"259":{}},"component":{}}],["4096",{"_index":1138,"title":{},"name":{},"text":{"11":{},"94":{},"175":{}},"component":{}}],["415",{"_index":3233,"title":{},"name":{},"text":{"259":{}},"component":{}}],["42.2.14",{"_index":2786,"title":{},"name":{},"text":{"82":{},"164":{},"236":{},"290":{}},"component":{}}],["422",{"_index":3211,"title":{},"name":{},"text":{"259":{}},"component":{}}],["427",{"_index":3216,"title":{},"name":{},"text":{"259":{}},"component":{}}],["436",{"_index":3217,"title":{},"name":{},"text":{"259":{}},"component":{}}],["444",{"_index":3221,"title":{},"name":{},"text":{"259":{}},"component":{}}],["4567",{"_index":2347,"title":{},"name":{},"text":{"56":{},"112":{},"182":{},"310":{}},"component":{}}],["460",{"_index":3224,"title":{},"name":{},"text":{"259":{}},"component":{}}],["462",{"_index":3215,"title":{},"name":{},"text":{"259":{}},"component":{}}],["463",{"_index":3232,"title":{},"name":{},"text":{"259":{}},"component":{}}],["471",{"_index":3231,"title":{},"name":{},"text":{"259":{}},"component":{}}],["490",{"_index":3214,"title":{},"name":{},"text":{"259":{}},"component":{}}],["5",{"_index":258,"title":{"33-1":{},"136-1":{},"185-1":{},"325-1":{}},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["5.0",{"_index":175,"title":{"3-5":{},"6-1":{},"86-11":{},"216-18":{},"259-27":{}},"name":{},"text":{"6":{},"35":{},"138":{},"187":{},"301":{}},"component":{}}],["5.0.1",{"_index":174,"title":{"3-3":{},"86-9":{},"216-16":{},"259-25":{}},"name":{},"text":{},"component":{}}],["5.0.2",{"_index":172,"title":{"3-1":{},"86-7":{},"216-14":{},"259-23":{}},"name":{},"text":{},"component":{}}],["50",{"_index":2664,"title":{},"name":{},"text":{"75":{},"157":{},"231":{},"284":{}},"component":{}}],["504",{"_index":3226,"title":{},"name":{},"text":{"259":{}},"component":{}}],["509",{"_index":3212,"title":{},"name":{},"text":{"259":{}},"component":{}}],["513",{"_index":3213,"title":{},"name":{},"text":{"259":{}},"component":{}}],["517",{"_index":3228,"title":{},"name":{},"text":{"259":{}},"component":{}}],["518",{"_index":3229,"title":{},"name":{},"text":{"259":{}},"component":{}}],["535",{"_index":3222,"title":{},"name":{},"text":{"259":{}},"component":{}}],["563",{"_index":3207,"title":{},"name":{},"text":{"259":{}},"component":{}}],["564",{"_index":3206,"title":{},"name":{},"text":{"259":{}},"component":{}}],["568",{"_index":3208,"title":{},"name":{},"text":{"259":{}},"component":{}}],["599",{"_index":3203,"title":{},"name":{},"text":{"259":{}},"component":{}}],["5level",{"_index":3197,"title":{},"name":{},"text":{"255":{},"319":{}},"component":{}}],["6",{"_index":937,"title":{},"name":{},"text":{"9":{},"92":{},"173":{},"216":{},"259":{},"265":{}},"component":{}}],["6.0",{"_index":2809,"title":{"86-3":{},"216-10":{},"259-19":{}},"name":{},"text":{},"component":{}}],["6.1",{"_index":2808,"title":{"86-1":{},"89-1":{},"216-8":{},"259-17":{}},"name":{},"text":{"89":{}},"component":{}}],["600",{"_index":3204,"title":{},"name":{},"text":{"259":{}},"component":{}}],["60000",{"_index":2661,"title":{},"name":{},"text":{"75":{},"157":{},"231":{},"284":{}},"component":{}}],["7",{"_index":940,"title":{},"name":{},"text":{"9":{},"92":{},"173":{},"215":{},"265":{},"346":{}},"component":{}}],["7.0",{"_index":3061,"title":{"216-4":{},"259-13":{}},"name":{},"text":{},"component":{}}],["7.1",{"_index":3060,"title":{"216-1":{},"219-1":{},"259-10":{}},"name":{},"text":{"219":{}},"component":{}}],["75",{"_index":1035,"title":{},"name":{},"text":{"10":{},"34":{},"37":{},"51":{},"93":{},"137":{},"140":{},"144":{},"174":{},"186":{},"189":{},"198":{},"266":{},"300":{},"303":{},"337":{}},"component":{}}],["79c9850690d7614ecdb72d68394f994fef7534b292c4867ce5e7dec0aa7bdfad",{"_index":683,"title":{},"name":{},"text":{"4":{},"87":{},"217":{},"260":{}},"component":{}}],["8",{"_index":746,"title":{"33-2":{},"136-2":{},"185-2":{},"325-2":{}},"name":{},"text":{"4":{},"5":{},"9":{},"10":{},"20":{},"28":{},"34":{},"37":{},"48":{},"49":{},"87":{},"88":{},"92":{},"93":{},"123":{},"131":{},"137":{},"140":{},"149":{},"150":{},"173":{},"174":{},"186":{},"189":{},"211":{},"212":{},"217":{},"218":{},"243":{},"246":{},"247":{},"256":{},"260":{},"261":{},"265":{},"266":{},"271":{},"274":{},"275":{},"300":{},"303":{},"311":{},"320":{},"335":{}},"component":{}}],["8.0",{"_index":3202,"title":{"259-6":{}},"name":{},"text":{},"component":{}}],["8.0.0",{"_index":3150,"title":{},"name":{},"text":{"246":{},"275":{}},"component":{}}],["8.0.21",{"_index":2361,"title":{},"name":{},"text":{"57":{},"80":{},"113":{},"162":{}},"component":{}}],["8.1",{"_index":3201,"title":{"259-3":{}},"name":{},"text":{},"component":{}}],["8.1.1",{"_index":3200,"title":{"259-1":{},"262-1":{}},"name":{},"text":{"262":{}},"component":{}}],["80",{"_index":2255,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["8080",{"_index":2293,"title":{},"name":{},"text":{"53":{},"109":{},"179":{},"307":{}},"component":{}}],["8265525fb3fc",{"_index":1666,"title":{},"name":{},"text":{"31":{},"134":{},"183":{},"323":{}},"component":{}}],["86400000m",{"_index":1761,"title":{},"name":{},"text":{"34":{},"137":{},"186":{},"300":{}},"component":{}}],["86_400_000",{"_index":1764,"title":{},"name":{},"text":{"34":{},"137":{},"186":{},"300":{}},"component":{}}],["9",{"_index":3250,"title":{},"name":{},"text":{"271":{}},"component":{}}],["90",{"_index":1033,"title":{},"name":{},"text":{"10":{},"51":{},"93":{},"144":{},"174":{},"198":{},"266":{},"337":{}},"component":{}}],["_________________________________________________",{"_index":1835,"title":{},"name":{},"text":{"37":{},"140":{},"189":{},"303":{}},"component":{}}],["__________________________________________________",{"_index":1832,"title":{},"name":{},"text":{"37":{},"140":{},"189":{},"303":{}},"component":{}}],["_databas",{"_index":3137,"title":{},"name":{},"text":{"243":{},"271":{}},"component":{}}],["_resolv",{"_index":2972,"title":{},"name":{},"text":{"182":{},"310":{}},"component":{}}],["_storagemanager_",{"_index":3133,"title":{},"name":{},"text":{"243":{},"271":{},"275":{}},"component":{}}],["a.avail",{"_index":1207,"title":{},"name":{},"text":{"13":{},"96":{},"177":{},"269":{}},"component":{}}],["abov",{"_index":936,"title":{},"name":{},"text":{"9":{},"10":{},"14":{},"32":{},"50":{},"51":{},"92":{},"93":{},"97":{},"116":{},"135":{},"143":{},"144":{},"173":{},"174":{},"178":{},"184":{},"197":{},"198":{},"213":{},"243":{},"259":{},"265":{},"266":{},"270":{},"271":{},"274":{},"275":{},"324":{},"336":{},"337":{},"344":{}},"component":{}}],["absenc",{"_index":2272,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["absolut",{"_index":2085,"title":{},"name":{},"text":{"50":{},"77":{},"143":{},"159":{},"197":{},"239":{},"336":{},"349":{}},"component":{}}],["abstract",{"_index":114,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"19":{},"29":{},"30":{},"33":{},"34":{},"37":{},"41":{},"54":{},"56":{},"57":{},"85":{},"86":{},"87":{},"105":{},"110":{},"112":{},"113":{},"122":{},"132":{},"133":{},"136":{},"137":{},"140":{},"180":{},"185":{},"186":{},"189":{},"193":{},"200":{},"214":{},"216":{},"217":{},"242":{},"257":{},"258":{},"259":{},"260":{},"276":{},"300":{},"303":{},"308":{},"321":{},"322":{},"325":{},"327":{},"345":{},"352":{}},"component":{}}],["abstract(fin",{"_index":1648,"title":{},"name":{},"text":{"30":{},"133":{},"258":{},"322":{}},"component":{}}],["acc",{"_index":2530,"title":{},"name":{},"text":{"69":{},"70":{},"151":{},"152":{},"226":{},"227":{},"278":{},"279":{}},"component":{}}],["acceler",{"_index":2027,"title":{},"name":{},"text":{"49":{},"150":{},"212":{},"335":{}},"component":{}}],["accept",{"_index":1007,"title":{},"name":{},"text":{"10":{},"12":{},"28":{},"50":{},"93":{},"95":{},"131":{},"143":{},"174":{},"176":{},"197":{},"256":{},"266":{},"268":{},"320":{},"336":{}},"component":{}}],["access",{"_index":105,"title":{"47-4":{},"68-1":{},"97-3":{},"148-4":{},"170-1":{},"178-3":{},"210-4":{},"225-1":{},"270-3":{},"333-4":{},"341-1":{}},"name":{},"text":{"2":{},"3":{},"4":{},"7":{},"9":{},"10":{},"14":{},"16":{},"21":{},"27":{},"28":{},"36":{},"37":{},"47":{},"50":{},"51":{},"53":{},"54":{},"56":{},"58":{},"59":{},"66":{},"67":{},"68":{},"69":{},"70":{},"77":{},"85":{},"86":{},"87":{},"90":{},"92":{},"93":{},"97":{},"99":{},"109":{},"110":{},"112":{},"114":{},"115":{},"124":{},"130":{},"131":{},"139":{},"140":{},"143":{},"144":{},"148":{},"151":{},"152":{},"159":{},"168":{},"169":{},"170":{},"171":{},"173":{},"174":{},"178":{},"179":{},"180":{},"182":{},"188":{},"189":{},"197":{},"198":{},"201":{},"202":{},"210":{},"214":{},"216":{},"217":{},"223":{},"224":{},"225":{},"226":{},"227":{},"239":{},"243":{},"246":{},"248":{},"254":{},"256":{},"259":{},"260":{},"263":{},"265":{},"266":{},"270":{},"271":{},"274":{},"275":{},"277":{},"278":{},"279":{},"293":{},"297":{},"302":{},"303":{},"307":{},"308":{},"310":{},"312":{},"318":{},"320":{},"333":{},"336":{},"337":{},"338":{},"339":{},"340":{},"341":{},"345":{},"349":{}},"component":{}}],["accident",{"_index":2686,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["accord",{"_index":1095,"title":{},"name":{},"text":{"11":{},"51":{},"94":{},"144":{},"175":{},"198":{},"239":{},"267":{},"337":{},"349":{}},"component":{}}],["accordingli",{"_index":1268,"title":{},"name":{},"text":{"16":{},"37":{},"99":{},"140":{},"189":{},"303":{}},"component":{}}],["account",{"_index":2574,"title":{},"name":{},"text":{"71":{},"153":{},"228":{},"280":{},"281":{}},"component":{}}],["achiev",{"_index":1768,"title":{},"name":{},"text":{"35":{},"50":{},"97":{},"138":{},"143":{},"178":{},"187":{},"197":{},"270":{},"301":{},"336":{}},"component":{}}],["acknowledg",{"_index":2604,"title":{},"name":{},"text":{"74":{},"77":{},"156":{},"159":{}},"component":{}}],["action",{"_index":478,"title":{},"name":{},"text":{"3":{},"8":{},"49":{},"58":{},"86":{},"91":{},"114":{},"150":{},"172":{},"201":{},"212":{},"216":{},"243":{},"246":{},"259":{},"264":{},"271":{},"274":{},"275":{},"277":{},"335":{}},"component":{}}],["activ",{"_index":1076,"title":{},"name":{},"text":{"10":{},"36":{},"37":{},"77":{},"93":{},"139":{},"140":{},"159":{},"188":{},"189":{},"216":{},"259":{},"274":{},"302":{},"303":{}},"component":{}}],["actual",{"_index":167,"title":{},"name":{},"text":{"2":{},"3":{},"7":{},"10":{},"23":{},"29":{},"50":{},"54":{},"57":{},"67":{},"85":{},"86":{},"90":{},"93":{},"110":{},"113":{},"116":{},"126":{},"132":{},"143":{},"169":{},"171":{},"174":{},"180":{},"197":{},"200":{},"203":{},"214":{},"216":{},"224":{},"246":{},"250":{},"257":{},"259":{},"263":{},"266":{},"275":{},"276":{},"294":{},"304":{},"308":{},"314":{},"321":{},"336":{},"339":{},"345":{}},"component":{}}],["ad",{"_index":458,"title":{},"name":{},"text":{"3":{},"14":{},"27":{},"48":{},"50":{},"60":{},"77":{},"86":{},"97":{},"117":{},"130":{},"143":{},"149":{},"159":{},"178":{},"197":{},"204":{},"211":{},"216":{},"254":{},"259":{},"270":{},"274":{},"295":{},"318":{},"334":{},"336":{},"340":{},"347":{}},"component":{}}],["adapt",{"_index":237,"title":{"46-1":{},"147-1":{},"209-1":{},"332-1":{}},"name":{},"text":{"3":{},"4":{},"24":{},"54":{},"56":{},"86":{},"87":{},"110":{},"112":{},"127":{},"180":{},"216":{},"217":{},"251":{},"259":{},"260":{},"308":{},"315":{}},"component":{}}],["add",{"_index":755,"title":{},"name":{},"text":{"4":{},"19":{},"23":{},"24":{},"28":{},"29":{},"42":{},"48":{},"50":{},"56":{},"60":{},"67":{},"74":{},"87":{},"106":{},"112":{},"117":{},"122":{},"126":{},"127":{},"131":{},"132":{},"143":{},"149":{},"156":{},"169":{},"182":{},"194":{},"197":{},"204":{},"211":{},"213":{},"215":{},"216":{},"217":{},"224":{},"242":{},"243":{},"246":{},"250":{},"251":{},"255":{},"256":{},"257":{},"259":{},"260":{},"271":{},"274":{},"275":{},"295":{},"310":{},"314":{},"315":{},"319":{},"320":{},"321":{},"328":{},"334":{},"336":{},"339":{},"344":{},"346":{},"352":{}},"component":{}}],["addit",{"_index":450,"title":{"35-3":{},"138-3":{},"187-3":{},"301-3":{}},"name":{},"text":{"3":{},"10":{},"24":{},"41":{},"44":{},"57":{},"86":{},"93":{},"105":{},"108":{},"113":{},"127":{},"174":{},"193":{},"196":{},"200":{},"215":{},"216":{},"251":{},"259":{},"266":{},"276":{},"315":{},"327":{},"330":{},"340":{},"346":{}},"component":{}}],["addition",{"_index":1572,"title":{},"name":{},"text":{"27":{},"71":{},"130":{},"153":{},"228":{},"254":{},"280":{},"318":{}},"component":{}}],["addlayer(logg",{"_index":1543,"title":{},"name":{},"text":{"24":{},"25":{},"127":{},"128":{},"251":{},"252":{},"315":{},"316":{}},"component":{}}],["addlayer(versioncontext",{"_index":1554,"title":{},"name":{},"text":{"25":{},"27":{},"128":{},"130":{},"252":{},"254":{},"316":{},"318":{}},"component":{}}],["address",{"_index":2264,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"215":{},"337":{},"346":{}},"component":{}}],["adequ",{"_index":2731,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["adher",{"_index":711,"title":{},"name":{},"text":{"4":{},"87":{},"217":{},"260":{}},"component":{}}],["adjust",{"_index":257,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["administr",{"_index":2297,"title":{},"name":{},"text":{"54":{},"77":{},"110":{},"159":{},"180":{},"308":{}},"component":{}}],["admittedli",{"_index":1471,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["adopt",{"_index":98,"title":{},"name":{},"text":{"2":{},"3":{},"85":{},"86":{},"214":{},"216":{},"259":{},"345":{}},"component":{}}],["adoptium",{"_index":2906,"title":{},"name":{},"text":{"88":{},"218":{},"261":{}},"component":{}}],["adoptopenjdk",{"_index":771,"title":{},"name":{},"text":{"5":{}},"component":{}}],["advanc",{"_index":3349,"title":{},"name":{},"text":{"340":{}},"component":{}}],["advantag",{"_index":568,"title":{},"name":{},"text":{"3":{},"4":{},"86":{},"87":{},"216":{},"217":{},"259":{},"260":{}},"component":{}}],["af",{"_index":259,"title":{},"name":{},"text":{"3":{},"4":{},"57":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"86":{},"87":{},"113":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{},"165":{},"200":{},"216":{},"217":{},"226":{},"227":{},"228":{},"229":{},"230":{},"231":{},"232":{},"233":{},"234":{},"235":{},"236":{},"237":{},"259":{},"260":{},"276":{},"278":{},"279":{},"280":{},"281":{},"282":{},"283":{},"284":{},"285":{},"286":{},"287":{},"288":{},"289":{},"290":{},"291":{}},"component":{}}],["affect",{"_index":215,"title":{},"name":{},"text":{"3":{},"10":{},"16":{},"51":{},"86":{},"93":{},"99":{},"144":{},"174":{},"198":{},"216":{},"239":{},"259":{},"266":{},"337":{},"349":{}},"component":{}}],["afs/nio",{"_index":261,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["afs:one.microstream.afs.types,except",{"_index":314,"title":{},"name":{},"text":{"3":{}},"component":{}}],["afterread",{"_index":1541,"title":{},"name":{},"text":{"24":{},"127":{},"251":{},"315":{}},"component":{}}],["afterupd",{"_index":1535,"title":{},"name":{},"text":{"24":{},"127":{},"251":{},"315":{}},"component":{}}],["afterward",{"_index":2742,"title":{},"name":{},"text":{"78":{},"160":{},"233":{},"286":{}},"component":{}}],["ag",{"_index":2048,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["again",{"_index":885,"title":{},"name":{},"text":{"7":{},"10":{},"11":{},"14":{},"50":{},"61":{},"66":{},"90":{},"93":{},"94":{},"97":{},"118":{},"143":{},"168":{},"171":{},"174":{},"175":{},"178":{},"197":{},"205":{},"223":{},"240":{},"263":{},"266":{},"267":{},"270":{},"296":{},"336":{},"338":{},"350":{}},"component":{}}],["against",{"_index":2192,"title":{},"name":{},"text":{"50":{},"77":{},"143":{},"159":{},"197":{},"255":{},"319":{},"336":{}},"component":{}}],["aggress",{"_index":1012,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["ago",{"_index":1177,"title":{},"name":{},"text":{"12":{},"95":{},"176":{},"240":{},"268":{},"350":{}},"component":{}}],["aim",{"_index":2953,"title":{},"name":{},"text":{"116":{},"203":{},"294":{}},"component":{}}],["algorithm",{"_index":1070,"title":{},"name":{},"text":{"10":{},"50":{},"93":{},"143":{},"174":{},"197":{},"266":{},"336":{}},"component":{}}],["alibaba",{"_index":2908,"title":{},"name":{},"text":{"88":{},"218":{},"261":{}},"component":{}}],["allow",{"_index":631,"title":{},"name":{},"text":{"3":{},"23":{},"38":{},"42":{},"43":{},"45":{},"46":{},"47":{},"57":{},"59":{},"61":{},"77":{},"86":{},"97":{},"106":{},"107":{},"113":{},"115":{},"116":{},"118":{},"126":{},"141":{},"146":{},"147":{},"148":{},"159":{},"178":{},"190":{},"194":{},"195":{},"200":{},"202":{},"203":{},"205":{},"208":{},"209":{},"210":{},"216":{},"243":{},"246":{},"250":{},"259":{},"270":{},"271":{},"274":{},"275":{},"276":{},"293":{},"294":{},"296":{},"305":{},"314":{},"328":{},"329":{},"331":{},"332":{},"333":{},"347":{}},"component":{}}],["along",{"_index":808,"title":{},"name":{},"text":{"5":{},"29":{},"50":{},"62":{},"88":{},"119":{},"132":{},"143":{},"197":{},"206":{},"218":{},"257":{},"261":{},"298":{},"321":{},"336":{}},"component":{}}],["alreadi",{"_index":130,"title":{},"name":{},"text":{"2":{},"10":{},"12":{},"14":{},"47":{},"50":{},"52":{},"61":{},"85":{},"93":{},"95":{},"97":{},"102":{},"116":{},"118":{},"143":{},"145":{},"148":{},"174":{},"176":{},"178":{},"197":{},"199":{},"205":{},"210":{},"214":{},"240":{},"243":{},"246":{},"266":{},"268":{},"270":{},"271":{},"274":{},"275":{},"292":{},"296":{},"297":{},"333":{},"336":{},"340":{},"345":{},"350":{}},"component":{}}],["alter",{"_index":2045,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["altern",{"_index":1601,"title":{},"name":{},"text":{"28":{},"50":{},"51":{},"131":{},"143":{},"144":{},"197":{},"198":{},"256":{},"320":{},"336":{},"337":{}},"component":{}}],["although",{"_index":1231,"title":{},"name":{},"text":{"14":{},"32":{},"47":{},"51":{},"65":{},"67":{},"97":{},"135":{},"144":{},"148":{},"167":{},"169":{},"178":{},"184":{},"198":{},"210":{},"222":{},"224":{},"270":{},"324":{},"333":{},"337":{},"339":{},"343":{}},"component":{}}],["altogeth",{"_index":1949,"title":{},"name":{},"text":{"43":{},"50":{},"107":{},"143":{},"195":{},"197":{},"329":{},"336":{}},"component":{}}],["alway",{"_index":964,"title":{},"name":{},"text":{"9":{},"10":{},"21":{},"23":{},"26":{},"37":{},"50":{},"51":{},"67":{},"92":{},"93":{},"116":{},"124":{},"126":{},"129":{},"140":{},"143":{},"144":{},"169":{},"173":{},"174":{},"189":{},"197":{},"198":{},"203":{},"224":{},"240":{},"243":{},"248":{},"250":{},"253":{},"265":{},"266":{},"271":{},"294":{},"303":{},"312":{},"314":{},"317":{},"336":{},"337":{},"339":{},"350":{}},"component":{}}],["amazon",{"_index":777,"title":{},"name":{},"text":{"5":{},"69":{},"70":{},"88":{},"151":{},"152":{},"218":{},"226":{},"227":{},"261":{},"278":{},"279":{}},"component":{}}],["amicrostream.entity.appendable=tru",{"_index":1345,"title":{},"name":{},"text":{"20":{},"123":{},"247":{},"311":{}},"component":{}}],["amicrostream.entity.hashequalator=tru",{"_index":1344,"title":{},"name":{},"text":{"20":{},"123":{},"247":{},"311":{}},"component":{}}],["amicrostream.wrapper.types=one.microstream.persistence.types.persistencestor",{"_index":1593,"title":{},"name":{},"text":{"28":{},"131":{},"256":{},"320":{}},"component":{}}],["amount",{"_index":1017,"title":{},"name":{},"text":{"10":{},"25":{},"27":{},"55":{},"67":{},"77":{},"93":{},"111":{},"128":{},"130":{},"159":{},"169":{},"174":{},"181":{},"224":{},"252":{},"254":{},"266":{},"278":{},"279":{},"280":{},"281":{},"282":{},"283":{},"284":{},"285":{},"286":{},"287":{},"288":{},"289":{},"290":{},"291":{},"309":{},"316":{},"318":{},"339":{},"340":{}},"component":{}}],["analog",{"_index":2489,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["analys",{"_index":3267,"title":{},"name":{},"text":{"274":{}},"component":{}}],["analysi",{"_index":1959,"title":{},"name":{},"text":{"43":{},"50":{},"107":{},"143":{},"195":{},"197":{},"329":{},"336":{}},"component":{}}],["analyz",{"_index":1673,"title":{},"name":{},"text":{"32":{},"135":{},"184":{},"324":{}},"component":{}}],["android",{"_index":491,"title":{"31-4":{},"134-4":{},"183-4":{},"323-4":{}},"name":{},"text":{"3":{},"5":{},"31":{},"86":{},"88":{},"134":{},"183":{},"216":{},"218":{},"259":{},"261":{},"323":{}},"component":{}}],["anim",{"_index":1386,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["animal)super.entitydata",{"_index":1397,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["animal.java",{"_index":1385,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["animalcr",{"_index":1407,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["animalcreator.java",{"_index":1406,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["animaldata",{"_index":1401,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["animaldata(entityinst",{"_index":1419,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["animaldata(fin",{"_index":1402,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["animaldata.java",{"_index":1400,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["animalent",{"_index":1393,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["animalentity.java",{"_index":1392,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["animalupdat",{"_index":1425,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["animalupdater.java",{"_index":1424,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["annot",{"_index":1322,"title":{},"name":{},"text":{"19":{},"20":{},"23":{},"28":{},"29":{},"46":{},"50":{},"67":{},"122":{},"123":{},"126":{},"131":{},"132":{},"143":{},"147":{},"169":{},"197":{},"209":{},"224":{},"242":{},"243":{},"246":{},"247":{},"250":{},"256":{},"257":{},"271":{},"274":{},"275":{},"311":{},"314":{},"320":{},"321":{},"332":{},"336":{},"339":{},"352":{}},"component":{}}],["annoy",{"_index":1249,"title":{},"name":{},"text":{"14":{},"50":{},"97":{},"143":{},"178":{},"197":{},"270":{},"336":{}},"component":{}}],["anonym",{"_index":1720,"title":{},"name":{},"text":{"33":{},"136":{},"185":{},"325":{}},"component":{}}],["anoth",{"_index":128,"title":{},"name":{},"text":{"2":{},"3":{},"14":{},"24":{},"47":{},"50":{},"51":{},"57":{},"64":{},"66":{},"85":{},"86":{},"97":{},"113":{},"127":{},"143":{},"144":{},"148":{},"166":{},"168":{},"178":{},"197":{},"198":{},"200":{},"210":{},"214":{},"216":{},"221":{},"223":{},"246":{},"251":{},"259":{},"270":{},"275":{},"276":{},"304":{},"315":{},"333":{},"336":{},"337":{},"338":{},"342":{},"345":{},"347":{}},"component":{}}],["answer",{"_index":847,"title":{},"name":{},"text":{"7":{},"90":{},"171":{},"263":{}},"component":{}}],["anymor",{"_index":913,"title":{},"name":{},"text":{"8":{},"50":{},"67":{},"91":{},"143":{},"169":{},"172":{},"197":{},"224":{},"246":{},"264":{},"275":{},"336":{},"339":{}},"component":{}}],["anyth",{"_index":1222,"title":{},"name":{},"text":{"14":{},"37":{},"50":{},"51":{},"67":{},"97":{},"140":{},"143":{},"144":{},"169":{},"178":{},"189":{},"197":{},"198":{},"224":{},"270":{},"303":{},"336":{},"337":{},"339":{}},"component":{}}],["anytim",{"_index":2497,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["anyway",{"_index":1998,"title":{},"name":{},"text":{"46":{},"50":{},"51":{},"143":{},"144":{},"147":{},"197":{},"198":{},"209":{},"332":{},"336":{},"337":{}},"component":{}}],["anywher",{"_index":2196,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["apach",{"_index":669,"title":{},"name":{},"text":{"4":{},"87":{},"217":{},"260":{},"340":{}},"component":{}}],["apart",{"_index":896,"title":{},"name":{},"text":{"7":{},"49":{},"90":{},"150":{},"171":{},"212":{},"263":{},"335":{}},"component":{}}],["api",{"_index":70,"title":{"55":{},"111":{},"181":{},"309":{},"6-2":{},"89-2":{},"219-2":{},"262-2":{}},"name":{"55":{},"111":{},"181":{},"309":{}},"text":{"1":{},"3":{},"4":{},"5":{},"6":{},"11":{},"29":{},"39":{},"53":{},"54":{},"57":{},"64":{},"84":{},"86":{},"87":{},"88":{},"89":{},"94":{},"109":{},"110":{},"113":{},"132":{},"142":{},"166":{},"175":{},"179":{},"180":{},"191":{},"200":{},"213":{},"215":{},"216":{},"217":{},"218":{},"219":{},"220":{},"221":{},"246":{},"257":{},"259":{},"260":{},"261":{},"262":{},"267":{},"275":{},"276":{},"306":{},"307":{},"308":{},"321":{},"342":{},"344":{},"346":{},"347":{}},"component":{}}],["app",{"_index":196,"title":{},"name":{},"text":{"3":{},"4":{},"53":{},"54":{},"67":{},"86":{},"87":{},"109":{},"110":{},"169":{},"179":{},"180":{},"216":{},"217":{},"224":{},"259":{},"260":{},"281":{},"307":{},"308":{},"339":{}},"component":{}}],["app/06.01.00",{"_index":2928,"title":{},"name":{},"text":{"109":{}},"component":{}}],["app/07.01.00",{"_index":2965,"title":{},"name":{},"text":{"179":{}},"component":{}}],["app/08.01.01",{"_index":3348,"title":{},"name":{},"text":{"307":{}},"component":{}}],["app:one.microstream.storage.restclient.app.typ",{"_index":374,"title":{},"name":{},"text":{"3":{}},"component":{}}],["app:{maven",{"_index":2960,"title":{},"name":{},"text":{"179":{},"307":{}},"component":{}}],["appear",{"_index":507,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["append",{"_index":1352,"title":{},"name":{},"text":{"20":{},"23":{},"123":{},"126":{},"247":{},"250":{},"311":{},"314":{}},"component":{}}],["append(this.person.firstnam",{"_index":1530,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["append(this.person.lastnam",{"_index":1529,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["appendto(fin",{"_index":1526,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["appli",{"_index":1052,"title":{},"name":{},"text":{"10":{},"20":{},"50":{},"51":{},"72":{},"78":{},"93":{},"123":{},"143":{},"144":{},"154":{},"160":{},"174":{},"197":{},"198":{},"229":{},"233":{},"243":{},"246":{},"247":{},"266":{},"271":{},"274":{},"275":{},"278":{},"279":{},"280":{},"281":{},"282":{},"283":{},"284":{},"285":{},"286":{},"287":{},"288":{},"289":{},"290":{},"291":{},"311":{},"336":{},"337":{}},"component":{}}],["applic",{"_index":111,"title":{"7":{},"90":{},"171":{},"263":{},"14-1":{},"40-1":{},"47-2":{},"97-1":{},"104-1":{},"148-2":{},"178-1":{},"192-1":{},"210-2":{},"270-1":{},"326-1":{},"333-2":{}},"name":{"7":{},"90":{},"171":{},"263":{}},"text":{"2":{},"3":{},"4":{},"7":{},"9":{},"10":{},"12":{},"13":{},"14":{},"30":{},"31":{},"36":{},"40":{},"44":{},"45":{},"47":{},"49":{},"50":{},"51":{},"54":{},"67":{},"74":{},"77":{},"85":{},"86":{},"87":{},"90":{},"92":{},"93":{},"95":{},"96":{},"97":{},"104":{},"108":{},"110":{},"116":{},"133":{},"134":{},"139":{},"143":{},"144":{},"146":{},"148":{},"150":{},"156":{},"159":{},"169":{},"171":{},"173":{},"174":{},"176":{},"177":{},"178":{},"180":{},"182":{},"183":{},"188":{},"192":{},"196":{},"197":{},"198":{},"203":{},"208":{},"210":{},"212":{},"214":{},"215":{},"216":{},"217":{},"224":{},"240":{},"243":{},"246":{},"258":{},"259":{},"260":{},"263":{},"265":{},"266":{},"268":{},"269":{},"270":{},"271":{},"274":{},"275":{},"281":{},"294":{},"302":{},"308":{},"310":{},"322":{},"323":{},"326":{},"330":{},"331":{},"333":{},"335":{},"336":{},"337":{},"339":{},"340":{},"345":{},"346":{},"350":{}},"component":{}}],["application'",{"_index":1239,"title":{},"name":{},"text":{"14":{},"97":{},"178":{},"270":{}},"component":{}}],["application.properti",{"_index":1291,"title":{},"name":{},"text":{"17":{},"18":{},"100":{},"121":{},"240":{},"241":{},"274":{},"350":{},"351":{}},"component":{}}],["application.yml",{"_index":1301,"title":{},"name":{},"text":{"17":{},"18":{},"100":{},"121":{},"240":{},"241":{},"350":{},"351":{}},"component":{}}],["application’",{"_index":32,"title":{},"name":{},"text":{"1":{},"9":{},"10":{},"12":{},"45":{},"47":{},"49":{},"84":{},"92":{},"93":{},"95":{},"146":{},"148":{},"150":{},"173":{},"174":{},"176":{},"208":{},"210":{},"212":{},"213":{},"265":{},"266":{},"268":{},"331":{},"333":{},"335":{},"344":{}},"component":{}}],["approach",{"_index":1233,"title":{},"name":{},"text":{"14":{},"47":{},"50":{},"67":{},"97":{},"116":{},"143":{},"148":{},"169":{},"178":{},"197":{},"203":{},"210":{},"224":{},"246":{},"270":{},"275":{},"294":{},"333":{},"336":{},"339":{}},"component":{}}],["appropri",{"_index":1279,"title":{},"name":{},"text":{"16":{},"50":{},"99":{},"143":{},"197":{},"239":{},"259":{},"275":{},"336":{},"349":{}},"component":{}}],["approxim",{"_index":2477,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["arbitrari",{"_index":1055,"title":{},"name":{},"text":{"10":{},"23":{},"25":{},"27":{},"43":{},"93":{},"107":{},"126":{},"128":{},"130":{},"174":{},"195":{},"250":{},"252":{},"254":{},"266":{},"314":{},"316":{},"318":{},"329":{}},"component":{}}],["arbitrarili",{"_index":1994,"title":{},"name":{},"text":{"45":{},"146":{},"208":{},"331":{}},"component":{}}],["arc.container().select(storagemanager.class).get",{"_index":3264,"title":{},"name":{},"text":{"274":{}},"component":{}}],["archer",{"_index":1564,"title":{},"name":{},"text":{"27":{},"130":{},"254":{},"318":{}},"component":{}}],["architectur",{"_index":587,"title":{},"name":{},"text":{"3":{},"29":{},"86":{},"132":{},"216":{},"257":{},"259":{},"321":{}},"component":{}}],["area",{"_index":985,"title":{},"name":{},"text":{"10":{},"67":{},"93":{},"169":{},"174":{},"224":{},"266":{},"339":{}},"component":{}}],["areadablefil",{"_index":1139,"title":{},"name":{},"text":{"11":{},"94":{},"175":{}},"component":{}}],["aren’t",{"_index":1219,"title":{},"name":{},"text":{"14":{},"97":{},"178":{},"270":{}},"component":{}}],["arg",{"_index":2990,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["args[2].tochararray",{"_index":3033,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["argument",{"_index":1348,"title":{},"name":{},"text":{"20":{},"77":{},"123":{},"159":{},"243":{},"246":{},"247":{},"271":{},"274":{},"275":{},"311":{}},"component":{}}],["around",{"_index":602,"title":{},"name":{},"text":{"3":{},"49":{},"50":{},"51":{},"67":{},"86":{},"143":{},"144":{},"150":{},"169":{},"197":{},"198":{},"212":{},"216":{},"224":{},"259":{},"335":{},"336":{},"337":{},"339":{}},"component":{}}],["array",{"_index":558,"title":{},"name":{},"text":{"3":{},"9":{},"32":{},"33":{},"43":{},"50":{},"62":{},"86":{},"92":{},"107":{},"119":{},"135":{},"136":{},"143":{},"173":{},"184":{},"185":{},"195":{},"197":{},"206":{},"216":{},"220":{},"259":{},"265":{},"298":{},"324":{},"325":{},"329":{},"336":{},"347":{}},"component":{}}],["arraydequ",{"_index":1707,"title":{},"name":{},"text":{"32":{},"135":{},"184":{},"324":{}},"component":{}}],["arraylist",{"_index":1696,"title":{},"name":{},"text":{"32":{},"67":{},"135":{},"169":{},"184":{},"224":{},"324":{},"339":{}},"component":{}}],["arriv",{"_index":3163,"title":{},"name":{},"text":{"246":{},"275":{}},"component":{}}],["articlecount",{"_index":2106,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["artifact",{"_index":179,"title":{"3-9":{},"86-15":{},"216-22":{},"259-31":{}},"name":{},"text":{"3":{},"4":{},"35":{},"86":{},"87":{},"103":{},"138":{},"187":{},"216":{},"217":{},"243":{},"246":{},"259":{},"260":{},"271":{},"275":{},"301":{}},"component":{}}],["artifact:packag",{"_index":312,"title":{},"name":{},"text":{"3":{}},"component":{}}],["artifactid",{"_index":695,"title":{},"name":{},"text":{"4":{},"54":{},"87":{},"110":{},"180":{},"217":{},"260":{},"308":{}},"component":{}}],["artifact’",{"_index":206,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["ask",{"_index":2247,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["aspect",{"_index":1461,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{},"340":{}},"component":{}}],["ass",{"_index":2198,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["assign",{"_index":941,"title":{},"name":{},"text":{"9":{},"51":{},"60":{},"92":{},"117":{},"144":{},"173":{},"198":{},"204":{},"243":{},"246":{},"265":{},"271":{},"274":{},"275":{},"295":{},"337":{}},"component":{}}],["associ",{"_index":1224,"title":{},"name":{},"text":{"14":{},"50":{},"62":{},"77":{},"97":{},"119":{},"143":{},"159":{},"178":{},"197":{},"206":{},"243":{},"246":{},"270":{},"271":{},"274":{},"275":{},"298":{},"336":{}},"component":{}}],["assum",{"_index":2075,"title":{},"name":{},"text":{"50":{},"51":{},"143":{},"144":{},"197":{},"198":{},"336":{},"337":{}},"component":{}}],["async",{"_index":2663,"title":{},"name":{},"text":{"75":{},"77":{},"157":{},"159":{},"231":{},"284":{}},"component":{}}],["asynchron",{"_index":2712,"title":{},"name":{},"text":{"77":{},"159":{},"275":{}},"component":{}}],["atom",{"_index":2021,"title":{},"name":{},"text":{"49":{},"62":{},"119":{},"150":{},"206":{},"212":{},"298":{},"335":{}},"component":{}}],["attach",{"_index":1197,"title":{},"name":{},"text":{"12":{},"95":{},"176":{},"268":{}},"component":{}}],["attempt",{"_index":2042,"title":{},"name":{},"text":{"50":{},"69":{},"70":{},"77":{},"143":{},"151":{},"152":{},"159":{},"197":{},"226":{},"227":{},"278":{},"279":{},"336":{}},"component":{}}],["attent",{"_index":2913,"title":{},"name":{},"text":{"97":{},"178":{},"270":{}},"component":{}}],["attr",{"_index":2727,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["attribut",{"_index":2728,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["audit",{"_index":2447,"title":{},"name":{},"text":{"66":{},"168":{},"223":{},"338":{}},"component":{}}],["auth",{"_index":2645,"title":{},"name":{},"text":{"74":{},"156":{},"281":{}},"component":{}}],["authent",{"_index":2017,"title":{"49-5":{},"150-5":{},"212-5":{},"335-5":{}},"name":{},"text":{"74":{},"77":{},"78":{},"156":{},"159":{},"160":{},"215":{},"233":{},"286":{},"346":{}},"component":{}}],["authentication/databas",{"_index":2741,"title":{},"name":{},"text":{"78":{},"160":{},"233":{},"286":{}},"component":{}}],["author",{"_index":2018,"title":{"49-5":{},"150-5":{},"212-5":{},"335-5":{}},"name":{},"text":{"281":{}},"component":{}}],["auto",{"_index":517,"title":{},"name":{},"text":{"3":{},"27":{},"86":{},"130":{},"216":{},"254":{},"259":{},"318":{}},"component":{}}],["autoconfigur",{"_index":3271,"title":{},"name":{},"text":{"275":{}},"component":{}}],["automat",{"_index":245,"title":{"50-1":{},"66-2":{},"143-1":{},"168-2":{},"197-1":{},"223-2":{},"336-1":{},"338-2":{}},"name":{},"text":{"3":{},"10":{},"12":{},"14":{},"29":{},"33":{},"43":{},"46":{},"47":{},"50":{},"51":{},"52":{},"62":{},"66":{},"69":{},"70":{},"86":{},"93":{},"95":{},"97":{},"107":{},"119":{},"132":{},"136":{},"143":{},"144":{},"145":{},"147":{},"148":{},"151":{},"152":{},"168":{},"174":{},"176":{},"178":{},"185":{},"195":{},"197":{},"198":{},"199":{},"206":{},"209":{},"210":{},"215":{},"216":{},"223":{},"226":{},"227":{},"257":{},"259":{},"266":{},"268":{},"270":{},"278":{},"279":{},"292":{},"298":{},"321":{},"325":{},"329":{},"332":{},"333":{},"336":{},"337":{},"338":{},"346":{}},"component":{}}],["avail",{"_index":38,"title":{"347-6":{}},"name":{},"text":{"1":{},"3":{},"5":{},"6":{},"7":{},"16":{},"34":{},"35":{},"37":{},"38":{},"39":{},"43":{},"49":{},"50":{},"51":{},"59":{},"61":{},"65":{},"84":{},"86":{},"88":{},"89":{},"90":{},"99":{},"102":{},"103":{},"107":{},"115":{},"118":{},"137":{},"138":{},"140":{},"141":{},"142":{},"143":{},"144":{},"150":{},"167":{},"171":{},"182":{},"186":{},"187":{},"189":{},"190":{},"191":{},"195":{},"197":{},"198":{},"202":{},"205":{},"212":{},"213":{},"215":{},"216":{},"218":{},"219":{},"222":{},"239":{},"243":{},"245":{},"246":{},"259":{},"261":{},"262":{},"263":{},"271":{},"273":{},"274":{},"275":{},"293":{},"296":{},"297":{},"300":{},"301":{},"303":{},"305":{},"306":{},"310":{},"329":{},"335":{},"336":{},"337":{},"343":{},"344":{},"346":{},"349":{}},"component":{}}],["avoid",{"_index":485,"title":{},"name":{},"text":{"3":{},"10":{},"14":{},"15":{},"37":{},"44":{},"50":{},"86":{},"93":{},"97":{},"98":{},"108":{},"140":{},"143":{},"174":{},"178":{},"189":{},"196":{},"197":{},"216":{},"238":{},"259":{},"266":{},"270":{},"303":{},"330":{},"336":{},"348":{}},"component":{}}],["aw",{"_index":269,"title":{"69":{},"70":{},"151":{},"152":{},"226":{},"227":{},"278":{},"279":{}},"name":{"69":{},"70":{},"151":{},"152":{},"226":{},"227":{},"278":{},"279":{}},"text":{"3":{},"4":{},"69":{},"70":{},"86":{},"87":{},"151":{},"152":{},"200":{},"216":{},"217":{},"226":{},"227":{},"259":{},"260":{},"276":{},"278":{},"279":{}},"component":{}}],["await",{"_index":2985,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["awar",{"_index":1588,"title":{},"name":{},"text":{"27":{},"130":{},"246":{},"254":{},"275":{},"318":{}},"component":{}}],["away",{"_index":2077,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["aws.accesskeyid",{"_index":2545,"title":{},"name":{},"text":{"69":{},"70":{},"151":{},"152":{},"226":{},"227":{},"278":{},"279":{}},"component":{}}],["aws.region",{"_index":2534,"title":{},"name":{},"text":{"69":{},"70":{},"151":{},"152":{},"226":{},"227":{},"278":{},"279":{}},"component":{}}],["aws.secretaccesskey",{"_index":2546,"title":{},"name":{},"text":{"69":{},"70":{},"151":{},"152":{},"226":{},"227":{},"278":{},"279":{}},"component":{}}],["aws.secretkey",{"_index":2550,"title":{},"name":{},"text":{"69":{},"70":{},"151":{},"152":{},"226":{},"227":{},"278":{},"279":{}},"component":{}}],["aws.sessiontoken",{"_index":2547,"title":{},"name":{},"text":{"69":{},"70":{},"151":{},"152":{},"226":{},"227":{},"278":{},"279":{}},"component":{}}],["aws/credenti",{"_index":2552,"title":{},"name":{},"text":{"69":{},"70":{},"151":{},"152":{},"226":{},"227":{},"278":{},"279":{}},"component":{}}],["aws_access_key_id",{"_index":2542,"title":{},"name":{},"text":{"69":{},"70":{},"151":{},"152":{},"226":{},"227":{},"278":{},"279":{}},"component":{}}],["aws_container_credentials_relative_uri",{"_index":2554,"title":{},"name":{},"text":{"69":{},"70":{},"151":{},"152":{},"226":{},"227":{},"278":{},"279":{}},"component":{}}],["aws_region",{"_index":2535,"title":{},"name":{},"text":{"69":{},"70":{},"151":{},"152":{},"226":{},"227":{},"278":{},"279":{}},"component":{}}],["aws_secret_access_key",{"_index":2543,"title":{},"name":{},"text":{"69":{},"70":{},"151":{},"152":{},"226":{},"227":{},"278":{},"279":{}},"component":{}}],["aws_session_token",{"_index":2544,"title":{},"name":{},"text":{"69":{},"70":{},"151":{},"152":{},"226":{},"227":{},"278":{},"279":{}},"component":{}}],["azul",{"_index":779,"title":{},"name":{},"text":{"5":{},"88":{},"218":{},"261":{}},"component":{}}],["azur",{"_index":273,"title":{"71":{},"153":{},"228":{},"280":{}},"name":{"71":{},"153":{},"228":{},"280":{}},"text":{"3":{},"4":{},"71":{},"86":{},"87":{},"153":{},"216":{},"217":{},"228":{},"259":{},"260":{},"280":{}},"component":{}}],["azurestorageconnector.caching(cli",{"_index":2563,"title":{},"name":{},"text":{"71":{},"153":{},"228":{},"280":{}},"component":{}}],["b",{"_index":1382,"title":{},"name":{},"text":{"22":{},"56":{},"112":{},"125":{},"182":{},"249":{},"310":{},"313":{}},"component":{}}],["back",{"_index":72,"title":{},"name":{},"text":{"1":{},"2":{},"4":{},"9":{},"16":{},"17":{},"49":{},"57":{},"84":{},"85":{},"87":{},"92":{},"97":{},"99":{},"100":{},"113":{},"116":{},"150":{},"173":{},"178":{},"200":{},"203":{},"212":{},"213":{},"214":{},"215":{},"217":{},"239":{},"240":{},"260":{},"265":{},"270":{},"276":{},"294":{},"335":{},"344":{},"345":{},"346":{},"349":{},"350":{}},"component":{}}],["background",{"_index":968,"title":{"340-1":{}},"name":{},"text":{"10":{},"66":{},"93":{},"168":{},"174":{},"223":{},"266":{},"338":{}},"component":{}}],["backup",{"_index":242,"title":{"64":{},"65":{},"166":{},"167":{},"221":{},"222":{},"342":{},"343":{},"49-3":{},"150-3":{},"212-3":{},"335-3":{}},"name":{"64":{},"65":{},"166":{},"167":{},"221":{},"222":{},"342":{},"343":{}},"text":{"3":{},"11":{},"37":{},"49":{},"64":{},"65":{},"86":{},"94":{},"140":{},"150":{},"166":{},"167":{},"175":{},"189":{},"212":{},"216":{},"221":{},"222":{},"259":{},"267":{},"303":{},"335":{},"342":{},"343":{}},"component":{}}],["backupdir",{"_index":2425,"title":{},"name":{},"text":{"64":{},"166":{},"221":{},"342":{}},"component":{}}],["backupdirectori",{"_index":413,"title":{},"name":{},"text":{"3":{},"64":{},"86":{},"166":{},"216":{},"221":{},"259":{},"342":{}},"component":{}}],["backupsetup",{"_index":2426,"title":{},"name":{},"text":{"64":{},"166":{},"221":{},"342":{}},"component":{}}],["backward",{"_index":2199,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["bak",{"_index":1819,"title":{},"name":{},"text":{"37":{},"140":{},"189":{},"303":{}},"component":{}}],["bare",{"_index":2503,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["base",{"_index":222,"title":{},"name":{},"text":{"3":{},"4":{},"10":{},"16":{},"20":{},"22":{},"28":{},"29":{},"30":{},"31":{},"35":{},"37":{},"38":{},"46":{},"50":{},"53":{},"56":{},"57":{},"72":{},"74":{},"86":{},"87":{},"93":{},"99":{},"109":{},"112":{},"113":{},"123":{},"125":{},"131":{},"132":{},"133":{},"134":{},"138":{},"140":{},"141":{},"143":{},"147":{},"154":{},"156":{},"174":{},"179":{},"182":{},"183":{},"187":{},"189":{},"190":{},"197":{},"200":{},"209":{},"215":{},"216":{},"217":{},"220":{},"229":{},"239":{},"243":{},"246":{},"247":{},"249":{},"256":{},"257":{},"258":{},"259":{},"260":{},"266":{},"271":{},"275":{},"276":{},"282":{},"301":{},"303":{},"305":{},"307":{},"310":{},"311":{},"313":{},"320":{},"321":{},"322":{},"323":{},"332":{},"336":{},"340":{},"346":{},"347":{},"349":{}},"component":{}}],["base:one.microstream.af",{"_index":313,"title":{},"name":{},"text":{"3":{}},"component":{}}],["base:one.microstream.afs.nio",{"_index":315,"title":{},"name":{},"text":{"3":{}},"component":{}}],["basedirectori",{"_index":407,"title":{},"name":{},"text":{"3":{},"17":{},"86":{},"100":{},"216":{},"240":{},"259":{},"350":{}},"component":{}}],["basewrapperpersistencestor",{"_index":1634,"title":{},"name":{},"text":{"29":{},"132":{},"257":{},"321":{}},"component":{}}],["basewrapperpersistencestoring(fin",{"_index":1635,"title":{},"name":{},"text":{"29":{},"132":{},"257":{},"321":{}},"component":{}}],["basi",{"_index":2001,"title":{},"name":{},"text":{"46":{},"147":{},"209":{},"332":{}},"component":{}}],["basic",{"_index":81,"title":{"2-2":{},"85-2":{},"214-2":{},"345-2":{}},"name":{},"text":{"4":{},"7":{},"10":{},"12":{},"23":{},"41":{},"50":{},"52":{},"71":{},"87":{},"90":{},"93":{},"95":{},"105":{},"126":{},"143":{},"145":{},"153":{},"171":{},"174":{},"176":{},"193":{},"197":{},"199":{},"215":{},"217":{},"228":{},"250":{},"260":{},"263":{},"266":{},"268":{},"280":{},"292":{},"314":{},"327":{},"336":{},"346":{}},"component":{}}],["batch",{"_index":3158,"title":{},"name":{},"text":{"246":{},"275":{}},"component":{}}],["bazel",{"_index":676,"title":{},"name":{},"text":{"4":{},"87":{},"217":{},"260":{}},"component":{}}],["be",{"_index":147,"title":{},"name":{},"text":{"2":{},"3":{},"34":{},"37":{},"46":{},"49":{},"50":{},"85":{},"86":{},"97":{},"137":{},"140":{},"143":{},"147":{},"150":{},"178":{},"186":{},"189":{},"197":{},"209":{},"212":{},"214":{},"216":{},"246":{},"259":{},"270":{},"275":{},"300":{},"303":{},"332":{},"335":{},"336":{},"345":{}},"component":{}}],["bean",{"_index":3120,"title":{},"name":{},"text":{"243":{},"246":{},"271":{},"274":{},"275":{}},"component":{}}],["beanmanag",{"_index":3253,"title":{},"name":{},"text":{"271":{}},"component":{}}],["beansexcept",{"_index":3161,"title":{},"name":{},"text":{"246":{},"275":{}},"component":{}}],["bear",{"_index":2607,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["becom",{"_index":842,"title":{},"name":{},"text":{"7":{},"10":{},"50":{},"67":{},"90":{},"93":{},"143":{},"169":{},"171":{},"174":{},"197":{},"224":{},"263":{},"266":{},"336":{},"339":{}},"component":{}}],["bee",{"_index":1381,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["beeing.java",{"_index":1380,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["befor",{"_index":866,"title":{},"name":{},"text":{"7":{},"27":{},"60":{},"61":{},"66":{},"67":{},"68":{},"74":{},"77":{},"90":{},"117":{},"118":{},"130":{},"156":{},"159":{},"168":{},"169":{},"170":{},"171":{},"204":{},"205":{},"216":{},"223":{},"224":{},"225":{},"240":{},"246":{},"254":{},"259":{},"263":{},"275":{},"295":{},"296":{},"318":{},"338":{},"339":{},"341":{},"347":{},"350":{}},"component":{}}],["beforeupd",{"_index":1542,"title":{},"name":{},"text":{"24":{},"127":{},"251":{},"315":{}},"component":{}}],["begin",{"_index":1854,"title":{},"name":{},"text":{"37":{},"140":{},"189":{},"303":{}},"component":{}}],["behav",{"_index":3363,"title":{},"name":{},"text":{"340":{}},"component":{}}],["behavior",{"_index":915,"title":{"42":{},"106":{},"194":{},"328":{}},"name":{"42":{},"106":{},"194":{},"328":{}},"text":{"8":{},"14":{},"42":{},"43":{},"61":{},"63":{},"91":{},"97":{},"106":{},"107":{},"118":{},"120":{},"172":{},"178":{},"194":{},"195":{},"205":{},"207":{},"264":{},"265":{},"270":{},"296":{},"299":{},"328":{},"329":{},"347":{}},"component":{}}],["behaviour",{"_index":2822,"title":{},"name":{},"text":{"86":{},"216":{},"246":{},"259":{},"274":{},"275":{},"304":{}},"component":{}}],["bellsoft",{"_index":781,"title":{},"name":{},"text":{"5":{},"88":{},"218":{},"261":{}},"component":{}}],["belong",{"_index":1002,"title":{},"name":{},"text":{"10":{},"14":{},"50":{},"93":{},"97":{},"143":{},"174":{},"178":{},"197":{},"266":{},"270":{},"336":{}},"component":{}}],["below",{"_index":220,"title":{},"name":{},"text":{"3":{},"10":{},"51":{},"60":{},"86":{},"93":{},"117":{},"144":{},"174":{},"198":{},"204":{},"216":{},"259":{},"266":{},"267":{},"295":{},"337":{}},"component":{}}],["benefit",{"_index":2919,"title":{},"name":{},"text":{"97":{},"178":{},"270":{}},"component":{}}],["bennett",{"_index":1565,"title":{},"name":{},"text":{"27":{},"130":{},"254":{},"318":{}},"component":{}}],["besid",{"_index":2404,"title":{},"name":{},"text":{"61":{},"62":{},"118":{},"119":{},"205":{},"206":{},"243":{},"246":{},"271":{},"274":{},"275":{},"296":{},"298":{}},"component":{}}],["best",{"_index":137,"title":{"59":{},"115":{},"202":{},"293":{}},"name":{"59":{},"115":{},"202":{},"293":{}},"text":{"2":{},"9":{},"10":{},"13":{},"14":{},"28":{},"29":{},"37":{},"50":{},"74":{},"85":{},"92":{},"93":{},"96":{},"97":{},"131":{},"132":{},"140":{},"143":{},"156":{},"173":{},"174":{},"177":{},"178":{},"189":{},"197":{},"214":{},"256":{},"257":{},"265":{},"266":{},"269":{},"270":{},"303":{},"320":{},"321":{},"336":{},"345":{}},"component":{}}],["better",{"_index":482,"title":{},"name":{},"text":{"3":{},"11":{},"12":{},"29":{},"50":{},"51":{},"67":{},"86":{},"94":{},"95":{},"97":{},"132":{},"143":{},"144":{},"169":{},"175":{},"176":{},"178":{},"197":{},"198":{},"216":{},"224":{},"257":{},"259":{},"267":{},"268":{},"270":{},"321":{},"336":{},"337":{},"339":{}},"component":{}}],["between",{"_index":705,"title":{},"name":{},"text":{"4":{},"7":{},"10":{},"14":{},"27":{},"50":{},"87":{},"90":{},"93":{},"97":{},"130":{},"143":{},"171":{},"174":{},"178":{},"197":{},"217":{},"243":{},"246":{},"254":{},"260":{},"263":{},"266":{},"270":{},"271":{},"275":{},"318":{},"336":{}},"component":{}}],["big",{"_index":996,"title":{"45-2":{},"146-2":{},"208-2":{},"331-2":{}},"name":{},"text":{"10":{},"45":{},"93":{},"146":{},"174":{},"208":{},"266":{},"331":{}},"component":{}}],["bigdecim",{"_index":574,"title":{},"name":{},"text":{"3":{},"32":{},"86":{},"135":{},"184":{},"216":{},"259":{},"324":{}},"component":{}}],["biginteg",{"_index":1681,"title":{},"name":{},"text":{"32":{},"135":{},"184":{},"324":{}},"component":{}}],["biject",{"_index":2035,"title":{},"name":{},"text":{"49":{},"66":{},"150":{},"168":{},"212":{},"223":{},"335":{},"338":{}},"component":{}}],["bill",{"_index":3304,"title":{},"name":{},"text":{"281":{}},"component":{}}],["bin",{"_index":1102,"title":{},"name":{},"text":{"11":{},"38":{},"94":{},"141":{},"175":{},"190":{},"305":{}},"component":{}}],["binari",{"_index":266,"title":{"43-2":{},"107-2":{},"195-2":{},"329-2":{}},"name":{},"text":{"3":{},"4":{},"11":{},"32":{},"43":{},"49":{},"50":{},"74":{},"86":{},"87":{},"94":{},"107":{},"135":{},"136":{},"143":{},"150":{},"156":{},"175":{},"184":{},"185":{},"195":{},"197":{},"212":{},"215":{},"216":{},"217":{},"220":{},"259":{},"260":{},"267":{},"324":{},"325":{},"329":{},"335":{},"336":{},"340":{},"346":{},"347":{}},"component":{}}],["binary#typehandl",{"_index":1950,"title":{},"name":{},"text":{"43":{},"107":{},"195":{},"329":{}},"component":{}}],["binary.field_double(\"salari",{"_index":1976,"title":{},"name":{},"text":{"43":{},"107":{},"195":{},"329":{}},"component":{}}],["binary.field_long(\"dateofbirth",{"_index":1972,"title":{},"name":{},"text":{"43":{},"107":{},"195":{},"329":{}},"component":{}}],["binary.field_long(\"id",{"_index":1967,"title":{},"name":{},"text":{"43":{},"107":{},"195":{},"329":{}},"component":{}}],["binary.typehandl",{"_index":1965,"title":{},"name":{},"text":{"43":{},"107":{},"195":{},"329":{}},"component":{}}],["binary:one.microstream.communication.binary.typ",{"_index":324,"title":{},"name":{},"text":{"3":{}},"component":{}}],["binary:one.microstream.persistence.binary.java",{"_index":360,"title":{},"name":{},"text":{"3":{}},"component":{}}],["binary:one.microstream.persistence.binary.one.microstream.collect",{"_index":350,"title":{},"name":{},"text":{"3":{}},"component":{}}],["binary:one.microstream.persistence.binary.one.microstream.ent",{"_index":352,"title":{},"name":{},"text":{"3":{}},"component":{}}],["binary:one.microstream.persistence.binary.one.microstream.persistence.typ",{"_index":354,"title":{},"name":{},"text":{"3":{}},"component":{}}],["binary:one.microstream.persistence.binary.one.microstream.refer",{"_index":356,"title":{},"name":{},"text":{"3":{}},"component":{}}],["binary:one.microstream.persistence.binary.one.microstream.util",{"_index":358,"title":{},"name":{},"text":{"3":{}},"component":{}}],["binaryfield",{"_index":1937,"title":{},"name":{},"text":{"43":{},"107":{},"195":{},"329":{}},"component":{}}],["binarytypehandl",{"_index":1963,"title":{},"name":{},"text":{"43":{},"107":{},"195":{},"329":{}},"component":{}}],["binaryvaluesett",{"_index":2163,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["binaryvaluetransl",{"_index":2161,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["bind",{"_index":3012,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["bingo",{"_index":2479,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["bit",{"_index":1993,"title":{},"name":{},"text":{"45":{},"50":{},"51":{},"67":{},"143":{},"144":{},"146":{},"169":{},"197":{},"198":{},"208":{},"224":{},"331":{},"336":{},"337":{},"339":{}},"component":{}}],["bla",{"_index":2486,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["bloat",{"_index":2458,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["blob",{"_index":728,"title":{},"name":{},"text":{"4":{},"71":{},"87":{},"153":{},"217":{},"228":{},"260":{},"280":{}},"component":{}}],["blobservicecli",{"_index":2562,"title":{},"name":{},"text":{"71":{},"153":{},"228":{},"280":{}},"component":{}}],["blobstor",{"_index":275,"title":{},"name":{},"text":{"3":{},"4":{},"86":{},"87":{},"216":{},"217":{},"259":{},"260":{}},"component":{}}],["blobstore:one.microstream.enterprise.afs.blobstore.typ",{"_index":332,"title":{},"name":{},"text":{"3":{}},"component":{}}],["blobstorefilesystem",{"_index":2522,"title":{},"name":{},"text":{"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"200":{},"226":{},"227":{},"228":{},"229":{},"230":{},"231":{},"232":{},"233":{},"276":{},"278":{},"279":{},"280":{},"281":{},"282":{},"283":{},"284":{},"285":{},"286":{}},"component":{}}],["blobstorefilesystem.new",{"_index":2523,"title":{},"name":{},"text":{"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"200":{},"226":{},"227":{},"228":{},"229":{},"230":{},"231":{},"232":{},"233":{},"276":{},"278":{},"279":{},"280":{},"281":{},"282":{},"283":{},"284":{},"285":{},"286":{}},"component":{}}],["block",{"_index":729,"title":{},"name":{},"text":{"4":{},"49":{},"57":{},"74":{},"86":{},"87":{},"113":{},"150":{},"156":{},"200":{},"212":{},"216":{},"217":{},"259":{},"260":{},"276":{},"304":{},"335":{},"340":{}},"component":{}}],["boilerpl",{"_index":1632,"title":{},"name":{},"text":{"29":{},"132":{},"257":{},"321":{}},"component":{}}],["bookstor",{"_index":1652,"title":{"31-2":{},"134-2":{},"183-2":{},"323-2":{}},"name":{},"text":{"31":{},"134":{},"183":{},"323":{}},"component":{}}],["boolean",{"_index":1427,"title":{},"name":{},"text":{"22":{},"23":{},"24":{},"32":{},"42":{},"55":{},"106":{},"111":{},"125":{},"126":{},"127":{},"135":{},"181":{},"184":{},"194":{},"239":{},"249":{},"250":{},"251":{},"309":{},"313":{},"314":{},"315":{},"324":{},"328":{},"349":{}},"component":{}}],["boost",{"_index":2380,"title":{},"name":{},"text":{"59":{},"115":{},"202":{},"293":{}},"component":{}}],["boot",{"_index":239,"title":{"103":{},"246":{},"275":{}},"name":{"103":{},"246":{},"275":{}},"text":{"3":{},"19":{},"86":{},"87":{},"102":{},"103":{},"122":{},"216":{},"217":{},"242":{},"245":{},"246":{},"259":{},"260":{},"273":{},"275":{},"352":{}},"component":{}}],["boot3",{"_index":3270,"title":{},"name":{},"text":{"275":{}},"component":{}}],["both",{"_index":615,"title":{},"name":{},"text":{"3":{},"4":{},"12":{},"14":{},"17":{},"36":{},"50":{},"77":{},"86":{},"87":{},"95":{},"97":{},"100":{},"139":{},"143":{},"159":{},"176":{},"178":{},"188":{},"197":{},"216":{},"217":{},"240":{},"246":{},"259":{},"260":{},"268":{},"270":{},"275":{},"302":{},"336":{},"350":{}},"component":{}}],["bound",{"_index":250,"title":{},"name":{},"text":{"3":{},"10":{},"46":{},"86":{},"93":{},"147":{},"174":{},"209":{},"216":{},"259":{},"266":{},"332":{}},"component":{}}],["box",{"_index":1790,"title":{},"name":{},"text":{"35":{},"138":{},"187":{},"301":{}},"component":{}}],["break",{"_index":198,"title":{"246-1":{},"275-1":{}},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["bring",{"_index":751,"title":{},"name":{},"text":{"4":{},"12":{},"29":{},"48":{},"87":{},"95":{},"132":{},"149":{},"176":{},"211":{},"217":{},"257":{},"260":{},"268":{},"321":{},"334":{}},"component":{}}],["broken",{"_index":194,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["brought",{"_index":1951,"title":{},"name":{},"text":{"43":{},"107":{},"195":{},"329":{}},"component":{}}],["brows",{"_index":2284,"title":{},"name":{},"text":{"53":{},"109":{},"179":{},"307":{}},"component":{}}],["browser",{"_index":2286,"title":{},"name":{},"text":{"53":{},"109":{},"179":{},"307":{}},"component":{}}],["bson",{"_index":2617,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["btree",{"_index":3367,"title":{},"name":{},"text":{"340":{}},"component":{}}],["budget",{"_index":433,"title":{"34-1":{},"37-4":{},"137-1":{},"140-4":{},"186-1":{},"189-4":{},"300-1":{},"303-4":{}},"name":{},"text":{"3":{},"10":{},"34":{},"37":{},"86":{},"93":{},"137":{},"140":{},"174":{},"186":{},"189":{},"216":{},"259":{},"266":{},"300":{},"303":{}},"component":{}}],["budget=10000000n",{"_index":1840,"title":{},"name":{},"text":{"37":{},"140":{},"189":{},"303":{}},"component":{}}],["buffer",{"_index":190,"title":{},"name":{},"text":{"3":{},"11":{},"86":{},"94":{},"175":{},"216":{},"259":{}},"component":{}}],["bug",{"_index":489,"title":{},"name":{},"text":{"3":{},"50":{},"86":{},"143":{},"197":{},"216":{},"259":{},"336":{}},"component":{}}],["bugfix",{"_index":173,"title":{"3-2":{},"3-4":{},"3-7":{},"3-16":{},"3-20":{},"3-23":{},"3-26":{},"3-30":{},"3-34":{},"86-2":{},"86-5":{},"86-8":{},"86-10":{},"86-13":{},"86-21":{},"86-25":{},"86-28":{},"86-31":{},"86-35":{},"86-39":{},"216-3":{},"216-6":{},"216-9":{},"216-12":{},"216-15":{},"216-17":{},"216-20":{},"216-28":{},"216-32":{},"216-35":{},"216-38":{},"216-42":{},"216-46":{},"259-2":{},"259-5":{},"259-8":{},"259-12":{},"259-15":{},"259-18":{},"259-21":{},"259-24":{},"259-26":{},"259-29":{},"259-37":{},"259-41":{},"259-44":{},"259-47":{},"259-51":{},"259-55":{}},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["build",{"_index":78,"title":{"4-1":{},"87-1":{},"217-1":{},"260-1":{}},"name":{},"text":{"1":{},"3":{},"4":{},"5":{},"15":{},"17":{},"23":{},"51":{},"84":{},"86":{},"87":{},"88":{},"98":{},"100":{},"126":{},"144":{},"198":{},"213":{},"216":{},"217":{},"218":{},"238":{},"240":{},"250":{},"259":{},"260":{},"261":{},"314":{},"337":{},"344":{},"348":{},"350":{}},"component":{}}],["build.gradl",{"_index":659,"title":{},"name":{},"text":{"4":{},"87":{},"217":{},"260":{}},"component":{}}],["build.gradle.kt",{"_index":663,"title":{},"name":{},"text":{"4":{},"87":{},"217":{},"260":{}},"component":{}}],["build.sbt",{"_index":667,"title":{},"name":{},"text":{"4":{},"87":{},"217":{},"260":{}},"component":{}}],["builder(integer.class",{"_index":76,"title":{},"name":{},"text":{"1":{},"15":{},"17":{},"84":{},"98":{},"100":{},"213":{},"238":{},"240":{},"344":{},"348":{},"350":{}},"component":{}}],["buildfil",{"_index":673,"title":{},"name":{},"text":{"4":{},"87":{},"217":{},"260":{}},"component":{}}],["buildr",{"_index":672,"title":{},"name":{},"text":{"4":{},"87":{},"217":{},"260":{}},"component":{}}],["built",{"_index":1158,"title":{},"name":{},"text":{"12":{},"95":{},"176":{},"259":{},"268":{},"281":{}},"component":{}}],["bullet",{"_index":3338,"title":{},"name":{},"text":{"304":{}},"component":{}}],["bummer",{"_index":2203,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["bunch",{"_index":1669,"title":{},"name":{},"text":{"32":{},"135":{},"184":{},"324":{}},"component":{}}],["burst",{"_index":1024,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["busi",{"_index":107,"title":{},"name":{},"text":{"2":{},"47":{},"49":{},"67":{},"85":{},"148":{},"150":{},"169":{},"210":{},"212":{},"214":{},"224":{},"333":{},"335":{},"339":{},"345":{}},"component":{}}],["businessyear",{"_index":2474,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["button",{"_index":627,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["bypass",{"_index":2006,"title":{},"name":{},"text":{"47":{},"148":{},"210":{},"304":{},"333":{}},"component":{}}],["byte",{"_index":870,"title":{},"name":{},"text":{"7":{},"10":{},"14":{},"32":{},"34":{},"37":{},"43":{},"49":{},"50":{},"77":{},"86":{},"90":{},"93":{},"97":{},"107":{},"135":{},"137":{},"140":{},"143":{},"150":{},"159":{},"171":{},"174":{},"178":{},"184":{},"186":{},"189":{},"195":{},"197":{},"212":{},"216":{},"220":{},"259":{},"263":{},"266":{},"270":{},"300":{},"303":{},"324":{},"329":{},"335":{},"336":{},"347":{}},"component":{}}],["bytecod",{"_index":708,"title":{},"name":{},"text":{"4":{},"67":{},"87":{},"169":{},"217":{},"224":{},"260":{},"339":{}},"component":{}}],["c",{"_index":2340,"title":{},"name":{},"text":{"56":{},"63":{},"112":{},"120":{},"182":{},"207":{},"299":{},"310":{}},"component":{}}],["c.setfieldevaluatorpersistable(fieldevalu",{"_index":2421,"title":{},"name":{},"text":{"63":{},"120":{},"207":{},"299":{}},"component":{}}],["cach",{"_index":8,"title":{"2":{},"18":{},"19":{},"85":{},"121":{},"122":{},"214":{},"241":{},"242":{},"345":{},"351":{},"352":{},"2-5":{},"3-12":{},"10-2":{},"34-3":{},"85-5":{},"86-17":{},"93-2":{},"137-3":{},"174-2":{},"186-3":{},"214-5":{},"216-24":{},"240-1":{},"259-33":{},"266-2":{},"300-3":{},"345-5":{},"350-1":{}},"name":{"18":{},"19":{},"121":{},"122":{},"241":{},"242":{},"351":{},"352":{}},"text":{"1":{},"2":{},"3":{},"4":{},"6":{},"10":{},"15":{},"16":{},"17":{},"18":{},"19":{},"34":{},"37":{},"39":{},"57":{},"76":{},"77":{},"84":{},"85":{},"86":{},"87":{},"89":{},"93":{},"98":{},"99":{},"100":{},"113":{},"121":{},"122":{},"137":{},"140":{},"142":{},"158":{},"159":{},"174":{},"186":{},"189":{},"191":{},"200":{},"213":{},"214":{},"216":{},"217":{},"219":{},"220":{},"232":{},"238":{},"239":{},"240":{},"241":{},"242":{},"259":{},"260":{},"262":{},"266":{},"276":{},"285":{},"300":{},"303":{},"306":{},"340":{},"344":{},"345":{},"347":{},"348":{},"349":{},"350":{},"351":{},"352":{}},"component":{}}],["cache.get(1",{"_index":29,"title":{},"name":{},"text":{"1":{},"15":{},"84":{},"98":{},"213":{},"238":{},"344":{},"348":{}},"component":{}}],["cache.hibern",{"_index":263,"title":{},"name":{},"text":{"3":{},"18":{},"86":{},"121":{},"216":{},"241":{},"259":{},"351":{}},"component":{}}],["cache.hibernate:one.microstream.cache.hibern",{"_index":319,"title":{},"name":{},"text":{"3":{}},"component":{}}],["cache.properti",{"_index":1266,"title":{},"name":{},"text":{"15":{},"98":{},"238":{},"348":{}},"component":{}}],["cache.put(1",{"_index":26,"title":{},"name":{},"text":{"1":{},"15":{},"84":{},"98":{},"213":{},"238":{},"344":{},"348":{}},"component":{}}],["cache:one.microstream.cach",{"_index":317,"title":{},"name":{},"text":{"3":{}},"component":{}}],["cache:one.microstream.cache.types,except",{"_index":318,"title":{},"name":{},"text":{"3":{}},"component":{}}],["cacheconfigur",{"_index":69,"title":{},"name":{},"text":{"1":{},"15":{},"16":{},"17":{},"84":{},"98":{},"99":{},"100":{},"213":{},"238":{},"239":{},"240":{},"344":{},"348":{},"349":{},"350":{}},"component":{}}],["cacheconfiguration.load",{"_index":1265,"title":{},"name":{},"text":{"15":{},"98":{},"238":{},"348":{}},"component":{}}],["cacheconfigurationload",{"_index":1260,"title":{},"name":{},"text":{"15":{},"98":{},"238":{},"348":{}},"component":{}}],["cacheconfigurationpars",{"_index":1261,"title":{},"name":{},"text":{"15":{},"98":{},"238":{},"348":{}},"component":{}}],["cacheconfigurationpropertynam",{"_index":1269,"title":{},"name":{},"text":{"16":{},"99":{},"239":{},"349":{}},"component":{}}],["cachefactory.getcache(\"cach",{"_index":2668,"title":{},"name":{},"text":{"76":{},"158":{},"232":{},"285":{}},"component":{}}],["cacheload",{"_index":1271,"title":{},"name":{},"text":{"16":{},"99":{},"239":{},"349":{}},"component":{}}],["cacheloaderfactori",{"_index":389,"title":{},"name":{},"text":{"3":{},"16":{},"86":{},"99":{},"216":{},"259":{}},"component":{}}],["cachemanag",{"_index":16,"title":{"2-4":{},"85-4":{},"214-4":{},"345-4":{}},"name":{},"text":{"1":{},"15":{},"17":{},"19":{},"84":{},"98":{},"100":{},"122":{},"213":{},"238":{},"240":{},"242":{},"344":{},"348":{},"350":{},"352":{}},"component":{}}],["cachemanager.createcache(\"jcach",{"_index":25,"title":{},"name":{},"text":{"1":{},"15":{},"17":{},"84":{},"98":{},"100":{},"213":{},"238":{},"240":{},"344":{},"348":{},"350":{}},"component":{}}],["cachemanager.createcache(\"my_cach",{"_index":1329,"title":{},"name":{},"text":{"19":{},"122":{},"242":{},"352":{}},"component":{}}],["cacheread",{"_index":1283,"title":{},"name":{},"text":{"17":{},"100":{},"240":{},"350":{}},"component":{}}],["cachewrit",{"_index":1273,"title":{},"name":{},"text":{"16":{},"17":{},"99":{},"100":{},"239":{},"240":{},"349":{},"350":{}},"component":{}}],["cachewriterfactori",{"_index":391,"title":{},"name":{},"text":{"3":{},"16":{},"86":{},"99":{},"216":{},"259":{}},"component":{}}],["caching.getcachingprovid",{"_index":15,"title":{},"name":{},"text":{"1":{},"15":{},"17":{},"84":{},"98":{},"100":{},"213":{},"238":{},"240":{},"344":{},"348":{},"350":{}},"component":{}}],["caching.getcachingprovider(\"one.microstream.cache.types.cachingprovid",{"_index":44,"title":{},"name":{},"text":{"1":{},"84":{},"213":{},"344":{}},"component":{}}],["cachingprovid",{"_index":12,"title":{"2-3":{},"85-3":{},"214-3":{},"345-3":{}},"name":{},"text":{"1":{},"2":{},"15":{},"17":{},"84":{},"85":{},"98":{},"100":{},"213":{},"214":{},"238":{},"240":{},"344":{},"345":{},"348":{},"350":{}},"component":{}}],["cachingsetup",{"_index":1326,"title":{},"name":{},"text":{"19":{},"122":{},"242":{},"352":{}},"component":{}}],["calcul",{"_index":1939,"title":{},"name":{},"text":{"43":{},"107":{},"195":{},"329":{}},"component":{}}],["call",{"_index":169,"title":{},"name":{},"text":{"2":{},"7":{},"9":{},"10":{},"14":{},"24":{},"29":{},"37":{},"50":{},"51":{},"52":{},"54":{},"60":{},"62":{},"66":{},"67":{},"75":{},"77":{},"85":{},"90":{},"92":{},"93":{},"97":{},"110":{},"116":{},"117":{},"119":{},"127":{},"132":{},"140":{},"143":{},"144":{},"145":{},"157":{},"159":{},"168":{},"169":{},"171":{},"173":{},"174":{},"178":{},"180":{},"189":{},"197":{},"198":{},"199":{},"203":{},"204":{},"206":{},"214":{},"220":{},"223":{},"224":{},"231":{},"240":{},"243":{},"246":{},"251":{},"257":{},"263":{},"265":{},"266":{},"270":{},"271":{},"274":{},"275":{},"284":{},"292":{},"294":{},"295":{},"297":{},"298":{},"303":{},"304":{},"308":{},"315":{},"321":{},"336":{},"337":{},"338":{},"339":{},"340":{},"345":{},"347":{},"350":{}},"component":{}}],["callback",{"_index":2092,"title":{},"name":{},"text":{"50":{},"51":{},"143":{},"144":{},"197":{},"198":{},"336":{},"337":{}},"component":{}}],["camelcas",{"_index":382,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["canal_",{"_index":1871,"title":{},"name":{},"text":{"38":{},"141":{},"190":{},"305":{}},"component":{}}],["canonic",{"_index":2630,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["canonicalize_host_nam",{"_index":2633,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["can’t",{"_index":2170,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"304":{},"336":{}},"component":{}}],["care",{"_index":1022,"title":{},"name":{},"text":{"10":{},"13":{},"22":{},"27":{},"50":{},"93":{},"96":{},"125":{},"130":{},"143":{},"174":{},"177":{},"197":{},"249":{},"254":{},"266":{},"269":{},"304":{},"313":{},"318":{},"336":{}},"component":{}}],["carefulli",{"_index":850,"title":{},"name":{},"text":{"7":{},"90":{},"171":{},"263":{}},"component":{}}],["carri",{"_index":2740,"title":{},"name":{},"text":{"78":{},"160":{},"233":{},"286":{}},"component":{}}],["case",{"_index":119,"title":{"50-10":{},"143-10":{},"197-10":{},"336-10":{}},"name":{},"text":{"2":{},"3":{},"7":{},"9":{},"14":{},"27":{},"29":{},"36":{},"41":{},"43":{},"44":{},"46":{},"47":{},"50":{},"51":{},"59":{},"60":{},"62":{},"77":{},"85":{},"86":{},"90":{},"92":{},"97":{},"105":{},"107":{},"108":{},"115":{},"117":{},"119":{},"130":{},"132":{},"139":{},"143":{},"144":{},"147":{},"148":{},"159":{},"171":{},"173":{},"178":{},"188":{},"193":{},"195":{},"196":{},"197":{},"198":{},"202":{},"204":{},"206":{},"209":{},"210":{},"214":{},"216":{},"246":{},"254":{},"257":{},"259":{},"263":{},"265":{},"270":{},"275":{},"293":{},"295":{},"298":{},"302":{},"318":{},"321":{},"327":{},"329":{},"330":{},"332":{},"333":{},"336":{},"337":{},"345":{}},"component":{}}],["cast",{"_index":1251,"title":{},"name":{},"text":{"14":{},"97":{},"178":{},"270":{}},"component":{}}],["catastroph",{"_index":2007,"title":{},"name":{},"text":{"47":{},"50":{},"143":{},"148":{},"197":{},"210":{},"333":{},"336":{}},"component":{}}],["catch",{"_index":1162,"title":{},"name":{},"text":{"12":{},"14":{},"95":{},"97":{},"176":{},"178":{},"268":{},"270":{}},"component":{}}],["caus",{"_index":555,"title":{},"name":{},"text":{"3":{},"7":{},"10":{},"16":{},"33":{},"49":{},"86":{},"90":{},"93":{},"99":{},"136":{},"150":{},"171":{},"174":{},"185":{},"212":{},"216":{},"239":{},"259":{},"263":{},"266":{},"325":{},"335":{},"349":{}},"component":{}}],["cdi",{"_index":3066,"title":{"243":{},"271":{}},"name":{"243":{},"271":{}},"text":{"216":{},"217":{},"243":{},"245":{},"259":{},"260":{},"271":{},"273":{},"274":{}},"component":{}}],["cdi.current().select(storagemanager.class).get",{"_index":3124,"title":{},"name":{},"text":{"243":{},"271":{},"274":{}},"component":{}}],["cdi3",{"_index":3252,"title":{},"name":{},"text":{"271":{}},"component":{}}],["central",{"_index":656,"title":{},"name":{},"text":{"4":{},"87":{},"217":{},"260":{}},"component":{}}],["certain",{"_index":571,"title":{},"name":{},"text":{"3":{},"10":{},"14":{},"40":{},"50":{},"86":{},"93":{},"97":{},"104":{},"143":{},"174":{},"178":{},"192":{},"197":{},"216":{},"259":{},"266":{},"270":{},"275":{},"326":{},"336":{}},"component":{}}],["certainli",{"_index":2184,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["cf.setclassloaderprovider(classloaderprovider.new",{"_index":1908,"title":{},"name":{},"text":{"40":{},"104":{},"192":{},"326":{}},"component":{}}],["cf.setclassloaderprovider(classloaderprovider.new(myclassload",{"_index":1900,"title":{},"name":{},"text":{"40":{},"104":{},"192":{},"326":{}},"component":{}}],["cf.setclassloaderprovider(typenam",{"_index":1901,"title":{},"name":{},"text":{"40":{},"104":{},"192":{},"326":{}},"component":{}}],["ch.qos.logback",{"_index":3193,"title":{},"name":{},"text":{"255":{},"319":{}},"component":{}}],["ch_",{"_index":1889,"title":{},"name":{},"text":{"39":{},"142":{},"191":{},"306":{}},"component":{}}],["ch_0",{"_index":1888,"title":{},"name":{},"text":{"39":{},"142":{},"191":{},"306":{}},"component":{}}],["chain",{"_index":1364,"title":{},"name":{},"text":{"21":{},"26":{},"27":{},"51":{},"69":{},"70":{},"124":{},"129":{},"130":{},"144":{},"151":{},"152":{},"198":{},"226":{},"227":{},"248":{},"253":{},"254":{},"278":{},"279":{},"312":{},"317":{},"318":{},"337":{}},"component":{}}],["chang",{"_index":108,"title":{"46-2":{},"147-2":{},"209-2":{},"246-1":{},"275-1":{},"332-2":{}},"name":{},"text":{"2":{},"3":{},"7":{},"8":{},"9":{},"12":{},"27":{},"29":{},"47":{},"50":{},"51":{},"56":{},"60":{},"64":{},"85":{},"86":{},"90":{},"91":{},"92":{},"95":{},"97":{},"112":{},"116":{},"117":{},"130":{},"132":{},"143":{},"144":{},"148":{},"166":{},"171":{},"172":{},"173":{},"176":{},"178":{},"182":{},"197":{},"198":{},"203":{},"204":{},"210":{},"214":{},"216":{},"221":{},"246":{},"254":{},"257":{},"259":{},"263":{},"264":{},"265":{},"268":{},"270":{},"274":{},"275":{},"294":{},"295":{},"297":{},"304":{},"310":{},"318":{},"321":{},"333":{},"336":{},"337":{},"342":{},"345":{},"347":{}},"component":{}}],["changelog",{"_index":187,"title":{"3":{},"86":{},"216":{},"259":{}},"name":{"3":{},"86":{},"216":{},"259":{}},"text":{"6":{},"89":{},"219":{},"262":{}},"component":{}}],["channel",{"_index":253,"title":{"39":{},"142":{},"191":{},"306":{},"37-2":{},"39-1":{},"39-2":{},"140-2":{},"142-1":{},"142-2":{},"189-2":{},"191-1":{},"191-2":{},"303-2":{},"306-1":{},"306-2":{}},"name":{"39":{},"142":{},"191":{},"306":{}},"text":{"3":{},"11":{},"35":{},"37":{},"38":{},"39":{},"55":{},"86":{},"94":{},"111":{},"138":{},"140":{},"141":{},"142":{},"175":{},"181":{},"187":{},"189":{},"190":{},"191":{},"215":{},"216":{},"240":{},"259":{},"267":{},"301":{},"303":{},"305":{},"306":{},"309":{},"346":{},"350":{}},"component":{}}],["channel.rec",{"_index":2994,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["channel.send(\"hello",{"_index":3005,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["channel.send(receiv",{"_index":2996,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["channel_",{"_index":1816,"title":{},"name":{},"text":{"37":{},"39":{},"140":{},"142":{},"189":{},"191":{},"303":{},"306":{}},"component":{}}],["channelcount",{"_index":414,"title":{},"name":{},"text":{"3":{},"17":{},"86":{},"100":{},"216":{},"240":{},"259":{},"350":{}},"component":{}}],["channeldirectoryprefix",{"_index":415,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["channelindex",{"_index":2325,"title":{},"name":{},"text":{"55":{},"111":{},"181":{},"309":{}},"component":{}}],["channelstatist",{"_index":2324,"title":{},"name":{},"text":{"55":{},"111":{},"181":{},"309":{}},"component":{}}],["chao",{"_index":1092,"title":{},"name":{},"text":{"11":{},"50":{},"94":{},"143":{},"175":{},"197":{},"267":{},"336":{}},"component":{}}],["chapter",{"_index":1910,"title":{},"name":{},"text":{"41":{},"67":{},"105":{},"169":{},"193":{},"224":{},"327":{},"339":{}},"component":{}}],["char",{"_index":3031,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["charact",{"_index":521,"title":{},"name":{},"text":{"3":{},"32":{},"86":{},"135":{},"184":{},"216":{},"243":{},"259":{},"271":{},"274":{},"324":{}},"component":{}}],["charg",{"_index":3297,"title":{},"name":{},"text":{"278":{},"279":{},"280":{},"281":{},"282":{},"283":{},"284":{},"285":{},"286":{},"287":{},"288":{},"289":{},"290":{},"291":{}},"component":{}}],["charset",{"_index":1812,"title":{},"name":{},"text":{"36":{},"139":{},"188":{},"302":{}},"component":{}}],["check",{"_index":1039,"title":{},"name":{},"text":{"10":{},"16":{},"22":{},"37":{},"44":{},"46":{},"52":{},"67":{},"69":{},"70":{},"77":{},"93":{},"99":{},"108":{},"125":{},"140":{},"145":{},"147":{},"151":{},"152":{},"159":{},"169":{},"174":{},"189":{},"196":{},"199":{},"209":{},"216":{},"224":{},"226":{},"227":{},"239":{},"249":{},"259":{},"266":{},"275":{},"278":{},"279":{},"280":{},"281":{},"282":{},"283":{},"284":{},"285":{},"286":{},"287":{},"288":{},"289":{},"290":{},"291":{},"292":{},"303":{},"313":{},"330":{},"332":{},"339":{},"349":{}},"component":{}}],["child",{"_index":2398,"title":{},"name":{},"text":{"61":{},"118":{},"205":{},"296":{}},"component":{}}],["choic",{"_index":800,"title":{},"name":{},"text":{"5":{},"24":{},"31":{},"53":{},"79":{},"80":{},"81":{},"82":{},"83":{},"88":{},"109":{},"127":{},"134":{},"161":{},"162":{},"163":{},"164":{},"165":{},"179":{},"183":{},"218":{},"220":{},"234":{},"235":{},"236":{},"237":{},"251":{},"255":{},"261":{},"287":{},"288":{},"289":{},"290":{},"291":{},"307":{},"315":{},"319":{},"323":{},"347":{}},"component":{}}],["choos",{"_index":1201,"title":{},"name":{},"text":{"13":{},"14":{},"96":{},"97":{},"177":{},"178":{},"269":{},"270":{}},"component":{}}],["chronounit.year",{"_index":1582,"title":{},"name":{},"text":{"27":{},"130":{},"254":{},"318":{}},"component":{}}],["chunk",{"_index":2702,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["circl",{"_index":2943,"title":{},"name":{},"text":{"116":{}},"component":{}}],["circular",{"_index":2942,"title":{},"name":{},"text":{"116":{}},"component":{}}],["circumst",{"_index":2038,"title":{},"name":{},"text":{"50":{},"65":{},"143":{},"167":{},"197":{},"222":{},"336":{},"343":{}},"component":{}}],["clarif",{"_index":3071,"title":{},"name":{},"text":{"216":{},"259":{}},"component":{}}],["class",{"_index":636,"title":{"40":{},"104":{},"192":{},"326":{},"40-1":{},"46-2":{},"50-3":{},"50-10":{},"104-1":{},"143-3":{},"143-10":{},"147-2":{},"192-1":{},"197-3":{},"197-10":{},"209-2":{},"326-1":{},"332-2":{},"336-3":{},"336-10":{}},"name":{"40":{},"104":{},"192":{},"326":{}},"text":{"3":{},"9":{},"12":{},"14":{},"15":{},"18":{},"19":{},"22":{},"23":{},"24":{},"26":{},"28":{},"29":{},"30":{},"33":{},"40":{},"41":{},"42":{},"43":{},"44":{},"46":{},"48":{},"49":{},"50":{},"51":{},"59":{},"63":{},"64":{},"66":{},"67":{},"74":{},"79":{},"80":{},"81":{},"82":{},"83":{},"86":{},"92":{},"95":{},"97":{},"98":{},"104":{},"105":{},"106":{},"107":{},"108":{},"115":{},"116":{},"120":{},"121":{},"122":{},"125":{},"126":{},"127":{},"129":{},"131":{},"132":{},"133":{},"136":{},"143":{},"144":{},"147":{},"149":{},"150":{},"156":{},"161":{},"162":{},"163":{},"164":{},"165":{},"166":{},"168":{},"169":{},"173":{},"176":{},"178":{},"185":{},"192":{},"193":{},"194":{},"195":{},"196":{},"197":{},"198":{},"202":{},"203":{},"207":{},"209":{},"211":{},"212":{},"215":{},"216":{},"221":{},"223":{},"224":{},"234":{},"235":{},"236":{},"237":{},"238":{},"239":{},"241":{},"242":{},"243":{},"246":{},"249":{},"250":{},"251":{},"253":{},"256":{},"257":{},"258":{},"259":{},"265":{},"268":{},"270":{},"271":{},"274":{},"275":{},"287":{},"288":{},"289":{},"290":{},"291":{},"293":{},"294":{},"297":{},"299":{},"313":{},"314":{},"315":{},"317":{},"320":{},"321":{},"322":{},"325":{},"326":{},"327":{},"328":{},"329":{},"330":{},"332":{},"334":{},"335":{},"336":{},"337":{},"338":{},"339":{},"340":{},"342":{},"346":{},"347":{},"348":{},"349":{},"351":{},"352":{}},"component":{}}],["classic",{"_index":2459,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"255":{},"319":{},"339":{}},"component":{}}],["classload",{"_index":553,"title":{"246-6":{}},"name":{},"text":{"3":{},"33":{},"40":{},"86":{},"104":{},"136":{},"185":{},"192":{},"216":{},"259":{},"325":{},"326":{}},"component":{}}],["classloader.getsystemclassload",{"_index":1906,"title":{},"name":{},"text":{"40":{},"104":{},"192":{},"326":{}},"component":{}}],["classloaderprovid",{"_index":3227,"title":{},"name":{},"text":{"259":{}},"component":{}}],["classpath",{"_index":33,"title":{},"name":{},"text":{"1":{},"15":{},"35":{},"72":{},"84":{},"98":{},"138":{},"154":{},"187":{},"213":{},"229":{},"238":{},"282":{},"301":{},"344":{},"348":{}},"component":{}}],["classpath:path",{"_index":2580,"title":{},"name":{},"text":{"72":{},"154":{},"229":{},"282":{}},"component":{}}],["clazz",{"_index":1926,"title":{},"name":{},"text":{"42":{},"63":{},"106":{},"120":{},"194":{},"207":{},"299":{},"328":{}},"component":{}}],["clean",{"_index":974,"title":{},"name":{},"text":{"10":{},"37":{},"50":{},"66":{},"93":{},"140":{},"143":{},"168":{},"174":{},"189":{},"197":{},"203":{},"223":{},"266":{},"294":{},"303":{},"336":{},"338":{}},"component":{}}],["cleaner",{"_index":1567,"title":{},"name":{},"text":{"27":{},"130":{},"254":{},"318":{}},"component":{}}],["cleanup",{"_index":447,"title":{"10-1":{},"10-2":{},"93-1":{},"93-2":{},"174-1":{},"174-2":{},"266-1":{},"266-2":{}},"name":{},"text":{"3":{},"10":{},"37":{},"50":{},"86":{},"93":{},"140":{},"143":{},"174":{},"189":{},"197":{},"216":{},"259":{},"266":{},"303":{},"304":{},"336":{}},"component":{}}],["clear",{"_index":501,"title":{"66":{},"168":{},"223":{},"338":{}},"name":{"66":{},"168":{},"223":{},"338":{}},"text":{"3":{},"8":{},"10":{},"16":{},"34":{},"51":{},"66":{},"68":{},"86":{},"91":{},"93":{},"99":{},"137":{},"144":{},"168":{},"170":{},"172":{},"174":{},"186":{},"198":{},"216":{},"223":{},"225":{},"239":{},"240":{},"259":{},"264":{},"266":{},"300":{},"337":{},"338":{},"341":{},"349":{},"350":{}},"component":{}}],["clever",{"_index":2185,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["cli",{"_index":2553,"title":{},"name":{},"text":{"69":{},"70":{},"151":{},"152":{},"179":{},"226":{},"227":{},"278":{},"279":{},"307":{}},"component":{}}],["click",{"_index":2296,"title":{},"name":{},"text":{"53":{},"109":{},"179":{},"307":{}},"component":{}}],["client",{"_index":525,"title":{"53":{},"109":{},"179":{},"307":{},"215-5":{},"346-5":{}},"name":{"53":{},"109":{},"179":{},"307":{}},"text":{"3":{},"4":{},"53":{},"54":{},"69":{},"70":{},"71":{},"74":{},"75":{},"77":{},"79":{},"86":{},"87":{},"109":{},"110":{},"151":{},"152":{},"153":{},"156":{},"157":{},"159":{},"161":{},"179":{},"180":{},"200":{},"215":{},"216":{},"217":{},"226":{},"227":{},"228":{},"231":{},"234":{},"259":{},"260":{},"276":{},"278":{},"279":{},"280":{},"281":{},"284":{},"288":{},"307":{},"308":{},"346":{}},"component":{}}],["client.connect",{"_index":2658,"title":{},"name":{},"text":{"75":{},"157":{},"215":{},"231":{},"284":{},"346":{}},"component":{}}],["client.max",{"_index":2662,"title":{},"name":{},"text":{"75":{},"157":{},"231":{},"284":{}},"component":{}}],["client.read",{"_index":2660,"title":{},"name":{},"text":{"75":{},"157":{},"231":{},"284":{}},"component":{}}],["clone",{"_index":2422,"title":{},"name":{},"text":{"64":{},"166":{},"221":{},"342":{}},"component":{}}],["close",{"_index":2974,"title":{},"name":{},"text":{"203":{},"294":{},"304":{}},"component":{}}],["closer",{"_index":1856,"title":{},"name":{},"text":{"37":{},"140":{},"189":{},"303":{}},"component":{}}],["cloud",{"_index":727,"title":{"75":{},"157":{},"231":{},"281":{},"284":{}},"name":{"75":{},"157":{},"231":{},"281":{},"284":{}},"text":{"4":{},"75":{},"87":{},"157":{},"216":{},"217":{},"231":{},"259":{},"260":{},"281":{},"284":{}},"component":{}}],["cluster",{"_index":2008,"title":{},"name":{},"text":{"47":{},"148":{},"210":{},"333":{}},"component":{}}],["code",{"_index":492,"title":{"22-2":{},"125-2":{},"249-2":{},"297-1":{},"313-2":{}},"name":{},"text":{"3":{},"4":{},"9":{},"14":{},"15":{},"20":{},"21":{},"22":{},"23":{},"28":{},"29":{},"30":{},"37":{},"41":{},"50":{},"52":{},"59":{},"60":{},"67":{},"86":{},"87":{},"92":{},"97":{},"98":{},"105":{},"106":{},"115":{},"116":{},"117":{},"123":{},"124":{},"125":{},"126":{},"131":{},"132":{},"133":{},"140":{},"143":{},"145":{},"169":{},"173":{},"178":{},"189":{},"193":{},"194":{},"197":{},"199":{},"202":{},"203":{},"204":{},"216":{},"217":{},"224":{},"238":{},"240":{},"247":{},"248":{},"249":{},"250":{},"256":{},"257":{},"258":{},"259":{},"260":{},"265":{},"270":{},"274":{},"275":{},"292":{},"293":{},"294":{},"295":{},"303":{},"311":{},"312":{},"313":{},"314":{},"320":{},"321":{},"322":{},"327":{},"328":{},"336":{},"339":{},"348":{},"350":{}},"component":{}}],["coher",{"_index":278,"title":{"76":{},"158":{},"232":{},"285":{}},"name":{"76":{},"158":{},"232":{},"285":{}},"text":{"3":{},"4":{},"47":{},"76":{},"86":{},"87":{},"148":{},"158":{},"210":{},"216":{},"217":{},"232":{},"259":{},"260":{},"285":{},"333":{}},"component":{}}],["coherence:one.microstream.enterprise.afs.oracle.coherence.typ",{"_index":334,"title":{},"name":{},"text":{"3":{}},"component":{}}],["coherenceconnector.caching(cach",{"_index":2669,"title":{},"name":{},"text":{"76":{},"158":{},"232":{},"285":{}},"component":{}}],["collect",{"_index":697,"title":{"340":{},"10-3":{},"31-1":{},"32-2":{},"93-3":{},"134-1":{},"135-2":{},"174-3":{},"183-1":{},"184-2":{},"266-3":{},"323-1":{},"324-2":{}},"name":{"340":{}},"text":{"4":{},"7":{},"9":{},"10":{},"13":{},"16":{},"31":{},"32":{},"33":{},"37":{},"49":{},"50":{},"67":{},"74":{},"86":{},"87":{},"90":{},"92":{},"93":{},"96":{},"99":{},"134":{},"135":{},"136":{},"140":{},"143":{},"150":{},"156":{},"169":{},"171":{},"173":{},"174":{},"177":{},"183":{},"184":{},"185":{},"189":{},"197":{},"212":{},"216":{},"217":{},"224":{},"239":{},"259":{},"260":{},"263":{},"265":{},"266":{},"269":{},"303":{},"323":{},"324":{},"325":{},"335":{},"336":{},"339":{},"340":{},"349":{}},"component":{}}],["collect(collectors.tolist",{"_index":1208,"title":{},"name":{},"text":{"13":{},"96":{},"177":{},"269":{}},"component":{}}],["collector",{"_index":919,"title":{},"name":{},"text":{"8":{},"10":{},"66":{},"91":{},"93":{},"168":{},"172":{},"174":{},"216":{},"223":{},"259":{},"264":{},"266":{},"338":{},"340":{}},"component":{}}],["collis",{"_index":3359,"title":{},"name":{},"text":{"340":{}},"component":{}}],["column",{"_index":2104,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["com.my.app.ent",{"_index":2130,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["com.my.app.entities.newcontact",{"_index":2137,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["com.my.app.entities.newcontact#ag",{"_index":2148,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["com.my.app.entities.newcontact#emailaddress",{"_index":2143,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["com.my.app.entities.newcontact#firstnam",{"_index":2139,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["com.my.app.entities.newcontact#lastnam",{"_index":2141,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["com.my.app.entities.newcontact#postaladdress",{"_index":2146,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["com.my.app.entities.newcontact#supportnot",{"_index":2145,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["com.my.app.entities.oldcontact",{"_index":2136,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["com.my.app.entities.oldcontact#ag",{"_index":2147,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["com.my.app.entities.oldcontact#email",{"_index":2142,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["com.my.app.entities.oldcontact#firstnam",{"_index":2138,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["com.my.app.entities.oldcontact#link",{"_index":2149,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["com.my.app.entities.oldcontact#nam",{"_index":2140,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["com.my.app.entities.oldcontact#not",{"_index":2144,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["com.my.app.entities.ord",{"_index":2118,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["com.my.app.entities.order#com.my.app.entities.articleholder#articlecount",{"_index":2128,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["com.my.app.entities.order#com.my.app.entities.articleholder#count",{"_index":2127,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["com.my.app.entities.order#count;com.my.app.entities.order#articlecount",{"_index":2125,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["com.my.app.entities.order;com.my.app.entities.orderimplement",{"_index":2123,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["com.oracle.database.jdbc",{"_index":2773,"title":{},"name":{},"text":{"81":{},"163":{},"235":{},"289":{}},"component":{}}],["com.sampl",{"_index":2757,"title":{},"name":{},"text":{"79":{},"80":{},"81":{},"82":{},"83":{},"161":{},"162":{},"163":{},"164":{},"165":{},"234":{},"235":{},"236":{},"237":{},"287":{},"288":{},"289":{},"290":{},"291":{}},"component":{}}],["com.sap.cloud.db.jdbc",{"_index":3313,"title":{},"name":{},"text":{"287":{}},"component":{}}],["combin",{"_index":1212,"title":{},"name":{},"text":{"14":{},"25":{},"31":{},"37":{},"66":{},"74":{},"97":{},"128":{},"134":{},"140":{},"156":{},"168":{},"178":{},"183":{},"189":{},"223":{},"252":{},"270":{},"303":{},"316":{},"323":{},"338":{}},"component":{}}],["combinari",{"_index":2978,"title":{"215-7":{},"346-7":{}},"name":{},"text":{"215":{},"346":{}},"component":{}}],["combinarydynam",{"_index":2977,"title":{"215-7":{},"346-7":{}},"name":{},"text":{"215":{},"346":{}},"component":{}}],["combinarydynamic.found",{"_index":2992,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["comchannel",{"_index":3004,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["comclient",{"_index":3001,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["come",{"_index":989,"title":{},"name":{},"text":{"10":{},"12":{},"19":{},"50":{},"54":{},"67":{},"93":{},"95":{},"103":{},"110":{},"122":{},"143":{},"169":{},"174":{},"176":{},"180":{},"197":{},"224":{},"242":{},"243":{},"246":{},"266":{},"268":{},"271":{},"274":{},"275":{},"308":{},"336":{},"339":{},"352":{}},"component":{}}],["comfort",{"_index":756,"title":{},"name":{},"text":{"4":{},"87":{},"217":{},"260":{}},"component":{}}],["comfound",{"_index":3007,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["comfoundation.default",{"_index":3006,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["comfoundation.registerentitytypes(class",{"_index":3018,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["comfoundation.setclienttargetaddress(inetsocketaddress",{"_index":3016,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["comfoundation.setconnectionhandler(comconnectionhandl",{"_index":3020,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["comfoundation.sethostbindingaddress(inetsocketaddress",{"_index":3015,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["comfoundation.setport(int",{"_index":3017,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["comhost",{"_index":2991,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["comma",{"_index":1600,"title":{},"name":{},"text":{"28":{},"77":{},"131":{},"159":{},"256":{},"320":{}},"component":{}}],["command",{"_index":2602,"title":{},"name":{},"text":{"74":{},"156":{},"179":{},"274":{},"307":{}},"component":{}}],["comment",{"_index":1853,"title":{},"name":{},"text":{"37":{},"51":{},"140":{},"144":{},"189":{},"198":{},"303":{},"337":{}},"component":{}}],["commerceid",{"_index":2261,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["commerci",{"_index":822,"title":{},"name":{},"text":{"6":{},"89":{},"219":{},"262":{}},"component":{}}],["commit",{"_index":1042,"title":{},"name":{},"text":{"10":{},"74":{},"77":{},"93":{},"156":{},"159":{},"174":{},"266":{}},"component":{}}],["commit_no_sync",{"_index":2698,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["commit_sync",{"_index":2696,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["commit_write_no_sync",{"_index":2700,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["common",{"_index":92,"title":{"215-8":{},"346-8":{}},"name":{},"text":{"2":{},"3":{},"4":{},"14":{},"29":{},"35":{},"45":{},"50":{},"57":{},"62":{},"85":{},"86":{},"87":{},"97":{},"113":{},"119":{},"132":{},"138":{},"143":{},"146":{},"178":{},"187":{},"197":{},"200":{},"206":{},"208":{},"214":{},"216":{},"217":{},"257":{},"259":{},"260":{},"270":{},"276":{},"298":{},"301":{},"321":{},"331":{},"336":{},"345":{}},"component":{}}],["commonclientconfigs.bootstrap_servers_config",{"_index":2584,"title":{},"name":{},"text":{"73":{},"155":{},"230":{},"283":{}},"component":{}}],["commonli",{"_index":1670,"title":{},"name":{},"text":{"32":{},"135":{},"184":{},"324":{}},"component":{}}],["commun",{"_index":264,"title":{"215":{},"346":{}},"name":{},"text":{"3":{},"4":{},"69":{},"70":{},"77":{},"86":{},"87":{},"151":{},"152":{},"159":{},"215":{},"216":{},"217":{},"226":{},"227":{},"259":{},"260":{},"278":{},"279":{},"346":{}},"component":{}}],["communication.binari",{"_index":265,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["communication.binary:one.microstream.com.binari",{"_index":323,"title":{},"name":{},"text":{"3":{}},"component":{}}],["communication:one.microstream.com",{"_index":321,"title":{},"name":{},"text":{"3":{}},"component":{}}],["communication:one.microstream.communication.typ",{"_index":322,"title":{},"name":{},"text":{"3":{}},"component":{}}],["compar",{"_index":916,"title":{},"name":{},"text":{"8":{},"10":{},"31":{},"34":{},"91":{},"93":{},"134":{},"137":{},"172":{},"174":{},"183":{},"186":{},"264":{},"266":{},"300":{},"323":{}},"component":{}}],["compat",{"_index":216,"title":{},"name":{},"text":{"3":{},"5":{},"44":{},"48":{},"50":{},"86":{},"88":{},"108":{},"143":{},"149":{},"196":{},"197":{},"211":{},"216":{},"218":{},"259":{},"261":{},"330":{},"336":{}},"component":{}}],["compens",{"_index":1186,"title":{},"name":{},"text":{"12":{},"95":{},"176":{},"268":{}},"component":{}}],["compil",{"_index":1339,"title":{},"name":{},"text":{"20":{},"23":{},"28":{},"48":{},"62":{},"119":{},"123":{},"126":{},"131":{},"149":{},"206":{},"211":{},"247":{},"250":{},"256":{},"298":{},"311":{},"314":{},"320":{}},"component":{}}],["compile.with",{"_index":674,"title":{},"name":{},"text":{"4":{},"87":{},"217":{},"260":{}},"component":{}}],["complet",{"_index":504,"title":{},"name":{},"text":{"3":{},"10":{},"12":{},"26":{},"37":{},"44":{},"51":{},"67":{},"77":{},"86":{},"93":{},"95":{},"108":{},"116":{},"129":{},"140":{},"144":{},"159":{},"169":{},"174":{},"176":{},"189":{},"196":{},"198":{},"203":{},"216":{},"224":{},"253":{},"259":{},"266":{},"268":{},"294":{},"303":{},"317":{},"330":{},"337":{},"339":{},"347":{}},"component":{}}],["complex",{"_index":1473,"title":{},"name":{},"text":{"23":{},"43":{},"50":{},"107":{},"116":{},"126":{},"143":{},"195":{},"197":{},"203":{},"250":{},"294":{},"314":{},"329":{},"336":{}},"component":{}}],["complianc",{"_index":3230,"title":{},"name":{},"text":{"259":{}},"component":{}}],["complic",{"_index":1168,"title":{},"name":{},"text":{"12":{},"14":{},"95":{},"97":{},"176":{},"178":{},"268":{},"270":{}},"component":{}}],["compon",{"_index":899,"title":{},"name":{},"text":{"7":{},"19":{},"34":{},"90":{},"122":{},"137":{},"171":{},"186":{},"242":{},"246":{},"263":{},"275":{},"300":{},"352":{}},"component":{}}],["compris",{"_index":973,"title":{},"name":{},"text":{"10":{},"43":{},"93":{},"107":{},"174":{},"195":{},"266":{},"329":{}},"component":{}}],["comput",{"_index":100,"title":{},"name":{},"text":{"2":{},"85":{},"214":{},"281":{},"345":{}},"component":{}}],["comtlsconnectionhandl",{"_index":3019,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["concept",{"_index":82,"title":{"2-2":{},"85-2":{},"214-2":{},"345-2":{}},"name":{},"text":{"3":{},"6":{},"10":{},"12":{},"14":{},"23":{},"45":{},"50":{},"86":{},"89":{},"93":{},"95":{},"97":{},"126":{},"143":{},"146":{},"174":{},"176":{},"178":{},"197":{},"208":{},"216":{},"219":{},"250":{},"259":{},"262":{},"266":{},"268":{},"270":{},"275":{},"314":{},"331":{},"336":{}},"component":{}}],["concern",{"_index":1478,"title":{},"name":{},"text":{"23":{},"49":{},"74":{},"126":{},"150":{},"156":{},"212":{},"250":{},"314":{},"335":{}},"component":{}}],["concret",{"_index":716,"title":{},"name":{},"text":{"4":{},"14":{},"50":{},"67":{},"87":{},"97":{},"143":{},"169":{},"178":{},"197":{},"217":{},"224":{},"260":{},"270":{},"336":{},"339":{}},"component":{}}],["concurr",{"_index":2032,"title":{},"name":{},"text":{"49":{},"59":{},"115":{},"150":{},"202":{},"212":{},"293":{},"335":{}},"component":{}}],["concurrenthashmap",{"_index":1709,"title":{},"name":{},"text":{"32":{},"135":{},"184":{},"324":{}},"component":{}}],["concurrentlinkeddequ",{"_index":1713,"title":{},"name":{},"text":{"32":{},"135":{},"184":{},"324":{}},"component":{}}],["concurrentlinkedqueu",{"_index":1712,"title":{},"name":{},"text":{"32":{},"135":{},"184":{},"324":{}},"component":{}}],["concurrentskiplistmap",{"_index":1710,"title":{},"name":{},"text":{"32":{},"135":{},"184":{},"324":{}},"component":{}}],["concurrentskiplistset",{"_index":1711,"title":{},"name":{},"text":{"32":{},"135":{},"184":{},"324":{}},"component":{}}],["condit",{"_index":533,"title":{},"name":{},"text":{"3":{},"86":{},"116":{},"216":{},"259":{}},"component":{}}],["conduc",{"_index":2498,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["confid",{"_index":2228,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["config",{"_index":2581,"title":{},"name":{},"text":{"72":{},"75":{},"76":{},"154":{},"157":{},"158":{},"229":{},"231":{},"232":{},"243":{},"246":{},"271":{},"275":{},"282":{},"284":{},"285":{}},"component":{}}],["config.properti",{"_index":1263,"title":{},"name":{},"text":{"15":{},"17":{},"98":{},"100":{},"238":{},"240":{},"348":{},"350":{}},"component":{}}],["configproperti",{"_index":3132,"title":{},"name":{},"text":{"243":{},"271":{}},"component":{}}],["configproperty(nam",{"_index":3130,"title":{},"name":{},"text":{"243":{},"271":{}},"component":{}}],["configur",{"_index":19,"title":{"15":{},"20":{},"28":{},"35":{},"98":{},"123":{},"131":{},"138":{},"187":{},"238":{},"247":{},"256":{},"301":{},"311":{},"320":{},"348":{},"3-11":{},"4-1":{},"35-2":{},"39-2":{},"56-2":{},"58-1":{},"69-1":{},"70-1":{},"71-1":{},"72-1":{},"73-1":{},"74-1":{},"75-1":{},"76-1":{},"77-1":{},"78-1":{},"79-1":{},"80-1":{},"81-1":{},"82-1":{},"83-1":{},"86-16":{},"87-1":{},"112-2":{},"114-1":{},"138-2":{},"142-2":{},"151-1":{},"152-1":{},"153-1":{},"154-1":{},"155-1":{},"156-1":{},"157-1":{},"158-1":{},"159-1":{},"160-1":{},"161-1":{},"162-1":{},"163-1":{},"164-1":{},"165-1":{},"182-2":{},"187-2":{},"191-2":{},"201-1":{},"215-6":{},"215-8":{},"216-23":{},"217-1":{},"226-1":{},"227-1":{},"228-1":{},"229-1":{},"230-1":{},"231-1":{},"232-1":{},"233-1":{},"234-1":{},"235-1":{},"236-1":{},"237-1":{},"243-1":{},"246-2":{},"246-6":{},"259-32":{},"260-1":{},"271-1":{},"274-1":{},"275-2":{},"277-1":{},"278-1":{},"279-1":{},"280-1":{},"281-1":{},"282-1":{},"283-1":{},"284-1":{},"285-1":{},"286-1":{},"287-1":{},"288-1":{},"289-1":{},"290-1":{},"291-1":{},"301-2":{},"304-1":{},"306-2":{},"310-2":{},"340-2":{},"346-6":{},"346-8":{},"347-5":{}},"name":{"20":{},"28":{},"123":{},"131":{},"247":{},"256":{},"311":{},"320":{}},"text":{"1":{},"2":{},"3":{},"4":{},"7":{},"9":{},"10":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"23":{},"28":{},"34":{},"35":{},"37":{},"38":{},"39":{},"47":{},"50":{},"51":{},"58":{},"64":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"90":{},"92":{},"93":{},"98":{},"99":{},"100":{},"114":{},"121":{},"122":{},"123":{},"126":{},"131":{},"137":{},"138":{},"140":{},"141":{},"142":{},"143":{},"144":{},"148":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{},"165":{},"166":{},"171":{},"174":{},"186":{},"187":{},"189":{},"190":{},"191":{},"197":{},"198":{},"201":{},"210":{},"213":{},"214":{},"215":{},"216":{},"217":{},"221":{},"226":{},"227":{},"228":{},"229":{},"230":{},"231":{},"232":{},"233":{},"234":{},"235":{},"236":{},"237":{},"238":{},"239":{},"240":{},"241":{},"242":{},"243":{},"246":{},"247":{},"250":{},"255":{},"256":{},"259":{},"260":{},"263":{},"266":{},"271":{},"274":{},"275":{},"277":{},"278":{},"279":{},"280":{},"281":{},"282":{},"283":{},"284":{},"285":{},"286":{},"287":{},"288":{},"289":{},"290":{},"291":{},"300":{},"301":{},"303":{},"304":{},"305":{},"306":{},"311":{},"314":{},"319":{},"320":{},"333":{},"336":{},"337":{},"340":{},"342":{},"344":{},"345":{},"346":{},"347":{},"348":{},"349":{},"350":{},"351":{},"352":{}},"component":{}}],["configuration.get(\"password",{"_index":2764,"title":{},"name":{},"text":{"79":{},"80":{},"81":{},"82":{},"161":{},"162":{},"163":{},"164":{},"234":{},"235":{},"236":{},"287":{},"288":{},"289":{},"290":{}},"component":{}}],["configuration.get(\"url",{"_index":2762,"title":{},"name":{},"text":{"79":{},"80":{},"81":{},"82":{},"83":{},"161":{},"162":{},"163":{},"164":{},"165":{},"234":{},"235":{},"236":{},"237":{},"287":{},"288":{},"289":{},"290":{},"291":{}},"component":{}}],["configuration.get(\"us",{"_index":2763,"title":{},"name":{},"text":{"79":{},"80":{},"81":{},"82":{},"161":{},"162":{},"163":{},"164":{},"234":{},"235":{},"236":{},"287":{},"288":{},"289":{},"290":{}},"component":{}}],["configuration.usernam",{"_index":2628,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["configuration:one.microstream.storage.embedded.configuration.typ",{"_index":368,"title":{},"name":{},"text":{"3":{}},"component":{}}],["configurationload",{"_index":1787,"title":{},"name":{},"text":{"35":{},"138":{},"187":{},"301":{}},"component":{}}],["configurationloader.new(\"/meta",{"_index":1796,"title":{},"name":{},"text":{"35":{},"138":{},"187":{},"301":{}},"component":{}}],["configurationpars",{"_index":1788,"title":{},"name":{},"text":{"35":{},"138":{},"187":{},"301":{}},"component":{}}],["configurationparserhocon.new",{"_index":1800,"title":{},"name":{},"text":{"35":{},"138":{},"187":{},"301":{}},"component":{}}],["configurationparseryaml.new",{"_index":1798,"title":{},"name":{},"text":{"35":{},"138":{},"187":{},"301":{}},"component":{}}],["confirm",{"_index":2248,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["conflict",{"_index":798,"title":{},"name":{},"text":{"5":{},"7":{},"88":{},"90":{},"171":{},"216":{},"218":{},"246":{},"259":{},"261":{},"263":{},"275":{}},"component":{}}],["conform",{"_index":2034,"title":{},"name":{},"text":{"49":{},"150":{},"212":{},"335":{}},"component":{}}],["confus",{"_index":581,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["connect",{"_index":610,"title":{},"name":{},"text":{"3":{},"4":{},"11":{},"12":{},"40":{},"45":{},"51":{},"53":{},"54":{},"56":{},"57":{},"71":{},"74":{},"75":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"86":{},"87":{},"94":{},"95":{},"104":{},"109":{},"110":{},"112":{},"113":{},"144":{},"146":{},"153":{},"156":{},"157":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{},"165":{},"175":{},"176":{},"179":{},"180":{},"182":{},"192":{},"198":{},"200":{},"208":{},"215":{},"216":{},"217":{},"228":{},"231":{},"233":{},"234":{},"235":{},"236":{},"237":{},"259":{},"260":{},"267":{},"268":{},"276":{},"280":{},"284":{},"286":{},"287":{},"288":{},"289":{},"290":{},"291":{},"304":{},"307":{},"308":{},"310":{},"326":{},"331":{},"337":{},"346":{}},"component":{}}],["connect/open",{"_index":2718,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["connection.exporttyp",{"_index":1106,"title":{},"name":{},"text":{"11":{},"94":{},"175":{},"267":{}},"component":{}}],["connection.importfiles(exportresult.fil",{"_index":3247,"title":{},"name":{},"text":{"267":{}},"component":{}}],["connection.importfiles(x.enum",{"_index":1118,"title":{},"name":{},"text":{"11":{},"94":{},"175":{}},"component":{}}],["connector",{"_index":2356,"title":{},"name":{},"text":{"57":{},"58":{},"80":{},"113":{},"114":{},"162":{},"200":{},"201":{},"216":{},"259":{},"276":{},"277":{}},"component":{}}],["consequ",{"_index":875,"title":{},"name":{},"text":{"7":{},"10":{},"90":{},"93":{},"171":{},"174":{},"263":{},"266":{}},"component":{}}],["consid",{"_index":1759,"title":{},"name":{},"text":{"34":{},"137":{},"186":{},"300":{}},"component":{}}],["consider",{"_index":1472,"title":{},"name":{},"text":{"23":{},"37":{},"126":{},"140":{},"189":{},"240":{},"250":{},"303":{},"314":{},"350":{}},"component":{}}],["consist",{"_index":874,"title":{},"name":{},"text":{"7":{},"10":{},"47":{},"77":{},"90":{},"93":{},"148":{},"159":{},"171":{},"174":{},"210":{},"215":{},"263":{},"266":{},"333":{},"346":{}},"component":{}}],["consol",{"_index":2053,"title":{},"name":{},"text":{"50":{},"51":{},"143":{},"144":{},"197":{},"198":{},"336":{},"337":{}},"component":{}}],["consolid",{"_index":593,"title":{},"name":{},"text":{"3":{},"35":{},"86":{},"138":{},"187":{},"216":{},"259":{},"301":{}},"component":{}}],["constant",{"_index":1218,"title":{},"name":{},"text":{"14":{},"16":{},"33":{},"37":{},"50":{},"77":{},"97":{},"99":{},"136":{},"140":{},"143":{},"159":{},"178":{},"185":{},"189":{},"197":{},"239":{},"270":{},"303":{},"325":{},"336":{},"349":{}},"component":{}}],["constantli",{"_index":1065,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"215":{},"266":{},"346":{}},"component":{}}],["constraint",{"_index":2029,"title":{},"name":{},"text":{"49":{},"150":{},"212":{},"335":{}},"component":{}}],["construct",{"_index":1192,"title":{},"name":{},"text":{"12":{},"23":{},"95":{},"126":{},"176":{},"243":{},"250":{},"268":{},"271":{},"314":{}},"component":{}}],["constructor",{"_index":1649,"title":{},"name":{},"text":{"30":{},"33":{},"43":{},"46":{},"107":{},"133":{},"136":{},"147":{},"185":{},"195":{},"209":{},"243":{},"246":{},"258":{},"271":{},"274":{},"275":{},"322":{},"325":{},"329":{},"332":{},"340":{}},"component":{}}],["consult",{"_index":2924,"title":{},"name":{},"text":{"103":{}},"component":{}}],["consum",{"_index":1064,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["consumpt",{"_index":541,"title":{},"name":{},"text":{"3":{},"10":{},"86":{},"93":{},"174":{},"216":{},"259":{},"266":{},"340":{}},"component":{}}],["contact",{"_index":2047,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["contact#ag",{"_index":2068,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["contact#email",{"_index":2061,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["contact#emailaddress",{"_index":2063,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["contact#firstnam",{"_index":2056,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["contact#lastnam",{"_index":2060,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["contact#link",{"_index":2070,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["contact#nam",{"_index":2058,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["contact#not",{"_index":2064,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["contact#postaladdress",{"_index":2067,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["contact#supportnod",{"_index":2066,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["contact.java",{"_index":2046,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["contain",{"_index":1008,"title":{},"name":{},"text":{"10":{},"11":{},"34":{},"35":{},"37":{},"38":{},"43":{},"44":{},"49":{},"51":{},"54":{},"67":{},"69":{},"70":{},"72":{},"74":{},"77":{},"78":{},"93":{},"94":{},"107":{},"108":{},"110":{},"116":{},"137":{},"138":{},"140":{},"141":{},"144":{},"150":{},"151":{},"152":{},"154":{},"156":{},"159":{},"160":{},"169":{},"174":{},"175":{},"180":{},"186":{},"187":{},"189":{},"190":{},"195":{},"196":{},"198":{},"203":{},"212":{},"224":{},"226":{},"227":{},"229":{},"233":{},"243":{},"246":{},"266":{},"267":{},"271":{},"274":{},"275":{},"278":{},"279":{},"281":{},"282":{},"286":{},"294":{},"300":{},"301":{},"303":{},"305":{},"308":{},"329":{},"330":{},"335":{},"337":{},"339":{},"340":{}},"component":{}}],["content",{"_index":939,"title":{},"name":{},"text":{"9":{},"10":{},"55":{},"71":{},"92":{},"93":{},"111":{},"153":{},"173":{},"174":{},"181":{},"228":{},"259":{},"265":{},"266":{},"280":{},"297":{},"309":{}},"component":{}}],["context",{"_index":1318,"title":{},"name":{},"text":{"19":{},"27":{},"40":{},"104":{},"122":{},"130":{},"192":{},"242":{},"254":{},"318":{},"326":{},"352":{}},"component":{}}],["contigu",{"_index":2704,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["continu",{"_index":451,"title":{"64":{},"166":{},"221":{},"342":{}},"name":{"64":{},"166":{},"221":{},"342":{}},"text":{"3":{},"7":{},"49":{},"50":{},"64":{},"65":{},"86":{},"90":{},"143":{},"150":{},"166":{},"167":{},"171":{},"197":{},"212":{},"216":{},"221":{},"222":{},"259":{},"263":{},"335":{},"336":{},"342":{},"343":{}},"component":{}}],["contrari",{"_index":1123,"title":{},"name":{},"text":{"11":{},"52":{},"61":{},"94":{},"118":{},"145":{},"175":{},"199":{},"205":{},"267":{},"292":{},"296":{}},"component":{}}],["control",{"_index":895,"title":{},"name":{},"text":{"7":{},"10":{},"27":{},"36":{},"43":{},"50":{},"51":{},"67":{},"74":{},"90":{},"93":{},"107":{},"130":{},"139":{},"143":{},"144":{},"156":{},"169":{},"171":{},"174":{},"188":{},"195":{},"197":{},"198":{},"224":{},"254":{},"263":{},"266":{},"302":{},"318":{},"329":{},"336":{},"337":{},"339":{}},"component":{}}],["conveni",{"_index":499,"title":{"62":{},"119":{},"206":{},"298":{},"62-1":{},"119-1":{},"206-1":{},"298-1":{}},"name":{},"text":{"3":{},"4":{},"9":{},"26":{},"35":{},"53":{},"54":{},"59":{},"62":{},"68":{},"77":{},"86":{},"87":{},"92":{},"109":{},"110":{},"115":{},"119":{},"129":{},"138":{},"159":{},"170":{},"173":{},"179":{},"180":{},"187":{},"202":{},"206":{},"215":{},"216":{},"217":{},"225":{},"253":{},"259":{},"260":{},"265":{},"293":{},"298":{},"301":{},"307":{},"308":{},"317":{},"341":{},"346":{}},"component":{}}],["convent",{"_index":2019,"title":{"49-5":{},"150-5":{},"212-5":{},"335-5":{}},"name":{},"text":{},"component":{}}],["convention",{"_index":1617,"title":{},"name":{},"text":{"29":{},"132":{},"257":{},"321":{}},"component":{}}],["convers",{"_index":1088,"title":{"11-1":{},"50-5":{},"50-6":{},"50-7":{},"94-1":{},"143-5":{},"143-6":{},"143-7":{},"175-1":{},"197-5":{},"197-6":{},"197-7":{},"267-1":{},"336-5":{},"336-6":{},"336-7":{}},"name":{},"text":{"50":{},"67":{},"143":{},"169":{},"197":{},"224":{},"259":{},"336":{},"339":{}},"component":{}}],["convert",{"_index":724,"title":{},"name":{},"text":{"4":{},"11":{},"49":{},"50":{},"74":{},"87":{},"94":{},"143":{},"150":{},"156":{},"175":{},"197":{},"212":{},"217":{},"220":{},"243":{},"246":{},"260":{},"267":{},"271":{},"274":{},"275":{},"335":{},"336":{},"347":{}},"component":{}}],["converter.convertcsv(filesystem.ensurefilepath(\"type1.csv",{"_index":1149,"title":{},"name":{},"text":{"11":{},"94":{},"175":{},"267":{}},"component":{}}],["converter.convertdatafile(datafil",{"_index":1143,"title":{},"name":{},"text":{"11":{},"94":{},"175":{}},"component":{}}],["converter.convertdatafiles(exportresult.fil",{"_index":3249,"title":{},"name":{},"text":{"267":{}},"component":{}}],["copi",{"_index":143,"title":{"116":{},"203":{},"294":{},"116-1":{},"116-2":{},"203-1":{},"203-2":{},"294-1":{},"294-2":{}},"name":{"116":{},"203":{},"294":{}},"text":{"2":{},"7":{},"10":{},"21":{},"37":{},"38":{},"49":{},"50":{},"85":{},"86":{},"90":{},"93":{},"97":{},"116":{},"124":{},"140":{},"141":{},"143":{},"150":{},"171":{},"174":{},"178":{},"189":{},"190":{},"197":{},"203":{},"212":{},"214":{},"216":{},"248":{},"259":{},"263":{},"266":{},"270":{},"294":{},"303":{},"305":{},"312":{},"335":{},"336":{},"345":{}},"component":{}}],["copier",{"_index":2975,"title":{},"name":{},"text":{"203":{},"294":{}},"component":{}}],["copy(fin",{"_index":1420,"title":{},"name":{},"text":{"22":{},"23":{},"125":{},"126":{},"249":{},"250":{},"313":{},"314":{}},"component":{}}],["copyonwritearraylist",{"_index":1714,"title":{},"name":{},"text":{"32":{},"135":{},"184":{},"324":{}},"component":{}}],["core",{"_index":794,"title":{},"name":{},"text":{"5":{},"19":{},"88":{},"122":{},"218":{},"242":{},"261":{},"271":{},"274":{},"352":{}},"component":{}}],["correct",{"_index":2004,"title":{},"name":{},"text":{"47":{},"50":{},"60":{},"117":{},"143":{},"148":{},"197":{},"204":{},"210":{},"295":{},"333":{},"336":{}},"component":{}}],["correctli",{"_index":616,"title":{},"name":{},"text":{"3":{},"10":{},"14":{},"33":{},"86":{},"93":{},"97":{},"136":{},"174":{},"178":{},"185":{},"216":{},"259":{},"266":{},"270":{},"325":{},"340":{}},"component":{}}],["correspond",{"_index":588,"title":{},"name":{},"text":{"3":{},"10":{},"50":{},"61":{},"86":{},"93":{},"118":{},"143":{},"174":{},"197":{},"205":{},"216":{},"259":{},"266":{},"296":{},"336":{}},"component":{}}],["corretto",{"_index":778,"title":{},"name":{},"text":{"5":{},"88":{},"218":{},"261":{}},"component":{}}],["corrupt",{"_index":843,"title":{},"name":{},"text":{"7":{},"90":{},"171":{},"263":{},"304":{}},"component":{}}],["cost",{"_index":1015,"title":{},"name":{},"text":{"10":{},"61":{},"93":{},"118":{},"174":{},"205":{},"266":{},"296":{}},"component":{}}],["count",{"_index":254,"title":{"37-2":{},"140-2":{},"189-2":{},"303-2":{}},"name":{},"text":{"3":{},"11":{},"35":{},"37":{},"39":{},"49":{},"50":{},"86":{},"94":{},"138":{},"140":{},"142":{},"143":{},"150":{},"175":{},"187":{},"189":{},"191":{},"197":{},"212":{},"216":{},"240":{},"259":{},"267":{},"301":{},"303":{},"306":{},"335":{},"336":{},"350":{}},"component":{}}],["count=1",{"_index":3293,"title":{},"name":{},"text":{"275":{}},"component":{}}],["count=2",{"_index":3116,"title":{},"name":{},"text":{"243":{},"246":{},"271":{},"274":{},"275":{}},"component":{}}],["cours",{"_index":836,"title":{},"name":{},"text":{"7":{},"13":{},"50":{},"51":{},"67":{},"90":{},"96":{},"116":{},"143":{},"144":{},"169":{},"171":{},"177":{},"197":{},"198":{},"203":{},"224":{},"263":{},"269":{},"294":{},"336":{},"337":{},"339":{}},"component":{}}],["cover",{"_index":819,"title":{},"name":{},"text":{"6":{},"49":{},"50":{},"89":{},"143":{},"150":{},"197":{},"212":{},"219":{},"262":{},"335":{},"336":{}},"component":{}}],["cpu",{"_index":1838,"title":{},"name":{},"text":{"37":{},"140":{},"189":{},"303":{}},"component":{}}],["cql",{"_index":1114,"title":{},"name":{},"text":{"11":{},"94":{},"175":{}},"component":{}}],["cr",{"_index":2597,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["crash",{"_index":828,"title":{"7-1":{},"90-1":{},"171-1":{},"263-1":{}},"name":{},"text":{"7":{},"90":{},"171":{},"263":{}},"component":{}}],["creat",{"_index":47,"title":{"21":{},"124":{},"248":{},"312":{},"9-4":{},"92-4":{},"173-4":{},"265-4":{}},"name":{"21":{},"124":{},"248":{},"312":{}},"text":{"1":{},"3":{},"4":{},"9":{},"11":{},"14":{},"17":{},"18":{},"21":{},"23":{},"24":{},"25":{},"27":{},"29":{},"33":{},"35":{},"37":{},"40":{},"43":{},"49":{},"50":{},"51":{},"52":{},"56":{},"57":{},"60":{},"62":{},"72":{},"74":{},"84":{},"86":{},"87":{},"92":{},"94":{},"97":{},"100":{},"104":{},"107":{},"112":{},"113":{},"116":{},"117":{},"119":{},"121":{},"124":{},"126":{},"127":{},"128":{},"130":{},"132":{},"136":{},"138":{},"140":{},"143":{},"144":{},"145":{},"150":{},"154":{},"156":{},"173":{},"175":{},"178":{},"182":{},"185":{},"187":{},"189":{},"192":{},"195":{},"197":{},"198":{},"199":{},"200":{},"203":{},"204":{},"206":{},"212":{},"213":{},"215":{},"216":{},"217":{},"220":{},"229":{},"240":{},"241":{},"243":{},"245":{},"246":{},"248":{},"250":{},"251":{},"252":{},"254":{},"257":{},"259":{},"260":{},"265":{},"267":{},"270":{},"271":{},"273":{},"274":{},"275":{},"276":{},"282":{},"292":{},"294":{},"295":{},"297":{},"298":{},"301":{},"303":{},"304":{},"310":{},"312":{},"314":{},"315":{},"316":{},"318":{},"321":{},"325":{},"326":{},"329":{},"335":{},"336":{},"337":{},"344":{},"346":{},"347":{},"350":{},"351":{}},"component":{}}],["createcli",{"_index":3002,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["createconfigur",{"_index":1746,"title":{},"name":{},"text":{"34":{},"35":{},"39":{},"64":{},"137":{},"138":{},"142":{},"166":{},"186":{},"187":{},"191":{},"221":{},"300":{},"301":{},"306":{},"342":{}},"component":{}}],["createdata(fin",{"_index":1417,"title":{},"name":{},"text":{"22":{},"23":{},"125":{},"126":{},"249":{},"250":{},"313":{},"314":{}},"component":{}}],["createembeddedstoragefound",{"_index":1786,"title":{},"name":{},"text":{"35":{},"39":{},"64":{},"138":{},"142":{},"166":{},"187":{},"191":{},"221":{},"301":{},"306":{},"342":{}},"component":{}}],["createembeddedstoragemanag",{"_index":1779,"title":{},"name":{},"text":{"35":{},"39":{},"63":{},"64":{},"120":{},"138":{},"142":{},"166":{},"187":{},"191":{},"207":{},"221":{},"299":{},"301":{},"306":{},"342":{}},"component":{}}],["createentityinst",{"_index":1416,"title":{},"name":{},"text":{"22":{},"23":{},"125":{},"126":{},"249":{},"250":{},"313":{},"314":{}},"component":{}}],["createfilenameprovid",{"_index":1876,"title":{},"name":{},"text":{"38":{},"141":{},"190":{},"305":{}},"component":{}}],["createfileprovid",{"_index":1775,"title":{},"name":{},"text":{"35":{},"38":{},"39":{},"64":{},"138":{},"141":{},"142":{},"166":{},"187":{},"190":{},"191":{},"221":{},"301":{},"305":{},"306":{},"342":{}},"component":{}}],["createhost",{"_index":2997,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["creation",{"_index":1275,"title":{},"name":{},"text":{"16":{},"27":{},"68":{},"99":{},"130":{},"170":{},"225":{},"239":{},"246":{},"254":{},"259":{},"275":{},"318":{},"341":{},"349":{}},"component":{}}],["creationtim",{"_index":2320,"title":{},"name":{},"text":{"55":{},"111":{},"181":{},"309":{}},"component":{}}],["creator",{"_index":1356,"title":{},"name":{},"text":{"21":{},"23":{},"124":{},"126":{},"248":{},"250":{},"312":{},"314":{}},"component":{}}],["credenti",{"_index":2541,"title":{},"name":{},"text":{"69":{},"70":{},"71":{},"74":{},"151":{},"152":{},"153":{},"156":{},"226":{},"227":{},"228":{},"278":{},"279":{},"280":{},"281":{}},"component":{}}],["credentials.access",{"_index":2548,"title":{},"name":{},"text":{"69":{},"70":{},"151":{},"152":{},"226":{},"227":{},"278":{},"279":{}},"component":{}}],["credentials.account",{"_index":2573,"title":{},"name":{},"text":{"71":{},"153":{},"228":{},"280":{}},"component":{}}],["credentials.auth",{"_index":2623,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["credentials.password",{"_index":2572,"title":{},"name":{},"text":{"71":{},"74":{},"153":{},"156":{},"228":{},"280":{}},"component":{}}],["credentials.secret",{"_index":2549,"title":{},"name":{},"text":{"69":{},"70":{},"151":{},"152":{},"226":{},"227":{},"278":{},"279":{}},"component":{}}],["credentials.sourc",{"_index":2639,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["credentials.typ",{"_index":2540,"title":{},"name":{},"text":{"69":{},"70":{},"71":{},"151":{},"152":{},"153":{},"226":{},"227":{},"228":{},"278":{},"279":{},"280":{},"281":{}},"component":{}}],["credentials.usernam",{"_index":2571,"title":{},"name":{},"text":{"71":{},"74":{},"153":{},"156":{},"228":{},"280":{}},"component":{}}],["cross",{"_index":1477,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["crucial",{"_index":2003,"title":{},"name":{},"text":{"47":{},"148":{},"210":{},"333":{}},"component":{}}],["crud",{"_index":1654,"title":{"31-3":{},"134-3":{},"183-3":{},"323-3":{}},"name":{},"text":{"31":{},"134":{},"183":{},"323":{}},"component":{}}],["csv",{"_index":519,"title":{},"name":{},"text":{"3":{},"4":{},"11":{},"49":{},"50":{},"86":{},"87":{},"94":{},"143":{},"150":{},"175":{},"197":{},"212":{},"216":{},"217":{},"259":{},"260":{},"267":{},"335":{},"336":{}},"component":{}}],["currenc",{"_index":509,"title":{},"name":{},"text":{"3":{},"32":{},"86":{},"135":{},"184":{},"216":{},"259":{},"324":{}},"component":{}}],["current",{"_index":927,"title":{},"name":{},"text":{"9":{},"10":{},"12":{},"27":{},"37":{},"40":{},"47":{},"49":{},"50":{},"55":{},"66":{},"68":{},"92":{},"93":{},"95":{},"97":{},"102":{},"104":{},"111":{},"130":{},"140":{},"143":{},"148":{},"150":{},"168":{},"170":{},"173":{},"174":{},"176":{},"178":{},"179":{},"181":{},"189":{},"192":{},"197":{},"210":{},"212":{},"223":{},"225":{},"245":{},"246":{},"254":{},"265":{},"266":{},"268":{},"270":{},"273":{},"303":{},"307":{},"309":{},"318":{},"326":{},"333":{},"335":{},"336":{},"338":{},"341":{},"347":{}},"component":{}}],["custom",{"_index":234,"title":{"40":{},"41":{},"42":{},"43":{},"104":{},"105":{},"106":{},"107":{},"192":{},"193":{},"194":{},"195":{},"326":{},"327":{},"328":{},"329":{},"14-2":{},"43-2":{},"50-9":{},"61-4":{},"97-4":{},"107-2":{},"118-4":{},"143-9":{},"178-4":{},"195-2":{},"197-9":{},"205-4":{},"270-4":{},"296-4":{},"329-2":{},"336-9":{}},"name":{"40":{},"41":{},"42":{},"43":{},"104":{},"105":{},"106":{},"107":{},"192":{},"193":{},"194":{},"195":{},"326":{},"327":{},"328":{},"329":{}},"text":{"3":{},"11":{},"14":{},"33":{},"35":{},"36":{},"40":{},"41":{},"42":{},"43":{},"44":{},"50":{},"51":{},"56":{},"59":{},"63":{},"66":{},"74":{},"76":{},"86":{},"94":{},"97":{},"104":{},"105":{},"106":{},"107":{},"108":{},"112":{},"115":{},"116":{},"120":{},"136":{},"138":{},"139":{},"143":{},"144":{},"156":{},"158":{},"168":{},"175":{},"178":{},"182":{},"185":{},"187":{},"188":{},"192":{},"193":{},"194":{},"195":{},"196":{},"197":{},"198":{},"202":{},"203":{},"207":{},"215":{},"216":{},"220":{},"223":{},"232":{},"243":{},"246":{},"259":{},"270":{},"271":{},"274":{},"275":{},"285":{},"293":{},"294":{},"299":{},"301":{},"302":{},"310":{},"325":{},"326":{},"327":{},"328":{},"329":{},"330":{},"336":{},"337":{},"338":{},"340":{},"346":{},"347":{}},"component":{}}],["custombinaryhandl",{"_index":1936,"title":{},"name":{},"text":{"43":{},"107":{},"195":{},"329":{}},"component":{}}],["custombufferedimagehandl",{"_index":1948,"title":{},"name":{},"text":{"43":{},"107":{},"195":{},"329":{}},"component":{}}],["customeagerstoringfieldevalu",{"_index":1925,"title":{},"name":{},"text":{"42":{},"59":{},"106":{},"115":{},"194":{},"202":{},"293":{},"328":{}},"component":{}}],["customercopi",{"_index":2946,"title":{},"name":{},"text":{"116":{},"203":{},"294":{}},"component":{}}],["customercopy.addpurchase(purchas",{"_index":2948,"title":{},"name":{},"text":{"116":{},"203":{},"294":{}},"component":{}}],["customerid",{"_index":2258,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["customize(cachemanag",{"_index":1328,"title":{},"name":{},"text":{"19":{},"122":{},"242":{},"352":{}},"component":{}}],["customlegacytypehandl",{"_index":1914,"title":{},"name":{},"text":{"41":{},"105":{},"193":{},"327":{}},"component":{}}],["customtypehandlerregistri",{"_index":1945,"title":{},"name":{},"text":{"43":{},"107":{},"195":{},"329":{}},"component":{}}],["cut",{"_index":986,"title":{},"name":{},"text":{"10":{},"23":{},"93":{},"126":{},"174":{},"250":{},"266":{},"314":{}},"component":{}}],["cycl",{"_index":829,"title":{"7":{},"90":{},"171":{},"263":{}},"name":{"7":{},"90":{},"171":{},"263":{}},"text":{"28":{},"37":{},"131":{},"140":{},"189":{},"256":{},"303":{},"320":{}},"component":{}}],["da91641c0015",{"_index":1668,"title":{},"name":{},"text":{"31":{},"134":{},"183":{},"323":{}},"component":{}}],["danger",{"_index":1250,"title":{},"name":{},"text":{"14":{},"51":{},"97":{},"144":{},"178":{},"198":{},"270":{},"337":{}},"component":{}}],["dartifact=one.microstream:microstream",{"_index":2959,"title":{},"name":{},"text":{"179":{},"307":{}},"component":{}}],["dash",{"_index":383,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["dat",{"_index":1148,"title":{},"name":{},"text":{"11":{},"37":{},"39":{},"94":{},"140":{},"142":{},"175":{},"189":{},"191":{},"303":{},"306":{}},"component":{}}],["data",{"_index":64,"title":{"8":{},"45":{},"46":{},"52":{},"60":{},"91":{},"116":{},"117":{},"145":{},"146":{},"147":{},"172":{},"199":{},"203":{},"204":{},"208":{},"209":{},"264":{},"292":{},"294":{},"295":{},"331":{},"332":{},"9-5":{},"11-1":{},"37-5":{},"37-6":{},"37-7":{},"45-1":{},"47-1":{},"49-4":{},"59-2":{},"92-5":{},"94-1":{},"97-2":{},"97-3":{},"115-2":{},"140-5":{},"140-6":{},"140-7":{},"146-1":{},"148-1":{},"150-4":{},"173-5":{},"175-1":{},"178-2":{},"178-3":{},"189-5":{},"189-6":{},"189-7":{},"202-2":{},"208-1":{},"210-1":{},"212-4":{},"265-5":{},"267-1":{},"270-2":{},"270-3":{},"293-2":{},"303-5":{},"303-6":{},"303-7":{},"331-1":{},"333-1":{},"335-4":{}},"name":{"8":{},"45":{},"46":{},"91":{},"146":{},"147":{},"172":{},"208":{},"209":{},"264":{},"331":{},"332":{}},"text":{"1":{},"2":{},"3":{},"4":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"17":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"33":{},"34":{},"35":{},"37":{},"39":{},"43":{},"44":{},"45":{},"46":{},"47":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"60":{},"62":{},"67":{},"74":{},"75":{},"77":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"90":{},"91":{},"92":{},"93":{},"94":{},"95":{},"96":{},"97":{},"100":{},"107":{},"108":{},"109":{},"110":{},"111":{},"112":{},"113":{},"116":{},"117":{},"119":{},"124":{},"125":{},"126":{},"127":{},"129":{},"130":{},"136":{},"137":{},"138":{},"140":{},"142":{},"143":{},"144":{},"145":{},"146":{},"147":{},"148":{},"150":{},"156":{},"157":{},"159":{},"161":{},"162":{},"163":{},"164":{},"165":{},"169":{},"171":{},"172":{},"173":{},"174":{},"175":{},"176":{},"177":{},"178":{},"179":{},"180":{},"181":{},"182":{},"185":{},"186":{},"187":{},"189":{},"191":{},"195":{},"196":{},"197":{},"198":{},"199":{},"203":{},"204":{},"206":{},"208":{},"209":{},"210":{},"212":{},"213":{},"214":{},"215":{},"216":{},"217":{},"220":{},"224":{},"231":{},"234":{},"235":{},"236":{},"237":{},"240":{},"243":{},"246":{},"248":{},"249":{},"250":{},"251":{},"253":{},"254":{},"259":{},"260":{},"263":{},"264":{},"265":{},"266":{},"267":{},"268":{},"269":{},"270":{},"271":{},"274":{},"275":{},"278":{},"279":{},"280":{},"281":{},"282":{},"283":{},"284":{},"285":{},"286":{},"287":{},"288":{},"289":{},"290":{},"291":{},"292":{},"294":{},"295":{},"297":{},"298":{},"300":{},"301":{},"303":{},"304":{},"306":{},"307":{},"308":{},"309":{},"310":{},"312":{},"313":{},"314":{},"315":{},"317":{},"318":{},"325":{},"329":{},"330":{},"331":{},"332":{},"333":{},"335":{},"336":{},"337":{},"339":{},"340":{},"344":{},"345":{},"346":{},"347":{},"350":{}},"component":{}}],["data.firstnam",{"_index":1492,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["data.lastnam",{"_index":1493,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["data.nam",{"_index":1449,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["data.partn",{"_index":1423,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["data.speci",{"_index":1422,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["data]{thread",{"_index":1834,"title":{},"name":{},"text":{"37":{},"140":{},"189":{},"303":{}},"component":{}}],["databas",{"_index":731,"title":{"7-1":{},"7-2":{},"9-4":{},"9-6":{},"45-1":{},"45-2":{},"47-4":{},"49-6":{},"90-1":{},"90-2":{},"92-4":{},"92-6":{},"146-1":{},"146-2":{},"148-4":{},"150-6":{},"171-1":{},"171-2":{},"173-4":{},"173-6":{},"208-1":{},"208-2":{},"210-4":{},"212-6":{},"263-1":{},"263-2":{},"265-4":{},"265-6":{},"331-1":{},"331-2":{},"333-4":{},"335-6":{}},"name":{},"text":{"4":{},"7":{},"9":{},"10":{},"12":{},"14":{},"31":{},"33":{},"35":{},"43":{},"45":{},"49":{},"50":{},"52":{},"54":{},"60":{},"66":{},"67":{},"74":{},"78":{},"87":{},"90":{},"92":{},"93":{},"95":{},"97":{},"107":{},"110":{},"116":{},"117":{},"134":{},"136":{},"138":{},"143":{},"145":{},"146":{},"150":{},"156":{},"160":{},"168":{},"169":{},"171":{},"173":{},"174":{},"176":{},"178":{},"180":{},"183":{},"185":{},"187":{},"195":{},"197":{},"199":{},"203":{},"204":{},"208":{},"212":{},"217":{},"223":{},"224":{},"233":{},"243":{},"246":{},"260":{},"263":{},"265":{},"266":{},"268":{},"270":{},"271":{},"275":{},"281":{},"286":{},"292":{},"294":{},"295":{},"301":{},"308":{},"323":{},"325":{},"329":{},"331":{},"335":{},"336":{},"338":{},"339":{}},"component":{}}],["database’",{"_index":969,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["datafil",{"_index":1140,"title":{},"name":{},"text":{"11":{},"94":{},"175":{}},"component":{}}],["datafile.clos",{"_index":1144,"title":{},"name":{},"text":{"11":{},"94":{},"175":{}},"component":{}}],["datafilecleanupheadfil",{"_index":446,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["datafilemaximums",{"_index":442,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["datafileminimums",{"_index":439,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["datafileminimumuseratio",{"_index":444,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["datafileprefix",{"_index":417,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["datafilesuffix",{"_index":418,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["dataitem",{"_index":2387,"title":{},"name":{},"text":{"60":{},"117":{},"204":{},"295":{}},"component":{}}],["dataitem.setintvalue(100",{"_index":2393,"title":{},"name":{},"text":{"60":{},"117":{},"204":{},"295":{}},"component":{}}],["dataitem.setname(\"bob",{"_index":2396,"title":{},"name":{},"text":{"60":{},"117":{},"204":{},"295":{}},"component":{}}],["dataroot",{"_index":944,"title":{},"name":{},"text":{"9":{},"92":{},"173":{},"265":{}},"component":{}}],["dataset",{"_index":2214,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["datasourc",{"_index":2363,"title":{},"name":{},"text":{"57":{},"79":{},"80":{},"81":{},"82":{},"83":{},"113":{},"161":{},"162":{},"163":{},"164":{},"165":{},"234":{},"235":{},"236":{},"237":{},"287":{},"288":{},"289":{},"290":{},"291":{}},"component":{}}],["datasource.setpassword(\"secret",{"_index":2366,"title":{},"name":{},"text":{"57":{},"79":{},"80":{},"81":{},"82":{},"113":{},"161":{},"162":{},"163":{},"164":{},"234":{},"235":{},"236":{},"287":{},"288":{},"289":{},"290":{}},"component":{}}],["datasource.seturl(\"jdbc:mysql://host:3306/mydb",{"_index":2364,"title":{},"name":{},"text":{"57":{},"79":{},"80":{},"113":{},"161":{},"162":{},"234":{},"288":{}},"component":{}}],["datasource.seturl(\"jdbc:oracle:thin:@localhost:1521/db",{"_index":2777,"title":{},"name":{},"text":{"81":{},"163":{},"235":{},"289":{}},"component":{}}],["datasource.seturl(\"jdbc:postgresql://localhost:5432/mydb",{"_index":2788,"title":{},"name":{},"text":{"82":{},"164":{},"236":{},"290":{}},"component":{}}],["datasource.seturl(\"jdbc:sap://dummy_host:0/?key=user1userkey&encrypt=true&validatecertificate=fals",{"_index":3317,"title":{},"name":{},"text":{"287":{}},"component":{}}],["datasource.seturl(\"jdbc:sqlite:microstreamdb",{"_index":2801,"title":{},"name":{},"text":{"83":{},"165":{},"237":{},"291":{}},"component":{}}],["datasource.setuser(\"postgr",{"_index":2789,"title":{},"name":{},"text":{"82":{},"164":{},"236":{},"290":{}},"component":{}}],["datasource.setuser(\"us",{"_index":2365,"title":{},"name":{},"text":{"57":{},"79":{},"80":{},"81":{},"113":{},"161":{},"162":{},"163":{},"234":{},"235":{},"287":{},"288":{},"289":{}},"component":{}}],["datastor",{"_index":2951,"title":{},"name":{},"text":{"116":{},"203":{},"294":{}},"component":{}}],["date",{"_index":930,"title":{},"name":{},"text":{"9":{},"32":{},"33":{},"43":{},"92":{},"107":{},"135":{},"136":{},"173":{},"184":{},"185":{},"195":{},"265":{},"324":{},"325":{},"329":{}},"component":{}}],["date(valu",{"_index":1975,"title":{},"name":{},"text":{"43":{},"107":{},"195":{},"329":{}},"component":{}}],["dateofbirth",{"_index":1961,"title":{},"name":{},"text":{"43":{},"107":{},"195":{},"329":{}},"component":{}}],["day",{"_index":1762,"title":{},"name":{},"text":{"34":{},"37":{},"137":{},"140":{},"186":{},"189":{},"300":{},"303":{}},"component":{}}],["db",{"_index":3064,"title":{},"name":{},"text":{"216":{},"259":{},"275":{}},"component":{}}],["dbm",{"_index":1153,"title":{"49-5":{},"150-5":{},"212-5":{},"335-5":{}},"name":{},"text":{"12":{},"49":{},"95":{},"150":{},"176":{},"212":{},"268":{},"335":{}},"component":{}}],["ddest=storage.restclient.app",{"_index":2963,"title":{},"name":{},"text":{"179":{},"307":{}},"component":{}}],["deadlock",{"_index":2824,"title":{},"name":{},"text":{"86":{},"97":{},"178":{},"216":{},"259":{},"270":{}},"component":{}}],["debug",{"_index":2178,"title":{"274-3":{}},"name":{},"text":{"50":{},"67":{},"143":{},"169":{},"197":{},"224":{},"246":{},"274":{},"275":{},"336":{},"339":{}},"component":{}}],["debugg",{"_index":1362,"title":{},"name":{},"text":{"21":{},"27":{},"54":{},"110":{},"124":{},"130":{},"180":{},"248":{},"254":{},"308":{},"312":{},"318":{}},"component":{}}],["decis",{"_index":2268,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["declar",{"_index":1378,"title":{},"name":{},"text":{"22":{},"50":{},"125":{},"143":{},"197":{},"249":{},"313":{},"336":{}},"component":{}}],["decor",{"_index":1609,"title":{},"name":{},"text":{"29":{},"132":{},"257":{},"321":{}},"component":{}}],["dedic",{"_index":1157,"title":{},"name":{},"text":{"12":{},"95":{},"176":{},"268":{}},"component":{}}],["deem",{"_index":2519,"title":{},"name":{},"text":{"68":{},"170":{},"225":{},"341":{}},"component":{}}],["deep",{"_index":2815,"title":{"116-1":{},"116-2":{},"203-1":{},"203-2":{},"294-1":{},"294-2":{}},"name":{"116":{},"203":{},"294":{}},"text":{"86":{},"116":{},"203":{},"216":{},"259":{},"294":{}},"component":{}}],["default",{"_index":30,"title":{},"name":{},"text":{"1":{},"3":{},"7":{},"9":{},"10":{},"14":{},"15":{},"17":{},"20":{},"22":{},"23":{},"30":{},"33":{},"34":{},"35":{},"36":{},"37":{},"39":{},"42":{},"43":{},"44":{},"46":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"58":{},"61":{},"63":{},"64":{},"66":{},"69":{},"70":{},"72":{},"74":{},"75":{},"76":{},"77":{},"84":{},"86":{},"90":{},"92":{},"93":{},"97":{},"98":{},"100":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"112":{},"114":{},"118":{},"120":{},"123":{},"125":{},"126":{},"133":{},"136":{},"137":{},"138":{},"139":{},"140":{},"142":{},"143":{},"144":{},"145":{},"147":{},"151":{},"152":{},"154":{},"156":{},"157":{},"158":{},"159":{},"166":{},"168":{},"171":{},"173":{},"174":{},"178":{},"179":{},"180":{},"181":{},"182":{},"185":{},"186":{},"187":{},"188":{},"189":{},"191":{},"194":{},"195":{},"196":{},"197":{},"198":{},"199":{},"201":{},"205":{},"207":{},"209":{},"213":{},"215":{},"216":{},"220":{},"221":{},"223":{},"226":{},"227":{},"229":{},"231":{},"232":{},"238":{},"240":{},"243":{},"246":{},"247":{},"249":{},"250":{},"258":{},"259":{},"263":{},"265":{},"266":{},"270":{},"271":{},"274":{},"275":{},"277":{},"278":{},"279":{},"281":{},"282":{},"284":{},"285":{},"292":{},"296":{},"299":{},"300":{},"301":{},"302":{},"303":{},"306":{},"307":{},"308":{},"309":{},"310":{},"311":{},"313":{},"314":{},"322":{},"325":{},"328":{},"329":{},"330":{},"332":{},"336":{},"337":{},"338":{},"340":{},"342":{},"344":{},"346":{},"347":{},"348":{},"350":{}},"component":{}}],["default().copy(oth",{"_index":1412,"title":{},"name":{},"text":{"22":{},"23":{},"125":{},"126":{},"249":{},"250":{},"313":{},"314":{}},"component":{}}],["default(anim",{"_index":1432,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["default(fin",{"_index":1434,"title":{},"name":{},"text":{"22":{},"23":{},"125":{},"126":{},"249":{},"250":{},"313":{},"314":{}},"component":{}}],["default(person",{"_index":1499,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["default(pet",{"_index":1456,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["defaultcredenti",{"_index":3307,"title":{},"name":{},"text":{"281":{}},"component":{}}],["defin",{"_index":58,"title":{"22":{},"125":{},"249":{},"313":{}},"name":{"22":{},"125":{},"249":{},"313":{}},"text":{"1":{},"3":{},"4":{},"7":{},"9":{},"10":{},"12":{},"14":{},"21":{},"23":{},"37":{},"43":{},"45":{},"50":{},"51":{},"74":{},"77":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"86":{},"87":{},"90":{},"92":{},"93":{},"95":{},"97":{},"107":{},"124":{},"126":{},"140":{},"143":{},"144":{},"146":{},"156":{},"159":{},"161":{},"162":{},"163":{},"164":{},"165":{},"171":{},"173":{},"174":{},"176":{},"178":{},"189":{},"195":{},"197":{},"198":{},"208":{},"213":{},"216":{},"217":{},"234":{},"235":{},"236":{},"237":{},"240":{},"243":{},"246":{},"248":{},"250":{},"259":{},"260":{},"263":{},"265":{},"266":{},"268":{},"270":{},"271":{},"274":{},"275":{},"287":{},"288":{},"289":{},"290":{},"291":{},"303":{},"312":{},"314":{},"329":{},"331":{},"336":{},"337":{},"344":{},"350":{}},"component":{}}],["definestoragemanag",{"_index":3277,"title":{},"name":{},"text":{"275":{}},"component":{}}],["definestoragemanagers(storagemanagerprovid",{"_index":3278,"title":{},"name":{},"text":{"275":{}},"component":{}}],["definit",{"_index":834,"title":{},"name":{},"text":{"7":{},"33":{},"77":{},"90":{},"136":{},"159":{},"171":{},"185":{},"263":{},"325":{}},"component":{}}],["defus",{"_index":2224,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["degrad",{"_index":2033,"title":{},"name":{},"text":{"49":{},"150":{},"212":{},"335":{}},"component":{}}],["delay",{"_index":3169,"title":{},"name":{},"text":{"246":{},"275":{}},"component":{}}],["deleg",{"_index":1619,"title":{},"name":{},"text":{"29":{},"132":{},"257":{},"321":{}},"component":{}}],["delet",{"_index":410,"title":{"8":{},"91":{},"172":{},"264":{},"50-10":{},"143-10":{},"197-10":{},"336-10":{}},"name":{"8":{},"91":{},"172":{},"264":{}},"text":{"3":{},"8":{},"10":{},"37":{},"38":{},"49":{},"50":{},"86":{},"91":{},"93":{},"140":{},"141":{},"143":{},"150":{},"172":{},"174":{},"189":{},"190":{},"197":{},"212":{},"216":{},"259":{},"264":{},"266":{},"303":{},"305":{},"335":{},"336":{}},"component":{}}],["deletiondirectori",{"_index":409,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["deliber",{"_index":750,"title":{},"name":{},"text":{"4":{},"46":{},"87":{},"147":{},"209":{},"217":{},"260":{},"332":{}},"component":{}}],["delic",{"_index":2269,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["deliv",{"_index":720,"title":{},"name":{},"text":{"4":{},"69":{},"70":{},"87":{},"151":{},"152":{},"217":{},"226":{},"227":{},"260":{},"278":{},"279":{}},"component":{}}],["demand",{"_index":539,"title":{},"name":{},"text":{"3":{},"10":{},"12":{},"35":{},"45":{},"68":{},"86":{},"93":{},"95":{},"138":{},"146":{},"170":{},"174":{},"176":{},"187":{},"208":{},"216":{},"225":{},"259":{},"266":{},"268":{},"301":{},"331":{},"341":{},"347":{}},"component":{}}],["demo",{"_index":1653,"title":{"31":{},"134":{},"183":{},"323":{},"31-2":{},"134-2":{},"183-2":{},"323-2":{}},"name":{"31":{},"134":{},"183":{},"323":{}},"text":{"31":{},"134":{},"183":{},"323":{}},"component":{}}],["demonstr",{"_index":2954,"title":{},"name":{},"text":{"116":{},"203":{},"294":{}},"component":{}}],["depend",{"_index":210,"title":{"4-3":{}},"name":{},"text":{"3":{},"4":{},"5":{},"10":{},"11":{},"17":{},"18":{},"19":{},"33":{},"35":{},"40":{},"49":{},"56":{},"57":{},"65":{},"86":{},"87":{},"88":{},"93":{},"94":{},"100":{},"104":{},"112":{},"113":{},"121":{},"122":{},"136":{},"138":{},"150":{},"167":{},"174":{},"175":{},"182":{},"185":{},"187":{},"192":{},"200":{},"212":{},"213":{},"215":{},"216":{},"217":{},"218":{},"222":{},"240":{},"241":{},"242":{},"246":{},"255":{},"259":{},"260":{},"261":{},"266":{},"267":{},"275":{},"276":{},"278":{},"279":{},"280":{},"281":{},"282":{},"283":{},"284":{},"285":{},"286":{},"287":{},"288":{},"289":{},"290":{},"291":{},"301":{},"310":{},"319":{},"325":{},"326":{},"335":{},"340":{},"343":{},"344":{},"346":{},"350":{},"351":{},"352":{}},"component":{}}],["dependency:get",{"_index":2958,"title":{},"name":{},"text":{"179":{},"307":{}},"component":{}}],["depict",{"_index":1830,"title":{},"name":{},"text":{"37":{},"140":{},"189":{},"303":{}},"component":{}}],["deploy",{"_index":2672,"title":{},"name":{},"text":{"76":{},"158":{},"232":{},"243":{},"271":{},"285":{}},"component":{}}],["deprec",{"_index":406,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["depth",{"_index":2189,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["describ",{"_index":1555,"title":{},"name":{},"text":{"25":{},"32":{},"41":{},"105":{},"128":{},"135":{},"184":{},"193":{},"243":{},"246":{},"252":{},"271":{},"274":{},"275":{},"316":{},"324":{},"327":{}},"component":{}}],["descript",{"_index":696,"title":{"37-1":{},"140-1":{},"189-1":{},"303-1":{}},"name":{},"text":{"4":{},"16":{},"34":{},"37":{},"38":{},"39":{},"50":{},"54":{},"55":{},"68":{},"69":{},"70":{},"71":{},"72":{},"74":{},"75":{},"76":{},"77":{},"78":{},"87":{},"99":{},"110":{},"111":{},"137":{},"140":{},"141":{},"142":{},"143":{},"151":{},"152":{},"153":{},"154":{},"156":{},"157":{},"158":{},"159":{},"160":{},"170":{},"180":{},"181":{},"186":{},"189":{},"190":{},"191":{},"197":{},"217":{},"225":{},"226":{},"227":{},"228":{},"229":{},"231":{},"232":{},"233":{},"239":{},"260":{},"278":{},"279":{},"280":{},"281":{},"282":{},"284":{},"285":{},"286":{},"300":{},"303":{},"305":{},"306":{},"308":{},"309":{},"336":{},"341":{},"347":{},"349":{}},"component":{}}],["descriptor",{"_index":2673,"title":{},"name":{},"text":{"76":{},"158":{},"232":{},"285":{}},"component":{}}],["deseri",{"_index":2981,"title":{},"name":{},"text":{"215":{},"220":{},"346":{},"347":{}},"component":{}}],["design",{"_index":851,"title":{},"name":{},"text":{"7":{},"29":{},"31":{},"43":{},"60":{},"90":{},"107":{},"117":{},"132":{},"134":{},"171":{},"183":{},"195":{},"204":{},"257":{},"263":{},"295":{},"321":{},"323":{},"329":{}},"component":{}}],["desir",{"_index":1747,"title":{},"name":{},"text":{"34":{},"50":{},"137":{},"143":{},"186":{},"197":{},"246":{},"275":{},"300":{},"336":{}},"component":{}}],["desktop",{"_index":792,"title":{},"name":{},"text":{"5":{},"88":{},"218":{},"261":{}},"component":{}}],["despit",{"_index":560,"title":{},"name":{},"text":{"3":{},"10":{},"48":{},"86":{},"93":{},"149":{},"174":{},"211":{},"216":{},"259":{},"266":{}},"component":{}}],["destroy",{"_index":846,"title":{},"name":{},"text":{"7":{},"90":{},"171":{},"263":{}},"component":{}}],["detail",{"_index":217,"title":{"37-1":{},"140-1":{},"189-1":{},"303-1":{}},"name":{},"text":{"3":{},"35":{},"37":{},"42":{},"47":{},"50":{},"61":{},"77":{},"78":{},"86":{},"106":{},"118":{},"138":{},"140":{},"143":{},"148":{},"159":{},"160":{},"187":{},"189":{},"194":{},"197":{},"205":{},"210":{},"216":{},"233":{},"259":{},"278":{},"279":{},"280":{},"281":{},"282":{},"283":{},"284":{},"285":{},"286":{},"287":{},"288":{},"289":{},"290":{},"291":{},"296":{},"301":{},"303":{},"328":{},"333":{},"336":{}},"component":{}}],["detect",{"_index":2043,"title":{},"name":{},"text":{"50":{},"77":{},"143":{},"159":{},"197":{},"336":{}},"component":{}}],["determin",{"_index":1270,"title":{},"name":{},"text":{"16":{},"51":{},"55":{},"77":{},"99":{},"111":{},"144":{},"159":{},"181":{},"198":{},"239":{},"240":{},"309":{},"337":{},"340":{},"349":{},"350":{}},"component":{}}],["detour",{"_index":2172,"title":{},"name":{},"text":{"50":{},"51":{},"143":{},"144":{},"197":{},"198":{},"336":{},"337":{}},"component":{}}],["develop",{"_index":102,"title":{},"name":{},"text":{"2":{},"5":{},"6":{},"10":{},"50":{},"85":{},"88":{},"89":{},"93":{},"97":{},"116":{},"143":{},"174":{},"178":{},"197":{},"203":{},"214":{},"218":{},"219":{},"246":{},"261":{},"262":{},"266":{},"270":{},"275":{},"294":{},"336":{},"345":{}},"component":{}}],["developersconsol",{"_index":3305,"title":{},"name":{},"text":{"281":{}},"component":{}}],["dextensions=\"one.microstream:microstream",{"_index":3258,"title":{},"name":{},"text":{"274":{}},"component":{}}],["dictat",{"_index":2509,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["dictionari",{"_index":424,"title":{"55-3":{},"111-3":{},"181-3":{},"309-3":{}},"name":{},"text":{"3":{},"37":{},"38":{},"50":{},"55":{},"86":{},"111":{},"140":{},"141":{},"143":{},"181":{},"189":{},"190":{},"197":{},"216":{},"259":{},"303":{},"305":{},"309":{},"336":{}},"component":{}}],["die",{"_index":868,"title":{},"name":{},"text":{"7":{},"90":{},"171":{},"263":{}},"component":{}}],["diff",{"_index":3375,"title":{},"name":{},"text":{"347":{}},"component":{}}],["differ",{"_index":154,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"7":{},"14":{},"18":{},"23":{},"31":{},"35":{},"36":{},"44":{},"50":{},"51":{},"57":{},"58":{},"61":{},"67":{},"74":{},"85":{},"86":{},"87":{},"90":{},"97":{},"108":{},"113":{},"114":{},"118":{},"121":{},"126":{},"134":{},"138":{},"139":{},"143":{},"144":{},"156":{},"169":{},"171":{},"178":{},"183":{},"187":{},"188":{},"196":{},"197":{},"198":{},"200":{},"201":{},"205":{},"214":{},"215":{},"216":{},"217":{},"224":{},"241":{},"243":{},"250":{},"259":{},"260":{},"263":{},"270":{},"271":{},"275":{},"276":{},"277":{},"296":{},"301":{},"302":{},"314":{},"323":{},"330":{},"336":{},"337":{},"339":{},"340":{},"345":{},"346":{},"351":{}},"component":{}}],["difficult",{"_index":2277,"title":{},"name":{},"text":{"51":{},"67":{},"144":{},"169":{},"198":{},"224":{},"337":{},"339":{}},"component":{}}],["digit",{"_index":2688,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["dimension",{"_index":1724,"title":{},"name":{},"text":{"33":{},"136":{},"185":{},"325":{}},"component":{}}],["dir",{"_index":1109,"title":{},"name":{},"text":{"11":{},"35":{},"65":{},"94":{},"138":{},"167":{},"175":{},"187":{},"222":{},"267":{},"301":{},"343":{}},"component":{}}],["direct",{"_index":1252,"title":{},"name":{},"text":{"14":{},"53":{},"97":{},"109":{},"178":{},"179":{},"270":{},"307":{}},"component":{}}],["directli",{"_index":715,"title":{},"name":{},"text":{"4":{},"14":{},"43":{},"47":{},"51":{},"56":{},"67":{},"87":{},"97":{},"107":{},"112":{},"144":{},"148":{},"169":{},"178":{},"182":{},"195":{},"198":{},"210":{},"217":{},"224":{},"243":{},"246":{},"260":{},"270":{},"271":{},"310":{},"329":{},"333":{},"337":{},"339":{}},"component":{}}],["directori",{"_index":408,"title":{"38":{},"141":{},"190":{},"305":{}},"name":{"38":{},"141":{},"190":{},"305":{}},"text":{"3":{},"7":{},"9":{},"35":{},"37":{},"38":{},"39":{},"48":{},"64":{},"66":{},"86":{},"90":{},"92":{},"138":{},"140":{},"141":{},"142":{},"149":{},"166":{},"168":{},"171":{},"173":{},"179":{},"187":{},"189":{},"190":{},"191":{},"211":{},"216":{},"221":{},"223":{},"240":{},"246":{},"259":{},"263":{},"265":{},"275":{},"301":{},"303":{},"305":{},"306":{},"307":{},"338":{},"342":{},"350":{}},"component":{}}],["directory=/opt/data/microstream",{"_index":3114,"title":{},"name":{},"text":{"243":{},"246":{},"271":{},"274":{},"275":{}},"component":{}}],["directory=green",{"_index":3291,"title":{},"name":{},"text":{"275":{}},"component":{}}],["directory=r",{"_index":3288,"title":{},"name":{},"text":{"275":{}},"component":{}}],["disabl",{"_index":1731,"title":{},"name":{},"text":{"33":{},"64":{},"77":{},"136":{},"159":{},"166":{},"185":{},"221":{},"325":{},"342":{}},"component":{}}],["disadvantag",{"_index":753,"title":{},"name":{},"text":{"4":{},"29":{},"87":{},"132":{},"217":{},"257":{},"260":{},"321":{}},"component":{}}],["disappear",{"_index":2204,"title":{},"name":{},"text":{"50":{},"66":{},"143":{},"168":{},"197":{},"223":{},"336":{},"338":{}},"component":{}}],["disc",{"_index":972,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["discard",{"_index":738,"title":{},"name":{},"text":{"4":{},"50":{},"51":{},"87":{},"143":{},"144":{},"197":{},"198":{},"217":{},"260":{},"336":{},"337":{}},"component":{}}],["disk",{"_index":1857,"title":{},"name":{},"text":{"37":{},"140":{},"189":{},"303":{}},"component":{}}],["display",{"_index":1363,"title":{},"name":{},"text":{"21":{},"67":{},"124":{},"169":{},"224":{},"248":{},"312":{},"339":{}},"component":{}}],["dissolv",{"_index":1752,"title":{},"name":{},"text":{"34":{},"37":{},"50":{},"137":{},"140":{},"143":{},"186":{},"189":{},"197":{},"300":{},"303":{},"336":{}},"component":{}}],["distinct",{"_index":2305,"title":{},"name":{},"text":{"55":{},"111":{},"181":{},"309":{}},"component":{}}],["distinguish",{"_index":3136,"title":{},"name":{},"text":{"243":{},"271":{}},"component":{}}],["distribut",{"_index":791,"title":{},"name":{},"text":{"5":{},"11":{},"47":{},"49":{},"88":{},"94":{},"148":{},"150":{},"175":{},"210":{},"212":{},"218":{},"261":{},"267":{},"333":{},"335":{}},"component":{}}],["do",{"_index":2072,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["doc",{"_index":811,"title":{"6-2":{},"89-2":{},"219-2":{},"262-2":{}},"name":{},"text":{},"component":{}}],["document",{"_index":820,"title":{},"name":{},"text":{"6":{},"89":{},"219":{},"243":{},"246":{},"262":{},"271":{},"274":{},"275":{}},"component":{}}],["doe",{"_index":1373,"title":{},"name":{},"text":{"21":{},"124":{},"248":{},"312":{}},"component":{}}],["doesn’t",{"_index":796,"title":{},"name":{},"text":{"5":{},"7":{},"14":{},"24":{},"49":{},"50":{},"88":{},"90":{},"97":{},"116":{},"127":{},"143":{},"150":{},"171":{},"178":{},"197":{},"203":{},"212":{},"218":{},"243":{},"246":{},"251":{},"261":{},"263":{},"270":{},"271":{},"274":{},"275":{},"294":{},"315":{},"335":{},"336":{},"340":{}},"component":{}}],["don",{"_index":2488,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["done",{"_index":67,"title":{"14-1":{},"97-1":{},"178-1":{},"270-1":{}},"name":{},"text":{"1":{},"8":{},"9":{},"10":{},"12":{},"13":{},"21":{},"26":{},"29":{},"31":{},"37":{},"39":{},"40":{},"43":{},"44":{},"47":{},"50":{},"51":{},"52":{},"56":{},"67":{},"68":{},"84":{},"91":{},"92":{},"93":{},"95":{},"96":{},"104":{},"107":{},"108":{},"112":{},"116":{},"124":{},"129":{},"132":{},"134":{},"140":{},"142":{},"143":{},"144":{},"145":{},"148":{},"169":{},"170":{},"172":{},"173":{},"174":{},"176":{},"177":{},"182":{},"183":{},"189":{},"191":{},"192":{},"195":{},"196":{},"197":{},"198":{},"199":{},"203":{},"210":{},"213":{},"215":{},"224":{},"225":{},"243":{},"246":{},"248":{},"253":{},"257":{},"264":{},"265":{},"266":{},"268":{},"269":{},"271":{},"274":{},"275":{},"292":{},"294":{},"303":{},"306":{},"310":{},"312":{},"317":{},"321":{},"323":{},"326":{},"329":{},"330":{},"333":{},"336":{},"337":{},"339":{},"341":{},"344":{},"346":{}},"component":{}}],["don’t",{"_index":208,"title":{},"name":{},"text":{"3":{},"5":{},"14":{},"20":{},"23":{},"36":{},"60":{},"62":{},"67":{},"74":{},"86":{},"88":{},"97":{},"117":{},"119":{},"123":{},"126":{},"139":{},"156":{},"169":{},"178":{},"188":{},"204":{},"206":{},"216":{},"218":{},"224":{},"246":{},"247":{},"250":{},"259":{},"261":{},"270":{},"275":{},"295":{},"298":{},"302":{},"311":{},"314":{},"339":{}},"component":{}}],["dostuff",{"_index":1596,"title":{},"name":{},"text":{"28":{},"131":{},"256":{},"320":{}},"component":{}}],["doubl",{"_index":1677,"title":{},"name":{},"text":{"32":{},"43":{},"51":{},"107":{},"135":{},"144":{},"184":{},"195":{},"198":{},"324":{},"329":{},"337":{}},"component":{}}],["double.valueof(valu",{"_index":1979,"title":{},"name":{},"text":{"43":{},"107":{},"195":{},"329":{}},"component":{}}],["down",{"_index":640,"title":{},"name":{},"text":{"3":{},"14":{},"77":{},"86":{},"97":{},"159":{},"178":{},"216":{},"240":{},"259":{},"270":{},"350":{}},"component":{}}],["download",{"_index":2287,"title":{},"name":{},"text":{"53":{},"109":{},"179":{},"307":{}},"component":{}}],["drag",{"_index":2217,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["dragonwel",{"_index":2909,"title":{},"name":{},"text":{"88":{},"218":{},"261":{}},"component":{}}],["drive",{"_index":994,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["driver",{"_index":2619,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["drop",{"_index":148,"title":{},"name":{},"text":{"2":{},"10":{},"51":{},"85":{},"93":{},"144":{},"174":{},"198":{},"214":{},"266":{},"337":{},"345":{}},"component":{}}],["dtransitive=fals",{"_index":2962,"title":{},"name":{},"text":{"179":{},"307":{}},"component":{}}],["due",{"_index":1277,"title":{},"name":{},"text":{"16":{},"37":{},"48":{},"51":{},"74":{},"99":{},"116":{},"140":{},"144":{},"149":{},"156":{},"189":{},"198":{},"211":{},"239":{},"303":{},"334":{},"337":{},"349":{}},"component":{}}],["dummi",{"_index":2205,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["duper",{"_index":2242,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["durabl",{"_index":2695,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["durat",{"_index":3105,"title":{},"name":{},"text":{"240":{},"350":{}},"component":{}}],["duration(second",{"_index":1331,"title":{},"name":{},"text":{"19":{},"122":{},"242":{},"352":{}},"component":{}}],["duration.ofminutes(30).tomilli",{"_index":2451,"title":{},"name":{},"text":{"66":{},"168":{},"223":{},"338":{}},"component":{}}],["dure",{"_index":534,"title":{},"name":{},"text":{"3":{},"12":{},"14":{},"37":{},"42":{},"44":{},"46":{},"49":{},"50":{},"52":{},"67":{},"77":{},"86":{},"95":{},"97":{},"106":{},"108":{},"140":{},"143":{},"145":{},"147":{},"150":{},"159":{},"169":{},"176":{},"178":{},"189":{},"194":{},"196":{},"197":{},"199":{},"209":{},"212":{},"216":{},"224":{},"259":{},"268":{},"270":{},"292":{},"303":{},"328":{},"330":{},"332":{},"335":{},"336":{},"339":{},"347":{}},"component":{}}],["dynam",{"_index":1463,"title":{},"name":{},"text":{"23":{},"126":{},"215":{},"250":{},"314":{},"346":{}},"component":{}}],["dynamodb",{"_index":270,"title":{"69":{},"151":{},"226":{},"278":{}},"name":{"69":{},"151":{},"226":{},"278":{}},"text":{"3":{},"4":{},"69":{},"86":{},"87":{},"151":{},"216":{},"217":{},"226":{},"259":{},"260":{},"278":{}},"component":{}}],["dynamodb:one.microstream.enterprise.afs.aws.dynamodb.typ",{"_index":326,"title":{},"name":{},"text":{"3":{}},"component":{}}],["dynamodbcli",{"_index":2521,"title":{},"name":{},"text":{"69":{},"151":{},"226":{},"278":{}},"component":{}}],["dynamodbconnector.caching(cli",{"_index":2524,"title":{},"name":{},"text":{"69":{},"151":{},"226":{},"278":{}},"component":{}}],["d{hh:mm:ss.sss",{"_index":3196,"title":{},"name":{},"text":{"255":{},"319":{}},"component":{}}],["e",{"_index":1968,"title":{},"name":{},"text":{"43":{},"107":{},"195":{},"329":{}},"component":{}}],["e.dateofbirth",{"_index":1974,"title":{},"name":{},"text":{"43":{},"107":{},"195":{},"329":{}},"component":{}}],["e.dateofbirth.gettim",{"_index":1973,"title":{},"name":{},"text":{"43":{},"107":{},"195":{},"329":{}},"component":{}}],["e.g",{"_index":123,"title":{},"name":{},"text":{"2":{},"3":{},"5":{},"12":{},"23":{},"33":{},"37":{},"39":{},"43":{},"44":{},"47":{},"50":{},"54":{},"55":{},"62":{},"67":{},"79":{},"80":{},"81":{},"82":{},"83":{},"85":{},"86":{},"88":{},"95":{},"107":{},"108":{},"110":{},"111":{},"119":{},"126":{},"136":{},"140":{},"142":{},"143":{},"148":{},"161":{},"162":{},"163":{},"164":{},"165":{},"169":{},"176":{},"180":{},"181":{},"185":{},"189":{},"191":{},"195":{},"196":{},"197":{},"206":{},"210":{},"214":{},"216":{},"218":{},"224":{},"234":{},"235":{},"236":{},"237":{},"250":{},"259":{},"261":{},"268":{},"287":{},"288":{},"289":{},"290":{},"291":{},"298":{},"303":{},"306":{},"308":{},"309":{},"314":{},"325":{},"329":{},"330":{},"333":{},"336":{},"339":{},"345":{}},"component":{}}],["e.id",{"_index":1970,"title":{},"name":{},"text":{"43":{},"107":{},"195":{},"329":{}},"component":{}}],["e.salari",{"_index":1978,"title":{},"name":{},"text":{"43":{},"107":{},"195":{},"329":{}},"component":{}}],["e.salary.longvalu",{"_index":1977,"title":{},"name":{},"text":{"43":{},"107":{},"195":{},"329":{}},"component":{}}],["each",{"_index":158,"title":{},"name":{},"text":{"2":{},"7":{},"10":{},"37":{},"47":{},"50":{},"51":{},"66":{},"67":{},"77":{},"85":{},"90":{},"93":{},"140":{},"143":{},"144":{},"148":{},"159":{},"168":{},"169":{},"171":{},"174":{},"189":{},"197":{},"198":{},"210":{},"214":{},"223":{},"224":{},"263":{},"266":{},"303":{},"333":{},"336":{},"337":{},"338":{},"339":{},"340":{},"345":{}},"component":{}}],["eager",{"_index":1921,"title":{"61":{},"118":{},"205":{},"296":{},"61-2":{},"118-2":{},"205-2":{},"296-2":{}},"name":{"61":{},"118":{},"205":{},"296":{}},"text":{"42":{},"52":{},"59":{},"61":{},"106":{},"115":{},"118":{},"145":{},"194":{},"199":{},"202":{},"205":{},"292":{},"293":{},"296":{},"328":{}},"component":{}}],["eager/lazi",{"_index":1918,"title":{},"name":{},"text":{"42":{},"106":{},"194":{},"328":{}},"component":{}}],["eagerli",{"_index":1991,"title":{},"name":{},"text":{"45":{},"146":{},"208":{},"331":{}},"component":{}}],["earli",{"_index":2108,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["earlier",{"_index":2107,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"243":{},"271":{},"336":{}},"component":{}}],["easi",{"_index":103,"title":{},"name":{},"text":{"2":{},"3":{},"12":{},"26":{},"49":{},"54":{},"85":{},"86":{},"95":{},"110":{},"129":{},"150":{},"176":{},"180":{},"212":{},"214":{},"216":{},"253":{},"259":{},"268":{},"308":{},"317":{},"335":{},"345":{}},"component":{}}],["easier",{"_index":2180,"title":{},"name":{},"text":{"50":{},"97":{},"143":{},"178":{},"197":{},"270":{},"297":{},"336":{}},"component":{}}],["easiest",{"_index":1175,"title":{},"name":{},"text":{"12":{},"58":{},"95":{},"114":{},"176":{},"201":{},"268":{},"277":{}},"component":{}}],["easili",{"_index":1952,"title":{},"name":{},"text":{"43":{},"50":{},"66":{},"107":{},"116":{},"143":{},"168":{},"195":{},"197":{},"203":{},"223":{},"294":{},"329":{},"336":{},"338":{}},"component":{}}],["east",{"_index":2533,"title":{},"name":{},"text":{"69":{},"70":{},"151":{},"152":{},"226":{},"227":{},"278":{},"279":{}},"component":{}}],["eat",{"_index":1026,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["ec2",{"_index":2538,"title":{},"name":{},"text":{"69":{},"70":{},"151":{},"152":{},"226":{},"227":{},"278":{},"279":{}},"component":{}}],["echocli",{"_index":3000,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["echoserv",{"_index":2988,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["echoservertl",{"_index":3026,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["eclips",{"_index":824,"title":{},"name":{},"text":{"6":{},"89":{},"219":{},"243":{},"262":{},"271":{}},"component":{}}],["editor",{"_index":1128,"title":{},"name":{},"text":{"11":{},"94":{},"175":{},"267":{}},"component":{}}],["ee",{"_index":3143,"title":{},"name":{},"text":{"245":{},"259":{},"271":{},"273":{}},"component":{}}],["effect",{"_index":880,"title":{},"name":{},"text":{"7":{},"10":{},"31":{},"50":{},"90":{},"93":{},"134":{},"143":{},"171":{},"174":{},"183":{},"197":{},"263":{},"266":{},"323":{},"336":{}},"component":{}}],["effici",{"_index":757,"title":{},"name":{},"text":{"4":{},"10":{},"12":{},"43":{},"65":{},"67":{},"87":{},"93":{},"95":{},"107":{},"167":{},"169":{},"174":{},"176":{},"195":{},"217":{},"222":{},"224":{},"260":{},"266":{},"268":{},"329":{},"339":{},"340":{},"343":{}},"component":{}}],["effort",{"_index":1185,"title":{},"name":{},"text":{"12":{},"37":{},"95":{},"140":{},"176":{},"189":{},"268":{},"303":{}},"component":{}}],["elegantli",{"_index":2936,"title":{},"name":{},"text":{"116":{},"203":{},"294":{}},"component":{}}],["element",{"_index":959,"title":{},"name":{},"text":{"9":{},"28":{},"50":{},"55":{},"92":{},"111":{},"131":{},"143":{},"173":{},"181":{},"197":{},"215":{},"256":{},"265":{},"309":{},"320":{},"336":{},"340":{},"346":{}},"component":{}}],["elimin",{"_index":2267,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"216":{},"259":{},"337":{}},"component":{}}],["elsewher",{"_index":2496,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["email",{"_index":2049,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["emailaddress",{"_index":2050,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["emb",{"_index":1288,"title":{},"name":{},"text":{"17":{},"100":{},"240":{},"350":{}},"component":{}}],["embed",{"_index":300,"title":{},"name":{},"text":{"3":{},"4":{},"9":{},"35":{},"39":{},"54":{},"64":{},"86":{},"87":{},"92":{},"110":{},"138":{},"142":{},"166":{},"173":{},"180":{},"187":{},"191":{},"213":{},"216":{},"217":{},"221":{},"259":{},"260":{},"265":{},"301":{},"306":{},"308":{},"342":{},"344":{}},"component":{}}],["embedded:05.00.02",{"_index":661,"title":{},"name":{},"text":{"4":{}},"component":{}}],["embedded:06.01.00",{"_index":2903,"title":{},"name":{},"text":{"87":{}},"component":{}}],["embedded:07.01.00",{"_index":3089,"title":{},"name":{},"text":{"217":{}},"component":{}}],["embedded:08.01.01",{"_index":3240,"title":{},"name":{},"text":{"260":{}},"component":{}}],["embedded:one.microstream.storage.embedded.typ",{"_index":366,"title":{},"name":{},"text":{"3":{}},"component":{}}],["embeddedstorag",{"_index":1766,"title":{},"name":{},"text":{"35":{},"36":{},"42":{},"43":{},"106":{},"107":{},"138":{},"139":{},"187":{},"188":{},"194":{},"195":{},"301":{},"302":{},"328":{},"329":{}},"component":{}}],["embeddedstorage.found",{"_index":1716,"title":{},"name":{},"text":{"32":{},"34":{},"39":{},"51":{},"59":{},"63":{},"115":{},"120":{},"135":{},"137":{},"142":{},"144":{},"184":{},"186":{},"191":{},"198":{},"202":{},"207":{},"293":{},"299":{},"300":{},"306":{},"324":{},"337":{}},"component":{}}],["embeddedstorage.foundation(datadir",{"_index":2150,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["embeddedstorage.foundation(mydatadir",{"_index":2099,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["embeddedstorage.foundation(paths.get(\"mydb",{"_index":1898,"title":{},"name":{},"text":{"40":{},"104":{},"192":{},"326":{}},"component":{}}],["embeddedstorage.root",{"_index":1228,"title":{},"name":{},"text":{"14":{},"97":{},"178":{},"270":{}},"component":{}}],["embeddedstorage.start",{"_index":74,"title":{},"name":{},"text":{"1":{},"7":{},"9":{},"11":{},"14":{},"17":{},"35":{},"52":{},"56":{},"84":{},"90":{},"92":{},"94":{},"97":{},"100":{},"112":{},"138":{},"145":{},"171":{},"173":{},"175":{},"178":{},"182":{},"187":{},"199":{},"213":{},"240":{},"263":{},"265":{},"267":{},"270":{},"292":{},"301":{},"310":{},"344":{},"350":{}},"component":{}}],["embeddedstorage.start(filesystem.ensuredirectorypath(\"microstream_storag",{"_index":2525,"title":{},"name":{},"text":{"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{},"165":{},"226":{},"227":{},"228":{},"229":{},"230":{},"231":{},"232":{},"233":{},"234":{},"235":{},"236":{},"237":{},"278":{},"279":{},"280":{},"281":{},"282":{},"283":{},"284":{},"285":{},"286":{},"287":{},"288":{},"289":{},"290":{},"291":{}},"component":{}}],["embeddedstorage.start(filesystem.ensuredirectorypath(\"path",{"_index":2359,"title":{},"name":{},"text":{"57":{},"58":{},"113":{},"114":{},"200":{},"201":{},"276":{},"277":{}},"component":{}}],["embeddedstorage.start(paths.get(\"path",{"_index":2357,"title":{},"name":{},"text":{"57":{},"113":{},"200":{},"276":{}},"component":{}}],["embeddedstorage.start(root",{"_index":1240,"title":{},"name":{},"text":{"14":{},"60":{},"97":{},"117":{},"178":{},"204":{},"270":{},"295":{}},"component":{}}],["embeddedstorageconfigur",{"_index":1789,"title":{},"name":{},"text":{"35":{},"138":{},"187":{},"301":{}},"component":{}}],["embeddedstorageconfiguration.build",{"_index":1782,"title":{},"name":{},"text":{"35":{},"138":{},"187":{},"301":{}},"component":{}}],["embeddedstorageconfiguration.load",{"_index":1791,"title":{},"name":{},"text":{"35":{},"138":{},"187":{},"301":{}},"component":{}}],["embeddedstorageconfigurationbuild",{"_index":1781,"title":{},"name":{},"text":{"35":{},"37":{},"138":{},"140":{},"187":{},"189":{},"301":{},"303":{}},"component":{}}],["embeddedstorageconfigurationbuilder.new",{"_index":1890,"title":{},"name":{},"text":{"39":{},"64":{},"142":{},"166":{},"191":{},"221":{},"306":{},"342":{}},"component":{}}],["embeddedstorageconfigurationpropertynam",{"_index":1814,"title":{},"name":{},"text":{"37":{},"140":{},"189":{},"303":{}},"component":{}}],["embeddedstorageconnectionfound",{"_index":2233,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["embeddedstoragefound",{"_index":1715,"title":{},"name":{},"text":{"32":{},"35":{},"39":{},"50":{},"51":{},"135":{},"138":{},"142":{},"143":{},"144":{},"184":{},"187":{},"191":{},"197":{},"198":{},"216":{},"243":{},"246":{},"259":{},"271":{},"274":{},"275":{},"301":{},"304":{},"306":{},"324":{},"336":{},"337":{}},"component":{}}],["embeddedstoragefoundation.getdatabasenam",{"_index":3139,"title":{},"name":{},"text":{"243":{},"271":{}},"component":{}}],["embeddedstoragefoundation.new",{"_index":1769,"title":{},"name":{},"text":{"35":{},"138":{},"187":{},"301":{}},"component":{}}],["embeddedstoragefoundationcustom",{"_index":3275,"title":{},"name":{},"text":{"275":{}},"component":{}}],["embeddedstoragemanag",{"_index":71,"title":{},"name":{},"text":{"1":{},"3":{},"7":{},"9":{},"11":{},"14":{},"17":{},"34":{},"35":{},"36":{},"39":{},"40":{},"42":{},"43":{},"44":{},"50":{},"52":{},"56":{},"59":{},"60":{},"63":{},"64":{},"65":{},"84":{},"86":{},"90":{},"92":{},"94":{},"97":{},"100":{},"104":{},"106":{},"107":{},"108":{},"112":{},"115":{},"117":{},"120":{},"137":{},"138":{},"139":{},"142":{},"143":{},"145":{},"166":{},"167":{},"171":{},"173":{},"175":{},"178":{},"182":{},"186":{},"187":{},"188":{},"191":{},"192":{},"194":{},"195":{},"196":{},"197":{},"199":{},"202":{},"204":{},"207":{},"213":{},"216":{},"221":{},"222":{},"240":{},"259":{},"263":{},"265":{},"267":{},"270":{},"275":{},"292":{},"293":{},"295":{},"299":{},"300":{},"301":{},"302":{},"306":{},"310":{},"326":{},"328":{},"329":{},"330":{},"336":{},"342":{},"343":{},"344":{},"350":{}},"component":{}}],["embeddedstoragemanager#createstor",{"_index":634,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["embeddedstoragemanager.root",{"_index":2280,"title":{},"name":{},"text":{"52":{},"145":{},"199":{},"292":{}},"component":{}}],["employe",{"_index":1956,"title":{},"name":{},"text":{"43":{},"107":{},"195":{},"329":{}},"component":{}}],["employee.class",{"_index":1966,"title":{},"name":{},"text":{"43":{},"107":{},"195":{},"329":{}},"component":{}}],["empti",{"_index":1235,"title":{},"name":{},"text":{"14":{},"97":{},"178":{},"270":{}},"component":{}}],["emul",{"_index":3303,"title":{},"name":{},"text":{"281":{}},"component":{}}],["enabl",{"_index":404,"title":{},"name":{},"text":{"3":{},"16":{},"19":{},"43":{},"51":{},"54":{},"64":{},"66":{},"86":{},"99":{},"107":{},"110":{},"122":{},"144":{},"166":{},"168":{},"180":{},"195":{},"198":{},"215":{},"216":{},"221":{},"223":{},"239":{},"242":{},"259":{},"308":{},"329":{},"337":{},"338":{},"342":{},"346":{},"349":{},"352":{}},"component":{}}],["enablecach",{"_index":1324,"title":{},"name":{},"text":{"19":{},"122":{},"242":{},"352":{}},"component":{}}],["encapsul",{"_index":2373,"title":{"59-1":{},"115-1":{},"202-1":{},"293-1":{}},"name":{},"text":{"59":{},"115":{},"202":{},"293":{}},"component":{}}],["encod",{"_index":2620,"title":{},"name":{},"text":{"74":{},"75":{},"156":{},"157":{},"231":{},"284":{}},"component":{}}],["encount",{"_index":1049,"title":{},"name":{},"text":{"10":{},"62":{},"93":{},"119":{},"174":{},"206":{},"266":{},"298":{}},"component":{}}],["encrypt",{"_index":2569,"title":{},"name":{},"text":{"71":{},"153":{},"215":{},"228":{},"280":{},"346":{}},"component":{}}],["end",{"_index":675,"title":{},"name":{},"text":{"4":{},"10":{},"50":{},"57":{},"87":{},"93":{},"113":{},"116":{},"143":{},"174":{},"197":{},"200":{},"203":{},"216":{},"217":{},"259":{},"260":{},"266":{},"276":{},"294":{},"336":{}},"component":{}}],["endpoint",{"_index":764,"title":{},"name":{},"text":{"4":{},"54":{},"56":{},"69":{},"70":{},"71":{},"75":{},"87":{},"110":{},"112":{},"151":{},"152":{},"153":{},"157":{},"180":{},"182":{},"217":{},"226":{},"227":{},"228":{},"231":{},"260":{},"278":{},"279":{},"280":{},"284":{},"308":{},"310":{}},"component":{}}],["enforc",{"_index":2201,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["engin",{"_index":1151,"title":{},"name":{},"text":{"12":{},"13":{},"29":{},"37":{},"39":{},"42":{},"61":{},"95":{},"96":{},"106":{},"118":{},"132":{},"140":{},"142":{},"176":{},"177":{},"189":{},"191":{},"194":{},"205":{},"215":{},"220":{},"257":{},"268":{},"269":{},"281":{},"296":{},"303":{},"306":{},"321":{},"328":{},"346":{},"347":{}},"component":{}}],["enhanc",{"_index":603,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["enorm",{"_index":1016,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["enough",{"_index":1227,"title":{},"name":{},"text":{"14":{},"51":{},"97":{},"144":{},"178":{},"198":{},"270":{},"337":{},"340":{}},"component":{}}],["enrich",{"_index":1608,"title":{},"name":{},"text":{"29":{},"132":{},"257":{},"321":{}},"component":{}}],["ensur",{"_index":1805,"title":{},"name":{},"text":{"36":{},"50":{},"139":{},"143":{},"188":{},"197":{},"302":{},"336":{}},"component":{}}],["enter",{"_index":2256,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["enterpris",{"_index":268,"title":{},"name":{},"text":{"3":{},"57":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"80":{},"81":{},"86":{},"87":{},"113":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"162":{},"163":{},"216":{},"259":{}},"component":{}}],["entir",{"_index":942,"title":{},"name":{},"text":{"9":{},"50":{},"77":{},"92":{},"143":{},"159":{},"173":{},"197":{},"265":{},"297":{},"336":{}},"component":{}}],["entiti",{"_index":435,"title":{"21":{},"22":{},"23":{},"26":{},"44":{},"108":{},"124":{},"125":{},"126":{},"129":{},"196":{},"248":{},"249":{},"250":{},"253":{},"312":{},"313":{},"314":{},"317":{},"330":{},"22-1":{},"46-2":{},"125-1":{},"147-2":{},"209-2":{},"249-1":{},"313-1":{},"332-2":{}},"name":{"21":{},"22":{},"26":{},"44":{},"108":{},"124":{},"125":{},"129":{},"196":{},"248":{},"249":{},"253":{},"312":{},"313":{},"317":{},"330":{}},"text":{"3":{},"10":{},"12":{},"14":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"27":{},"29":{},"33":{},"34":{},"35":{},"37":{},"43":{},"44":{},"45":{},"46":{},"47":{},"49":{},"50":{},"52":{},"67":{},"86":{},"93":{},"95":{},"97":{},"107":{},"108":{},"123":{},"124":{},"125":{},"126":{},"127":{},"128":{},"130":{},"132":{},"136":{},"137":{},"138":{},"140":{},"143":{},"145":{},"146":{},"147":{},"148":{},"150":{},"169":{},"174":{},"176":{},"178":{},"185":{},"186":{},"187":{},"189":{},"195":{},"196":{},"197":{},"199":{},"208":{},"209":{},"210":{},"212":{},"215":{},"216":{},"224":{},"247":{},"248":{},"249":{},"250":{},"251":{},"252":{},"254":{},"257":{},"259":{},"266":{},"268":{},"270":{},"292":{},"300":{},"301":{},"303":{},"311":{},"312":{},"313":{},"314":{},"315":{},"316":{},"318":{},"321":{},"325":{},"329":{},"330":{},"331":{},"332":{},"333":{},"335":{},"336":{},"339":{},"340":{},"346":{}},"component":{}}],["entity.cr",{"_index":1408,"title":{},"name":{},"text":{"22":{},"23":{},"125":{},"126":{},"249":{},"250":{},"313":{},"314":{}},"component":{}}],["entity.creator.abstract",{"_index":1413,"title":{},"name":{},"text":{"22":{},"23":{},"125":{},"126":{},"249":{},"250":{},"313":{},"314":{}},"component":{}}],["entity.data(oth",{"_index":1421,"title":{},"name":{},"text":{"22":{},"23":{},"125":{},"126":{},"249":{},"250":{},"313":{},"314":{}},"component":{}}],["entity.updat",{"_index":1426,"title":{},"name":{},"text":{"22":{},"23":{},"125":{},"126":{},"249":{},"250":{},"313":{},"314":{}},"component":{}}],["entity.updater.abstract",{"_index":1433,"title":{},"name":{},"text":{"22":{},"23":{},"125":{},"126":{},"249":{},"250":{},"313":{},"314":{}},"component":{}}],["entitycachethreshold",{"_index":434,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["entitycachetimeoutm",{"_index":437,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["entitycr",{"_index":1540,"title":{},"name":{},"text":{"24":{},"127":{},"251":{},"315":{}},"component":{}}],["entitydata",{"_index":1396,"title":{},"name":{},"text":{"22":{},"23":{},"125":{},"126":{},"249":{},"250":{},"313":{},"314":{}},"component":{}}],["entityevalu",{"_index":1079,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["entityinst",{"_index":1418,"title":{},"name":{},"text":{"22":{},"23":{},"125":{},"126":{},"249":{},"250":{},"313":{},"314":{}},"component":{}}],["entitylayerident",{"_index":1394,"title":{},"name":{},"text":{"22":{},"23":{},"125":{},"126":{},"249":{},"250":{},"313":{},"314":{}},"component":{}}],["entitylogg",{"_index":1533,"title":{},"name":{},"text":{"24":{},"127":{},"251":{},"315":{}},"component":{}}],["entityversionclean",{"_index":1568,"title":{},"name":{},"text":{"27":{},"130":{},"254":{},"318":{}},"component":{}}],["entityversioncleaner.agepreservinginstant(duration.of(1",{"_index":1581,"title":{},"name":{},"text":{"27":{},"130":{},"254":{},"318":{}},"component":{}}],["entityversioncleaner.amountpreserving(10",{"_index":1570,"title":{},"name":{},"text":{"27":{},"130":{},"254":{},"318":{}},"component":{}}],["entityversioncontext",{"_index":1551,"title":{},"name":{},"text":{"25":{},"27":{},"128":{},"130":{},"252":{},"254":{},"316":{},"318":{}},"component":{}}],["entityversioncontext.autoincrementinginst",{"_index":1579,"title":{},"name":{},"text":{"27":{},"130":{},"254":{},"318":{}},"component":{}}],["entityversioncontext.autoincrementinginstant(clean",{"_index":1583,"title":{},"name":{},"text":{"27":{},"130":{},"254":{},"318":{}},"component":{}}],["entityversioncontext.autoincrementinglong",{"_index":1553,"title":{},"name":{},"text":{"25":{},"27":{},"128":{},"130":{},"252":{},"254":{},"316":{},"318":{}},"component":{}}],["entityversioncontext.autoincrementinglong(clean",{"_index":1571,"title":{},"name":{},"text":{"27":{},"130":{},"254":{},"318":{}},"component":{}}],["entityversioncontext.autoincrementingsystemnanotim",{"_index":1577,"title":{},"name":{},"text":{"27":{},"130":{},"254":{},"318":{}},"component":{}}],["entityversioncontext.autoincrementingsystemtimemilli",{"_index":1575,"title":{},"name":{},"text":{"27":{},"130":{},"254":{},"318":{}},"component":{}}],["entityversioncontext.mut",{"_index":1590,"title":{},"name":{},"text":{"27":{},"130":{},"254":{},"318":{}},"component":{}}],["entity’",{"_index":1061,"title":{},"name":{},"text":{"10":{},"21":{},"23":{},"37":{},"93":{},"124":{},"126":{},"140":{},"174":{},"189":{},"248":{},"250":{},"266":{},"303":{},"312":{},"314":{}},"component":{}}],["entri",{"_index":53,"title":{"2-6":{},"85-6":{},"214-6":{},"345-6":{}},"name":{},"text":{"1":{},"2":{},"16":{},"27":{},"50":{},"51":{},"84":{},"85":{},"99":{},"130":{},"143":{},"144":{},"197":{},"198":{},"213":{},"214":{},"239":{},"240":{},"254":{},"274":{},"318":{},"336":{},"337":{},"344":{},"345":{},"349":{},"350":{}},"component":{}}],["enum",{"_index":641,"title":{},"name":{},"text":{"3":{},"33":{},"86":{},"136":{},"185":{},"216":{},"259":{},"325":{}},"component":{}}],["environ",{"_index":118,"title":{"49-7":{},"150-7":{},"212-7":{},"335-7":{}},"name":{},"text":{"2":{},"5":{},"6":{},"18":{},"40":{},"69":{},"70":{},"72":{},"85":{},"88":{},"89":{},"97":{},"104":{},"116":{},"121":{},"151":{},"152":{},"154":{},"178":{},"192":{},"203":{},"214":{},"218":{},"219":{},"226":{},"227":{},"229":{},"241":{},"243":{},"261":{},"262":{},"270":{},"271":{},"274":{},"278":{},"279":{},"281":{},"282":{},"294":{},"326":{},"345":{},"351":{}},"component":{}}],["equal",{"_index":604,"title":{},"name":{},"text":{"3":{},"23":{},"50":{},"86":{},"126":{},"143":{},"197":{},"216":{},"250":{},"259":{},"314":{},"336":{}},"component":{}}],["equal(fin",{"_index":1516,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["equals(fin",{"_index":1504,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["equals(person1",{"_index":1517,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["eras",{"_index":922,"title":{},"name":{},"text":{"8":{},"50":{},"91":{},"143":{},"172":{},"197":{},"264":{},"336":{}},"component":{}}],["error",{"_index":483,"title":{},"name":{},"text":{"3":{},"7":{},"47":{},"50":{},"74":{},"86":{},"90":{},"143":{},"148":{},"156":{},"171":{},"197":{},"210":{},"216":{},"246":{},"259":{},"263":{},"275":{},"333":{},"336":{}},"component":{}}],["especi",{"_index":2117,"title":{},"name":{},"text":{"50":{},"58":{},"114":{},"143":{},"197":{},"201":{},"277":{},"336":{}},"component":{}}],["establish",{"_index":2729,"title":{},"name":{},"text":{"77":{},"78":{},"159":{},"160":{},"233":{},"286":{}},"component":{}}],["estim",{"_index":2081,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["etc",{"_index":516,"title":{"49-5":{},"150-5":{},"212-5":{},"335-5":{}},"name":{},"text":{"3":{},"7":{},"12":{},"23":{},"33":{},"43":{},"49":{},"67":{},"86":{},"90":{},"95":{},"107":{},"126":{},"136":{},"150":{},"169":{},"171":{},"176":{},"185":{},"195":{},"212":{},"216":{},"224":{},"250":{},"259":{},"263":{},"268":{},"314":{},"325":{},"329":{},"335":{},"339":{}},"component":{}}],["evalu",{"_index":1066,"title":{},"name":{},"text":{"10":{},"37":{},"39":{},"93":{},"140":{},"142":{},"174":{},"189":{},"191":{},"266":{},"303":{},"306":{}},"component":{}}],["even",{"_index":845,"title":{},"name":{},"text":{"7":{},"12":{},"27":{},"50":{},"61":{},"66":{},"67":{},"90":{},"95":{},"118":{},"130":{},"143":{},"168":{},"169":{},"171":{},"176":{},"197":{},"205":{},"223":{},"224":{},"240":{},"254":{},"263":{},"268":{},"296":{},"318":{},"336":{},"338":{},"339":{},"350":{}},"component":{}}],["eventu",{"_index":993,"title":{},"name":{},"text":{"10":{},"47":{},"50":{},"93":{},"143":{},"148":{},"174":{},"197":{},"210":{},"266":{},"333":{},"336":{}},"component":{}}],["everyth",{"_index":561,"title":{},"name":{},"text":{"3":{},"9":{},"14":{},"43":{},"45":{},"51":{},"86":{},"92":{},"97":{},"107":{},"144":{},"146":{},"173":{},"178":{},"195":{},"198":{},"208":{},"216":{},"259":{},"265":{},"270":{},"329":{},"331":{},"337":{}},"component":{}}],["evict",{"_index":160,"title":{},"name":{},"text":{"2":{},"3":{},"85":{},"86":{},"214":{},"216":{},"239":{},"259":{},"345":{},"349":{}},"component":{}}],["evictionmanagerfactori",{"_index":395,"title":{},"name":{},"text":{"3":{},"16":{},"86":{},"99":{},"216":{},"259":{}},"component":{}}],["ex",{"_index":2665,"title":{},"name":{},"text":{"75":{},"157":{},"231":{},"284":{}},"component":{}}],["exact",{"_index":2119,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["exactli",{"_index":1172,"title":{},"name":{},"text":{"12":{},"49":{},"51":{},"67":{},"95":{},"144":{},"150":{},"169":{},"176":{},"198":{},"212":{},"224":{},"268":{},"335":{},"337":{},"339":{}},"component":{}}],["exampl",{"_index":138,"title":{"31":{},"134":{},"183":{},"323":{},"17-1":{},"18-1":{},"31-1":{},"100-1":{},"121-1":{},"134-1":{},"183-1":{},"240-2":{},"241-1":{},"323-1":{},"350-2":{},"351-1":{}},"name":{"31":{},"134":{},"183":{},"323":{}},"text":{"2":{},"3":{},"4":{},"6":{},"7":{},"9":{},"10":{},"21":{},"25":{},"26":{},"29":{},"31":{},"35":{},"41":{},"43":{},"50":{},"51":{},"52":{},"60":{},"67":{},"85":{},"86":{},"87":{},"89":{},"90":{},"92":{},"93":{},"105":{},"106":{},"107":{},"116":{},"117":{},"124":{},"128":{},"129":{},"132":{},"134":{},"138":{},"143":{},"144":{},"145":{},"169":{},"171":{},"173":{},"174":{},"182":{},"183":{},"187":{},"193":{},"194":{},"195":{},"197":{},"198":{},"199":{},"203":{},"204":{},"214":{},"215":{},"216":{},"217":{},"219":{},"224":{},"240":{},"243":{},"246":{},"248":{},"252":{},"253":{},"255":{},"257":{},"259":{},"260":{},"262":{},"263":{},"265":{},"266":{},"267":{},"271":{},"274":{},"275":{},"292":{},"294":{},"295":{},"297":{},"301":{},"310":{},"312":{},"316":{},"317":{},"319":{},"321":{},"323":{},"327":{},"328":{},"329":{},"336":{},"337":{},"339":{},"345":{},"346":{},"350":{}},"component":{}}],["exceed",{"_index":1850,"title":{},"name":{},"text":{"37":{},"140":{},"189":{},"303":{}},"component":{}}],["except",{"_index":251,"title":{},"name":{},"text":{"3":{},"4":{},"22":{},"50":{},"51":{},"74":{},"86":{},"87":{},"125":{},"143":{},"144":{},"156":{},"197":{},"198":{},"215":{},"216":{},"217":{},"246":{},"249":{},"259":{},"260":{},"274":{},"297":{},"304":{},"313":{},"336":{},"337":{},"346":{}},"component":{}}],["exchang",{"_index":1607,"title":{},"name":{},"text":{"29":{},"132":{},"257":{},"321":{}},"component":{}}],["exclud",{"_index":1193,"title":{},"name":{},"text":{"12":{},"44":{},"46":{},"95":{},"108":{},"147":{},"176":{},"196":{},"209":{},"268":{},"330":{},"332":{}},"component":{}}],["exclus",{"_index":1806,"title":{},"name":{},"text":{"36":{},"37":{},"49":{},"139":{},"140":{},"150":{},"188":{},"189":{},"212":{},"216":{},"259":{},"302":{},"303":{},"335":{}},"component":{}}],["execut",{"_index":762,"title":{},"name":{},"text":{"4":{},"9":{},"11":{},"47":{},"49":{},"54":{},"65":{},"74":{},"77":{},"87":{},"92":{},"94":{},"110":{},"148":{},"150":{},"156":{},"159":{},"167":{},"173":{},"175":{},"180":{},"210":{},"212":{},"217":{},"222":{},"260":{},"265":{},"308":{},"333":{},"335":{},"343":{}},"component":{}}],["exist",{"_index":150,"title":{"49-6":{},"150-6":{},"212-6":{},"335-6":{}},"name":{},"text":{"2":{},"3":{},"9":{},"10":{},"12":{},"16":{},"21":{},"33":{},"50":{},"52":{},"62":{},"85":{},"86":{},"92":{},"93":{},"95":{},"99":{},"119":{},"124":{},"136":{},"143":{},"145":{},"173":{},"174":{},"176":{},"185":{},"197":{},"199":{},"206":{},"214":{},"216":{},"239":{},"243":{},"248":{},"259":{},"265":{},"266":{},"268":{},"271":{},"292":{},"298":{},"312":{},"325":{},"336":{},"345":{},"349":{}},"component":{}}],["expect",{"_index":2169,"title":{},"name":{},"text":{"50":{},"67":{},"143":{},"169":{},"197":{},"224":{},"243":{},"271":{},"304":{},"336":{},"339":{},"340":{}},"component":{}}],["expedit",{"_index":96,"title":{},"name":{},"text":{"2":{},"85":{},"214":{},"345":{}},"component":{}}],["expens",{"_index":1059,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["expir",{"_index":1274,"title":{},"name":{},"text":{"16":{},"99":{},"239":{},"349":{}},"component":{}}],["expiri",{"_index":55,"title":{"240-1":{},"350-1":{}},"name":{},"text":{"1":{},"3":{},"84":{},"86":{},"213":{},"216":{},"239":{},"240":{},"259":{},"344":{},"349":{},"350":{}},"component":{}}],["expirypolici",{"_index":3107,"title":{},"name":{},"text":{"240":{},"350":{}},"component":{}}],["expirypolicyfactori",{"_index":393,"title":{},"name":{},"text":{"3":{},"16":{},"86":{},"99":{},"216":{},"259":{}},"component":{}}],["expirypolicyfactory(createdexpirypolicy.factoryof(duration.one_hour",{"_index":77,"title":{},"name":{},"text":{"1":{},"84":{},"213":{},"344":{}},"component":{}}],["expirypolicyfactory(createdexpirypolicy.factoryof(duration.one_minut",{"_index":1259,"title":{},"name":{},"text":{"15":{},"98":{},"238":{},"348":{}},"component":{}}],["explain",{"_index":2456,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["explicit",{"_index":877,"title":{"62":{},"119":{},"206":{},"298":{},"10-4":{},"50-2":{},"50-3":{},"50-4":{},"93-4":{},"143-2":{},"143-3":{},"143-4":{},"174-4":{},"197-2":{},"197-3":{},"197-4":{},"266-4":{},"336-2":{},"336-3":{},"336-4":{}},"name":{},"text":{"7":{},"8":{},"9":{},"14":{},"50":{},"51":{},"62":{},"90":{},"91":{},"92":{},"97":{},"119":{},"143":{},"144":{},"171":{},"172":{},"173":{},"178":{},"197":{},"198":{},"206":{},"263":{},"264":{},"265":{},"270":{},"298":{},"336":{},"337":{}},"component":{}}],["explicitli",{"_index":1068,"title":{},"name":{},"text":{"10":{},"12":{},"50":{},"51":{},"61":{},"93":{},"95":{},"118":{},"143":{},"144":{},"174":{},"176":{},"197":{},"198":{},"205":{},"266":{},"268":{},"296":{},"336":{},"337":{}},"component":{}}],["exponenti",{"_index":542,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["export",{"_index":481,"title":{"11":{},"94":{},"175":{},"267":{}},"name":{"11":{},"94":{},"175":{},"267":{}},"text":{"3":{},"11":{},"48":{},"49":{},"86":{},"94":{},"149":{},"150":{},"175":{},"211":{},"212":{},"216":{},"259":{},"267":{},"334":{},"335":{}},"component":{}}],["export/import",{"_index":2016,"title":{"49-4":{},"150-4":{},"212-4":{},"335-4":{}},"name":{},"text":{},"component":{}}],["exportfil",{"_index":1113,"title":{},"name":{},"text":{"11":{},"94":{},"175":{}},"component":{}}],["exportresult",{"_index":1105,"title":{},"name":{},"text":{"11":{},"94":{},"175":{},"267":{}},"component":{}}],["expos",{"_index":2969,"title":{},"name":{},"text":{"182":{},"310":{}},"component":{}}],["extend",{"_index":233,"title":{},"name":{},"text":{"3":{},"21":{},"22":{},"23":{},"29":{},"30":{},"43":{},"46":{},"50":{},"86":{},"107":{},"124":{},"125":{},"126":{},"132":{},"133":{},"143":{},"147":{},"195":{},"197":{},"209":{},"216":{},"248":{},"249":{},"250":{},"257":{},"258":{},"259":{},"312":{},"313":{},"314":{},"321":{},"322":{},"329":{},"332":{},"336":{}},"component":{}}],["extens",{"_index":726,"title":{"243":{},"271":{},"274":{}},"name":{},"text":{"4":{},"38":{},"87":{},"141":{},"190":{},"216":{},"217":{},"243":{},"259":{},"260":{},"271":{},"274":{},"305":{}},"component":{}}],["extension:08.00.00",{"_index":3259,"title":{},"name":{},"text":{"274":{}},"component":{}}],["extension:09.00.00",{"_index":3262,"title":{},"name":{},"text":{"274":{}},"component":{}}],["extern",{"_index":758,"title":{"35-2":{},"138-2":{},"187-2":{},"301-2":{}},"name":{},"text":{"4":{},"15":{},"16":{},"17":{},"33":{},"34":{},"35":{},"37":{},"54":{},"58":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"87":{},"98":{},"99":{},"100":{},"110":{},"114":{},"136":{},"137":{},"138":{},"140":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{},"165":{},"180":{},"185":{},"186":{},"187":{},"189":{},"201":{},"217":{},"226":{},"227":{},"228":{},"229":{},"230":{},"231":{},"232":{},"233":{},"234":{},"235":{},"236":{},"237":{},"238":{},"239":{},"240":{},"246":{},"260":{},"275":{},"277":{},"278":{},"279":{},"280":{},"281":{},"282":{},"283":{},"284":{},"285":{},"286":{},"287":{},"288":{},"289":{},"290":{},"291":{},"300":{},"301":{},"303":{},"308":{},"325":{},"348":{},"349":{},"350":{}},"component":{}}],["extra",{"_index":2912,"title":{},"name":{},"text":{"97":{},"178":{},"270":{}},"component":{}}],["extract",{"_index":262,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["f",{"_index":2234,"title":{},"name":{},"text":{"51":{},"59":{},"115":{},"144":{},"198":{},"202":{},"293":{},"337":{}},"component":{}}],["f.registercustomtypehandlers(new",{"_index":1947,"title":{},"name":{},"text":{"43":{},"107":{},"195":{},"329":{}},"component":{}}],["f.setlegacytypemappingresultor",{"_index":2238,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["f.setreferencefieldeagerevalu",{"_index":2378,"title":{},"name":{},"text":{"59":{},"115":{},"202":{},"293":{}},"component":{}}],["f.setreferencefieldeagerevaluator(new",{"_index":1933,"title":{},"name":{},"text":{"42":{},"106":{},"194":{},"328":{}},"component":{}}],["facad",{"_index":3190,"title":{},"name":{},"text":{"255":{},"319":{}},"component":{}}],["face",{"_index":2713,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["facil",{"_index":1780,"title":{},"name":{},"text":{"35":{},"138":{},"187":{},"301":{}},"component":{}}],["fact",{"_index":867,"title":{},"name":{},"text":{"7":{},"49":{},"90":{},"150":{},"171":{},"212":{},"263":{},"335":{},"340":{}},"component":{}}],["factor",{"_index":3357,"title":{},"name":{},"text":{"340":{}},"component":{}}],["factori",{"_index":390,"title":{},"name":{},"text":{"3":{},"4":{},"18":{},"35":{},"39":{},"76":{},"86":{},"87":{},"116":{},"121":{},"138":{},"142":{},"158":{},"187":{},"191":{},"203":{},"216":{},"217":{},"232":{},"239":{},"241":{},"259":{},"260":{},"275":{},"285":{},"294":{},"301":{},"306":{},"349":{},"351":{}},"component":{}}],["factory_class",{"_index":1303,"title":{},"name":{},"text":{"17":{},"18":{},"100":{},"121":{},"240":{},"241":{},"350":{},"351":{}},"component":{}}],["factory’",{"_index":1307,"title":{},"name":{},"text":{"18":{},"121":{},"241":{},"351":{}},"component":{}}],["fail",{"_index":2611,"title":{},"name":{},"text":{"74":{},"86":{},"156":{},"216":{},"243":{},"246":{},"259":{},"271":{},"274":{},"275":{}},"component":{}}],["failur",{"_index":2723,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["fall",{"_index":2076,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["fals",{"_index":1349,"title":{},"name":{},"text":{"20":{},"42":{},"55":{},"106":{},"111":{},"123":{},"181":{},"194":{},"247":{},"309":{},"311":{},"328":{}},"component":{}}],["familiar",{"_index":815,"title":{},"name":{},"text":{"6":{},"89":{},"219":{},"262":{}},"component":{}}],["faq",{"_index":1737,"title":{},"name":{},"text":{"33":{},"136":{},"185":{},"325":{}},"component":{}}],["far",{"_index":2154,"title":{},"name":{},"text":{"50":{},"51":{},"65":{},"143":{},"144":{},"167":{},"197":{},"198":{},"222":{},"336":{},"337":{},"343":{}},"component":{}}],["fashion",{"_index":853,"title":{},"name":{},"text":{"7":{},"44":{},"90":{},"108":{},"171":{},"196":{},"263":{},"330":{}},"component":{}}],["fast",{"_index":1046,"title":{},"name":{},"text":{"10":{},"50":{},"93":{},"143":{},"174":{},"197":{},"266":{},"336":{}},"component":{}}],["fatal",{"_index":1730,"title":{},"name":{},"text":{"33":{},"136":{},"185":{},"325":{}},"component":{}}],["faulti",{"_index":2821,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["featur",{"_index":176,"title":{"33":{},"48":{},"136":{},"149":{},"185":{},"211":{},"325":{},"334":{},"3-6":{},"3-15":{},"3-19":{},"3-25":{},"3-29":{},"3-33":{},"86-4":{},"86-12":{},"86-20":{},"86-24":{},"86-30":{},"86-34":{},"86-38":{},"216-2":{},"216-5":{},"216-11":{},"216-19":{},"216-27":{},"216-31":{},"216-37":{},"216-41":{},"216-45":{},"259-4":{},"259-7":{},"259-11":{},"259-14":{},"259-20":{},"259-28":{},"259-36":{},"259-40":{},"259-46":{},"259-50":{},"259-54":{}},"name":{"33":{},"48":{},"136":{},"149":{},"185":{},"211":{},"325":{},"334":{}},"text":{"3":{},"12":{},"13":{},"15":{},"19":{},"22":{},"25":{},"29":{},"33":{},"36":{},"44":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"80":{},"81":{},"86":{},"95":{},"96":{},"98":{},"108":{},"122":{},"125":{},"128":{},"132":{},"136":{},"139":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"162":{},"163":{},"176":{},"177":{},"185":{},"188":{},"196":{},"216":{},"238":{},"242":{},"243":{},"246":{},"249":{},"252":{},"257":{},"259":{},"268":{},"269":{},"271":{},"275":{},"302":{},"313":{},"316":{},"321":{},"325":{},"330":{},"348":{},"352":{}},"component":{}}],["feel",{"_index":806,"title":{},"name":{},"text":{"5":{},"25":{},"88":{},"128":{},"218":{},"252":{},"261":{},"316":{}},"component":{}}],["fell",{"_index":2022,"title":{},"name":{},"text":{"49":{},"150":{},"212":{},"335":{}},"component":{}}],["few",{"_index":637,"title":{},"name":{},"text":{"3":{},"27":{},"45":{},"50":{},"51":{},"67":{},"86":{},"97":{},"130":{},"143":{},"144":{},"146":{},"169":{},"178":{},"197":{},"198":{},"208":{},"216":{},"224":{},"243":{},"254":{},"259":{},"270":{},"271":{},"274":{},"318":{},"331":{},"336":{},"337":{},"339":{}},"component":{}}],["fiddl",{"_index":2502,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["field",{"_index":597,"title":{"63":{},"120":{},"207":{},"299":{}},"name":{"63":{},"120":{},"207":{},"299":{}},"text":{"3":{},"14":{},"33":{},"42":{},"43":{},"44":{},"50":{},"51":{},"59":{},"60":{},"63":{},"67":{},"86":{},"97":{},"106":{},"107":{},"108":{},"115":{},"117":{},"120":{},"136":{},"143":{},"144":{},"169":{},"178":{},"185":{},"194":{},"195":{},"196":{},"197":{},"198":{},"202":{},"204":{},"207":{},"216":{},"224":{},"243":{},"246":{},"259":{},"270":{},"271":{},"274":{},"275":{},"293":{},"295":{},"299":{},"325":{},"328":{},"329":{},"330":{},"336":{},"337":{},"339":{}},"component":{}}],["field.getname().equals(\"eagerfield",{"_index":1929,"title":{},"name":{},"text":{"42":{},"106":{},"194":{},"328":{}},"component":{}}],["field.getname().startswith(\"_",{"_index":2420,"title":{},"name":{},"text":{"63":{},"120":{},"207":{},"299":{}},"component":{}}],["fieldevalu",{"_index":2419,"title":{},"name":{},"text":{"63":{},"120":{},"207":{},"299":{}},"component":{}}],["file",{"_index":240,"title":{"36":{},"38":{},"47":{},"58":{},"114":{},"139":{},"141":{},"148":{},"188":{},"190":{},"201":{},"210":{},"277":{},"302":{},"305":{},"333":{},"10-1":{},"34-2":{},"37-5":{},"37-6":{},"37-7":{},"47-3":{},"93-1":{},"137-2":{},"140-5":{},"140-6":{},"140-7":{},"148-3":{},"174-1":{},"186-2":{},"189-5":{},"189-6":{},"189-7":{},"210-3":{},"266-1":{},"300-2":{},"303-5":{},"303-6":{},"303-7":{},"333-3":{}},"name":{"36":{},"38":{},"47":{},"58":{},"114":{},"139":{},"141":{},"148":{},"188":{},"190":{},"201":{},"210":{},"277":{},"302":{},"305":{},"333":{}},"text":{"3":{},"4":{},"7":{},"8":{},"10":{},"11":{},"15":{},"16":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"47":{},"49":{},"50":{},"51":{},"54":{},"55":{},"57":{},"58":{},"65":{},"69":{},"70":{},"72":{},"75":{},"86":{},"87":{},"90":{},"91":{},"93":{},"94":{},"98":{},"99":{},"103":{},"110":{},"111":{},"113":{},"114":{},"135":{},"136":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"143":{},"144":{},"148":{},"150":{},"151":{},"152":{},"154":{},"157":{},"167":{},"171":{},"172":{},"174":{},"175":{},"180":{},"181":{},"184":{},"185":{},"186":{},"187":{},"188":{},"189":{},"190":{},"191":{},"197":{},"198":{},"200":{},"201":{},"210":{},"212":{},"215":{},"216":{},"217":{},"222":{},"226":{},"227":{},"229":{},"231":{},"238":{},"239":{},"243":{},"259":{},"260":{},"263":{},"264":{},"266":{},"267":{},"271":{},"274":{},"275":{},"276":{},"277":{},"278":{},"279":{},"281":{},"282":{},"284":{},"300":{},"301":{},"302":{},"303":{},"304":{},"305":{},"306":{},"308":{},"309":{},"324":{},"325":{},"333":{},"335":{},"336":{},"337":{},"343":{},"346":{},"348":{},"349":{}},"component":{}}],["file.charset",{"_index":2657,"title":{},"name":{},"text":{"75":{},"157":{},"231":{},"284":{}},"component":{}}],["file.path",{"_index":2654,"title":{},"name":{},"text":{"75":{},"157":{},"231":{},"284":{}},"component":{}}],["file.profil",{"_index":2656,"title":{},"name":{},"text":{"75":{},"157":{},"231":{},"284":{}},"component":{}}],["file.profile=product",{"_index":2651,"title":{},"name":{},"text":{"75":{},"157":{},"231":{},"284":{}},"component":{}}],["filechannel",{"_index":1732,"title":{},"name":{},"text":{"33":{},"136":{},"185":{},"325":{}},"component":{}}],["filecount",{"_index":2328,"title":{},"name":{},"text":{"55":{},"111":{},"181":{},"309":{}},"component":{}}],["filedissolvingevalu",{"_index":1081,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["filenam",{"_index":1864,"title":{},"name":{},"text":{"37":{},"38":{},"140":{},"141":{},"189":{},"190":{},"303":{},"305":{}},"component":{}}],["filenameprovid",{"_index":1867,"title":{},"name":{},"text":{"38":{},"141":{},"190":{},"305":{}},"component":{}}],["filenumb",{"_index":2326,"title":{},"name":{},"text":{"55":{},"111":{},"181":{},"309":{}},"component":{}}],["fileprovid",{"_index":1877,"title":{},"name":{},"text":{"38":{},"141":{},"190":{},"305":{}},"component":{}}],["fileproviderbuild",{"_index":1878,"title":{},"name":{},"text":{"38":{},"141":{},"190":{},"305":{}},"component":{}}],["filesuffix",{"_index":1101,"title":{},"name":{},"text":{"11":{},"94":{},"175":{}},"component":{}}],["filesystem",{"_index":1098,"title":{},"name":{},"text":{"11":{},"35":{},"37":{},"38":{},"39":{},"42":{},"57":{},"58":{},"64":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"94":{},"106":{},"113":{},"114":{},"138":{},"140":{},"141":{},"142":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{},"165":{},"166":{},"175":{},"187":{},"189":{},"190":{},"191":{},"194":{},"200":{},"201":{},"221":{},"226":{},"227":{},"228":{},"229":{},"230":{},"231":{},"232":{},"233":{},"234":{},"235":{},"236":{},"237":{},"267":{},"276":{},"277":{},"278":{},"279":{},"280":{},"281":{},"282":{},"283":{},"284":{},"285":{},"286":{},"287":{},"288":{},"289":{},"290":{},"291":{},"301":{},"303":{},"305":{},"306":{},"328":{},"342":{}},"component":{}}],["filesystem.aw",{"_index":267,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["filesystem.aws.dynamodb.credentials.access",{"_index":2527,"title":{},"name":{},"text":{"69":{},"151":{},"226":{},"278":{}},"component":{}}],["filesystem.aws.dynamodb.credentials.region=u",{"_index":2532,"title":{},"name":{},"text":{"69":{},"151":{},"226":{},"278":{}},"component":{}}],["filesystem.aws.dynamodb.credentials.secret",{"_index":2529,"title":{},"name":{},"text":{"69":{},"151":{},"226":{},"278":{}},"component":{}}],["filesystem.aws.dynamodb.credentials.type=stat",{"_index":2526,"title":{},"name":{},"text":{"69":{},"151":{},"226":{},"278":{}},"component":{}}],["filesystem.aws.s3.credentials.access",{"_index":2559,"title":{},"name":{},"text":{"70":{},"152":{},"227":{},"279":{}},"component":{}}],["filesystem.aws.s3.credentials.region=u",{"_index":2561,"title":{},"name":{},"text":{"70":{},"152":{},"227":{},"279":{}},"component":{}}],["filesystem.aws.s3.credentials.secret",{"_index":2560,"title":{},"name":{},"text":{"70":{},"152":{},"227":{},"279":{}},"component":{}}],["filesystem.aws.s3.credentials.type=stat",{"_index":2558,"title":{},"name":{},"text":{"70":{},"152":{},"227":{},"279":{}},"component":{}}],["filesystem.aws:one.microstream.afs.aws.dynamodb",{"_index":325,"title":{},"name":{},"text":{"3":{}},"component":{}}],["filesystem.aws:one.microstream.afs.aws.s3",{"_index":327,"title":{},"name":{},"text":{"3":{}},"component":{}}],["filesystem.azur",{"_index":272,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["filesystem.azure.storage.credentials.password=secret",{"_index":2566,"title":{},"name":{},"text":{"71":{},"153":{},"228":{},"280":{}},"component":{}}],["filesystem.azure.storage.credentials.type=bas",{"_index":2564,"title":{},"name":{},"text":{"71":{},"153":{},"228":{},"280":{}},"component":{}}],["filesystem.azure.storage.credentials.username=us",{"_index":2565,"title":{},"name":{},"text":{"71":{},"153":{},"228":{},"280":{}},"component":{}}],["filesystem.azure:one.microstream.afs.azure.storag",{"_index":329,"title":{},"name":{},"text":{"3":{}},"component":{}}],["filesystem.blobstor",{"_index":274,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["filesystem.blobstore:one.microstream.afs.blobstor",{"_index":331,"title":{},"name":{},"text":{"3":{}},"component":{}}],["filesystem.coher",{"_index":276,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["filesystem.coherence:one.microstream.afs.coher",{"_index":333,"title":{},"name":{},"text":{"3":{}},"component":{}}],["filesystem.ensuredirectorypath(\"backupdir",{"_index":1778,"title":{},"name":{},"text":{"35":{},"138":{},"187":{},"301":{}},"component":{}}],["filesystem.ensuredirectorypath(\"bin",{"_index":1147,"title":{},"name":{},"text":{"11":{},"94":{},"175":{}},"component":{}}],["filesystem.ensuredirectorypath(\"csv",{"_index":1135,"title":{},"name":{},"text":{"11":{},"94":{},"175":{},"267":{}},"component":{}}],["filesystem.ensuredirectorypath(\"export",{"_index":1108,"title":{},"name":{},"text":{"11":{},"94":{},"175":{},"267":{}},"component":{}}],["filesystem.ensuredirectorypath(\"storag",{"_index":1100,"title":{},"name":{},"text":{"11":{},"94":{},"175":{},"267":{}},"component":{}}],["filesystem.ensuredirectorypath(deletiondir",{"_index":1882,"title":{},"name":{},"text":{"38":{},"141":{},"190":{},"305":{}},"component":{}}],["filesystem.ensuredirectorypath(workingdir",{"_index":1880,"title":{},"name":{},"text":{"38":{},"64":{},"141":{},"166":{},"190":{},"221":{},"305":{},"342":{}},"component":{}}],["filesystem.ensurefilepath(\"type1.bin",{"_index":1119,"title":{},"name":{},"text":{"11":{},"94":{},"175":{}},"component":{}}],["filesystem.ensurefilepath(\"type1.bin\").useread",{"_index":1141,"title":{},"name":{},"text":{"11":{},"94":{},"175":{}},"component":{}}],["filesystem.ensurefilepath(\"type2.bin",{"_index":1120,"title":{},"name":{},"text":{"11":{},"94":{},"175":{}},"component":{}}],["filesystem.googlecloud.firestore.credentials.type=default",{"_index":3300,"title":{},"name":{},"text":{"281":{}},"component":{}}],["filesystem.googlecloud.firestore.databas",{"_index":3301,"title":{},"name":{},"text":{"281":{}},"component":{}}],["filesystem.googlecloud.firestore.project",{"_index":3302,"title":{},"name":{},"text":{"281":{}},"component":{}}],["filesystem.hazelcast",{"_index":279,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["filesystem.hazelcast.configuration=path",{"_index":2577,"title":{},"name":{},"text":{"72":{},"154":{},"229":{},"282":{}},"component":{}}],["filesystem.hazelcast:one.microstream.afs.hazelcast",{"_index":335,"title":{},"name":{},"text":{"3":{}},"component":{}}],["filesystem.jpa.hibern",{"_index":281,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["filesystem.jpa.hibernate:one.microstream.afs.jpa.hibern",{"_index":337,"title":{},"name":{},"text":{"3":{}},"component":{}}],["filesystem.kafka",{"_index":282,"title":{},"name":{},"text":{"3":{},"73":{},"86":{},"155":{},"216":{},"230":{},"259":{},"283":{}},"component":{}}],["filesystem.kafka:one.microstream.afs.kafka",{"_index":339,"title":{},"name":{},"text":{"3":{}},"component":{}}],["filesystem.mongodb",{"_index":284,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["filesystem.mongodb.auth",{"_index":2595,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["filesystem.mongodb.database=mydatabas",{"_index":2594,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["filesystem.mongodb.password=secret",{"_index":2599,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["filesystem.mongodb.username=usernam",{"_index":2598,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["filesystem.mongodb:one.microstream.afs.mongodb",{"_index":341,"title":{},"name":{},"text":{"3":{}},"component":{}}],["filesystem.oracle.coherence.cach",{"_index":2670,"title":{},"name":{},"text":{"76":{},"158":{},"232":{},"285":{}},"component":{}}],["filesystem.oracle.nosql.help",{"_index":2681,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["filesystem.oracle.nosql.password=secret",{"_index":2684,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["filesystem.oracle.nosql.stor",{"_index":2679,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["filesystem.oracle.nosql.username=us",{"_index":2683,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["filesystem.oraclecloud",{"_index":286,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["filesystem.oraclecloud.object",{"_index":2649,"title":{},"name":{},"text":{"75":{},"157":{},"231":{},"284":{}},"component":{}}],["filesystem.oraclecloud:one.microstream.afs.oracle.cloud.objectstorag",{"_index":343,"title":{},"name":{},"text":{"3":{}},"component":{}}],["filesystem.oraclenosql",{"_index":289,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["filesystem.redi",{"_index":291,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["filesystem.redis.uri=redis://localhost:6379/0",{"_index":2737,"title":{},"name":{},"text":{"78":{},"160":{},"233":{},"286":{}},"component":{}}],["filesystem.redis:one.microstream.afs.redi",{"_index":345,"title":{},"name":{},"text":{"3":{}},"component":{}}],["filesystem.sql",{"_index":293,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["filesystem.sql.hana.catalog=mycatalog",{"_index":3322,"title":{},"name":{},"text":{"287":{}},"component":{}}],["filesystem.sql.hana.data",{"_index":3319,"title":{},"name":{},"text":{"287":{}},"component":{}}],["filesystem.sql.hana.password=secret",{"_index":3326,"title":{},"name":{},"text":{"287":{}},"component":{}}],["filesystem.sql.hana.schema=myschema",{"_index":3323,"title":{},"name":{},"text":{"287":{}},"component":{}}],["filesystem.sql.hana.stor",{"_index":3320,"title":{},"name":{},"text":{"287":{}},"component":{}}],["filesystem.sql.hana.url=jdbc:sap://dummy_host:0/?key=user1userkey&encrypt=true&validatecertificate=fals",{"_index":3324,"title":{},"name":{},"text":{"287":{}},"component":{}}],["filesystem.sql.hana.user=usernam",{"_index":3325,"title":{},"name":{},"text":{"287":{}},"component":{}}],["filesystem.sql.mariadb.catalog=mycatalog",{"_index":2751,"title":{},"name":{},"text":{"79":{},"161":{},"234":{},"288":{}},"component":{}}],["filesystem.sql.mariadb.data",{"_index":2749,"title":{},"name":{},"text":{"79":{},"161":{},"234":{},"288":{}},"component":{}}],["filesystem.sql.mariadb.password=secret",{"_index":2755,"title":{},"name":{},"text":{"79":{},"161":{},"234":{},"288":{}},"component":{}}],["filesystem.sql.mariadb.schema=myschema",{"_index":2752,"title":{},"name":{},"text":{"79":{},"161":{},"234":{},"288":{}},"component":{}}],["filesystem.sql.mariadb.url=jdbc:mysql://host:3306/mydb",{"_index":2753,"title":{},"name":{},"text":{"79":{},"161":{},"234":{},"288":{}},"component":{}}],["filesystem.sql.mariadb.user=usernam",{"_index":2754,"title":{},"name":{},"text":{"79":{},"161":{},"234":{},"288":{}},"component":{}}],["filesystem.sql.mysql.catalog=mycatalog",{"_index":2768,"title":{},"name":{},"text":{"80":{},"162":{}},"component":{}}],["filesystem.sql.mysql.data",{"_index":2767,"title":{},"name":{},"text":{"80":{},"162":{}},"component":{}}],["filesystem.sql.mysql.password=secret",{"_index":2772,"title":{},"name":{},"text":{"80":{},"162":{}},"component":{}}],["filesystem.sql.mysql.schema=myschema",{"_index":2769,"title":{},"name":{},"text":{"80":{},"162":{}},"component":{}}],["filesystem.sql.mysql.url=jdbc:mysql://host:3306/mydb",{"_index":2770,"title":{},"name":{},"text":{"80":{},"162":{}},"component":{}}],["filesystem.sql.mysql.user=usernam",{"_index":2771,"title":{},"name":{},"text":{"80":{},"162":{}},"component":{}}],["filesystem.sql.oracle.catalog=mycatalog",{"_index":2780,"title":{},"name":{},"text":{"81":{},"163":{},"235":{},"289":{}},"component":{}}],["filesystem.sql.oracle.data",{"_index":2779,"title":{},"name":{},"text":{"81":{},"163":{},"235":{},"289":{}},"component":{}}],["filesystem.sql.oracle.password=secret",{"_index":2784,"title":{},"name":{},"text":{"81":{},"163":{},"235":{},"289":{}},"component":{}}],["filesystem.sql.oracle.schema=myschema",{"_index":2781,"title":{},"name":{},"text":{"81":{},"163":{},"235":{},"289":{}},"component":{}}],["filesystem.sql.oracle.url=jdbc:oracle:thin:@localhost:1521/db",{"_index":2782,"title":{},"name":{},"text":{"81":{},"163":{},"235":{},"289":{}},"component":{}}],["filesystem.sql.oracle.user=usernam",{"_index":2783,"title":{},"name":{},"text":{"81":{},"163":{},"235":{},"289":{}},"component":{}}],["filesystem.sql.postgres.catalog=mycatalog",{"_index":2792,"title":{},"name":{},"text":{"82":{},"164":{},"236":{},"290":{}},"component":{}}],["filesystem.sql.postgres.data",{"_index":2791,"title":{},"name":{},"text":{"82":{},"164":{},"236":{},"246":{},"275":{},"290":{}},"component":{}}],["filesystem.sql.postgres.password",{"_index":3178,"title":{},"name":{},"text":{"246":{},"275":{}},"component":{}}],["filesystem.sql.postgres.password=secret",{"_index":2796,"title":{},"name":{},"text":{"82":{},"164":{},"236":{},"290":{}},"component":{}}],["filesystem.sql.postgres.schema=myschema",{"_index":2793,"title":{},"name":{},"text":{"82":{},"164":{},"236":{},"290":{}},"component":{}}],["filesystem.sql.postgres.url=jdbc:postgresql://localhost:5432/mydb",{"_index":2794,"title":{},"name":{},"text":{"82":{},"164":{},"236":{},"290":{}},"component":{}}],["filesystem.sql.postgres.us",{"_index":3183,"title":{},"name":{},"text":{"246":{},"275":{}},"component":{}}],["filesystem.sql.postgres.user=usernam",{"_index":2795,"title":{},"name":{},"text":{"82":{},"164":{},"236":{},"290":{}},"component":{}}],["filesystem.sql.sqlite.catalog=mycatalog",{"_index":2804,"title":{},"name":{},"text":{"83":{},"165":{},"237":{},"291":{}},"component":{}}],["filesystem.sql.sqlite.data",{"_index":2803,"title":{},"name":{},"text":{"83":{},"165":{},"237":{},"291":{}},"component":{}}],["filesystem.sql.sqlite.schema=myschema",{"_index":2805,"title":{},"name":{},"text":{"83":{},"165":{},"237":{},"291":{}},"component":{}}],["filesystem.sql.sqlite.url=jdbc:sqlite:microstreamdb",{"_index":2806,"title":{},"name":{},"text":{"83":{},"165":{},"237":{},"291":{}},"component":{}}],["file’",{"_index":1129,"title":{},"name":{},"text":{"11":{},"94":{},"175":{},"267":{}},"component":{}}],["fill",{"_index":995,"title":{},"name":{},"text":{"10":{},"14":{},"50":{},"93":{},"97":{},"143":{},"174":{},"178":{},"197":{},"266":{},"270":{},"304":{},"336":{}},"component":{}}],["filter(a",{"_index":1206,"title":{},"name":{},"text":{"13":{},"96":{},"177":{},"269":{}},"component":{}}],["final",{"_index":925,"title":{},"name":{},"text":{"9":{},"11":{},"22":{},"23":{},"24":{},"29":{},"30":{},"32":{},"33":{},"36":{},"52":{},"60":{},"92":{},"94":{},"117":{},"125":{},"126":{},"127":{},"132":{},"133":{},"135":{},"136":{},"139":{},"145":{},"173":{},"175":{},"184":{},"185":{},"188":{},"199":{},"204":{},"215":{},"216":{},"220":{},"246":{},"249":{},"250":{},"251":{},"257":{},"258":{},"259":{},"265":{},"275":{},"292":{},"295":{},"297":{},"302":{},"304":{},"313":{},"314":{},"315":{},"321":{},"322":{},"324":{},"325":{},"346":{},"347":{}},"component":{}}],["find",{"_index":654,"title":{},"name":{},"text":{"4":{},"87":{},"182":{},"217":{},"260":{},"281":{},"310":{}},"component":{}}],["fine",{"_index":562,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["finer",{"_index":2253,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["fire",{"_index":2210,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["firestor",{"_index":3063,"title":{"281":{}},"name":{"281":{}},"text":{"216":{},"259":{},"281":{}},"component":{}}],["first",{"_index":256,"title":{},"name":{},"text":{"3":{},"12":{},"14":{},"19":{},"33":{},"50":{},"56":{},"67":{},"95":{},"97":{},"112":{},"122":{},"136":{},"143":{},"169":{},"176":{},"178":{},"185":{},"197":{},"224":{},"242":{},"243":{},"246":{},"268":{},"270":{},"271":{},"274":{},"275":{},"325":{},"336":{},"339":{},"352":{}},"component":{}}],["firstnam",{"_index":1354,"title":{},"name":{},"text":{"21":{},"23":{},"50":{},"51":{},"124":{},"126":{},"143":{},"144":{},"197":{},"198":{},"248":{},"250":{},"312":{},"314":{},"336":{},"337":{}},"component":{}}],["firstname(\"jim",{"_index":1558,"title":{},"name":{},"text":{"26":{},"129":{},"253":{},"317":{}},"component":{}}],["firstname(\"john",{"_index":1359,"title":{},"name":{},"text":{"21":{},"24":{},"25":{},"27":{},"124":{},"127":{},"128":{},"130":{},"248":{},"251":{},"252":{},"254":{},"312":{},"315":{},"316":{},"318":{}},"component":{}}],["firstname(\"mik",{"_index":1377,"title":{},"name":{},"text":{"21":{},"124":{},"248":{},"312":{}},"component":{}}],["firstname(fin",{"_index":1489,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["firstname(str",{"_index":1487,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["fiscal",{"_index":2461,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["fit",{"_index":1169,"title":{},"name":{},"text":{"12":{},"13":{},"95":{},"96":{},"176":{},"177":{},"268":{},"269":{}},"component":{}}],["fix",{"_index":189,"title":{},"name":{},"text":{"3":{},"55":{},"86":{},"111":{},"181":{},"216":{},"259":{},"309":{}},"component":{}}],["fixedlength",{"_index":2310,"title":{},"name":{},"text":{"55":{},"111":{},"181":{},"309":{}},"component":{}}],["fixedoffset",{"_index":2309,"title":{},"name":{},"text":{"55":{},"111":{},"181":{},"309":{}},"component":{}}],["flag",{"_index":1828,"title":{},"name":{},"text":{"37":{},"140":{},"189":{},"303":{}},"component":{}}],["flavor",{"_index":3009,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["fledg",{"_index":1230,"title":{},"name":{},"text":{"14":{},"31":{},"97":{},"134":{},"178":{},"183":{},"270":{},"323":{}},"component":{}}],["flexibl",{"_index":1645,"title":{},"name":{},"text":{"30":{},"41":{},"105":{},"133":{},"193":{},"258":{},"322":{},"327":{}},"component":{}}],["fli",{"_index":2031,"title":{},"name":{},"text":{"49":{},"150":{},"212":{},"335":{}},"component":{}}],["float",{"_index":1676,"title":{},"name":{},"text":{"32":{},"50":{},"135":{},"143":{},"184":{},"197":{},"324":{},"336":{}},"component":{}}],["float)intvalu",{"_index":2160,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["floatvalu",{"_index":2159,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["flush",{"_index":191,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["folder",{"_index":1090,"title":{},"name":{},"text":{"11":{},"48":{},"57":{},"94":{},"113":{},"149":{},"175":{},"200":{},"211":{},"216":{},"259":{},"267":{},"276":{}},"component":{}}],["follow",{"_index":223,"title":{},"name":{},"text":{"3":{},"9":{},"10":{},"21":{},"22":{},"28":{},"30":{},"31":{},"32":{},"39":{},"43":{},"50":{},"54":{},"66":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"86":{},"92":{},"93":{},"107":{},"110":{},"116":{},"124":{},"125":{},"131":{},"133":{},"134":{},"135":{},"142":{},"143":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{},"165":{},"168":{},"173":{},"174":{},"179":{},"180":{},"183":{},"184":{},"191":{},"195":{},"197":{},"216":{},"223":{},"226":{},"227":{},"228":{},"229":{},"230":{},"231":{},"232":{},"233":{},"234":{},"235":{},"236":{},"237":{},"243":{},"245":{},"246":{},"248":{},"249":{},"256":{},"258":{},"259":{},"265":{},"266":{},"271":{},"273":{},"274":{},"275":{},"278":{},"279":{},"280":{},"281":{},"282":{},"283":{},"284":{},"285":{},"286":{},"287":{},"288":{},"289":{},"290":{},"291":{},"297":{},"304":{},"306":{},"307":{},"308":{},"312":{},"313":{},"320":{},"322":{},"323":{},"324":{},"329":{},"336":{},"338":{}},"component":{}}],["forbid",{"_index":1183,"title":{},"name":{},"text":{"12":{},"95":{},"176":{},"268":{}},"component":{}}],["forc",{"_index":2273,"title":{},"name":{},"text":{"51":{},"74":{},"144":{},"156":{},"198":{},"246":{},"337":{}},"component":{}}],["foreignobject",{"_index":2374,"title":{},"name":{},"text":{"59":{},"115":{},"202":{},"293":{}},"component":{}}],["forev",{"_index":2193,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["forget",{"_index":2395,"title":{},"name":{},"text":{"60":{},"117":{},"204":{},"295":{}},"component":{}}],["forimperson",{"_index":3312,"title":{},"name":{},"text":{"281":{}},"component":{}}],["forlanguagetag",{"_index":649,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["form",{"_index":717,"title":{},"name":{},"text":{"4":{},"35":{},"44":{},"45":{},"47":{},"49":{},"67":{},"87":{},"108":{},"138":{},"146":{},"148":{},"150":{},"169":{},"187":{},"196":{},"208":{},"210":{},"212":{},"217":{},"220":{},"224":{},"260":{},"301":{},"330":{},"331":{},"333":{},"335":{},"339":{},"347":{}},"component":{}}],["format",{"_index":743,"title":{"35-3":{},"138-3":{},"187-3":{},"301-3":{}},"name":{},"text":{"4":{},"11":{},"35":{},"43":{},"49":{},"50":{},"77":{},"87":{},"94":{},"107":{},"138":{},"143":{},"150":{},"159":{},"175":{},"187":{},"195":{},"197":{},"212":{},"217":{},"220":{},"243":{},"260":{},"267":{},"271":{},"281":{},"301":{},"329":{},"335":{},"336":{},"347":{}},"component":{}}],["fortun",{"_index":1912,"title":{},"name":{},"text":{"41":{},"105":{},"193":{},"327":{}},"component":{}}],["found",{"_index":933,"title":{},"name":{},"text":{"9":{},"16":{},"18":{},"35":{},"37":{},"44":{},"51":{},"52":{},"67":{},"72":{},"92":{},"99":{},"108":{},"121":{},"138":{},"140":{},"144":{},"145":{},"154":{},"169":{},"173":{},"187":{},"189":{},"196":{},"198":{},"199":{},"224":{},"229":{},"239":{},"241":{},"265":{},"282":{},"292":{},"301":{},"303":{},"330":{},"337":{},"339":{},"349":{},"351":{}},"component":{}}],["foundat",{"_index":759,"title":{"35-1":{},"138-1":{},"187-1":{},"301-1":{}},"name":{},"text":{"4":{},"32":{},"35":{},"36":{},"37":{},"40":{},"50":{},"51":{},"64":{},"87":{},"104":{},"135":{},"138":{},"139":{},"140":{},"143":{},"144":{},"166":{},"184":{},"187":{},"188":{},"189":{},"192":{},"197":{},"198":{},"215":{},"217":{},"220":{},"221":{},"260":{},"301":{},"302":{},"303":{},"304":{},"324":{},"326":{},"336":{},"337":{},"342":{},"346":{},"347":{}},"component":{}}],["foundation(filesystem.ensuredirectorypath(workingdir",{"_index":1931,"title":{},"name":{},"text":{"42":{},"106":{},"194":{},"328":{}},"component":{}}],["foundation(workingdir",{"_index":1946,"title":{},"name":{},"text":{"43":{},"107":{},"195":{},"329":{}},"component":{}}],["foundation.createembeddedstoragemanager(myroot).start",{"_index":2103,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["foundation.createembeddedstoragemanager(root).start",{"_index":2153,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["foundation.getconnectionfound",{"_index":2235,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["foundation.getconnectionfoundation().setlegacytypemappingresultor",{"_index":2100,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["foundation.onconnectionfoundation(binaryhandlersjdk17::registerjdk17typehandl",{"_index":2955,"title":{},"name":{},"text":{"135":{},"184":{},"324":{}},"component":{}}],["foundation.onconnectionfoundation(binaryhandlersjdk8::registerjdk8typehandl",{"_index":1717,"title":{},"name":{},"text":{"32":{},"135":{},"184":{},"324":{}},"component":{}}],["foundation.onconnectionfoundation(f",{"_index":2236,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["foundation.setrefactoringmappingprovid",{"_index":2151,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["foundation.setwritecontroller(storagewritecontrol",{"_index":3344,"title":{},"name":{},"text":{"304":{}},"component":{}}],["four",{"_index":2157,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["fraction",{"_index":1955,"title":{},"name":{},"text":{"43":{},"107":{},"195":{},"329":{}},"component":{}}],["framework",{"_index":702,"title":{},"name":{},"text":{"4":{},"5":{},"19":{},"24":{},"31":{},"51":{},"54":{},"87":{},"88":{},"97":{},"110":{},"116":{},"122":{},"127":{},"134":{},"144":{},"178":{},"180":{},"183":{},"198":{},"203":{},"217":{},"218":{},"242":{},"246":{},"251":{},"255":{},"260":{},"261":{},"270":{},"294":{},"308":{},"315":{},"319":{},"323":{},"337":{},"352":{}},"component":{}}],["framework’",{"_index":238,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["free",{"_index":502,"title":{},"name":{},"text":{"3":{},"5":{},"13":{},"25":{},"50":{},"86":{},"88":{},"96":{},"128":{},"143":{},"177":{},"197":{},"216":{},"218":{},"252":{},"259":{},"261":{},"269":{},"316":{},"336":{}},"component":{}}],["freeli",{"_index":1054,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["from(exportresult.typestatistics().valu",{"_index":1115,"title":{},"name":{},"text":{"11":{},"94":{},"175":{}},"component":{}}],["frustratingli",{"_index":1167,"title":{},"name":{},"text":{"12":{},"95":{},"176":{},"268":{}},"component":{}}],["fsync",{"_index":2614,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["fulfil",{"_index":3362,"title":{},"name":{},"text":{"340":{}},"component":{}}],["full",{"_index":449,"title":{"65":{},"167":{},"222":{},"343":{}},"name":{"61":{},"65":{},"118":{},"167":{},"205":{},"222":{},"296":{},"343":{}},"text":{"3":{},"9":{},"10":{},"35":{},"43":{},"50":{},"52":{},"60":{},"65":{},"67":{},"86":{},"92":{},"93":{},"106":{},"107":{},"116":{},"117":{},"138":{},"143":{},"145":{},"167":{},"169":{},"173":{},"174":{},"187":{},"194":{},"195":{},"197":{},"199":{},"203":{},"204":{},"216":{},"222":{},"224":{},"259":{},"265":{},"266":{},"292":{},"294":{},"295":{},"301":{},"328":{},"329":{},"336":{},"339":{},"343":{}},"component":{}}],["fulli",{"_index":41,"title":{},"name":{},"text":{"1":{},"3":{},"9":{},"10":{},"12":{},"14":{},"31":{},"48":{},"50":{},"63":{},"84":{},"86":{},"92":{},"93":{},"95":{},"97":{},"120":{},"134":{},"143":{},"149":{},"173":{},"174":{},"176":{},"178":{},"183":{},"197":{},"207":{},"211":{},"213":{},"216":{},"239":{},"243":{},"246":{},"259":{},"265":{},"266":{},"268":{},"270":{},"271":{},"274":{},"275":{},"299":{},"323":{},"336":{},"344":{},"349":{}},"component":{}}],["function",{"_index":623,"title":{"49-4":{},"150-4":{},"212-4":{},"335-4":{}},"name":{},"text":{"3":{},"4":{},"12":{},"17":{},"29":{},"50":{},"86":{},"87":{},"95":{},"100":{},"116":{},"132":{},"143":{},"176":{},"197":{},"203":{},"216":{},"217":{},"240":{},"243":{},"246":{},"257":{},"259":{},"260":{},"268":{},"271":{},"274":{},"275":{},"294":{},"297":{},"321":{},"336":{},"340":{},"350":{}},"component":{}}],["further",{"_index":955,"title":{},"name":{},"text":{"9":{},"24":{},"31":{},"37":{},"51":{},"58":{},"74":{},"92":{},"114":{},"127":{},"134":{},"140":{},"144":{},"156":{},"173":{},"183":{},"189":{},"198":{},"201":{},"251":{},"265":{},"277":{},"303":{},"315":{},"323":{},"337":{}},"component":{}}],["furthermor",{"_index":2179,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["ga",{"_index":11,"title":{},"name":{},"text":{"1":{},"4":{},"9":{},"18":{},"19":{},"20":{},"28":{},"32":{},"35":{},"49":{},"53":{},"56":{},"57":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"87":{},"92":{},"103":{},"109":{},"112":{},"113":{},"121":{},"122":{},"123":{},"131":{},"135":{},"138":{},"150":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{},"165":{},"173":{},"182":{},"184":{},"187":{},"200":{},"212":{},"213":{},"215":{},"217":{},"220":{},"226":{},"227":{},"228":{},"229":{},"230":{},"231":{},"232":{},"233":{},"234":{},"235":{},"236":{},"237":{},"241":{},"242":{},"243":{},"246":{},"247":{},"256":{},"260":{},"265":{},"271":{},"274":{},"275":{},"276":{},"278":{},"279":{},"280":{},"281":{},"282":{},"283":{},"284":{},"285":{},"286":{},"287":{},"288":{},"289":{},"290":{},"291":{},"301":{},"310":{},"311":{},"320":{},"324":{},"335":{},"344":{},"346":{},"347":{},"351":{},"352":{}},"component":{}}],["ga.jar",{"_index":2291,"title":{},"name":{},"text":{"53":{},"109":{},"179":{},"307":{}},"component":{}}],["ga/microstream",{"_index":2929,"title":{},"name":{},"text":{"109":{},"179":{},"307":{}},"component":{}}],["ga/storage.restclient.app",{"_index":2290,"title":{},"name":{},"text":{"53":{}},"component":{}}],["gap",{"_index":981,"title":{},"name":{},"text":{"10":{},"34":{},"37":{},"50":{},"93":{},"137":{},"140":{},"143":{},"174":{},"186":{},"189":{},"197":{},"266":{},"300":{},"303":{},"336":{}},"component":{}}],["garbag",{"_index":918,"title":{"10-3":{},"93-3":{},"174-3":{},"266-3":{}},"name":{},"text":{"8":{},"10":{},"37":{},"66":{},"91":{},"93":{},"140":{},"168":{},"172":{},"174":{},"189":{},"216":{},"223":{},"259":{},"264":{},"266":{},"303":{},"338":{},"340":{}},"component":{}}],["gazillion",{"_index":2188,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["gc",{"_index":1849,"title":{},"name":{},"text":{"37":{},"66":{},"140":{},"168":{},"189":{},"223":{},"303":{},"338":{}},"component":{}}],["gcloud",{"_index":3309,"title":{},"name":{},"text":{"281":{}},"component":{}}],["gener",{"_index":221,"title":{"22-2":{},"125-2":{},"249-2":{},"313-2":{}},"name":{},"text":{"3":{},"4":{},"20":{},"21":{},"22":{},"23":{},"24":{},"28":{},"29":{},"30":{},"32":{},"33":{},"43":{},"49":{},"61":{},"67":{},"77":{},"86":{},"87":{},"107":{},"118":{},"123":{},"124":{},"125":{},"126":{},"127":{},"131":{},"132":{},"133":{},"135":{},"136":{},"150":{},"159":{},"169":{},"184":{},"185":{},"195":{},"205":{},"212":{},"216":{},"217":{},"224":{},"247":{},"248":{},"249":{},"250":{},"251":{},"256":{},"257":{},"258":{},"259":{},"260":{},"274":{},"296":{},"311":{},"312":{},"313":{},"314":{},"315":{},"320":{},"321":{},"322":{},"324":{},"325":{},"329":{},"335":{},"339":{}},"component":{}}],["generatewrapp",{"_index":1594,"title":{},"name":{},"text":{"28":{},"131":{},"256":{},"320":{}},"component":{}}],["generatewrapperfor",{"_index":1602,"title":{},"name":{},"text":{"28":{},"131":{},"256":{},"320":{}},"component":{}}],["generatewrapperfor(\"one.microstream.persistence.types.persistencestor",{"_index":1603,"title":{},"name":{},"text":{"28":{},"131":{},"256":{},"320":{}},"component":{}}],["get",{"_index":3,"title":{"1":{},"9":{},"84":{},"92":{},"173":{},"213":{},"265":{},"344":{},"215-1":{},"346-1":{}},"name":{"1":{},"9":{},"84":{},"92":{},"173":{},"213":{},"265":{},"344":{}},"text":{"2":{},"3":{},"9":{},"50":{},"60":{},"68":{},"85":{},"86":{},"92":{},"116":{},"117":{},"143":{},"170":{},"173":{},"197":{},"203":{},"204":{},"214":{},"216":{},"225":{},"259":{},"265":{},"294":{},"295":{},"304":{},"336":{},"341":{},"345":{},"347":{}},"component":{}}],["getcont",{"_index":949,"title":{},"name":{},"text":{"9":{},"92":{},"173":{},"265":{}},"component":{}}],["getgreenmanag",{"_index":3281,"title":{},"name":{},"text":{"275":{}},"component":{}}],["getredmanag",{"_index":3284,"title":{},"name":{},"text":{"275":{}},"component":{}}],["getstuff",{"_index":1597,"title":{},"name":{},"text":{"28":{},"131":{},"256":{},"320":{}},"component":{}}],["getter",{"_index":232,"title":{},"name":{},"text":{"3":{},"43":{},"59":{},"86":{},"107":{},"115":{},"195":{},"202":{},"216":{},"259":{},"293":{},"329":{}},"component":{}}],["getunavailablearticl",{"_index":1204,"title":{},"name":{},"text":{"13":{},"96":{},"177":{},"269":{}},"component":{}}],["gigabyt",{"_index":2039,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["github",{"_index":967,"title":{},"name":{},"text":{"9":{},"25":{},"35":{},"41":{},"43":{},"52":{},"60":{},"67":{},"92":{},"101":{},"105":{},"106":{},"107":{},"117":{},"128":{},"138":{},"145":{},"169":{},"173":{},"187":{},"193":{},"194":{},"195":{},"199":{},"204":{},"224":{},"244":{},"252":{},"265":{},"272":{},"292":{},"295":{},"301":{},"316":{},"327":{},"328":{},"329":{},"339":{}},"component":{}}],["give",{"_index":101,"title":{},"name":{},"text":{"2":{},"59":{},"85":{},"115":{},"202":{},"214":{},"293":{},"345":{}},"component":{}}],["given",{"_index":957,"title":{},"name":{},"text":{"9":{},"10":{},"21":{},"47":{},"49":{},"50":{},"51":{},"72":{},"77":{},"92":{},"93":{},"124":{},"143":{},"144":{},"148":{},"150":{},"154":{},"159":{},"173":{},"174":{},"197":{},"198":{},"210":{},"212":{},"229":{},"248":{},"265":{},"266":{},"282":{},"312":{},"333":{},"335":{},"336":{},"337":{}},"component":{}}],["global",{"_index":904,"title":{},"name":{},"text":{"7":{},"49":{},"59":{},"61":{},"66":{},"90":{},"115":{},"118":{},"150":{},"168":{},"171":{},"202":{},"205":{},"212":{},"223":{},"263":{},"293":{},"296":{},"335":{},"338":{}},"component":{}}],["go",{"_index":214,"title":{},"name":{},"text":{"3":{},"14":{},"24":{},"50":{},"51":{},"56":{},"86":{},"97":{},"112":{},"127":{},"143":{},"144":{},"178":{},"182":{},"197":{},"198":{},"216":{},"251":{},"259":{},"270":{},"310":{},"315":{},"336":{},"337":{}},"component":{}}],["goe",{"_index":1000,"title":{},"name":{},"text":{"10":{},"66":{},"93":{},"168":{},"174":{},"223":{},"266":{},"338":{}},"component":{}}],["good",{"_index":213,"title":{},"name":{},"text":{"3":{},"9":{},"18":{},"19":{},"24":{},"29":{},"50":{},"51":{},"56":{},"77":{},"86":{},"92":{},"112":{},"121":{},"122":{},"127":{},"132":{},"143":{},"144":{},"159":{},"173":{},"182":{},"197":{},"198":{},"216":{},"241":{},"242":{},"251":{},"257":{},"259":{},"265":{},"310":{},"315":{},"321":{},"336":{},"337":{},"351":{},"352":{}},"component":{}}],["googl",{"_index":3062,"title":{"281":{}},"name":{"281":{}},"text":{"216":{},"259":{},"281":{}},"component":{}}],["google_application_credenti",{"_index":3308,"title":{},"name":{},"text":{"281":{}},"component":{}}],["googlecloud",{"_index":3298,"title":{},"name":{},"text":{"281":{}},"component":{}}],["googlecloudfirestoreconnector.caching(cli",{"_index":3299,"title":{},"name":{},"text":{"281":{}},"component":{}}],["graalvm",{"_index":243,"title":{},"name":{},"text":{"3":{},"5":{},"86":{},"88":{},"216":{},"218":{},"259":{},"261":{}},"component":{}}],["gradl",{"_index":657,"title":{},"name":{},"text":{"4":{},"87":{},"217":{},"260":{}},"component":{}}],["graph",{"_index":508,"title":{"4-3":{}},"name":{},"text":{"3":{},"4":{},"8":{},"9":{},"10":{},"12":{},"13":{},"14":{},"23":{},"27":{},"33":{},"35":{},"45":{},"47":{},"50":{},"52":{},"59":{},"60":{},"86":{},"87":{},"91":{},"92":{},"93":{},"95":{},"96":{},"97":{},"115":{},"116":{},"117":{},"126":{},"130":{},"136":{},"138":{},"143":{},"145":{},"146":{},"148":{},"172":{},"173":{},"174":{},"176":{},"177":{},"178":{},"180":{},"185":{},"187":{},"197":{},"199":{},"202":{},"203":{},"204":{},"208":{},"210":{},"215":{},"216":{},"217":{},"250":{},"254":{},"259":{},"260":{},"264":{},"265":{},"266":{},"268":{},"269":{},"270":{},"292":{},"293":{},"294":{},"295":{},"297":{},"301":{},"308":{},"314":{},"318":{},"325":{},"331":{},"333":{},"336":{},"340":{},"346":{}},"component":{}}],["graph’",{"_index":1223,"title":{},"name":{},"text":{"14":{},"97":{},"178":{},"270":{}},"component":{}}],["great",{"_index":1663,"title":{},"name":{},"text":{"31":{},"50":{},"59":{},"67":{},"115":{},"134":{},"143":{},"169":{},"183":{},"197":{},"202":{},"224":{},"293":{},"323":{},"336":{},"339":{}},"component":{}}],["greater",{"_index":255,"title":{},"name":{},"text":{"3":{},"34":{},"37":{},"86":{},"137":{},"140":{},"186":{},"189":{},"216":{},"259":{},"300":{},"303":{}},"component":{}}],["groovi",{"_index":658,"title":{},"name":{},"text":{"4":{},"87":{},"217":{},"260":{}},"component":{}}],["ground",{"_index":1661,"title":{},"name":{},"text":{"31":{},"134":{},"183":{},"323":{}},"component":{}}],["gssapi",{"_index":2624,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["guarante",{"_index":861,"title":{},"name":{},"text":{"7":{},"90":{},"171":{},"263":{}},"component":{}}],["guard",{"_index":2005,"title":{},"name":{},"text":{"47":{},"148":{},"210":{},"333":{}},"component":{}}],["guess",{"_index":2115,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"262":{},"336":{}},"component":{}}],["guest",{"_index":818,"title":{},"name":{},"text":{"6":{},"89":{},"219":{}},"component":{}}],["gui",{"_index":2283,"title":{"53":{},"109":{},"179":{},"307":{}},"name":{"53":{},"109":{},"179":{},"307":{}},"text":{},"component":{}}],["guid",{"_index":178,"title":{"3-8":{},"3-17":{},"3-21":{},"3-27":{},"3-31":{},"3-35":{},"86-6":{},"86-14":{},"86-22":{},"86-26":{},"86-32":{},"86-36":{},"86-40":{},"216-7":{},"216-13":{},"216-21":{},"216-29":{},"216-33":{},"216-39":{},"216-43":{},"216-47":{},"259-9":{},"259-16":{},"259-22":{},"259-30":{},"259-38":{},"259-42":{},"259-48":{},"259-52":{},"259-56":{}},"name":{},"text":{"3":{},"6":{},"86":{},"89":{},"216":{},"219":{},"259":{},"262":{}},"component":{}}],["hana",{"_index":468,"title":{"287":{}},"name":{"287":{}},"text":{"3":{},"86":{},"216":{},"259":{},"287":{}},"component":{}}],["hanadatasourc",{"_index":3316,"title":{},"name":{},"text":{"287":{}},"component":{}}],["hand",{"_index":805,"title":{},"name":{},"text":{"5":{},"21":{},"29":{},"30":{},"40":{},"50":{},"88":{},"104":{},"124":{},"132":{},"133":{},"143":{},"192":{},"197":{},"218":{},"248":{},"257":{},"258":{},"261":{},"312":{},"321":{},"322":{},"326":{},"336":{}},"component":{}}],["handl",{"_index":484,"title":{"48-2":{},"61-4":{},"118-4":{},"149-2":{},"205-4":{},"211-2":{},"296-4":{},"334-2":{},"347-3":{}},"name":{},"text":{"3":{},"12":{},"14":{},"32":{},"33":{},"42":{},"45":{},"46":{},"50":{},"61":{},"62":{},"86":{},"95":{},"97":{},"106":{},"118":{},"119":{},"135":{},"136":{},"143":{},"146":{},"147":{},"176":{},"178":{},"184":{},"185":{},"194":{},"197":{},"205":{},"206":{},"208":{},"209":{},"215":{},"216":{},"246":{},"259":{},"268":{},"270":{},"275":{},"296":{},"298":{},"324":{},"325":{},"328":{},"331":{},"332":{},"336":{},"346":{},"347":{}},"component":{}}],["handleabl",{"_index":1719,"title":{},"name":{},"text":{"33":{},"136":{},"185":{},"325":{}},"component":{}}],["handler",{"_index":471,"title":{"32":{},"41":{},"43":{},"105":{},"107":{},"135":{},"184":{},"193":{},"195":{},"324":{},"327":{},"329":{},"43-2":{},"107-2":{},"195-2":{},"329-2":{}},"name":{"32":{},"41":{},"43":{},"105":{},"107":{},"135":{},"184":{},"193":{},"195":{},"324":{},"327":{},"329":{}},"text":{"3":{},"4":{},"32":{},"41":{},"43":{},"50":{},"86":{},"87":{},"105":{},"107":{},"135":{},"143":{},"184":{},"193":{},"195":{},"197":{},"216":{},"217":{},"243":{},"246":{},"259":{},"260":{},"271":{},"274":{},"275":{},"324":{},"327":{},"329":{},"336":{},"340":{}},"component":{}}],["handshak",{"_index":3055,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["happen",{"_index":1985,"title":{},"name":{},"text":{"44":{},"50":{},"66":{},"108":{},"143":{},"168":{},"196":{},"197":{},"223":{},"243":{},"246":{},"271":{},"274":{},"275":{},"330":{},"336":{},"338":{}},"component":{}}],["happili",{"_index":887,"title":{},"name":{},"text":{"7":{},"90":{},"171":{},"263":{}},"component":{}}],["hard",{"_index":1178,"title":{},"name":{},"text":{"12":{},"49":{},"95":{},"150":{},"176":{},"212":{},"268":{},"335":{},"340":{}},"component":{}}],["hardli",{"_index":576,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["hash",{"_index":3358,"title":{},"name":{},"text":{"340":{}},"component":{}}],["hash(fin",{"_index":1518,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["hashcod",{"_index":1501,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["hashcode(fin",{"_index":1512,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["hashcode(person",{"_index":1519,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["hashequal",{"_index":1346,"title":{},"name":{},"text":{"20":{},"23":{},"123":{},"126":{},"247":{},"250":{},"311":{},"314":{}},"component":{}}],["hashmap",{"_index":1698,"title":{},"name":{},"text":{"32":{},"67":{},"135":{},"169":{},"184":{},"224":{},"324":{},"339":{},"340":{}},"component":{}}],["hashset",{"_index":1697,"title":{},"name":{},"text":{"32":{},"135":{},"184":{},"324":{}},"component":{}}],["hashtabl",{"_index":1695,"title":{},"name":{},"text":{"32":{},"135":{},"184":{},"324":{}},"component":{}}],["hasn’t",{"_index":3328,"title":{},"name":{},"text":{"297":{}},"component":{}}],["hat",{"_index":775,"title":{},"name":{},"text":{"5":{},"88":{},"218":{},"261":{}},"component":{}}],["have",{"_index":579,"title":{},"name":{},"text":{"3":{},"43":{},"46":{},"47":{},"86":{},"107":{},"147":{},"148":{},"195":{},"209":{},"210":{},"216":{},"246":{},"259":{},"275":{},"329":{},"332":{},"333":{}},"component":{}}],["haven’t",{"_index":2454,"title":{},"name":{},"text":{"66":{},"168":{},"223":{},"338":{}},"component":{}}],["hazard",{"_index":2211,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["hazelcast",{"_index":280,"title":{"72":{},"154":{},"229":{},"282":{}},"name":{"72":{},"154":{},"229":{},"282":{}},"text":{"3":{},"4":{},"72":{},"86":{},"87":{},"154":{},"216":{},"217":{},"229":{},"259":{},"260":{},"282":{}},"component":{}}],["hazelcast.configur",{"_index":2578,"title":{},"name":{},"text":{"72":{},"154":{},"229":{},"282":{}},"component":{}}],["hazelcast:one.microstream.enterprise.afs.hazelcast.typ",{"_index":336,"title":{},"name":{},"text":{"3":{}},"component":{}}],["hazelcastconnector.caching(cach",{"_index":2576,"title":{},"name":{},"text":{"72":{},"154":{},"229":{},"282":{}},"component":{}}],["hazelcastinst",{"_index":2575,"title":{},"name":{},"text":{"72":{},"154":{},"229":{},"282":{}},"component":{}}],["head",{"_index":448,"title":{},"name":{},"text":{"3":{},"37":{},"45":{},"67":{},"86":{},"140":{},"146":{},"169":{},"189":{},"208":{},"216":{},"224":{},"259":{},"303":{},"331":{},"339":{}},"component":{}}],["header",{"_index":457,"title":{},"name":{},"text":{"3":{},"37":{},"49":{},"86":{},"140":{},"150":{},"189":{},"212":{},"216":{},"259":{},"303":{},"335":{}},"component":{}}],["heap",{"_index":612,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["held",{"_index":2437,"title":{},"name":{},"text":{"66":{},"168":{},"223":{},"338":{}},"component":{}}],["helidon",{"_index":2920,"title":{"101":{},"244":{},"272":{}},"name":{"101":{},"244":{},"272":{}},"text":{"101":{},"102":{},"244":{},"245":{},"259":{},"272":{},"273":{}},"component":{}}],["hello",{"_index":1,"title":{"1-2":{},"9-2":{},"84-2":{},"92-2":{},"173-2":{},"213-2":{},"215-3":{},"265-2":{},"344-2":{},"346-3":{}},"name":{},"text":{"1":{},"3":{},"9":{},"15":{},"84":{},"86":{},"92":{},"98":{},"173":{},"213":{},"215":{},"216":{},"238":{},"259":{},"265":{},"344":{},"346":{},"348":{}},"component":{}}],["help",{"_index":2939,"title":{},"name":{},"text":{"116":{},"203":{},"294":{},"340":{}},"component":{}}],["help/configur",{"_index":3276,"title":{},"name":{},"text":{"275":{}},"component":{}}],["helper",{"_index":2232,"title":{},"name":{},"text":{"51":{},"77":{},"144":{},"159":{},"198":{},"275":{},"337":{}},"component":{}}],["henc",{"_index":1189,"title":{},"name":{},"text":{"12":{},"43":{},"50":{},"95":{},"107":{},"143":{},"176":{},"195":{},"197":{},"268":{},"329":{},"336":{}},"component":{}}],["here",{"_index":817,"title":{},"name":{},"text":{"6":{},"21":{},"51":{},"67":{},"89":{},"116":{},"124":{},"144":{},"169":{},"198":{},"203":{},"219":{},"224":{},"248":{},"259":{},"262":{},"294":{},"312":{},"337":{},"339":{}},"component":{}}],["here’",{"_index":3191,"title":{},"name":{},"text":{"255":{},"319":{}},"component":{}}],["heurist",{"_index":1191,"title":{},"name":{},"text":{"12":{},"50":{},"95":{},"143":{},"176":{},"197":{},"268":{},"336":{}},"component":{}}],["hibern",{"_index":124,"title":{"18":{},"121":{},"241":{},"351":{}},"name":{"18":{},"121":{},"241":{},"351":{}},"text":{"2":{},"3":{},"4":{},"17":{},"18":{},"67":{},"85":{},"86":{},"87":{},"100":{},"121":{},"169":{},"214":{},"216":{},"217":{},"224":{},"240":{},"241":{},"259":{},"260":{},"339":{},"345":{},"350":{},"351":{}},"component":{}}],["hibernate.cache.region.factory_class",{"_index":1308,"title":{},"name":{},"text":{"18":{},"121":{},"241":{},"351":{}},"component":{}}],["hibernate:one.microstream.afs.hibernate.typ",{"_index":338,"title":{},"name":{},"text":{"3":{}},"component":{}}],["hibernate:one.microstream.cache.hibernate.typ",{"_index":320,"title":{},"name":{},"text":{"3":{}},"component":{}}],["hidden",{"_index":2216,"title":{"59-1":{},"115-1":{},"202-1":{},"293-1":{}},"name":{},"text":{"50":{},"59":{},"67":{},"115":{},"143":{},"169":{},"197":{},"202":{},"224":{},"293":{},"336":{},"339":{}},"component":{}}],["hiddenobject",{"_index":2375,"title":{},"name":{},"text":{"59":{},"115":{},"202":{},"293":{}},"component":{}}],["hierarchi",{"_index":2126,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["high",{"_index":3364,"title":{},"name":{},"text":{"340":{}},"component":{}}],["higher",{"_index":3110,"title":{},"name":{},"text":{"243":{},"271":{}},"component":{}}],["highest",{"_index":2177,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["hocon",{"_index":725,"title":{},"name":{},"text":{"4":{},"35":{},"87":{},"138":{},"187":{},"217":{},"260":{},"301":{}},"component":{}}],["hold",{"_index":156,"title":{},"name":{},"text":{"2":{},"21":{},"35":{},"43":{},"67":{},"85":{},"107":{},"124":{},"138":{},"169":{},"187":{},"195":{},"214":{},"224":{},"248":{},"301":{},"304":{},"312":{},"329":{},"339":{},"345":{}},"component":{}}],["hole",{"_index":1585,"title":{},"name":{},"text":{"27":{},"130":{},"254":{},"318":{}},"component":{}}],["hood",{"_index":2513,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["hook",{"_index":1539,"title":{},"name":{},"text":{"24":{},"127":{},"251":{},"315":{}},"component":{}}],["host",{"_index":2631,"title":{"215-4":{},"346-4":{}},"name":{},"text":{"74":{},"77":{},"101":{},"156":{},"159":{},"215":{},"244":{},"272":{},"281":{},"346":{}},"component":{}}],["host.run",{"_index":2999,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["host/port",{"_index":2739,"title":{},"name":{},"text":{"78":{},"160":{},"233":{},"286":{}},"component":{}}],["hostname:port",{"_index":2689,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["hosts=kvlite:5000",{"_index":2682,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["host’",{"_index":3013,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["hot",{"_index":3185,"title":{},"name":{},"text":{"246":{}},"component":{}}],["hotspot",{"_index":772,"title":{},"name":{},"text":{"5":{},"88":{},"218":{},"261":{}},"component":{}}],["hous",{"_index":1836,"title":{},"name":{},"text":{"37":{},"140":{},"189":{},"303":{},"304":{}},"component":{}}],["housekeep",{"_index":430,"title":{"10":{},"34":{},"93":{},"137":{},"174":{},"186":{},"266":{},"300":{},"10-4":{},"37-3":{},"37-4":{},"93-4":{},"140-3":{},"140-4":{},"174-4":{},"189-3":{},"189-4":{},"266-4":{},"303-3":{},"303-4":{}},"name":{"10":{},"34":{},"93":{},"137":{},"174":{},"186":{},"266":{},"300":{}},"text":{"3":{},"7":{},"8":{},"10":{},"34":{},"37":{},"86":{},"90":{},"91":{},"93":{},"137":{},"140":{},"171":{},"172":{},"174":{},"186":{},"189":{},"216":{},"259":{},"263":{},"264":{},"266":{},"300":{},"303":{},"304":{}},"component":{}}],["housekeepingintervalm",{"_index":429,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["housekeepingnanotimebudget",{"_index":1821,"title":{},"name":{},"text":{"37":{},"140":{},"189":{},"303":{}},"component":{}}],["housekeepingtimebudgetn",{"_index":432,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["http://localhost",{"_index":2295,"title":{},"name":{},"text":{"53":{},"109":{}},"component":{}}],["http://localhost/mi",{"_index":2355,"title":{},"name":{},"text":{"56":{},"112":{},"182":{},"310":{}},"component":{}}],["http://localhost:4567",{"_index":2971,"title":{},"name":{},"text":{"182":{},"310":{}},"component":{}}],["http://localhost:4567/microstream",{"_index":2346,"title":{},"name":{},"text":{"56":{},"112":{},"182":{},"310":{}},"component":{}}],["http://localhost:8888",{"_index":2967,"title":{},"name":{},"text":{"179":{},"307":{}},"component":{}}],["http_archiv",{"_index":679,"title":{},"name":{},"text":{"4":{},"87":{},"217":{},"260":{}},"component":{}}],["https://docs.microstream.one/api/5.0",{"_index":821,"title":{},"name":{},"text":{"6":{}},"component":{}}],["https://docs.microstream.one/api/6.0",{"_index":2910,"title":{},"name":{},"text":{"89":{}},"component":{}}],["https://docs.microstream.one/api/7.0",{"_index":3090,"title":{},"name":{},"text":{"219":{}},"component":{}}],["https://docs.microstream.one/api/8.0",{"_index":3245,"title":{},"name":{},"text":{"262":{}},"component":{}}],["https://docs.spring.io/spring/docs/current/spr",{"_index":1335,"title":{},"name":{},"text":{"19":{},"122":{},"242":{},"352":{}},"component":{}}],["https://en.wikipedia.org/wiki/object_copi",{"_index":2940,"title":{},"name":{},"text":{"116":{},"203":{},"294":{}},"component":{}}],["https://github.com/bazelbuild/rules_jvm_external/archive/%s.zip",{"_index":688,"title":{},"name":{},"text":{"4":{},"87":{},"217":{},"260":{}},"component":{}}],["https://github.com/microstream",{"_index":1657,"title":{},"name":{},"text":{"31":{},"134":{},"183":{},"323":{}},"component":{}}],["https://helidon.io",{"_index":2923,"title":{},"name":{},"text":{"101":{},"244":{},"272":{}},"component":{}}],["https://kafka.apache.org/document",{"_index":2588,"title":{},"name":{},"text":{"73":{},"155":{},"230":{},"283":{}},"component":{}}],["https://medium.com/@microstream/android",{"_index":1667,"title":{},"name":{},"text":{"31":{},"134":{},"183":{},"323":{}},"component":{}}],["https://medium.com/@microstream/microstream",{"_index":1665,"title":{},"name":{},"text":{"31":{},"134":{},"183":{},"323":{}},"component":{}}],["https://repo.microstream.one/repository/maven",{"_index":2288,"title":{},"name":{},"text":{"53":{}},"component":{}}],["https://repo.microstream.one/repository/upd",{"_index":692,"title":{},"name":{},"text":{"4":{},"49":{},"87":{},"150":{},"212":{},"217":{},"260":{},"335":{}},"component":{}}],["https://repo1.maven.org/maven2/one/microstream/microstream",{"_index":2927,"title":{},"name":{},"text":{"109":{},"179":{},"307":{}},"component":{}}],["https://spring.io/projects/spr",{"_index":2926,"title":{},"name":{},"text":{"103":{},"246":{},"275":{}},"component":{}}],["https://www.example.com",{"_index":2666,"title":{},"name":{},"text":{"75":{},"157":{},"231":{},"284":{}},"component":{}}],["huge",{"_index":1848,"title":{},"name":{},"text":{"37":{},"140":{},"189":{},"303":{}},"component":{}}],["human",{"_index":1121,"title":{},"name":{},"text":{"11":{},"22":{},"54":{},"94":{},"110":{},"125":{},"175":{},"180":{},"249":{},"267":{},"308":{},"313":{}},"component":{}}],["human)super.entitydata",{"_index":1460,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["human.java",{"_index":1390,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["humanent",{"_index":1459,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["humanentity.java",{"_index":1458,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["hundr",{"_index":2463,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["hurt",{"_index":879,"title":{},"name":{},"text":{"7":{},"90":{},"171":{},"263":{}},"component":{}}],["i.",{"_index":1721,"title":{},"name":{},"text":{"33":{},"43":{},"45":{},"47":{},"50":{},"66":{},"107":{},"136":{},"143":{},"146":{},"148":{},"168":{},"185":{},"195":{},"197":{},"208":{},"210":{},"223":{},"325":{},"329":{},"331":{},"333":{},"336":{},"338":{}},"component":{}}],["ibm",{"_index":3243,"title":{},"name":{},"text":{"261":{}},"component":{}}],["ic",{"_index":2084,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["id",{"_index":207,"title":{},"name":{},"text":{"3":{},"6":{},"29":{},"43":{},"50":{},"55":{},"62":{},"66":{},"67":{},"69":{},"70":{},"86":{},"89":{},"107":{},"111":{},"119":{},"132":{},"143":{},"151":{},"152":{},"168":{},"169":{},"181":{},"195":{},"197":{},"206":{},"216":{},"219":{},"223":{},"224":{},"226":{},"227":{},"257":{},"259":{},"262":{},"278":{},"279":{},"281":{},"298":{},"309":{},"321":{},"329":{},"336":{},"338":{},"339":{}},"component":{}}],["id=mi",{"_index":2528,"title":{},"name":{},"text":{"69":{},"70":{},"151":{},"152":{},"226":{},"227":{},"278":{},"279":{},"281":{}},"component":{}}],["idea",{"_index":943,"title":{},"name":{},"text":{"9":{},"50":{},"92":{},"116":{},"143":{},"173":{},"197":{},"203":{},"265":{},"294":{},"336":{}},"component":{}}],["ideal",{"_index":3157,"title":{},"name":{},"text":{"246":{},"275":{}},"component":{}}],["ident",{"_index":1365,"title":{},"name":{},"text":{"21":{},"23":{},"24":{},"27":{},"33":{},"64":{},"124":{},"126":{},"127":{},"130":{},"136":{},"166":{},"185":{},"221":{},"248":{},"250":{},"251":{},"254":{},"312":{},"314":{},"315":{},"318":{},"325":{},"342":{}},"component":{}}],["identifi",{"_index":1069,"title":{},"name":{},"text":{"10":{},"50":{},"69":{},"70":{},"74":{},"93":{},"143":{},"151":{},"152":{},"156":{},"174":{},"197":{},"226":{},"227":{},"266":{},"278":{},"279":{},"281":{},"336":{}},"component":{}}],["identityhashmap",{"_index":1705,"title":{},"name":{},"text":{"32":{},"135":{},"184":{},"324":{}},"component":{}}],["if(clazz",{"_index":1927,"title":{},"name":{},"text":{"42":{},"106":{},"194":{},"328":{}},"component":{}}],["if(storage.root",{"_index":2281,"title":{},"name":{},"text":{"52":{},"56":{},"112":{},"145":{},"199":{},"292":{}},"component":{}}],["if(typename.startswith(\"com.company.module1",{"_index":1902,"title":{},"name":{},"text":{"40":{},"104":{},"192":{},"326":{}},"component":{}}],["if(typename.startswith(\"com.company.module2",{"_index":1904,"title":{},"name":{},"text":{"40":{},"104":{},"192":{},"326":{}},"component":{}}],["ignor",{"_index":886,"title":{},"name":{},"text":{"7":{},"50":{},"90":{},"143":{},"171":{},"197":{},"263":{},"336":{}},"component":{}}],["imag",{"_index":1942,"title":{},"name":{},"text":{"43":{},"107":{},"195":{},"329":{}},"component":{}}],["imagin",{"_index":1954,"title":{},"name":{},"text":{"43":{},"51":{},"107":{},"144":{},"195":{},"198":{},"329":{},"337":{}},"component":{}}],["immedi",{"_index":923,"title":{},"name":{},"text":{"8":{},"10":{},"52":{},"66":{},"91":{},"93":{},"97":{},"145":{},"168":{},"172":{},"174":{},"178":{},"199":{},"223":{},"264":{},"266":{},"270":{},"292":{},"338":{}},"component":{}}],["immut",{"_index":1464,"title":{"59-2":{},"115-2":{},"135-3":{},"184-3":{},"202-2":{},"293-2":{},"324-3":{}},"name":{},"text":{"23":{},"26":{},"59":{},"60":{},"87":{},"115":{},"117":{},"126":{},"129":{},"136":{},"185":{},"202":{},"204":{},"217":{},"250":{},"253":{},"260":{},"293":{},"295":{},"314":{},"317":{},"325":{}},"component":{}}],["impact",{"_index":1885,"title":{},"name":{},"text":{"39":{},"142":{},"191":{},"306":{},"340":{}},"component":{}}],["imperson",{"_index":3311,"title":{},"name":{},"text":{"281":{}},"component":{}}],["implement",{"_index":31,"title":{"43-1":{},"107-1":{},"195-1":{},"329-1":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"12":{},"15":{},"19":{},"22":{},"23":{},"24":{},"29":{},"30":{},"32":{},"36":{},"37":{},"41":{},"42":{},"43":{},"44":{},"46":{},"50":{},"51":{},"54":{},"56":{},"59":{},"61":{},"63":{},"67":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"95":{},"98":{},"105":{},"106":{},"107":{},"108":{},"110":{},"112":{},"115":{},"118":{},"120":{},"122":{},"125":{},"126":{},"127":{},"132":{},"133":{},"135":{},"139":{},"140":{},"143":{},"144":{},"147":{},"161":{},"162":{},"163":{},"164":{},"165":{},"169":{},"176":{},"180":{},"182":{},"184":{},"188":{},"189":{},"193":{},"194":{},"195":{},"196":{},"197":{},"198":{},"202":{},"205":{},"207":{},"209":{},"213":{},"214":{},"215":{},"216":{},"217":{},"224":{},"234":{},"235":{},"236":{},"237":{},"238":{},"239":{},"242":{},"243":{},"246":{},"249":{},"250":{},"251":{},"257":{},"258":{},"259":{},"260":{},"268":{},"271":{},"274":{},"275":{},"287":{},"288":{},"289":{},"290":{},"291":{},"293":{},"296":{},"299":{},"302":{},"303":{},"308":{},"310":{},"313":{},"314":{},"315":{},"321":{},"322":{},"324":{},"327":{},"328":{},"329":{},"330":{},"332":{},"336":{},"337":{},"339":{},"340":{},"344":{},"345":{},"346":{},"347":{},"348":{},"349":{},"352":{}},"component":{}}],["implementation(\"one.microstream:microstream",{"_index":664,"title":{},"name":{},"text":{"4":{},"87":{},"217":{},"260":{}},"component":{}}],["implicit",{"_index":1226,"title":{},"name":{},"text":{"14":{},"51":{},"97":{},"144":{},"178":{},"198":{},"270":{},"337":{}},"component":{}}],["implicitli",{"_index":1190,"title":{},"name":{},"text":{"12":{},"43":{},"50":{},"51":{},"62":{},"95":{},"107":{},"119":{},"143":{},"144":{},"176":{},"195":{},"197":{},"198":{},"206":{},"268":{},"298":{},"329":{},"336":{},"337":{}},"component":{}}],["import",{"_index":212,"title":{"11":{},"94":{},"175":{},"267":{}},"name":{"11":{},"94":{},"175":{},"267":{}},"text":{"3":{},"7":{},"11":{},"12":{},"39":{},"49":{},"51":{},"66":{},"79":{},"80":{},"81":{},"82":{},"83":{},"86":{},"90":{},"94":{},"95":{},"142":{},"144":{},"150":{},"161":{},"162":{},"163":{},"164":{},"165":{},"168":{},"171":{},"175":{},"176":{},"191":{},"198":{},"212":{},"216":{},"223":{},"234":{},"235":{},"236":{},"237":{},"259":{},"263":{},"267":{},"268":{},"287":{},"288":{},"289":{},"290":{},"291":{},"304":{},"306":{},"335":{},"337":{},"338":{}},"component":{}}],["imposs",{"_index":1179,"title":{},"name":{},"text":{"12":{},"95":{},"176":{},"268":{}},"component":{}}],["improv",{"_index":543,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["incident",{"_index":2231,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["includ",{"_index":493,"title":{"347-5":{}},"name":{},"text":{"3":{},"5":{},"6":{},"9":{},"12":{},"37":{},"54":{},"60":{},"77":{},"86":{},"88":{},"89":{},"92":{},"95":{},"110":{},"117":{},"140":{},"159":{},"173":{},"176":{},"180":{},"189":{},"204":{},"216":{},"218":{},"219":{},"259":{},"261":{},"262":{},"265":{},"268":{},"295":{},"303":{},"308":{},"347":{}},"component":{}}],["includetypeinfoonc",{"_index":3369,"title":{"347-7":{}},"name":{},"text":{"347":{}},"component":{}}],["incom",{"_index":2983,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["incompat",{"_index":472,"title":{},"name":{},"text":{"3":{},"50":{},"86":{},"143":{},"197":{},"216":{},"259":{},"336":{}},"component":{}}],["incomprehens",{"_index":2512,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["inconsist",{"_index":645,"title":{},"name":{},"text":{"3":{},"7":{},"86":{},"90":{},"171":{},"216":{},"259":{},"263":{}},"component":{}}],["inconsistencies/crash",{"_index":1984,"title":{},"name":{},"text":{"44":{},"108":{},"196":{},"330":{}},"component":{}}],["increas",{"_index":1672,"title":{},"name":{},"text":{"32":{},"39":{},"59":{},"115":{},"135":{},"142":{},"184":{},"191":{},"202":{},"293":{},"306":{},"324":{},"340":{}},"component":{}}],["incred",{"_index":1058,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["increment",{"_index":1563,"title":{},"name":{},"text":{"27":{},"130":{},"254":{},"318":{}},"component":{}}],["incrementaldiff",{"_index":3376,"title":{},"name":{},"text":{"347":{}},"component":{}}],["inde",{"_index":2493,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["indefinit",{"_index":2612,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["independ",{"_index":1723,"title":{},"name":{},"text":{"33":{},"136":{},"185":{},"325":{}},"component":{}}],["index",{"_index":83,"title":{},"name":{"2":{},"12":{},"15":{},"23":{},"29":{},"35":{},"50":{},"52":{},"54":{},"57":{},"60":{},"67":{},"85":{},"95":{},"98":{},"102":{},"110":{},"113":{},"117":{},"126":{},"132":{},"138":{},"143":{},"145":{},"169":{},"176":{},"180":{},"187":{},"197":{},"199":{},"200":{},"204":{},"214":{},"215":{},"220":{},"224":{},"238":{},"245":{},"250":{},"255":{},"257":{},"268":{},"273":{},"276":{},"292":{},"295":{},"301":{},"308":{},"314":{},"319":{},"321":{},"336":{},"339":{},"345":{},"346":{},"347":{},"348":{}},"text":{"3":{},"86":{},"216":{},"259":{},"340":{}},"component":{}}],["indic",{"_index":2112,"title":{},"name":{},"text":{"50":{},"51":{},"52":{},"143":{},"144":{},"145":{},"197":{},"198":{},"199":{},"243":{},"246":{},"271":{},"274":{},"275":{},"292":{},"304":{},"336":{},"337":{}},"component":{}}],["individu",{"_index":1005,"title":{},"name":{},"text":{"10":{},"61":{},"67":{},"93":{},"118":{},"169":{},"174":{},"205":{},"224":{},"266":{},"296":{},"339":{}},"component":{}}],["ineffici",{"_index":1181,"title":{},"name":{},"text":{"12":{},"95":{},"176":{},"268":{}},"component":{}}],["inet4address",{"_index":1690,"title":{},"name":{},"text":{"32":{},"135":{},"184":{},"324":{}},"component":{}}],["inet6address",{"_index":1691,"title":{},"name":{},"text":{"32":{},"135":{},"184":{},"324":{}},"component":{}}],["inetaddress",{"_index":1689,"title":{},"name":{},"text":{"32":{},"135":{},"184":{},"324":{}},"component":{}}],["inetsocketaddress",{"_index":1692,"title":{},"name":{},"text":{"32":{},"135":{},"184":{},"324":{}},"component":{}}],["inexplic",{"_index":2218,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["inf",{"_index":2011,"title":{},"name":{},"text":{"48":{},"149":{},"211":{}},"component":{}}],["inf/microstream/storage.ini",{"_index":1794,"title":{},"name":{},"text":{"35":{},"138":{},"187":{},"301":{}},"component":{}}],["inf/microstream/storage.json",{"_index":1799,"title":{},"name":{},"text":{"35":{},"138":{},"187":{},"301":{}},"component":{}}],["inf/microstream/storage.xml",{"_index":1793,"title":{},"name":{},"text":{"35":{},"138":{},"187":{},"301":{}},"component":{}}],["inf/microstream/storage.yaml",{"_index":1797,"title":{},"name":{},"text":{"35":{},"138":{},"187":{},"301":{}},"component":{}}],["info",{"_index":1550,"title":{},"name":{},"text":{"24":{},"48":{},"127":{},"149":{},"211":{},"251":{},"259":{},"315":{},"334":{}},"component":{}}],["info(\"ent",{"_index":1538,"title":{},"name":{},"text":{"24":{},"127":{},"251":{},"315":{}},"component":{}}],["info(\"object",{"_index":1625,"title":{},"name":{},"text":{"29":{},"30":{},"132":{},"133":{},"257":{},"258":{},"321":{},"322":{}},"component":{}}],["inform",{"_index":218,"title":{"347-5":{}},"name":{},"text":{"3":{},"6":{},"9":{},"19":{},"37":{},"43":{},"46":{},"71":{},"86":{},"89":{},"92":{},"101":{},"103":{},"107":{},"122":{},"140":{},"147":{},"153":{},"173":{},"189":{},"195":{},"209":{},"216":{},"219":{},"228":{},"242":{},"244":{},"259":{},"262":{},"265":{},"272":{},"280":{},"303":{},"329":{},"332":{},"347":{},"352":{}},"component":{}}],["inher",{"_index":609,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["inherit",{"_index":1379,"title":{},"name":{},"text":{"22":{},"50":{},"125":{},"143":{},"197":{},"249":{},"313":{},"336":{}},"component":{}}],["ini",{"_index":229,"title":{},"name":{},"text":{"3":{},"4":{},"35":{},"39":{},"64":{},"86":{},"87":{},"138":{},"142":{},"166":{},"187":{},"191":{},"216":{},"217":{},"221":{},"243":{},"259":{},"260":{},"271":{},"301":{},"306":{},"342":{}},"component":{}}],["init",{"_index":2383,"title":{},"name":{},"text":{"60":{},"117":{},"204":{},"295":{}},"component":{}}],["initi",{"_index":477,"title":{"246-4":{},"275-5":{}},"name":{},"text":{"3":{},"7":{},"9":{},"14":{},"42":{},"46":{},"50":{},"67":{},"86":{},"90":{},"92":{},"97":{},"106":{},"143":{},"147":{},"169":{},"171":{},"173":{},"178":{},"194":{},"197":{},"209":{},"215":{},"216":{},"224":{},"243":{},"246":{},"259":{},"263":{},"265":{},"270":{},"271":{},"274":{},"275":{},"328":{},"332":{},"336":{},"339":{},"340":{},"346":{}},"component":{}}],["initialis",{"_index":3286,"title":{},"name":{},"text":{"275":{}},"component":{}}],["initialize(fin",{"_index":3295,"title":{},"name":{},"text":{"275":{}},"component":{}}],["inject",{"_index":3121,"title":{},"name":{},"text":{"243":{},"246":{},"271":{},"274":{},"275":{}},"component":{}}],["inner",{"_index":1369,"title":{},"name":{},"text":{"21":{},"23":{},"33":{},"51":{},"124":{},"126":{},"136":{},"144":{},"185":{},"198":{},"248":{},"250":{},"312":{},"314":{},"325":{},"337":{}},"component":{}}],["input",{"_index":226,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{},"281":{}},"component":{}}],["inquir",{"_index":2249,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["inquiri",{"_index":2245,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["inquiringlegacytypemappingresultor",{"_index":2097,"title":{},"name":{},"text":{"50":{},"51":{},"143":{},"144":{},"197":{},"198":{},"336":{},"337":{}},"component":{}}],["inquiringlegacytypemappingresultor.new",{"_index":2101,"title":{},"name":{},"text":{"50":{},"51":{},"143":{},"144":{},"197":{},"198":{},"336":{},"337":{}},"component":{}}],["inquiringlegacytypemappingresultor.new(persistencelegacytypemappingresultor.new",{"_index":2246,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["insert",{"_index":2379,"title":{},"name":{},"text":{"59":{},"115":{},"202":{},"293":{}},"component":{}}],["insid",{"_index":910,"title":{},"name":{},"text":{"7":{},"28":{},"90":{},"131":{},"171":{},"216":{},"256":{},"259":{},"263":{},"320":{}},"component":{}}],["insight",{"_index":2510,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["inspect",{"_index":2298,"title":{},"name":{},"text":{"54":{},"110":{},"180":{},"308":{}},"component":{}}],["instal",{"_index":653,"title":{"4":{},"87":{},"217":{},"260":{}},"name":{"4":{},"87":{},"217":{},"260":{}},"text":{"6":{},"89":{},"219":{},"262":{}},"component":{}}],["instanc",{"_index":46,"title":{"14":{},"97":{},"178":{},"270":{},"9-3":{},"14-2":{},"47-2":{},"60-1":{},"92-3":{},"97-4":{},"117-1":{},"148-2":{},"173-3":{},"178-4":{},"204-1":{},"210-2":{},"265-3":{},"270-4":{},"295-1":{},"333-2":{}},"name":{"14":{},"97":{},"178":{},"270":{}},"text":{"1":{},"3":{},"4":{},"7":{},"9":{},"10":{},"12":{},"14":{},"23":{},"29":{},"30":{},"33":{},"35":{},"40":{},"44":{},"46":{},"47":{},"50":{},"51":{},"52":{},"55":{},"56":{},"59":{},"60":{},"61":{},"62":{},"64":{},"66":{},"67":{},"68":{},"69":{},"70":{},"74":{},"84":{},"86":{},"87":{},"90":{},"92":{},"93":{},"95":{},"97":{},"104":{},"108":{},"111":{},"112":{},"115":{},"116":{},"117":{},"118":{},"119":{},"126":{},"132":{},"133":{},"136":{},"138":{},"143":{},"144":{},"145":{},"147":{},"148":{},"151":{},"152":{},"156":{},"166":{},"168":{},"169":{},"170":{},"171":{},"173":{},"174":{},"176":{},"178":{},"181":{},"182":{},"185":{},"187":{},"192":{},"196":{},"197":{},"198":{},"199":{},"202":{},"203":{},"204":{},"205":{},"206":{},"209":{},"210":{},"213":{},"215":{},"216":{},"217":{},"220":{},"221":{},"223":{},"224":{},"225":{},"226":{},"227":{},"243":{},"246":{},"250":{},"257":{},"258":{},"259":{},"260":{},"263":{},"265":{},"266":{},"268":{},"270":{},"271":{},"274":{},"275":{},"278":{},"279":{},"292":{},"293":{},"294":{},"295":{},"296":{},"297":{},"298":{},"301":{},"309":{},"310":{},"314":{},"321":{},"322":{},"325":{},"326":{},"330":{},"332":{},"333":{},"336":{},"337":{},"338":{},"339":{},"340":{},"341":{},"342":{},"344":{},"346":{},"347":{}},"component":{}}],["instantcontext",{"_index":1578,"title":{},"name":{},"text":{"27":{},"130":{},"254":{},"318":{}},"component":{}}],["instanti",{"_index":3151,"title":{},"name":{},"text":{"246":{},"275":{},"340":{}},"component":{}}],["instead",{"_index":45,"title":{},"name":{},"text":{"1":{},"3":{},"8":{},"10":{},"12":{},"28":{},"33":{},"37":{},"38":{},"43":{},"45":{},"50":{},"51":{},"60":{},"67":{},"76":{},"84":{},"86":{},"91":{},"93":{},"95":{},"107":{},"116":{},"117":{},"131":{},"136":{},"140":{},"141":{},"143":{},"144":{},"146":{},"158":{},"169":{},"172":{},"174":{},"176":{},"185":{},"189":{},"190":{},"195":{},"197":{},"198":{},"203":{},"204":{},"208":{},"213":{},"216":{},"224":{},"232":{},"256":{},"259":{},"264":{},"266":{},"268":{},"275":{},"285":{},"294":{},"295":{},"303":{},"305":{},"320":{},"325":{},"329":{},"331":{},"336":{},"337":{},"339":{},"344":{}},"component":{}}],["instruct",{"_index":814,"title":{},"name":{},"text":{"6":{},"89":{},"219":{},"262":{}},"component":{}}],["int",{"_index":1511,"title":{},"name":{},"text":{"23":{},"44":{},"50":{},"51":{},"60":{},"108":{},"117":{},"126":{},"143":{},"144":{},"196":{},"197":{},"198":{},"204":{},"250":{},"295":{},"314":{},"330":{},"336":{},"337":{}},"component":{}}],["intact",{"_index":1469,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["integ",{"_index":50,"title":{},"name":{},"text":{"1":{},"3":{},"32":{},"51":{},"55":{},"84":{},"86":{},"111":{},"135":{},"144":{},"181":{},"184":{},"198":{},"213":{},"216":{},"259":{},"324":{},"337":{},"344":{}},"component":{}}],["integer.class",{"_index":1264,"title":{},"name":{},"text":{"15":{},"98":{},"238":{},"348":{}},"component":{}}],["integr",{"_index":816,"title":{"101":{},"102":{},"103":{},"244":{},"245":{},"246":{},"272":{},"273":{},"275":{}},"name":{},"text":{"6":{},"23":{},"33":{},"86":{},"87":{},"89":{},"101":{},"102":{},"103":{},"126":{},"136":{},"185":{},"216":{},"217":{},"219":{},"243":{},"244":{},"245":{},"246":{},"250":{},"259":{},"260":{},"262":{},"271":{},"272":{},"273":{},"274":{},"275":{},"314":{},"325":{}},"component":{}}],["intention",{"_index":1173,"title":{},"name":{},"text":{"12":{},"33":{},"95":{},"136":{},"176":{},"185":{},"268":{},"325":{}},"component":{}}],["interact",{"_index":2229,"title":{"51":{},"144":{},"198":{},"337":{}},"name":{"51":{},"144":{},"198":{},"337":{}},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["interceptor",{"_index":3069,"title":{},"name":{},"text":{"216":{},"259":{}},"component":{}}],["interchang",{"_index":595,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["interest",{"_index":2155,"title":{},"name":{},"text":{"50":{},"67":{},"143":{},"169":{},"197":{},"224":{},"336":{},"339":{}},"component":{}}],["interfac",{"_index":601,"title":{"54":{},"110":{},"180":{},"308":{}},"name":{},"text":{"3":{},"4":{},"12":{},"21":{},"22":{},"23":{},"28":{},"29":{},"30":{},"33":{},"41":{},"42":{},"46":{},"50":{},"51":{},"53":{},"54":{},"56":{},"67":{},"86":{},"87":{},"95":{},"105":{},"106":{},"109":{},"110":{},"112":{},"124":{},"125":{},"126":{},"131":{},"132":{},"133":{},"136":{},"143":{},"144":{},"147":{},"169":{},"176":{},"179":{},"180":{},"182":{},"185":{},"193":{},"194":{},"197":{},"198":{},"209":{},"215":{},"216":{},"217":{},"224":{},"243":{},"246":{},"248":{},"249":{},"250":{},"256":{},"257":{},"258":{},"259":{},"260":{},"268":{},"271":{},"274":{},"275":{},"307":{},"308":{},"310":{},"312":{},"313":{},"314":{},"320":{},"321":{},"322":{},"325":{},"327":{},"328":{},"332":{},"336":{},"337":{},"339":{},"340":{},"346":{}},"component":{}}],["interface,ar",{"_index":3134,"title":{},"name":{},"text":{"243":{},"271":{}},"component":{}}],["interfer",{"_index":977,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["interim",{"_index":2511,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["intermedi",{"_index":2168,"title":{},"name":{},"text":{"50":{},"67":{},"143":{},"169":{},"197":{},"224":{},"336":{},"339":{}},"component":{}}],["intermediari",{"_index":2507,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["intern",{"_index":898,"title":{"340-4":{}},"name":{},"text":{"7":{},"10":{},"12":{},"14":{},"34":{},"36":{},"37":{},"44":{},"46":{},"50":{},"56":{},"57":{},"67":{},"90":{},"93":{},"95":{},"97":{},"108":{},"112":{},"113":{},"137":{},"139":{},"140":{},"143":{},"147":{},"169":{},"171":{},"174":{},"176":{},"178":{},"186":{},"188":{},"189":{},"196":{},"197":{},"200":{},"209":{},"224":{},"263":{},"266":{},"268":{},"270":{},"275":{},"276":{},"300":{},"302":{},"303":{},"330":{},"332":{},"336":{},"339":{}},"component":{}}],["interpret",{"_index":2105,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["interrupt",{"_index":487,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["intertwin",{"_index":2243,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["interv",{"_index":431,"title":{"37-3":{},"140-3":{},"189-3":{},"303-3":{}},"name":{},"text":{"3":{},"10":{},"16":{},"34":{},"36":{},"37":{},"77":{},"86":{},"93":{},"99":{},"137":{},"139":{},"140":{},"159":{},"174":{},"186":{},"188":{},"189":{},"216":{},"239":{},"259":{},"266":{},"300":{},"302":{},"303":{},"349":{}},"component":{}}],["interval",{"_index":1738,"title":{"34-1":{},"137-1":{},"186-1":{},"300-1":{}},"name":{},"text":{},"component":{}}],["interval=1000m",{"_index":1839,"title":{},"name":{},"text":{"37":{},"140":{},"189":{},"303":{}},"component":{}}],["interven",{"_index":2175,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["introduc",{"_index":197,"title":{},"name":{},"text":{"3":{},"12":{},"23":{},"35":{},"48":{},"86":{},"95":{},"126":{},"138":{},"149":{},"176":{},"187":{},"211":{},"216":{},"250":{},"259":{},"268":{},"301":{},"314":{},"334":{}},"component":{}}],["invalid",{"_index":545,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["invok",{"_index":1280,"title":{},"name":{},"text":{"16":{},"99":{},"239":{},"349":{}},"component":{}}],["involv",{"_index":554,"title":{"37-8":{},"140-8":{},"189-8":{},"303-8":{}},"name":{},"text":{"3":{},"50":{},"86":{},"143":{},"197":{},"216":{},"259":{},"336":{}},"component":{}}],["io",{"_index":699,"title":{},"name":{},"text":{"4":{},"33":{},"39":{},"46":{},"49":{},"57":{},"87":{},"113":{},"136":{},"142":{},"147":{},"150":{},"185":{},"191":{},"200":{},"209":{},"212":{},"217":{},"260":{},"276":{},"306":{},"325":{},"332":{},"335":{}},"component":{}}],["ip",{"_index":3014,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["iseagerstoring(class",{"_index":1922,"title":{},"name":{},"text":{"42":{},"106":{},"194":{},"328":{}},"component":{}}],["isn’t",{"_index":1165,"title":{},"name":{},"text":{"12":{},"54":{},"95":{},"110":{},"176":{},"180":{},"268":{},"308":{}},"component":{}}],["issu",{"_index":536,"title":{},"name":{},"text":{"3":{},"65":{},"86":{},"167":{},"216":{},"222":{},"259":{},"340":{},"343":{}},"component":{}}],["issuecachecheck(nanotimebudgetbound",{"_index":1078,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["issuefilecheck(nanotimebudgetbound",{"_index":1080,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["issuefullbackup",{"_index":2434,"title":{},"name":{},"text":{"65":{},"167":{},"222":{},"343":{}},"component":{}}],["issuefullcachecheck",{"_index":1082,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["issuefullcachecheck(entityevalu",{"_index":1083,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["issuefullfilecheck",{"_index":1084,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["issuefullfilecheck(filedissolvingevalu",{"_index":1085,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["issuefullgarbagecollect",{"_index":1086,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["issuegarbagecollection(nanotimebudget",{"_index":1087,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["iteamb",{"_index":2413,"title":{},"name":{},"text":{"62":{},"119":{},"206":{},"298":{}},"component":{}}],["iteamc",{"_index":2414,"title":{},"name":{},"text":{"62":{},"119":{},"206":{},"298":{}},"component":{}}],["item",{"_index":163,"title":{},"name":{},"text":{"2":{},"37":{},"85":{},"140":{},"189":{},"214":{},"246":{},"275":{},"297":{},"303":{},"340":{},"345":{}},"component":{}}],["item.modifi",{"_index":2410,"title":{},"name":{},"text":{"62":{},"119":{},"206":{},"298":{}},"component":{}}],["iter",{"_index":1629,"title":{},"name":{},"text":{"29":{},"30":{},"132":{},"133":{},"257":{},"258":{},"321":{},"322":{}},"component":{}}],["itself",{"_index":795,"title":{},"name":{},"text":{"5":{},"7":{},"9":{},"30":{},"33":{},"49":{},"50":{},"51":{},"62":{},"68":{},"88":{},"90":{},"92":{},"119":{},"133":{},"136":{},"143":{},"144":{},"150":{},"170":{},"171":{},"173":{},"185":{},"197":{},"198":{},"206":{},"212":{},"218":{},"225":{},"246":{},"258":{},"261":{},"263":{},"265":{},"275":{},"298":{},"322":{},"325":{},"335":{},"336":{},"337":{},"341":{}},"component":{}}],["it’",{"_index":611,"title":{},"name":{},"text":{"3":{},"35":{},"41":{},"50":{},"61":{},"67":{},"86":{},"105":{},"116":{},"118":{},"138":{},"143":{},"169":{},"187":{},"193":{},"197":{},"203":{},"205":{},"216":{},"224":{},"259":{},"294":{},"296":{},"301":{},"327":{},"336":{},"339":{}},"component":{}}],["ivi",{"_index":670,"title":{},"name":{},"text":{"4":{},"87":{},"217":{},"260":{}},"component":{}}],["ivy.xml",{"_index":671,"title":{},"name":{},"text":{"4":{},"87":{},"217":{},"260":{}},"component":{}}],["jakarta",{"_index":3142,"title":{},"name":{},"text":{"245":{},"246":{},"259":{},"271":{},"273":{},"275":{}},"component":{}}],["jakarta.inject",{"_index":3164,"title":{},"name":{},"text":{"246":{},"275":{}},"component":{}}],["jar",{"_index":459,"title":{},"name":{},"text":{"3":{},"48":{},"49":{},"53":{},"86":{},"109":{},"149":{},"150":{},"179":{},"211":{},"212":{},"216":{},"259":{},"307":{},"334":{},"335":{}},"component":{}}],["java",{"_index":90,"title":{"33":{},"48":{},"136":{},"149":{},"185":{},"211":{},"325":{},"334":{},"33-1":{},"33-2":{},"33-3":{},"48-1":{},"135-3":{},"136-1":{},"136-2":{},"136-3":{},"136-4":{},"149-1":{},"184-3":{},"185-1":{},"185-2":{},"185-3":{},"185-4":{},"211-1":{},"324-3":{},"325-1":{},"325-2":{},"325-3":{},"325-4":{},"334-1":{}},"name":{"33":{},"48":{},"136":{},"149":{},"185":{},"211":{},"325":{},"334":{}},"text":{"2":{},"3":{},"4":{},"6":{},"9":{},"10":{},"12":{},"13":{},"14":{},"32":{},"35":{},"39":{},"43":{},"46":{},"48":{},"50":{},"53":{},"54":{},"57":{},"63":{},"64":{},"67":{},"69":{},"70":{},"79":{},"80":{},"85":{},"86":{},"87":{},"89":{},"92":{},"93":{},"95":{},"96":{},"97":{},"107":{},"109":{},"110":{},"113":{},"116":{},"120":{},"135":{},"136":{},"138":{},"142":{},"143":{},"147":{},"149":{},"151":{},"152":{},"161":{},"162":{},"166":{},"169":{},"173":{},"174":{},"176":{},"177":{},"178":{},"179":{},"180":{},"184":{},"185":{},"187":{},"191":{},"195":{},"197":{},"200":{},"203":{},"207":{},"209":{},"211":{},"214":{},"215":{},"216":{},"217":{},"219":{},"220":{},"221":{},"224":{},"226":{},"227":{},"234":{},"259":{},"260":{},"262":{},"265":{},"266":{},"268":{},"269":{},"270":{},"276":{},"278":{},"279":{},"288":{},"294":{},"299":{},"301":{},"306":{},"307":{},"308":{},"324":{},"325":{},"329":{},"332":{},"334":{},"336":{},"339":{},"340":{},"342":{},"345":{},"346":{},"347":{}},"component":{}}],["java.awt.image.bufferedimag",{"_index":1941,"title":{},"name":{},"text":{"43":{},"107":{},"195":{},"329":{}},"component":{}}],["java.base/jdk.internal.misc=al",{"_index":2014,"title":{},"name":{},"text":{"48":{},"149":{},"211":{},"334":{}},"component":{}}],["java.io",{"_index":1687,"title":{},"name":{},"text":{"32":{},"135":{},"184":{},"324":{}},"component":{}}],["java.io.serializ",{"_index":140,"title":{},"name":{},"text":{"2":{},"85":{},"214":{},"345":{}},"component":{}}],["java.lang",{"_index":1675,"title":{},"name":{},"text":{"32":{},"135":{},"184":{},"324":{}},"component":{}}],["java.lang.autoclos",{"_index":582,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["java.lang.boolean.parseboolean",{"_index":3102,"title":{},"name":{},"text":{"239":{},"349":{}},"component":{}}],["java.lang.integ",{"_index":1284,"title":{},"name":{},"text":{"17":{},"100":{},"240":{},"350":{}},"component":{}}],["java.lang.object",{"_index":2069,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["java.lang.str",{"_index":1285,"title":{},"name":{},"text":{"17":{},"50":{},"100":{},"143":{},"197":{},"240":{},"336":{},"350":{}},"component":{}}],["java.math",{"_index":1680,"title":{},"name":{},"text":{"32":{},"135":{},"184":{},"324":{}},"component":{}}],["java.net",{"_index":1688,"title":{},"name":{},"text":{"32":{},"135":{},"184":{},"324":{}},"component":{}}],["java.nio.fil",{"_index":730,"title":{},"name":{},"text":{"4":{},"32":{},"87":{},"135":{},"184":{},"217":{},"260":{},"324":{}},"component":{}}],["java.nio.file.path",{"_index":630,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["java.security.securerandom",{"_index":3057,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["java.util",{"_index":1682,"title":{},"name":{},"text":{"32":{},"135":{},"184":{},"324":{}},"component":{}}],["java.util.concurr",{"_index":1708,"title":{},"name":{},"text":{"32":{},"135":{},"184":{},"324":{}},"component":{}}],["java.util.fil",{"_index":629,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["java.util.hashmap",{"_index":1727,"title":{},"name":{},"text":{"33":{},"136":{},"185":{},"325":{}},"component":{}}],["java.util.local",{"_index":646,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["java.util.regex",{"_index":1686,"title":{},"name":{},"text":{"32":{},"135":{},"184":{},"324":{}},"component":{}}],["java_sasl_client_properti",{"_index":2637,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["java_subject",{"_index":2635,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["javadoc",{"_index":513,"title":{},"name":{},"text":{"3":{},"50":{},"86":{},"143":{},"197":{},"216":{},"259":{},"336":{}},"component":{}}],["javax",{"_index":1316,"title":{},"name":{},"text":{"18":{},"121":{},"241":{},"243":{},"271":{},"351":{}},"component":{}}],["javax.cache.configuration.mutableconfigur",{"_index":1256,"title":{},"name":{},"text":{"15":{},"98":{},"238":{},"348":{}},"component":{}}],["javax.cache.expiry.expirypolici",{"_index":3100,"title":{},"name":{},"text":{"239":{},"349":{}},"component":{}}],["javax.cache.integration.cacheload",{"_index":3098,"title":{},"name":{},"text":{"239":{},"349":{}},"component":{}}],["javax.cache.integration.cachewrit",{"_index":3099,"title":{},"name":{},"text":{"239":{},"349":{}},"component":{}}],["javax.imageio.imageio",{"_index":1944,"title":{},"name":{},"text":{"43":{},"107":{},"195":{},"329":{}},"component":{}}],["javax.net.ssl.keymanag",{"_index":3041,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["javax.net.ssl.sslparamet",{"_index":3052,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["javax.net.ssl.trustmanag",{"_index":3048,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["javax.security.auth.subject",{"_index":2634,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["javax.security.sasl.saslcli",{"_index":2636,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["javax.security.sasl.saslclientfactori",{"_index":2638,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["java’",{"_index":917,"title":{},"name":{},"text":{"8":{},"12":{},"91":{},"95":{},"172":{},"176":{},"264":{},"268":{}},"component":{}}],["jcach",{"_index":37,"title":{"2-2":{},"85-2":{},"214-2":{},"345-2":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"15":{},"84":{},"85":{},"86":{},"87":{},"98":{},"213":{},"214":{},"216":{},"217":{},"238":{},"239":{},"259":{},"260":{},"344":{},"345":{},"348":{},"349":{}},"component":{}}],["jcachemanagercustom",{"_index":1327,"title":{},"name":{},"text":{"19":{},"122":{},"242":{},"352":{}},"component":{}}],["jdbc",{"_index":466,"title":{},"name":{},"text":{"3":{},"51":{},"57":{},"83":{},"86":{},"97":{},"113":{},"144":{},"165":{},"178":{},"198":{},"216":{},"237":{},"259":{},"270":{},"291":{},"337":{}},"component":{}}],["jdk",{"_index":473,"title":{"5-1":{},"88-1":{},"218-1":{},"261-1":{}},"name":{},"text":{"3":{},"4":{},"5":{},"32":{},"33":{},"86":{},"87":{},"88":{},"135":{},"136":{},"184":{},"185":{},"216":{},"217":{},"218":{},"243":{},"246":{},"259":{},"260":{},"261":{},"271":{},"274":{},"275":{},"324":{},"325":{}},"component":{}}],["jdk17",{"_index":2905,"title":{},"name":{},"text":{"87":{},"135":{},"136":{},"184":{},"185":{},"217":{},"260":{},"324":{},"325":{}},"component":{}}],["jdk8",{"_index":298,"title":{},"name":{},"text":{"3":{},"4":{},"32":{},"86":{},"87":{},"135":{},"184":{},"216":{},"217":{},"259":{},"260":{},"324":{}},"component":{}}],["jdk8:one.microstream.persistence.binary.jdk8.java.util",{"_index":362,"title":{},"name":{},"text":{"3":{}},"component":{}}],["jdk8:one.microstream.persistence.binary.jdk8.typ",{"_index":364,"title":{},"name":{},"text":{"3":{}},"component":{}}],["jdk’",{"_index":2483,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["jersey",{"_index":307,"title":{},"name":{},"text":{"3":{},"4":{},"54":{},"86":{},"87":{},"110":{},"180":{},"216":{},"217":{},"259":{},"260":{},"308":{}},"component":{}}],["jersey:one.microstream.storage.restclient.jersey.typ",{"_index":376,"title":{},"name":{},"text":{"3":{}},"component":{}}],["jigsaw",{"_index":202,"title":{"48-1":{},"149-1":{},"211-1":{},"334-1":{}},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["jim",{"_index":1561,"title":{},"name":{},"text":{"26":{},"129":{},"253":{},"317":{}},"component":{}}],["jm",{"_index":2012,"title":{},"name":{},"text":{"48":{},"149":{},"211":{}},"component":{}}],["job",{"_index":2162,"title":{},"name":{},"text":{"50":{},"66":{},"143":{},"168":{},"197":{},"223":{},"336":{},"338":{}},"component":{}}],["john",{"_index":1357,"title":{},"name":{},"text":{"21":{},"24":{},"25":{},"27":{},"124":{},"127":{},"128":{},"130":{},"248":{},"251":{},"252":{},"254":{},"312":{},"315":{},"316":{},"318":{}},"component":{}}],["john.firstnam",{"_index":1371,"title":{},"name":{},"text":{"21":{},"124":{},"248":{},"312":{}},"component":{}}],["john.lastnam",{"_index":1372,"title":{},"name":{},"text":{"21":{},"27":{},"124":{},"130":{},"248":{},"254":{},"312":{},"318":{}},"component":{}}],["journal",{"_index":2613,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["jpa",{"_index":122,"title":{},"name":{},"text":{"2":{},"4":{},"17":{},"18":{},"85":{},"87":{},"100":{},"121":{},"214":{},"217":{},"240":{},"241":{},"260":{},"345":{},"350":{},"351":{}},"component":{}}],["json",{"_index":723,"title":{},"name":{},"text":{"4":{},"11":{},"35":{},"87":{},"94":{},"138":{},"175":{},"187":{},"217":{},"260":{},"267":{},"281":{},"301":{}},"component":{}}],["jsr",{"_index":85,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"85":{},"86":{},"87":{},"214":{},"216":{},"217":{},"259":{},"260":{},"345":{}},"component":{}}],["jullogg",{"_index":1534,"title":{},"name":{},"text":{"24":{},"25":{},"127":{},"128":{},"251":{},"252":{},"315":{},"316":{}},"component":{}}],["jvm",{"_index":793,"title":{"47-4":{},"148-4":{},"210-4":{},"333-4":{}},"name":{},"text":{"5":{},"7":{},"12":{},"14":{},"33":{},"46":{},"47":{},"66":{},"67":{},"88":{},"90":{},"95":{},"97":{},"136":{},"147":{},"148":{},"168":{},"169":{},"171":{},"176":{},"178":{},"185":{},"209":{},"210":{},"218":{},"223":{},"224":{},"261":{},"263":{},"268":{},"270":{},"325":{},"332":{},"333":{},"338":{},"339":{}},"component":{}}],["jvm’",{"_index":1074,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["kafka",{"_index":283,"title":{"73":{},"155":{},"230":{},"283":{}},"name":{"73":{},"155":{},"230":{},"283":{}},"text":{"3":{},"4":{},"73":{},"86":{},"87":{},"155":{},"216":{},"217":{},"230":{},"259":{},"260":{},"283":{}},"component":{}}],["kafka:one.microstream.enterprise.afs.kafka.typ",{"_index":340,"title":{},"name":{},"text":{"3":{}},"component":{}}],["kafkaconnector.caching(properti",{"_index":2586,"title":{},"name":{},"text":{"73":{},"155":{},"230":{},"283":{}},"component":{}}],["keep",{"_index":802,"title":{},"name":{},"text":{"5":{},"7":{},"10":{},"14":{},"27":{},"37":{},"50":{},"60":{},"65":{},"88":{},"90":{},"93":{},"97":{},"117":{},"130":{},"140":{},"143":{},"167":{},"171":{},"174":{},"178":{},"189":{},"197":{},"204":{},"218":{},"222":{},"254":{},"261":{},"263":{},"266":{},"270":{},"295":{},"303":{},"318":{},"336":{},"343":{}},"component":{}}],["kept",{"_index":1986,"title":{},"name":{},"text":{"44":{},"66":{},"108":{},"168":{},"196":{},"223":{},"330":{},"338":{}},"component":{}}],["key",{"_index":48,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"16":{},"27":{},"69":{},"70":{},"71":{},"84":{},"85":{},"86":{},"99":{},"130":{},"151":{},"152":{},"153":{},"213":{},"214":{},"215":{},"216":{},"226":{},"227":{},"228":{},"239":{},"240":{},"243":{},"246":{},"254":{},"259":{},"271":{},"274":{},"275":{},"278":{},"279":{},"280":{},"281":{},"318":{},"340":{},"344":{},"345":{},"346":{},"349":{},"350":{}},"component":{}}],["key/valu",{"_index":3112,"title":{},"name":{},"text":{"243":{},"246":{},"271":{},"274":{},"275":{}},"component":{}}],["key=mi",{"_index":2531,"title":{},"name":{},"text":{"69":{},"70":{},"151":{},"152":{},"226":{},"227":{},"278":{},"279":{}},"component":{}}],["keymanag",{"_index":3043,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["keytyp",{"_index":385,"title":{},"name":{},"text":{"3":{},"16":{},"17":{},"86":{},"99":{},"100":{},"216":{},"259":{}},"component":{}}],["kill",{"_index":888,"title":{},"name":{},"text":{"7":{},"90":{},"171":{},"263":{}},"component":{}}],["kind",{"_index":833,"title":{},"name":{},"text":{"7":{},"12":{},"90":{},"95":{},"171":{},"176":{},"263":{},"268":{}},"component":{}}],["know",{"_index":1220,"title":{},"name":{},"text":{"14":{},"43":{},"50":{},"97":{},"107":{},"143":{},"178":{},"195":{},"197":{},"270":{},"275":{},"329":{},"336":{}},"component":{}}],["knowledg",{"_index":2438,"title":{},"name":{},"text":{"66":{},"116":{},"168":{},"203":{},"223":{},"294":{},"338":{}},"component":{}}],["known",{"_index":1919,"title":{},"name":{},"text":{"42":{},"66":{},"72":{},"106":{},"154":{},"168":{},"194":{},"223":{},"229":{},"282":{},"328":{},"338":{},"347":{}},"component":{}}],["kotlin",{"_index":662,"title":{},"name":{},"text":{"4":{},"87":{},"217":{},"260":{}},"component":{}}],["kvlite:5000",{"_index":2677,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["kvstore",{"_index":2674,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["kvstoreconfig(\"kvstor",{"_index":2676,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["kvstorefactory.getstor",{"_index":2675,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["label",{"_index":3273,"title":{},"name":{},"text":{"275":{}},"component":{}}],["lack",{"_index":1160,"title":{},"name":{},"text":{"12":{},"95":{},"176":{},"268":{}},"component":{}}],["lambda",{"_index":1194,"title":{},"name":{},"text":{"12":{},"33":{},"95":{},"136":{},"176":{},"185":{},"268":{},"325":{}},"component":{}}],["languag",{"_index":709,"title":{},"name":{},"text":{"4":{},"6":{},"10":{},"12":{},"13":{},"54":{},"87":{},"89":{},"93":{},"95":{},"96":{},"110":{},"174":{},"176":{},"177":{},"180":{},"217":{},"219":{},"260":{},"262":{},"266":{},"268":{},"269":{},"308":{}},"component":{}}],["larg",{"_index":2219,"title":{},"name":{},"text":{"50":{},"67":{},"143":{},"169":{},"197":{},"224":{},"336":{},"339":{},"340":{}},"component":{}}],["larger",{"_index":1044,"title":{},"name":{},"text":{"10":{},"34":{},"37":{},"93":{},"137":{},"140":{},"174":{},"186":{},"189":{},"266":{},"300":{},"303":{},"340":{}},"component":{}}],["last",{"_index":869,"title":{},"name":{},"text":{"7":{},"9":{},"10":{},"27":{},"68":{},"90":{},"92":{},"93":{},"130":{},"170":{},"171":{},"173":{},"174":{},"225":{},"254":{},"263":{},"265":{},"266":{},"304":{},"318":{},"341":{}},"component":{}}],["lastnam",{"_index":1355,"title":{},"name":{},"text":{"21":{},"23":{},"50":{},"51":{},"124":{},"126":{},"143":{},"144":{},"197":{},"198":{},"248":{},"250":{},"312":{},"314":{},"336":{},"337":{}},"component":{}}],["lastname(\"do",{"_index":1360,"title":{},"name":{},"text":{"21":{},"24":{},"25":{},"27":{},"124":{},"127":{},"128":{},"130":{},"248":{},"251":{},"252":{},"254":{},"312":{},"315":{},"316":{},"318":{}},"component":{}}],["lastname(\"hop",{"_index":1559,"title":{},"name":{},"text":{"26":{},"129":{},"253":{},"317":{}},"component":{}}],["lastname(fin",{"_index":1490,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["lastname(str",{"_index":1488,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["lasttouch",{"_index":2444,"title":{},"name":{},"text":{"66":{},"168":{},"223":{},"338":{}},"component":{}}],["late",{"_index":3146,"title":{"246-4":{},"275-5":{}},"name":{},"text":{},"component":{}}],["later",{"_index":914,"title":{},"name":{},"text":{"8":{},"45":{},"50":{},"91":{},"136":{},"143":{},"146":{},"172":{},"185":{},"197":{},"208":{},"264":{},"304":{},"325":{},"331":{},"336":{}},"component":{}}],["latest",{"_index":1852,"title":{},"name":{},"text":{"37":{},"140":{},"189":{},"303":{}},"component":{}}],["layer",{"_index":115,"title":{"23":{},"25":{},"126":{},"128":{},"250":{},"252":{},"314":{},"316":{}},"name":{"25":{},"128":{},"252":{},"316":{}},"text":{"2":{},"3":{},"4":{},"7":{},"20":{},"21":{},"23":{},"24":{},"25":{},"26":{},"27":{},"29":{},"35":{},"54":{},"56":{},"85":{},"86":{},"87":{},"90":{},"110":{},"112":{},"123":{},"124":{},"126":{},"127":{},"128":{},"129":{},"130":{},"132":{},"138":{},"171":{},"180":{},"187":{},"214":{},"216":{},"217":{},"220":{},"247":{},"248":{},"250":{},"251":{},"252":{},"253":{},"254":{},"257":{},"259":{},"260":{},"263":{},"301":{},"308":{},"311":{},"312":{},"314":{},"315":{},"316":{},"317":{},"318":{},"321":{},"345":{},"347":{}},"component":{}}],["layout",{"_index":644,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["lazi",{"_index":500,"title":{"61":{},"66":{},"67":{},"118":{},"168":{},"169":{},"205":{},"223":{},"224":{},"296":{},"338":{},"339":{},"340":{},"61-1":{},"68-1":{},"118-1":{},"170-1":{},"205-1":{},"225-1":{},"296-1":{},"341-1":{}},"name":{"61":{},"66":{},"118":{},"168":{},"205":{},"223":{},"296":{},"338":{},"340":{}},"text":{"3":{},"13":{},"42":{},"45":{},"52":{},"61":{},"66":{},"67":{},"68":{},"86":{},"96":{},"106":{},"118":{},"145":{},"146":{},"168":{},"169":{},"170":{},"177":{},"194":{},"199":{},"205":{},"208":{},"216":{},"223":{},"224":{},"225":{},"259":{},"265":{},"269":{},"270":{},"292":{},"296":{},"304":{},"328":{},"331":{},"338":{},"339":{},"340":{},"341":{}},"component":{}}],["lazili",{"_index":2480,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{},"340":{}},"component":{}}],["lazy.check",{"_index":2450,"title":{},"name":{},"text":{"66":{},"168":{},"223":{},"338":{}},"component":{}}],["lazy.clear(lazi",{"_index":2518,"title":{},"name":{},"text":{"68":{},"170":{},"225":{},"341":{}},"component":{}}],["lazy.get",{"_index":2501,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["lazy.get(lazi",{"_index":2514,"title":{},"name":{},"text":{"68":{},"170":{},"225":{},"341":{}},"component":{}}],["lazy.get(this.turnov",{"_index":2500,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["lazy.peek(lazi",{"_index":2515,"title":{},"name":{},"text":{"68":{},"170":{},"225":{},"341":{}},"component":{}}],["lazy.reference(new",{"_index":2490,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["lazy.reference(nul",{"_index":2491,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["lazyarraylist",{"_index":3352,"title":{},"name":{},"text":{"340":{}},"component":{}}],["lazyhashmap",{"_index":3354,"title":{},"name":{},"text":{"340":{}},"component":{}}],["lazyhashset",{"_index":3353,"title":{},"name":{},"text":{"340":{}},"component":{}}],["lazyrefencemanag",{"_index":3079,"title":{},"name":{},"text":{"216":{},"259":{}},"component":{}}],["lazyreferencemanag",{"_index":2446,"title":{},"name":{},"text":{"66":{},"168":{},"223":{},"338":{}},"component":{}}],["lazyreferencemanager.set(lazyreferencemanager.new",{"_index":2449,"title":{},"name":{},"text":{"66":{},"168":{},"223":{},"338":{}},"component":{}}],["lazyreferenzmanag",{"_index":2520,"title":{},"name":{},"text":{"68":{},"170":{},"225":{},"341":{}},"component":{}}],["lead",{"_index":580,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"246":{},"259":{},"275":{}},"component":{}}],["leak",{"_index":613,"title":{},"name":{},"text":{"3":{},"66":{},"86":{},"168":{},"216":{},"223":{},"259":{},"338":{}},"component":{}}],["leav",{"_index":1350,"title":{},"name":{},"text":{"20":{},"23":{},"50":{},"123":{},"126":{},"143":{},"197":{},"247":{},"250":{},"311":{},"314":{},"336":{}},"component":{}}],["left",{"_index":718,"title":{},"name":{},"text":{"4":{},"12":{},"29":{},"37":{},"87":{},"95":{},"132":{},"140":{},"176":{},"189":{},"217":{},"257":{},"260":{},"268":{},"303":{},"321":{}},"component":{}}],["legaci",{"_index":498,"title":{"41":{},"50":{},"105":{},"143":{},"193":{},"197":{},"327":{},"336":{}},"name":{"41":{},"105":{},"193":{},"327":{}},"text":{"3":{},"41":{},"46":{},"50":{},"51":{},"86":{},"105":{},"143":{},"144":{},"147":{},"193":{},"197":{},"198":{},"209":{},"216":{},"259":{},"327":{},"332":{},"336":{},"337":{},"347":{}},"component":{}}],["legacytypehandl",{"_index":2197,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["length",{"_index":557,"title":{},"name":{},"text":{"3":{},"37":{},"55":{},"86":{},"111":{},"140":{},"181":{},"189":{},"216":{},"259":{},"303":{},"309":{}},"component":{}}],["less",{"_index":881,"title":{},"name":{},"text":{"7":{},"10":{},"37":{},"51":{},"90":{},"93":{},"140":{},"144":{},"171":{},"174":{},"189":{},"198":{},"263":{},"266":{},"303":{},"337":{}},"component":{}}],["let",{"_index":2692,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["letter",{"_index":2687,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["let’",{"_index":1361,"title":{},"name":{},"text":{"21":{},"23":{},"27":{},"29":{},"50":{},"67":{},"124":{},"126":{},"130":{},"132":{},"143":{},"169":{},"197":{},"224":{},"248":{},"250":{},"254":{},"257":{},"312":{},"314":{},"318":{},"321":{},"336":{},"339":{}},"component":{}}],["level",{"_index":121,"title":{"18":{},"121":{},"241":{},"351":{}},"name":{"18":{},"121":{},"241":{},"351":{}},"text":{"2":{},"3":{},"4":{},"5":{},"10":{},"19":{},"49":{},"50":{},"51":{},"54":{},"55":{},"56":{},"67":{},"74":{},"85":{},"86":{},"87":{},"88":{},"93":{},"110":{},"111":{},"112":{},"122":{},"143":{},"144":{},"150":{},"156":{},"169":{},"174":{},"180":{},"181":{},"197":{},"198":{},"212":{},"214":{},"216":{},"217":{},"218":{},"224":{},"242":{},"259":{},"260":{},"261":{},"266":{},"274":{},"308":{},"309":{},"335":{},"336":{},"337":{},"339":{},"345":{},"352":{}},"component":{}}],["levenshtein",{"_index":2183,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["leverag",{"_index":1953,"title":{},"name":{},"text":{"43":{},"107":{},"195":{},"329":{}},"component":{}}],["li",{"_index":1028,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["liberica",{"_index":782,"title":{},"name":{},"text":{"5":{},"88":{},"218":{},"261":{}},"component":{}}],["librari",{"_index":655,"title":{"5-3":{},"88-3":{},"218-3":{},"261-3":{}},"name":{},"text":{"4":{},"5":{},"12":{},"28":{},"32":{},"54":{},"67":{},"87":{},"88":{},"95":{},"110":{},"131":{},"135":{},"169":{},"176":{},"180":{},"184":{},"217":{},"218":{},"224":{},"256":{},"260":{},"261":{},"268":{},"308":{},"320":{},"324":{},"339":{},"340":{}},"component":{}}],["librarydepend",{"_index":668,"title":{},"name":{},"text":{"4":{},"87":{},"217":{},"260":{}},"component":{}}],["licens",{"_index":812,"title":{"6-4":{},"89-4":{},"219-4":{},"262-4":{}},"name":{},"text":{"6":{},"89":{},"219":{},"262":{}},"component":{}}],["life",{"_index":803,"title":{"7":{},"90":{},"171":{},"263":{}},"name":{"7":{},"90":{},"171":{},"263":{}},"text":{"5":{},"88":{},"218":{},"261":{}},"component":{}}],["lifetim",{"_index":1755,"title":{},"name":{},"text":{"34":{},"37":{},"137":{},"140":{},"186":{},"189":{},"300":{},"303":{}},"component":{}}],["like",{"_index":2349,"title":{},"name":{},"text":{"56":{},"112":{},"182":{},"310":{}},"component":{}}],["likewis",{"_index":1255,"title":{},"name":{},"text":{"14":{},"97":{},"178":{},"270":{}},"component":{}}],["limit",{"_index":139,"title":{},"name":{},"text":{"2":{},"7":{},"10":{},"12":{},"14":{},"22":{},"27":{},"49":{},"55":{},"67":{},"85":{},"90":{},"93":{},"95":{},"97":{},"111":{},"125":{},"130":{},"150":{},"169":{},"171":{},"174":{},"176":{},"178":{},"181":{},"212":{},"214":{},"224":{},"249":{},"254":{},"263":{},"266":{},"268":{},"270":{},"304":{},"309":{},"313":{},"318":{},"335":{},"339":{},"340":{},"345":{}},"component":{}}],["line",{"_index":934,"title":{},"name":{},"text":{"9":{},"50":{},"92":{},"143":{},"173":{},"197":{},"265":{},"336":{}},"component":{}}],["liner",{"_index":2237,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["link",{"_index":956,"title":{},"name":{},"text":{"9":{},"17":{},"50":{},"53":{},"92":{},"100":{},"109":{},"143":{},"173":{},"179":{},"197":{},"240":{},"265":{},"307":{},"336":{},"350":{}},"component":{}}],["linkedhashmap",{"_index":1700,"title":{},"name":{},"text":{"32":{},"135":{},"184":{},"324":{}},"component":{}}],["linkedhashset",{"_index":1699,"title":{},"name":{},"text":{"32":{},"135":{},"184":{},"324":{}},"component":{}}],["linkedlist",{"_index":1702,"title":{},"name":{},"text":{"32":{},"135":{},"184":{},"324":{}},"component":{}}],["list",{"_index":1203,"title":{"135-3":{},"184-3":{},"324-3":{}},"name":{},"text":{"13":{},"28":{},"32":{},"33":{},"37":{},"43":{},"60":{},"62":{},"67":{},"72":{},"77":{},"96":{},"107":{},"117":{},"119":{},"131":{},"135":{},"136":{},"140":{},"154":{},"159":{},"169":{},"177":{},"184":{},"185":{},"189":{},"195":{},"204":{},"206":{},"224":{},"229":{},"246":{},"256":{},"269":{},"275":{},"282":{},"295":{},"297":{},"298":{},"303":{},"320":{},"324":{},"325":{},"329":{},"339":{},"340":{}},"component":{}}],["listen",{"_index":2982,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["lite",{"_index":3255,"title":{},"name":{},"text":{"271":{}},"component":{}}],["liter",{"_index":1605,"title":{},"name":{},"text":{"28":{},"131":{},"256":{},"320":{}},"component":{}}],["littl",{"_index":1981,"title":{},"name":{},"text":{"44":{},"50":{},"51":{},"108":{},"143":{},"144":{},"196":{},"197":{},"198":{},"275":{},"330":{},"336":{},"337":{}},"component":{}}],["live",{"_index":241,"title":{"7-1":{},"9-6":{},"90-1":{},"92-6":{},"171-1":{},"173-6":{},"263-1":{},"265-6":{}},"name":{},"text":{"3":{},"7":{},"10":{},"37":{},"38":{},"86":{},"90":{},"93":{},"140":{},"141":{},"171":{},"174":{},"189":{},"190":{},"216":{},"259":{},"263":{},"266":{},"303":{},"305":{}},"component":{}}],["livedatalength",{"_index":2329,"title":{},"name":{},"text":{"55":{},"111":{},"181":{},"309":{}},"component":{}}],["load",{"_index":488,"title":{"52":{},"67":{},"145":{},"169":{},"199":{},"224":{},"292":{},"339":{}},"name":{},"text":{"3":{},"7":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"33":{},"35":{},"40":{},"43":{},"44":{},"45":{},"46":{},"49":{},"50":{},"51":{},"52":{},"66":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"74":{},"86":{},"90":{},"92":{},"93":{},"95":{},"96":{},"97":{},"98":{},"99":{},"104":{},"107":{},"108":{},"136":{},"138":{},"143":{},"144":{},"145":{},"146":{},"147":{},"150":{},"151":{},"152":{},"153":{},"154":{},"156":{},"168":{},"169":{},"170":{},"171":{},"173":{},"174":{},"176":{},"177":{},"178":{},"185":{},"187":{},"192":{},"195":{},"196":{},"197":{},"198":{},"199":{},"208":{},"209":{},"212":{},"215":{},"216":{},"223":{},"224":{},"225":{},"226":{},"227":{},"228":{},"229":{},"238":{},"239":{},"240":{},"259":{},"263":{},"265":{},"266":{},"268":{},"269":{},"270":{},"278":{},"279":{},"280":{},"282":{},"292":{},"297":{},"301":{},"325":{},"326":{},"329":{},"330":{},"331":{},"332":{},"335":{},"336":{},"337":{},"338":{},"339":{},"340":{},"341":{},"346":{},"348":{},"349":{},"350":{}},"component":{}}],["load(\"@bazel_tools//tools/build_defs/repo:http.bzl",{"_index":678,"title":{},"name":{},"text":{"4":{},"87":{},"217":{},"260":{}},"component":{}}],["load(\"@rules_jvm_external//:defs.bzl",{"_index":689,"title":{},"name":{},"text":{"4":{},"87":{},"217":{},"260":{}},"component":{}}],["load(\"cach",{"_index":1262,"title":{},"name":{},"text":{"15":{},"98":{},"238":{},"348":{}},"component":{}}],["loadabl",{"_index":2223,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["loader",{"_index":236,"title":{"40":{},"104":{},"192":{},"326":{},"40-1":{},"104-1":{},"192-1":{},"326-1":{}},"name":{"40":{},"104":{},"192":{},"326":{}},"text":{"3":{},"40":{},"51":{},"86":{},"104":{},"144":{},"192":{},"198":{},"216":{},"239":{},"246":{},"259":{},"326":{},"337":{},"349":{}},"component":{}}],["loader=fals",{"_index":3189,"title":{},"name":{},"text":{"246":{}},"component":{}}],["loadfactor",{"_index":1726,"title":{},"name":{},"text":{"33":{},"136":{},"185":{},"325":{}},"component":{}}],["loading/upd",{"_index":600,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["lob",{"_index":2701,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["local",{"_index":510,"title":{"58":{},"114":{},"201":{},"277":{}},"name":{"58":{},"114":{},"201":{},"277":{}},"text":{"3":{},"13":{},"32":{},"33":{},"57":{},"58":{},"59":{},"65":{},"86":{},"96":{},"113":{},"114":{},"115":{},"135":{},"136":{},"167":{},"177":{},"184":{},"185":{},"200":{},"201":{},"202":{},"215":{},"216":{},"222":{},"259":{},"269":{},"276":{},"277":{},"293":{},"324":{},"325":{},"343":{},"346":{}},"component":{}}],["localdate.now",{"_index":2338,"title":{},"name":{},"text":{"56":{},"112":{},"182":{},"310":{}},"component":{}}],["locale’",{"_index":647,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["localhost:9093",{"_index":2585,"title":{},"name":{},"text":{"73":{},"155":{},"230":{},"283":{}},"component":{}}],["locat",{"_index":589,"title":{"45-1":{},"146-1":{},"208-1":{},"331-1":{}},"name":{},"text":{"3":{},"7":{},"38":{},"49":{},"69":{},"70":{},"72":{},"77":{},"86":{},"90":{},"141":{},"150":{},"151":{},"152":{},"154":{},"159":{},"171":{},"190":{},"212":{},"216":{},"226":{},"227":{},"229":{},"259":{},"263":{},"278":{},"279":{},"282":{},"305":{},"335":{}},"component":{}}],["lock",{"_index":428,"title":{"36":{},"139":{},"188":{},"302":{}},"name":{"36":{},"139":{},"188":{},"302":{}},"text":{"3":{},"23":{},"36":{},"37":{},"86":{},"126":{},"139":{},"140":{},"188":{},"189":{},"216":{},"250":{},"259":{},"302":{},"303":{},"314":{}},"component":{}}],["lockfilenam",{"_index":427,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["lockfilesetupprovid",{"_index":1813,"title":{},"name":{},"text":{"36":{},"139":{},"188":{},"302":{}},"component":{}}],["log",{"_index":809,"title":{"24":{},"127":{},"251":{},"255":{},"315":{},"319":{},"246-5":{},"274-3":{},"275-6":{}},"name":{"24":{},"127":{},"251":{},"315":{}},"text":{"5":{},"23":{},"24":{},"29":{},"50":{},"51":{},"74":{},"88":{},"126":{},"127":{},"132":{},"143":{},"144":{},"156":{},"197":{},"198":{},"216":{},"218":{},"246":{},"250":{},"251":{},"255":{},"257":{},"259":{},"261":{},"274":{},"275":{},"314":{},"315":{},"319":{},"321":{},"336":{},"337":{}},"component":{}}],["log2(n",{"_index":3365,"title":{},"name":{},"text":{"340":{}},"component":{}}],["logback",{"_index":3192,"title":{},"name":{},"text":{"255":{},"319":{}},"component":{}}],["logback.vers",{"_index":3194,"title":{},"name":{},"text":{"255":{},"319":{}},"component":{}}],["logback.xml",{"_index":3195,"title":{},"name":{},"text":{"255":{},"319":{}},"component":{}}],["logger",{"_index":1532,"title":{},"name":{},"text":{"24":{},"25":{},"29":{},"56":{},"112":{},"127":{},"128":{},"132":{},"182":{},"251":{},"252":{},"257":{},"274":{},"310":{},"315":{},"316":{},"321":{}},"component":{}}],["logger.getlogger(identity.getclass().getnam",{"_index":1537,"title":{},"name":{},"text":{"24":{},"127":{},"251":{},"315":{}},"component":{}}],["logger.getlogger(persistencestoring.class.getnam",{"_index":1624,"title":{},"name":{},"text":{"29":{},"30":{},"132":{},"133":{},"257":{},"258":{},"321":{},"322":{}},"component":{}}],["logger{36",{"_index":3198,"title":{},"name":{},"text":{"255":{},"319":{}},"component":{}}],["logger’",{"_index":1546,"title":{},"name":{},"text":{"24":{},"127":{},"251":{},"255":{},"315":{},"319":{}},"component":{}}],["logging.level.one.microstream=debug",{"_index":3170,"title":{},"name":{},"text":{"246":{},"275":{}},"component":{}}],["logic",{"_index":900,"title":{},"name":{},"text":{"7":{},"9":{},"10":{},"21":{},"23":{},"24":{},"27":{},"33":{},"44":{},"47":{},"50":{},"51":{},"69":{},"70":{},"74":{},"90":{},"92":{},"93":{},"108":{},"124":{},"126":{},"127":{},"130":{},"136":{},"143":{},"144":{},"148":{},"151":{},"152":{},"156":{},"171":{},"173":{},"174":{},"185":{},"196":{},"197":{},"198":{},"210":{},"215":{},"216":{},"226":{},"227":{},"248":{},"250":{},"251":{},"254":{},"259":{},"263":{},"265":{},"266":{},"278":{},"279":{},"312":{},"314":{},"315":{},"318":{},"325":{},"330":{},"333":{},"336":{},"337":{},"346":{}},"component":{}}],["login",{"_index":3310,"title":{},"name":{},"text":{"281":{}},"component":{}}],["long",{"_index":710,"title":{},"name":{},"text":{"4":{},"12":{},"27":{},"29":{},"30":{},"32":{},"36":{},"49":{},"50":{},"62":{},"65":{},"66":{},"74":{},"77":{},"87":{},"95":{},"119":{},"130":{},"132":{},"133":{},"135":{},"139":{},"143":{},"150":{},"156":{},"159":{},"167":{},"168":{},"176":{},"184":{},"188":{},"197":{},"206":{},"212":{},"217":{},"222":{},"223":{},"254":{},"257":{},"258":{},"260":{},"268":{},"298":{},"302":{},"309":{},"318":{},"321":{},"322":{},"324":{},"335":{},"336":{},"338":{},"343":{}},"component":{}}],["long.parselong(e.id",{"_index":1969,"title":{},"name":{},"text":{"43":{},"107":{},"195":{},"329":{}},"component":{}}],["longer",{"_index":978,"title":{},"name":{},"text":{"10":{},"51":{},"67":{},"93":{},"144":{},"169":{},"174":{},"198":{},"224":{},"266":{},"337":{},"339":{}},"component":{}}],["longest",{"_index":2725,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["look",{"_index":165,"title":{},"name":{},"text":{"2":{},"20":{},"22":{},"23":{},"27":{},"28":{},"29":{},"50":{},"51":{},"67":{},"69":{},"70":{},"85":{},"123":{},"125":{},"126":{},"130":{},"131":{},"132":{},"143":{},"144":{},"151":{},"152":{},"169":{},"197":{},"198":{},"214":{},"224":{},"226":{},"227":{},"247":{},"249":{},"250":{},"254":{},"256":{},"257":{},"275":{},"278":{},"279":{},"311":{},"313":{},"314":{},"318":{},"320":{},"321":{},"336":{},"337":{},"339":{},"345":{}},"component":{}}],["lookup",{"_index":170,"title":{},"name":{},"text":{"2":{},"77":{},"85":{},"159":{},"214":{},"345":{}},"component":{}}],["loss",{"_index":2744,"title":{},"name":{},"text":{"78":{},"160":{},"233":{},"286":{}},"component":{}}],["lost",{"_index":2227,"title":{},"name":{},"text":{"50":{},"51":{},"143":{},"144":{},"197":{},"198":{},"336":{},"337":{}},"component":{}}],["lot",{"_index":897,"title":{},"name":{},"text":{"7":{},"11":{},"23":{},"29":{},"50":{},"57":{},"90":{},"94":{},"113":{},"126":{},"132":{},"143":{},"171":{},"175":{},"197":{},"200":{},"250":{},"257":{},"263":{},"267":{},"276":{},"314":{},"321":{},"336":{}},"component":{}}],["low",{"_index":760,"title":{},"name":{},"text":{"4":{},"37":{},"49":{},"54":{},"56":{},"67":{},"87":{},"110":{},"112":{},"140":{},"150":{},"169":{},"180":{},"189":{},"212":{},"217":{},"224":{},"260":{},"303":{},"308":{},"335":{},"339":{}},"component":{}}],["lower",{"_index":503,"title":{},"name":{},"text":{"3":{},"10":{},"77":{},"86":{},"93":{},"159":{},"174":{},"216":{},"259":{},"266":{}},"component":{}}],["lucen",{"_index":3350,"title":{},"name":{},"text":{"340":{}},"component":{}}],["ly",{"_index":2200,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["machineri",{"_index":2176,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["made",{"_index":2301,"title":{},"name":{},"text":{"54":{},"110":{},"180":{},"308":{}},"component":{}}],["magic",{"_index":903,"title":{},"name":{},"text":{"7":{},"14":{},"67":{},"90":{},"97":{},"169":{},"171":{},"178":{},"224":{},"263":{},"270":{},"339":{}},"component":{}}],["main",{"_index":1916,"title":{},"name":{},"text":{"41":{},"105":{},"193":{},"246":{},"275":{},"327":{}},"component":{}}],["main(fin",{"_index":2989,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["mainstream",{"_index":97,"title":{},"name":{},"text":{"2":{},"85":{},"214":{},"345":{}},"component":{}}],["maintain",{"_index":112,"title":{},"name":{},"text":{"2":{},"33":{},"85":{},"136":{},"185":{},"214":{},"325":{},"340":{},"345":{}},"component":{}}],["major",{"_index":892,"title":{},"name":{},"text":{"7":{},"74":{},"90":{},"156":{},"171":{},"263":{}},"component":{}}],["make",{"_index":694,"title":{},"name":{},"text":{"4":{},"7":{},"10":{},"12":{},"14":{},"19":{},"25":{},"45":{},"50":{},"51":{},"67":{},"77":{},"87":{},"90":{},"93":{},"95":{},"97":{},"102":{},"116":{},"122":{},"128":{},"143":{},"144":{},"146":{},"159":{},"169":{},"171":{},"174":{},"176":{},"178":{},"197":{},"198":{},"203":{},"208":{},"215":{},"217":{},"224":{},"240":{},"242":{},"243":{},"246":{},"252":{},"260":{},"263":{},"266":{},"268":{},"270":{},"271":{},"275":{},"294":{},"297":{},"304":{},"316":{},"331":{},"336":{},"337":{},"339":{},"340":{},"346":{},"350":{},"352":{}},"component":{}}],["manag",{"_index":60,"title":{"44":{},"45":{},"108":{},"146":{},"196":{},"208":{},"304":{},"330":{},"331":{},"49-5":{},"150-5":{},"212-5":{},"275-4":{},"335-5":{}},"name":{"44":{},"45":{},"108":{},"146":{},"196":{},"208":{},"330":{},"331":{}},"text":{"1":{},"2":{},"3":{},"4":{},"7":{},"9":{},"12":{},"14":{},"16":{},"37":{},"50":{},"60":{},"66":{},"69":{},"70":{},"84":{},"85":{},"86":{},"87":{},"90":{},"92":{},"95":{},"97":{},"99":{},"116":{},"117":{},"140":{},"143":{},"151":{},"152":{},"168":{},"171":{},"173":{},"176":{},"178":{},"189":{},"197":{},"204":{},"213":{},"214":{},"216":{},"217":{},"223":{},"226":{},"227":{},"239":{},"240":{},"246":{},"259":{},"260":{},"263":{},"265":{},"268":{},"270":{},"275":{},"278":{},"279":{},"295":{},"303":{},"304":{},"336":{},"338":{},"344":{},"345":{},"349":{},"350":{}},"component":{}}],["managementen",{"_index":405,"title":{},"name":{},"text":{"3":{},"16":{},"86":{},"99":{},"216":{},"259":{}},"component":{}}],["mani",{"_index":126,"title":{"47-3":{},"148-3":{},"210-3":{},"333-3":{}},"name":{},"text":{"2":{},"4":{},"12":{},"37":{},"47":{},"49":{},"50":{},"85":{},"87":{},"95":{},"116":{},"140":{},"143":{},"148":{},"150":{},"176":{},"189":{},"197":{},"203":{},"210":{},"212":{},"214":{},"217":{},"260":{},"268":{},"294":{},"303":{},"333":{},"335":{},"336":{},"345":{}},"component":{}}],["manipul",{"_index":2506,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["manner",{"_index":2440,"title":{},"name":{},"text":{"66":{},"168":{},"223":{},"338":{}},"component":{}}],["manual",{"_index":79,"title":{"66-1":{},"168-1":{},"223-1":{},"338-1":{}},"name":{},"text":{"6":{},"10":{},"12":{},"41":{},"50":{},"66":{},"89":{},"93":{},"95":{},"105":{},"143":{},"168":{},"174":{},"176":{},"193":{},"197":{},"219":{},"223":{},"262":{},"266":{},"268":{},"327":{},"336":{},"338":{}},"component":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"91":{},"92":{},"93":{},"94":{},"95":{},"96":{},"97":{},"98":{},"99":{},"100":{},"101":{},"102":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"112":{},"113":{},"114":{},"115":{},"116":{},"117":{},"118":{},"119":{},"120":{},"121":{},"122":{},"123":{},"124":{},"125":{},"126":{},"127":{},"128":{},"129":{},"130":{},"131":{},"132":{},"133":{},"134":{},"135":{},"136":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"143":{},"144":{},"145":{},"146":{},"147":{},"148":{},"149":{},"150":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{},"165":{},"166":{},"167":{},"168":{},"169":{},"170":{},"171":{},"172":{},"173":{},"174":{},"175":{},"176":{},"177":{},"178":{},"179":{},"180":{},"181":{},"182":{},"183":{},"184":{},"185":{},"186":{},"187":{},"188":{},"189":{},"190":{},"191":{},"192":{},"193":{},"194":{},"195":{},"196":{},"197":{},"198":{},"199":{},"200":{},"201":{},"202":{},"203":{},"204":{},"205":{},"206":{},"207":{},"208":{},"209":{},"210":{},"211":{},"212":{},"213":{},"214":{},"215":{},"216":{},"217":{},"218":{},"219":{},"220":{},"221":{},"222":{},"223":{},"224":{},"225":{},"226":{},"227":{},"228":{},"229":{},"230":{},"231":{},"232":{},"233":{},"234":{},"235":{},"236":{},"237":{},"238":{},"239":{},"240":{},"241":{},"242":{},"243":{},"244":{},"245":{},"246":{},"247":{},"248":{},"249":{},"250":{},"251":{},"252":{},"253":{},"254":{},"255":{},"256":{},"257":{},"258":{},"259":{},"260":{},"261":{},"262":{},"263":{},"264":{},"265":{},"266":{},"267":{},"268":{},"269":{},"270":{},"271":{},"272":{},"273":{},"274":{},"275":{},"276":{},"277":{},"278":{},"279":{},"280":{},"281":{},"282":{},"283":{},"284":{},"285":{},"286":{},"287":{},"288":{},"289":{},"290":{},"291":{},"292":{},"293":{},"294":{},"295":{},"296":{},"297":{},"298":{},"299":{},"300":{},"301":{},"302":{},"303":{},"304":{},"305":{},"306":{},"307":{},"308":{},"309":{},"310":{},"311":{},"312":{},"313":{},"314":{},"315":{},"316":{},"317":{},"318":{},"319":{},"320":{},"321":{},"322":{},"323":{},"324":{},"325":{},"326":{},"327":{},"328":{},"329":{},"330":{},"331":{},"332":{},"333":{},"334":{},"335":{},"336":{},"337":{},"338":{},"339":{},"340":{},"341":{},"342":{},"343":{},"344":{},"345":{},"346":{},"347":{},"348":{},"349":{},"350":{},"351":{},"352":{}}}],["map",{"_index":94,"title":{"50":{},"143":{},"197":{},"336":{},"50-1":{},"50-2":{},"50-3":{},"50-4":{},"143-1":{},"143-2":{},"143-3":{},"143-4":{},"197-1":{},"197-2":{},"197-3":{},"197-4":{},"336-1":{},"336-2":{},"336-3":{},"336-4":{}},"name":{},"text":{"2":{},"3":{},"11":{},"12":{},"14":{},"33":{},"41":{},"46":{},"50":{},"51":{},"74":{},"85":{},"86":{},"94":{},"95":{},"97":{},"105":{},"136":{},"143":{},"144":{},"147":{},"156":{},"175":{},"176":{},"178":{},"185":{},"193":{},"197":{},"198":{},"209":{},"214":{},"215":{},"216":{},"259":{},"268":{},"270":{},"325":{},"327":{},"332":{},"336":{},"337":{},"340":{},"345":{},"346":{},"347":{}},"component":{}}],["mariadb",{"_index":470,"title":{"79":{},"161":{},"234":{},"288":{}},"name":{"79":{},"161":{},"234":{},"288":{}},"text":{"3":{},"79":{},"86":{},"161":{},"216":{},"234":{},"259":{},"288":{}},"component":{}}],["mariadbdatasourc",{"_index":2747,"title":{},"name":{},"text":{"79":{},"161":{},"234":{},"288":{}},"component":{}}],["mark",{"_index":1071,"title":{},"name":{},"text":{"10":{},"37":{},"50":{},"51":{},"63":{},"93":{},"120":{},"140":{},"143":{},"144":{},"174":{},"189":{},"197":{},"198":{},"207":{},"216":{},"243":{},"246":{},"259":{},"266":{},"271":{},"274":{},"275":{},"299":{},"303":{},"336":{},"337":{}},"component":{}}],["massiv",{"_index":1184,"title":{},"name":{},"text":{"12":{},"50":{},"95":{},"143":{},"176":{},"197":{},"268":{},"336":{}},"component":{}}],["master",{"_index":2009,"title":{},"name":{},"text":{"47":{},"77":{},"148":{},"159":{},"210":{},"333":{}},"component":{}}],["match",{"_index":1999,"title":{},"name":{},"text":{"46":{},"50":{},"51":{},"143":{},"144":{},"147":{},"197":{},"198":{},"209":{},"275":{},"332":{},"336":{},"337":{}},"component":{}}],["math",{"_index":698,"title":{},"name":{},"text":{"4":{},"87":{},"217":{},"260":{}},"component":{}}],["mathemat",{"_index":2028,"title":{},"name":{},"text":{"49":{},"150":{},"212":{},"335":{}},"component":{}}],["matter",{"_index":799,"title":{},"name":{},"text":{"5":{},"10":{},"37":{},"51":{},"67":{},"88":{},"93":{},"140":{},"144":{},"169":{},"174":{},"189":{},"198":{},"218":{},"224":{},"261":{},"266":{},"303":{},"337":{},"339":{}},"component":{}}],["maven",{"_index":248,"title":{},"name":{},"text":{"3":{},"4":{},"20":{},"28":{},"53":{},"86":{},"87":{},"109":{},"123":{},"131":{},"179":{},"215":{},"216":{},"217":{},"247":{},"256":{},"259":{},"260":{},"274":{},"307":{},"311":{},"320":{},"346":{}},"component":{}}],["maven_instal",{"_index":690,"title":{},"name":{},"text":{"4":{},"87":{},"217":{},"260":{}},"component":{}}],["maven_jar",{"_index":691,"title":{},"name":{},"text":{"4":{},"87":{},"217":{},"260":{}},"component":{}}],["maven’",{"_index":204,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["max",{"_index":1749,"title":{},"name":{},"text":{"34":{},"37":{},"75":{},"77":{},"137":{},"140":{},"157":{},"159":{},"186":{},"189":{},"231":{},"284":{},"300":{},"303":{}},"component":{}}],["maximum",{"_index":443,"title":{"37-6":{},"140-6":{},"189-6":{},"303-6":{}},"name":{},"text":{"3":{},"34":{},"37":{},"47":{},"86":{},"137":{},"140":{},"148":{},"186":{},"189":{},"210":{},"216":{},"259":{},"300":{},"303":{},"333":{},"340":{}},"component":{}}],["mayb",{"_index":844,"title":{},"name":{},"text":{"7":{},"50":{},"62":{},"67":{},"90":{},"119":{},"143":{},"169":{},"171":{},"197":{},"206":{},"224":{},"263":{},"298":{},"336":{},"339":{}},"component":{}}],["mb",{"_index":1043,"title":{},"name":{},"text":{"10":{},"34":{},"93":{},"137":{},"174":{},"186":{},"266":{},"300":{}},"component":{}}],["mean",{"_index":141,"title":{},"name":{},"text":{"2":{},"3":{},"10":{},"14":{},"37":{},"39":{},"48":{},"50":{},"51":{},"52":{},"60":{},"66":{},"85":{},"86":{},"93":{},"97":{},"117":{},"140":{},"142":{},"143":{},"144":{},"145":{},"149":{},"168":{},"174":{},"178":{},"189":{},"191":{},"197":{},"198":{},"199":{},"204":{},"211":{},"214":{},"216":{},"223":{},"240":{},"246":{},"259":{},"266":{},"270":{},"275":{},"292":{},"295":{},"303":{},"304":{},"306":{},"336":{},"337":{},"338":{},"340":{},"345":{},"350":{}},"component":{}}],["meanwhil",{"_index":1760,"title":{},"name":{},"text":{"34":{},"137":{},"186":{},"300":{}},"component":{}}],["mechan",{"_index":93,"title":{},"name":{},"text":{"2":{},"7":{},"10":{},"14":{},"36":{},"50":{},"66":{},"74":{},"85":{},"90":{},"93":{},"97":{},"139":{},"143":{},"156":{},"168":{},"171":{},"174":{},"178":{},"188":{},"197":{},"214":{},"223":{},"263":{},"266":{},"270":{},"302":{},"304":{},"336":{},"338":{},"345":{}},"component":{}}],["mechanism=mongo",{"_index":2596,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["mechanism=plain",{"_index":2646,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["medium",{"_index":3091,"title":{},"name":{},"text":{"220":{},"347":{}},"component":{}}],["meet",{"_index":203,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["meh",{"_index":2494,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["member",{"_index":1920,"title":{},"name":{},"text":{"42":{},"55":{},"60":{},"63":{},"74":{},"106":{},"111":{},"117":{},"120":{},"156":{},"181":{},"194":{},"204":{},"207":{},"243":{},"271":{},"295":{},"299":{},"309":{},"328":{}},"component":{}}],["memeb",{"_index":2392,"title":{},"name":{},"text":{"60":{},"117":{},"204":{},"295":{}},"component":{}}],["memori",{"_index":99,"title":{},"name":{},"text":{"2":{},"3":{},"10":{},"13":{},"32":{},"44":{},"45":{},"54":{},"58":{},"66":{},"85":{},"86":{},"93":{},"96":{},"108":{},"110":{},"114":{},"135":{},"146":{},"168":{},"174":{},"177":{},"180":{},"184":{},"196":{},"201":{},"208":{},"214":{},"216":{},"223":{},"259":{},"266":{},"269":{},"277":{},"297":{},"308":{},"324":{},"330":{},"331":{},"338":{},"340":{},"345":{}},"component":{}}],["mention",{"_index":3361,"title":{},"name":{},"text":{"340":{}},"component":{}}],["mere",{"_index":1734,"title":{},"name":{},"text":{"33":{},"136":{},"185":{},"325":{}},"component":{}}],["merg",{"_index":1751,"title":{},"name":{},"text":{"34":{},"37":{},"137":{},"140":{},"186":{},"189":{},"300":{},"303":{}},"component":{}}],["mess",{"_index":2485,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["messag",{"_index":544,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["met",{"_index":2941,"title":{},"name":{},"text":{"116":{}},"component":{}}],["meta",{"_index":1792,"title":{},"name":{},"text":{"35":{},"44":{},"48":{},"108":{},"138":{},"149":{},"187":{},"196":{},"211":{},"301":{},"330":{}},"component":{}}],["metadata",{"_index":2539,"title":{},"name":{},"text":{"69":{},"70":{},"151":{},"152":{},"226":{},"227":{},"278":{},"279":{}},"component":{}}],["method",{"_index":34,"title":{"62":{},"119":{},"206":{},"298":{},"43-3":{},"62-1":{},"107-3":{},"119-1":{},"195-3":{},"206-1":{},"298-1":{},"329-3":{}},"name":{},"text":{"1":{},"3":{},"4":{},"7":{},"9":{},"10":{},"13":{},"14":{},"15":{},"22":{},"23":{},"26":{},"29":{},"30":{},"35":{},"41":{},"42":{},"43":{},"51":{},"59":{},"60":{},"61":{},"62":{},"65":{},"66":{},"67":{},"68":{},"77":{},"84":{},"86":{},"87":{},"90":{},"92":{},"93":{},"96":{},"97":{},"98":{},"105":{},"106":{},"107":{},"115":{},"116":{},"117":{},"118":{},"119":{},"125":{},"126":{},"129":{},"132":{},"133":{},"138":{},"144":{},"159":{},"167":{},"168":{},"169":{},"170":{},"171":{},"173":{},"174":{},"177":{},"178":{},"187":{},"193":{},"194":{},"195":{},"198":{},"202":{},"203":{},"204":{},"205":{},"206":{},"213":{},"215":{},"216":{},"217":{},"220":{},"222":{},"223":{},"224":{},"225":{},"238":{},"243":{},"246":{},"249":{},"250":{},"253":{},"257":{},"258":{},"259":{},"260":{},"263":{},"265":{},"266":{},"269":{},"270":{},"271":{},"274":{},"275":{},"293":{},"294":{},"295":{},"296":{},"297":{},"298":{},"301":{},"304":{},"313":{},"314":{},"317":{},"321":{},"322":{},"327":{},"328":{},"329":{},"337":{},"338":{},"339":{},"341":{},"343":{},"344":{},"346":{},"347":{},"348":{}},"component":{}}],["mib",{"_index":1825,"title":{},"name":{},"text":{"37":{},"140":{},"189":{},"303":{}},"component":{}}],["micronaut",{"_index":3145,"title":{},"name":{},"text":{"245":{},"273":{}},"component":{}}],["microprofil",{"_index":3111,"title":{},"name":{},"text":{"243":{},"271":{}},"component":{}}],["microsoft",{"_index":786,"title":{},"name":{},"text":{"5":{},"88":{},"218":{},"261":{}},"component":{}}],["microsteam’",{"_index":68,"title":{},"name":{},"text":{"1":{},"84":{},"213":{},"344":{}},"component":{}}],["microstream",{"_index":7,"title":{"46-1":{},"47-1":{},"47-2":{},"47-4":{},"48-1":{},"48-2":{},"49-1":{},"49-2":{},"49-3":{},"49-4":{},"49-5":{},"49-6":{},"49-7":{},"147-1":{},"148-1":{},"148-2":{},"148-4":{},"149-1":{},"149-2":{},"150-1":{},"150-2":{},"150-3":{},"150-4":{},"150-5":{},"150-6":{},"150-7":{},"209-1":{},"210-1":{},"210-2":{},"210-4":{},"211-1":{},"211-2":{},"212-1":{},"212-2":{},"212-3":{},"212-4":{},"212-5":{},"212-6":{},"212-7":{},"332-1":{},"333-1":{},"333-2":{},"333-4":{},"334-1":{},"334-2":{},"335-1":{},"335-2":{},"335-3":{},"335-4":{},"335-5":{},"335-6":{},"335-7":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"17":{},"18":{},"19":{},"20":{},"23":{},"24":{},"28":{},"29":{},"30":{},"31":{},"32":{},"35":{},"36":{},"38":{},"39":{},"42":{},"43":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"54":{},"56":{},"57":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"94":{},"95":{},"96":{},"97":{},"98":{},"100":{},"101":{},"102":{},"103":{},"106":{},"107":{},"109":{},"110":{},"112":{},"113":{},"115":{},"116":{},"117":{},"118":{},"119":{},"120":{},"121":{},"122":{},"123":{},"126":{},"127":{},"131":{},"132":{},"133":{},"134":{},"135":{},"136":{},"138":{},"139":{},"141":{},"142":{},"143":{},"145":{},"146":{},"147":{},"148":{},"149":{},"150":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{},"165":{},"166":{},"169":{},"170":{},"171":{},"173":{},"174":{},"175":{},"176":{},"177":{},"178":{},"179":{},"180":{},"182":{},"183":{},"184":{},"185":{},"187":{},"188":{},"190":{},"191":{},"194":{},"195":{},"197":{},"199":{},"200":{},"202":{},"203":{},"204":{},"205":{},"206":{},"207":{},"208":{},"209":{},"210":{},"211":{},"212":{},"213":{},"214":{},"215":{},"216":{},"217":{},"218":{},"219":{},"220":{},"221":{},"224":{},"225":{},"226":{},"227":{},"228":{},"229":{},"230":{},"231":{},"232":{},"233":{},"234":{},"235":{},"236":{},"237":{},"238":{},"240":{},"241":{},"242":{},"243":{},"244":{},"245":{},"246":{},"247":{},"250":{},"251":{},"255":{},"256":{},"257":{},"258":{},"259":{},"260":{},"261":{},"262":{},"263":{},"265":{},"266":{},"267":{},"268":{},"269":{},"270":{},"271":{},"272":{},"273":{},"274":{},"275":{},"276":{},"278":{},"279":{},"280":{},"281":{},"282":{},"283":{},"284":{},"285":{},"286":{},"287":{},"288":{},"289":{},"290":{},"291":{},"292":{},"293":{},"294":{},"295":{},"296":{},"297":{},"298":{},"299":{},"301":{},"302":{},"304":{},"305":{},"306":{},"307":{},"308":{},"310":{},"311":{},"314":{},"315":{},"319":{},"320":{},"321":{},"322":{},"323":{},"324":{},"325":{},"328":{},"329":{},"331":{},"332":{},"333":{},"335":{},"336":{},"339":{},"340":{},"341":{},"342":{},"344":{},"345":{},"346":{},"347":{},"348":{},"350":{},"351":{},"352":{}},"component":{}}],["microstream'",{"_index":1958,"title":{},"name":{},"text":{"43":{},"107":{},"195":{},"329":{}},"component":{}}],["microstream.cache.configuration.path",{"_index":1267,"title":{},"name":{},"text":{"15":{},"98":{},"238":{},"348":{}},"component":{}}],["microstream.entity.hashequal",{"_index":1347,"title":{},"name":{},"text":{"20":{},"123":{},"247":{},"311":{}},"component":{}}],["microstream.on",{"_index":823,"title":{},"name":{},"text":{"6":{},"89":{},"219":{},"262":{}},"component":{}}],["microstream.storage.configuration.path",{"_index":1795,"title":{},"name":{},"text":{"35":{},"138":{},"187":{},"301":{}},"component":{}}],["microstream.wrapper.typ",{"_index":1599,"title":{},"name":{},"text":{"28":{},"131":{},"256":{},"320":{}},"component":{}}],["microstream_storag",{"_index":3182,"title":{},"name":{},"text":{"246":{},"275":{}},"component":{}}],["microstreamconfigurationproperti",{"_index":3156,"title":{},"name":{},"text":{"246":{},"275":{}},"component":{}}],["microstream’",{"_index":133,"title":{},"name":{},"text":{"2":{},"3":{},"5":{},"15":{},"17":{},"30":{},"85":{},"86":{},"88":{},"98":{},"100":{},"133":{},"214":{},"216":{},"218":{},"220":{},"238":{},"240":{},"258":{},"259":{},"261":{},"322":{},"345":{},"347":{},"348":{},"350":{}},"component":{}}],["middlewar",{"_index":2504,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["migrat",{"_index":177,"title":{"3-8":{},"3-17":{},"3-21":{},"3-27":{},"3-31":{},"3-35":{},"49-6":{},"86-6":{},"86-14":{},"86-22":{},"86-26":{},"86-32":{},"86-36":{},"86-40":{},"150-6":{},"212-6":{},"216-7":{},"216-13":{},"216-21":{},"216-29":{},"216-33":{},"216-39":{},"216-43":{},"216-47":{},"259-9":{},"259-16":{},"259-22":{},"259-30":{},"259-38":{},"259-42":{},"259-48":{},"259-52":{},"259-56":{},"335-6":{}},"name":{},"text":{"3":{},"86":{},"216":{},"259":{},"274":{},"275":{}},"component":{}}],["mike",{"_index":1375,"title":{},"name":{},"text":{"21":{},"124":{},"248":{},"312":{}},"component":{}}],["milli",{"_index":2659,"title":{},"name":{},"text":{"75":{},"157":{},"231":{},"284":{}},"component":{}}],["million",{"_index":1845,"title":{},"name":{},"text":{"37":{},"43":{},"67":{},"107":{},"140":{},"169":{},"189":{},"195":{},"224":{},"303":{},"329":{},"339":{},"340":{}},"component":{}}],["millisecond",{"_index":1740,"title":{},"name":{},"text":{"34":{},"36":{},"37":{},"66":{},"68":{},"74":{},"77":{},"137":{},"139":{},"140":{},"156":{},"159":{},"168":{},"170":{},"186":{},"188":{},"189":{},"223":{},"225":{},"300":{},"302":{},"303":{},"338":{},"341":{}},"component":{}}],["min",{"_index":1748,"title":{},"name":{},"text":{"34":{},"137":{},"186":{},"300":{}},"component":{}}],["mind",{"_index":2391,"title":{},"name":{},"text":{"60":{},"65":{},"117":{},"167":{},"204":{},"222":{},"295":{},"343":{}},"component":{}}],["minim",{"_index":3149,"title":{},"name":{},"text":{"246":{},"274":{},"275":{}},"component":{}}],["minimum",{"_index":440,"title":{"37-5":{},"37-7":{},"140-5":{},"140-7":{},"189-5":{},"189-7":{},"303-5":{},"303-7":{}},"name":{},"text":{"3":{},"10":{},"11":{},"34":{},"37":{},"47":{},"51":{},"86":{},"93":{},"94":{},"137":{},"140":{},"144":{},"148":{},"174":{},"175":{},"186":{},"189":{},"198":{},"210":{},"216":{},"259":{},"266":{},"267":{},"300":{},"303":{},"333":{},"337":{}},"component":{}}],["minor",{"_index":638,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["minut",{"_index":57,"title":{},"name":{},"text":{"1":{},"66":{},"84":{},"168":{},"213":{},"223":{},"240":{},"338":{},"344":{},"350":{}},"component":{}}],["miscellan",{"_index":2020,"title":{"49":{},"150":{},"212":{},"335":{}},"name":{"49":{},"150":{},"212":{},"335":{}},"text":{},"component":{}}],["mishap",{"_index":2113,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["mismatch",{"_index":2000,"title":{},"name":{},"text":{"46":{},"147":{},"209":{},"246":{},"275":{},"332":{}},"component":{}}],["miss",{"_index":624,"title":{},"name":{},"text":{"3":{},"16":{},"50":{},"86":{},"99":{},"143":{},"197":{},"216":{},"239":{},"259":{},"336":{},"349":{}},"component":{}}],["missing_cache_strategi",{"_index":1302,"title":{},"name":{},"text":{"17":{},"18":{},"100":{},"121":{},"240":{},"241":{},"350":{},"351":{}},"component":{}}],["mistak",{"_index":2080,"title":{},"name":{},"text":{"50":{},"51":{},"143":{},"144":{},"197":{},"198":{},"336":{},"337":{}},"component":{}}],["mistaken",{"_index":2207,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["mix",{"_index":2109,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["mode",{"_index":749,"title":{},"name":{},"text":{"4":{},"16":{},"18":{},"61":{},"87":{},"99":{},"116":{},"118":{},"121":{},"203":{},"205":{},"217":{},"239":{},"241":{},"259":{},"260":{},"294":{},"296":{},"304":{},"349":{},"351":{}},"component":{}}],["model",{"_index":1992,"title":{"46":{},"147":{},"209":{},"332":{},"46-1":{},"59-2":{},"115-2":{},"147-1":{},"202-2":{},"209-1":{},"293-2":{},"332-1":{}},"name":{"46":{},"147":{},"209":{},"332":{}},"text":{"45":{},"46":{},"50":{},"52":{},"143":{},"145":{},"146":{},"147":{},"197":{},"199":{},"208":{},"209":{},"292":{},"331":{},"332":{},"336":{}},"component":{}}],["modern",{"_index":622,"title":{},"name":{},"text":{"3":{},"12":{},"49":{},"86":{},"95":{},"150":{},"176":{},"212":{},"216":{},"259":{},"268":{},"335":{}},"component":{}}],["modif",{"_index":1276,"title":{},"name":{},"text":{"16":{},"41":{},"99":{},"105":{},"193":{},"239":{},"327":{},"349":{}},"component":{}}],["modifi",{"_index":962,"title":{"60-3":{},"117-3":{},"204-3":{},"295-3":{}},"name":{},"text":{"9":{},"11":{},"59":{},"60":{},"61":{},"63":{},"92":{},"94":{},"97":{},"115":{},"116":{},"117":{},"118":{},"120":{},"173":{},"175":{},"178":{},"202":{},"203":{},"204":{},"205":{},"207":{},"265":{},"267":{},"270":{},"293":{},"294":{},"295":{},"296":{},"299":{}},"component":{}}],["modul",{"_index":200,"title":{"4-2":{},"48-1":{},"87-2":{},"149-1":{},"211-1":{},"217-2":{},"260-2":{},"334-1":{}},"name":{},"text":{"3":{},"4":{},"18":{},"19":{},"20":{},"28":{},"29":{},"30":{},"32":{},"48":{},"54":{},"57":{},"86":{},"87":{},"110":{},"113":{},"121":{},"122":{},"123":{},"131":{},"132":{},"133":{},"135":{},"136":{},"149":{},"180":{},"184":{},"185":{},"200":{},"211":{},"215":{},"216":{},"217":{},"220":{},"241":{},"242":{},"246":{},"247":{},"256":{},"257":{},"258":{},"259":{},"260":{},"275":{},"276":{},"308":{},"311":{},"320":{},"321":{},"322":{},"324":{},"325":{},"334":{},"346":{},"347":{},"351":{},"352":{}},"component":{}}],["module1classload",{"_index":1903,"title":{},"name":{},"text":{"40":{},"104":{},"192":{},"326":{}},"component":{}}],["module2classload",{"_index":1905,"title":{},"name":{},"text":{"40":{},"104":{},"192":{},"326":{}},"component":{}}],["moment",{"_index":59,"title":{},"name":{},"text":{"1":{},"84":{},"213":{},"344":{}},"component":{}}],["mongo",{"_index":2642,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["mongocli",{"_index":2589,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["mongoclient.getdatabase(\"db",{"_index":2592,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["mongoclients.cr",{"_index":2590,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["mongocredenti",{"_index":2625,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["mongodatabas",{"_index":2591,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["mongodb",{"_index":285,"title":{"74":{},"156":{}},"name":{"74":{},"156":{}},"text":{"3":{},"4":{},"74":{},"86":{},"87":{},"156":{},"216":{},"217":{},"259":{},"260":{}},"component":{}}],["mongodb:one.microstream.enterprise.afs.mongodb.typ",{"_index":342,"title":{},"name":{},"text":{"3":{}},"component":{}}],["mongodbconnector.caching(databas",{"_index":2593,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["monitor",{"_index":2300,"title":{},"name":{},"text":{"54":{},"110":{},"180":{},"308":{}},"component":{}}],["more",{"_index":127,"title":{"47-2":{},"148-2":{},"210-2":{},"333-2":{}},"name":{},"text":{"2":{},"3":{},"7":{},"10":{},"14":{},"19":{},"29":{},"32":{},"35":{},"37":{},"39":{},"44":{},"46":{},"49":{},"50":{},"51":{},"54":{},"65":{},"74":{},"77":{},"85":{},"86":{},"90":{},"93":{},"97":{},"101":{},"103":{},"108":{},"110":{},"116":{},"122":{},"132":{},"135":{},"138":{},"140":{},"142":{},"143":{},"144":{},"147":{},"150":{},"156":{},"159":{},"167":{},"171":{},"174":{},"178":{},"180":{},"184":{},"187":{},"189":{},"191":{},"196":{},"197":{},"198":{},"203":{},"209":{},"212":{},"214":{},"216":{},"222":{},"240":{},"242":{},"244":{},"257":{},"259":{},"263":{},"266":{},"270":{},"272":{},"294":{},"301":{},"303":{},"304":{},"306":{},"308":{},"321":{},"324":{},"330":{},"332":{},"335":{},"336":{},"337":{},"340":{},"343":{},"345":{},"350":{},"352":{}},"component":{}}],["mostli",{"_index":1257,"title":{},"name":{},"text":{"15":{},"35":{},"98":{},"138":{},"187":{},"238":{},"301":{},"348":{}},"component":{}}],["motiv",{"_index":80,"title":{"2-1":{},"85-1":{},"214-1":{},"345-1":{}},"name":{},"text":{},"component":{}}],["mount",{"_index":2371,"title":{},"name":{},"text":{"58":{},"114":{},"201":{},"277":{}},"component":{}}],["move",{"_index":606,"title":{},"name":{},"text":{"3":{},"37":{},"38":{},"50":{},"67":{},"86":{},"140":{},"141":{},"143":{},"169":{},"189":{},"190":{},"197":{},"216":{},"224":{},"259":{},"303":{},"305":{},"336":{},"339":{}},"component":{}}],["mp",{"_index":3220,"title":{},"name":{},"text":{"259":{}},"component":{}}],["ms",{"_index":10,"title":{},"name":{},"text":{"1":{},"4":{},"9":{},"18":{},"19":{},"20":{},"28":{},"32":{},"35":{},"49":{},"53":{},"56":{},"57":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"87":{},"92":{},"103":{},"109":{},"112":{},"113":{},"121":{},"122":{},"123":{},"131":{},"135":{},"138":{},"150":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{},"165":{},"173":{},"179":{},"182":{},"184":{},"187":{},"200":{},"212":{},"213":{},"215":{},"217":{},"220":{},"226":{},"227":{},"228":{},"229":{},"230":{},"231":{},"232":{},"233":{},"234":{},"235":{},"236":{},"237":{},"241":{},"242":{},"243":{},"246":{},"247":{},"256":{},"260":{},"265":{},"271":{},"274":{},"275":{},"276":{},"278":{},"279":{},"280":{},"281":{},"282":{},"283":{},"284":{},"285":{},"286":{},"287":{},"288":{},"289":{},"290":{},"291":{},"301":{},"307":{},"310":{},"311":{},"320":{},"324":{},"335":{},"344":{},"346":{},"347":{},"351":{},"352":{}},"component":{}}],["msg%n",{"_index":3199,"title":{},"name":{},"text":{"255":{},"319":{}},"component":{}}],["much",{"_index":849,"title":{},"name":{},"text":{"7":{},"10":{},"11":{},"12":{},"19":{},"50":{},"90":{},"93":{},"94":{},"95":{},"116":{},"122":{},"143":{},"171":{},"174":{},"175":{},"176":{},"197":{},"203":{},"242":{},"263":{},"266":{},"267":{},"268":{},"294":{},"336":{},"352":{}},"component":{}}],["multi",{"_index":1075,"title":{"49-2":{},"150-2":{},"212-2":{},"335-2":{}},"name":{},"text":{"10":{},"33":{},"48":{},"93":{},"97":{},"116":{},"136":{},"149":{},"178":{},"185":{},"203":{},"211":{},"270":{},"294":{},"325":{}},"component":{}}],["multipl",{"_index":39,"title":{"25":{},"128":{},"252":{},"316":{},"7-2":{},"47-4":{},"90-2":{},"148-4":{},"171-2":{},"210-4":{},"263-2":{},"275-4":{},"333-4":{}},"name":{"25":{},"128":{},"252":{},"316":{}},"text":{"1":{},"3":{},"26":{},"27":{},"33":{},"47":{},"49":{},"62":{},"77":{},"84":{},"86":{},"119":{},"129":{},"130":{},"136":{},"148":{},"150":{},"159":{},"185":{},"206":{},"210":{},"212":{},"213":{},"216":{},"243":{},"246":{},"253":{},"254":{},"259":{},"271":{},"274":{},"275":{},"298":{},"317":{},"318":{},"325":{},"333":{},"335":{},"344":{}},"component":{}}],["multithread",{"_index":2933,"title":{},"name":{},"text":{"116":{}},"component":{}}],["multivers",{"_index":3256,"title":{},"name":{},"text":{"274":{}},"component":{}}],["mutabl",{"_index":1587,"title":{"97-2":{},"97-3":{},"178-2":{},"178-3":{},"270-2":{},"270-3":{}},"name":{},"text":{"27":{},"33":{},"116":{},"130":{},"136":{},"185":{},"203":{},"254":{},"294":{},"318":{},"325":{}},"component":{}}],["mutableconfigur",{"_index":18,"title":{},"name":{},"text":{"1":{},"19":{},"84":{},"122":{},"213":{},"242":{},"344":{},"352":{}},"component":{}}],["mutat",{"_index":1281,"title":{},"name":{},"text":{"16":{},"99":{},"239":{},"349":{}},"component":{}}],["mvc",{"_index":2932,"title":{},"name":{},"text":{"116":{},"203":{},"294":{}},"component":{}}],["mvn",{"_index":2957,"title":{},"name":{},"text":{"179":{},"274":{},"307":{}},"component":{}}],["myapplic",{"_index":1325,"title":{},"name":{},"text":{"19":{},"122":{},"242":{},"352":{}},"component":{}}],["myapplicationroot",{"_index":1236,"title":{},"name":{},"text":{"14":{},"97":{},"178":{},"270":{}},"component":{}}],["mybusinessapp",{"_index":2473,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["myclass.class",{"_index":1928,"title":{},"name":{},"text":{"42":{},"106":{},"194":{},"328":{}},"component":{}}],["mycollection.getsubset",{"_index":2408,"title":{},"name":{},"text":{"62":{},"119":{},"206":{},"298":{}},"component":{}}],["mydata",{"_index":2386,"title":{},"name":{},"text":{"60":{},"117":{},"204":{},"295":{}},"component":{}}],["mydata(\"alic",{"_index":2388,"title":{},"name":{},"text":{"60":{},"117":{},"204":{},"295":{}},"component":{}}],["mydatasourceprovid",{"_index":2759,"title":{},"name":{},"text":{"79":{},"80":{},"81":{},"82":{},"83":{},"161":{},"162":{},"163":{},"164":{},"165":{},"234":{},"235":{},"236":{},"237":{},"287":{},"288":{},"289":{},"290":{},"291":{}},"component":{}}],["mydatasourceprovider.java",{"_index":2756,"title":{},"name":{},"text":{"79":{},"80":{},"81":{},"82":{},"83":{},"161":{},"162":{},"163":{},"164":{},"165":{},"234":{},"235":{},"236":{},"237":{},"287":{},"288":{},"289":{},"290":{},"291":{}},"component":{}}],["myentiti",{"_index":1987,"title":{},"name":{},"text":{"44":{},"108":{},"196":{},"330":{}},"component":{}}],["myinterfac",{"_index":1595,"title":{},"name":{},"text":{"28":{},"131":{},"256":{},"320":{}},"component":{}}],["myobject",{"_index":2385,"title":{},"name":{},"text":{"60":{},"117":{},"204":{},"295":{}},"component":{}}],["myriad",{"_index":131,"title":{},"name":{},"text":{"2":{},"24":{},"85":{},"127":{},"214":{},"251":{},"315":{},"345":{}},"component":{}}],["myroot",{"_index":1767,"title":{},"name":{},"text":{"35":{},"52":{},"138":{},"145":{},"187":{},"199":{},"292":{},"301":{}},"component":{}}],["mysql",{"_index":2360,"title":{"80":{},"162":{}},"name":{"80":{},"162":{}},"text":{"57":{},"80":{},"113":{},"162":{}},"component":{}}],["mysqldatasourc",{"_index":2362,"title":{},"name":{},"text":{"57":{},"80":{},"113":{},"162":{}},"component":{}}],["n",{"_index":3366,"title":{},"name":{},"text":{"340":{}},"component":{}}],["name",{"_index":43,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"11":{},"15":{},"16":{},"18":{},"22":{},"28":{},"35":{},"37":{},"38":{},"43":{},"44":{},"50":{},"51":{},"55":{},"56":{},"65":{},"66":{},"67":{},"71":{},"74":{},"76":{},"77":{},"84":{},"85":{},"86":{},"87":{},"94":{},"98":{},"99":{},"107":{},"108":{},"111":{},"112":{},"121":{},"125":{},"131":{},"138":{},"140":{},"141":{},"143":{},"144":{},"153":{},"156":{},"158":{},"159":{},"167":{},"168":{},"169":{},"175":{},"181":{},"182":{},"187":{},"189":{},"190":{},"195":{},"196":{},"197":{},"198":{},"213":{},"214":{},"215":{},"216":{},"217":{},"222":{},"223":{},"224":{},"228":{},"232":{},"238":{},"239":{},"240":{},"241":{},"243":{},"249":{},"256":{},"259":{},"260":{},"267":{},"271":{},"275":{},"280":{},"285":{},"301":{},"303":{},"305":{},"309":{},"310":{},"313":{},"320":{},"329":{},"330":{},"336":{},"337":{},"338":{},"339":{},"340":{},"343":{},"344":{},"345":{},"346":{},"348":{},"349":{},"350":{},"351":{}},"component":{}}],["name(fin",{"_index":1447,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["name(str",{"_index":1446,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["name=kvstor",{"_index":2680,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["name=mi",{"_index":2671,"title":{},"name":{},"text":{"76":{},"158":{},"232":{},"285":{}},"component":{}}],["name=thenam",{"_index":3138,"title":{},"name":{},"text":{"243":{},"271":{}},"component":{}}],["name]/dictionari",{"_index":2318,"title":{},"name":{},"text":{"55":{},"111":{},"181":{},"309":{}},"component":{}}],["name]/maintenance/filesstatist",{"_index":2319,"title":{},"name":{},"text":{"55":{},"111":{},"181":{},"309":{}},"component":{}}],["name]/object/:objectid",{"_index":2304,"title":{},"name":{},"text":{"55":{},"111":{},"181":{},"309":{}},"component":{}}],["name]/root",{"_index":2302,"title":{},"name":{},"text":{"55":{},"111":{},"181":{},"309":{}},"component":{}}],["named.java",{"_index":1384,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["namedcach",{"_index":2667,"title":{},"name":{},"text":{"76":{},"158":{},"232":{},"285":{}},"component":{}}],["namespac",{"_index":3109,"title":{},"name":{},"text":{"243":{},"271":{}},"component":{}}],["nanosecond",{"_index":1741,"title":{},"name":{},"text":{"34":{},"37":{},"137":{},"140":{},"186":{},"189":{},"300":{},"303":{}},"component":{}}],["nanotimecontext",{"_index":1576,"title":{},"name":{},"text":{"27":{},"130":{},"254":{},"318":{}},"component":{}}],["nasti",{"_index":2495,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["nativ",{"_index":1150,"title":{},"name":{},"text":{"12":{},"47":{},"95":{},"148":{},"176":{},"210":{},"268":{},"333":{}},"component":{}}],["navig",{"_index":2968,"title":{},"name":{},"text":{"180":{},"308":{}},"component":{}}],["nearli",{"_index":1476,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["necessari",{"_index":479,"title":{},"name":{},"text":{"3":{},"7":{},"9":{},"11":{},"36":{},"40":{},"48":{},"49":{},"50":{},"51":{},"59":{},"74":{},"86":{},"90":{},"92":{},"94":{},"104":{},"115":{},"139":{},"143":{},"144":{},"149":{},"150":{},"156":{},"171":{},"173":{},"175":{},"188":{},"192":{},"197":{},"198":{},"202":{},"211":{},"212":{},"216":{},"259":{},"263":{},"265":{},"293":{},"302":{},"326":{},"334":{},"335":{},"336":{},"337":{}},"component":{}}],["need",{"_index":744,"title":{},"name":{},"text":{"4":{},"5":{},"7":{},"8":{},"10":{},"12":{},"13":{},"14":{},"23":{},"26":{},"27":{},"29":{},"36":{},"43":{},"44":{},"46":{},"49":{},"50":{},"51":{},"52":{},"57":{},"60":{},"66":{},"67":{},"77":{},"87":{},"88":{},"90":{},"91":{},"93":{},"95":{},"96":{},"97":{},"107":{},"108":{},"113":{},"116":{},"117":{},"126":{},"129":{},"130":{},"132":{},"139":{},"143":{},"144":{},"145":{},"147":{},"150":{},"159":{},"168":{},"169":{},"171":{},"172":{},"174":{},"176":{},"177":{},"178":{},"182":{},"188":{},"195":{},"196":{},"197":{},"198":{},"199":{},"200":{},"203":{},"204":{},"209":{},"212":{},"215":{},"217":{},"218":{},"223":{},"224":{},"243":{},"246":{},"250":{},"253":{},"254":{},"257":{},"260":{},"261":{},"263":{},"264":{},"266":{},"268":{},"269":{},"270":{},"271":{},"274":{},"275":{},"276":{},"292":{},"294":{},"295":{},"302":{},"304":{},"310":{},"314":{},"317":{},"318":{},"321":{},"329":{},"330":{},"332":{},"335":{},"336":{},"337":{},"338":{},"339":{},"340":{},"346":{}},"component":{}}],["neg",{"_index":1855,"title":{},"name":{},"text":{"37":{},"50":{},"140":{},"143":{},"189":{},"197":{},"303":{},"336":{},"340":{}},"component":{}}],["negoti",{"_index":2644,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["nest",{"_index":1728,"title":{},"name":{},"text":{"33":{},"136":{},"185":{},"325":{}},"component":{}}],["nestabl",{"_index":1462,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["network",{"_index":737,"title":{},"name":{},"text":{"4":{},"74":{},"77":{},"87":{},"156":{},"159":{},"215":{},"217":{},"260":{},"346":{}},"component":{}}],["never",{"_index":831,"title":{},"name":{},"text":{"7":{},"10":{},"23":{},"33":{},"50":{},"51":{},"90":{},"93":{},"126":{},"136":{},"143":{},"144":{},"171":{},"174":{},"185":{},"197":{},"198":{},"250":{},"263":{},"266":{},"304":{},"314":{},"325":{},"336":{},"337":{},"347":{}},"component":{}}],["nevertheless",{"_index":1096,"title":{},"name":{},"text":{"11":{},"50":{},"66":{},"94":{},"143":{},"168":{},"175":{},"197":{},"223":{},"267":{},"336":{},"338":{}},"component":{}}],["new",{"_index":20,"title":{"6-1":{},"60-2":{},"89-1":{},"117-2":{},"204-2":{},"219-1":{},"262-1":{},"295-2":{}},"name":{},"text":{"1":{},"3":{},"9":{},"10":{},"11":{},"12":{},"14":{},"19":{},"21":{},"22":{},"23":{},"24":{},"25":{},"27":{},"29":{},"33":{},"37":{},"40":{},"41":{},"43":{},"50":{},"51":{},"57":{},"59":{},"60":{},"67":{},"72":{},"73":{},"77":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"86":{},"92":{},"93":{},"94":{},"95":{},"97":{},"104":{},"105":{},"107":{},"113":{},"115":{},"116":{},"117":{},"122":{},"124":{},"125":{},"126":{},"127":{},"128":{},"130":{},"132":{},"136":{},"140":{},"143":{},"144":{},"154":{},"155":{},"159":{},"161":{},"162":{},"163":{},"164":{},"165":{},"169":{},"173":{},"174":{},"175":{},"176":{},"178":{},"185":{},"189":{},"192":{},"193":{},"195":{},"197":{},"198":{},"202":{},"203":{},"204":{},"213":{},"215":{},"216":{},"224":{},"229":{},"230":{},"234":{},"235":{},"236":{},"237":{},"240":{},"242":{},"248":{},"249":{},"250":{},"251":{},"252":{},"254":{},"257":{},"259":{},"265":{},"266":{},"268":{},"270":{},"282":{},"283":{},"287":{},"288":{},"289":{},"290":{},"291":{},"293":{},"294":{},"295":{},"297":{},"303":{},"304":{},"312":{},"313":{},"314":{},"315":{},"316":{},"318":{},"321":{},"325":{},"326":{},"327":{},"329":{},"336":{},"337":{},"339":{},"340":{},"344":{},"346":{},"347":{},"350":{},"352":{}},"component":{}}],["new(animal).partner(partner).upd",{"_index":1431,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["new(animal).species(species).upd",{"_index":1429,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["new(fin",{"_index":1411,"title":{},"name":{},"text":{"22":{},"23":{},"125":{},"126":{},"249":{},"250":{},"313":{},"314":{}},"component":{}}],["new(person).appendto(varstring.new()).tostr",{"_index":1523,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["new(person).firstname(firstname).upd",{"_index":1496,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["new(person).lastname(lastname).upd",{"_index":1498,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["new(pet).name(name).upd",{"_index":1455,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["new(pet).partner(partner).upd",{"_index":1453,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["new(pet).species(species).upd",{"_index":1452,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["newcontact",{"_index":2133,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["newcontact.java",{"_index":2132,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["newli",{"_index":381,"title":{},"name":{},"text":{"3":{},"10":{},"35":{},"50":{},"60":{},"62":{},"86":{},"93":{},"117":{},"119":{},"138":{},"143":{},"174":{},"187":{},"197":{},"204":{},"206":{},"216":{},"246":{},"259":{},"266":{},"275":{},"295":{},"298":{},"301":{},"336":{}},"component":{}}],["next",{"_index":463,"title":{},"name":{},"text":{"3":{},"7":{},"9":{},"10":{},"77":{},"86":{},"90":{},"92":{},"93":{},"159":{},"171":{},"173":{},"174":{},"216":{},"259":{},"263":{},"265":{},"266":{}},"component":{}}],["ngdbc",{"_index":3314,"title":{},"name":{},"text":{"287":{}},"component":{}}],["nice",{"_index":1045,"title":{},"name":{},"text":{"10":{},"29":{},"67":{},"93":{},"132":{},"169":{},"174":{},"224":{},"257":{},"266":{},"321":{},"339":{}},"component":{}}],["nio",{"_index":260,"title":{},"name":{},"text":{"3":{},"4":{},"57":{},"58":{},"86":{},"87":{},"113":{},"114":{},"200":{},"201":{},"216":{},"217":{},"259":{},"260":{},"276":{},"277":{}},"component":{}}],["nio:one.microstream.afs.nio.typ",{"_index":316,"title":{},"name":{},"text":{"3":{}},"component":{}}],["niofilesystem",{"_index":1097,"title":{},"name":{},"text":{"11":{},"35":{},"38":{},"39":{},"42":{},"57":{},"58":{},"64":{},"94":{},"106":{},"113":{},"114":{},"138":{},"141":{},"142":{},"166":{},"175":{},"187":{},"190":{},"191":{},"194":{},"200":{},"201":{},"221":{},"267":{},"276":{},"277":{},"301":{},"305":{},"306":{},"328":{},"342":{}},"component":{}}],["niofilesystem.new",{"_index":1099,"title":{},"name":{},"text":{"11":{},"35":{},"38":{},"39":{},"42":{},"57":{},"58":{},"64":{},"94":{},"106":{},"113":{},"114":{},"138":{},"141":{},"142":{},"166":{},"175":{},"187":{},"190":{},"191":{},"194":{},"200":{},"201":{},"221":{},"267":{},"276":{},"277":{},"301":{},"305":{},"306":{},"328":{},"342":{}},"component":{}}],["niofilesystem.new().ensuredirectorypath(\"ful",{"_index":2436,"title":{},"name":{},"text":{"65":{},"167":{},"222":{},"343":{}},"component":{}}],["nobodi",{"_index":2090,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["node",{"_index":2608,"title":{},"name":{},"text":{"74":{},"77":{},"156":{},"159":{}},"component":{}}],["non",{"_index":496,"title":{},"name":{},"text":{"3":{},"4":{},"34":{},"37":{},"50":{},"52":{},"57":{},"67":{},"86":{},"87":{},"113":{},"137":{},"140":{},"143":{},"145":{},"169":{},"186":{},"189":{},"197":{},"199":{},"200":{},"215":{},"216":{},"217":{},"224":{},"259":{},"260":{},"276":{},"292":{},"300":{},"303":{},"336":{},"339":{},"346":{}},"component":{}}],["none",{"_index":1368,"title":{},"name":{},"text":{"21":{},"124":{},"248":{},"281":{},"312":{}},"component":{}}],["none_requir",{"_index":2691,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["normal",{"_index":2164,"title":{},"name":{},"text":{"50":{},"62":{},"119":{},"143":{},"197":{},"206":{},"298":{},"304":{},"336":{}},"component":{}}],["nosql",{"_index":290,"title":{"77":{},"159":{}},"name":{"77":{},"159":{}},"text":{"3":{},"4":{},"77":{},"86":{},"87":{},"159":{},"216":{},"217":{},"259":{},"260":{}},"component":{}}],["notat",{"_index":384,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["note",{"_index":1718,"title":{"67-3":{},"169-3":{},"224-3":{},"339-3":{}},"name":{},"text":{"33":{},"41":{},"44":{},"50":{},"79":{},"80":{},"81":{},"82":{},"83":{},"105":{},"108":{},"136":{},"143":{},"161":{},"162":{},"163":{},"164":{},"165":{},"185":{},"193":{},"196":{},"197":{},"234":{},"235":{},"236":{},"237":{},"246":{},"275":{},"287":{},"288":{},"289":{},"290":{},"291":{},"325":{},"327":{},"330":{},"336":{},"340":{}},"component":{}}],["noteworthi",{"_index":752,"title":{},"name":{},"text":{"4":{},"87":{},"217":{},"260":{}},"component":{}}],["noth",{"_index":902,"title":{},"name":{},"text":{"7":{},"14":{},"37":{},"44":{},"49":{},"50":{},"51":{},"62":{},"66":{},"90":{},"97":{},"108":{},"119":{},"140":{},"143":{},"144":{},"150":{},"168":{},"171":{},"178":{},"189":{},"196":{},"197":{},"198":{},"206":{},"212":{},"223":{},"263":{},"270":{},"298":{},"303":{},"330":{},"335":{},"336":{},"337":{},"338":{}},"component":{}}],["notic",{"_index":2173,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["notif",{"_index":3337,"title":{},"name":{},"text":{"304":{}},"component":{}}],["now",{"_index":146,"title":{},"name":{},"text":{"2":{},"3":{},"14":{},"24":{},"27":{},"43":{},"50":{},"51":{},"53":{},"56":{},"67":{},"85":{},"86":{},"97":{},"107":{},"109":{},"112":{},"127":{},"130":{},"143":{},"144":{},"169":{},"178":{},"179":{},"182":{},"195":{},"197":{},"198":{},"214":{},"216":{},"224":{},"251":{},"254":{},"259":{},"270":{},"275":{},"307":{},"310":{},"315":{},"318":{},"329":{},"336":{},"337":{},"339":{},"345":{}},"component":{}}],["null",{"_index":1137,"title":{"68":{},"170":{},"225":{},"341":{},"68-1":{},"170-1":{},"225-1":{},"341-1":{}},"name":{"68":{},"170":{},"225":{},"341":{}},"text":{"11":{},"50":{},"52":{},"55":{},"56":{},"67":{},"68":{},"77":{},"94":{},"111":{},"112":{},"143":{},"145":{},"159":{},"169":{},"170":{},"175":{},"181":{},"182":{},"197":{},"199":{},"215":{},"216":{},"224":{},"225":{},"259":{},"275":{},"292":{},"309":{},"310":{},"336":{},"339":{},"341":{},"346":{}},"component":{}}],["nullpointerexcept",{"_index":643,"title":{},"name":{},"text":{"3":{},"67":{},"86":{},"169":{},"216":{},"224":{},"259":{},"339":{}},"component":{}}],["number",{"_index":909,"title":{},"name":{},"text":{"7":{},"14":{},"23":{},"27":{},"33":{},"37":{},"39":{},"49":{},"75":{},"77":{},"90":{},"97":{},"126":{},"130":{},"136":{},"140":{},"142":{},"150":{},"157":{},"159":{},"171":{},"178":{},"185":{},"189":{},"191":{},"212":{},"231":{},"250":{},"254":{},"263":{},"270":{},"284":{},"303":{},"306":{},"314":{},"318":{},"325":{},"335":{},"340":{}},"component":{}}],["o.m.spring.microstreamconfigur",{"_index":3177,"title":{},"name":{},"text":{"246":{},"275":{}},"component":{}}],["object",{"_index":573,"title":{"75":{},"157":{},"231":{},"284":{},"46-1":{},"50-7":{},"55-2":{},"59-1":{},"60-2":{},"60-3":{},"111-2":{},"115-1":{},"117-2":{},"117-3":{},"143-7":{},"147-1":{},"181-2":{},"197-7":{},"202-1":{},"204-2":{},"204-3":{},"209-1":{},"243-2":{},"246-3":{},"271-2":{},"274-2":{},"275-3":{},"293-1":{},"295-2":{},"295-3":{},"309-2":{},"332-1":{},"336-7":{}},"name":{"75":{},"157":{},"231":{},"284":{}},"text":{"3":{},"4":{},"8":{},"9":{},"12":{},"13":{},"14":{},"27":{},"29":{},"30":{},"32":{},"33":{},"34":{},"35":{},"43":{},"46":{},"50":{},"52":{},"54":{},"55":{},"56":{},"59":{},"60":{},"61":{},"62":{},"68":{},"75":{},"86":{},"87":{},"91":{},"92":{},"95":{},"96":{},"97":{},"107":{},"110":{},"111":{},"112":{},"115":{},"116":{},"117":{},"118":{},"119":{},"130":{},"132":{},"133":{},"135":{},"136":{},"137":{},"138":{},"143":{},"145":{},"147":{},"157":{},"170":{},"172":{},"173":{},"176":{},"177":{},"178":{},"180":{},"181":{},"182":{},"184":{},"185":{},"186":{},"187":{},"195":{},"197":{},"199":{},"202":{},"203":{},"204":{},"205":{},"206":{},"209":{},"215":{},"216":{},"217":{},"220":{},"225":{},"231":{},"243":{},"246":{},"254":{},"257":{},"258":{},"259":{},"260":{},"264":{},"265":{},"268":{},"269":{},"270":{},"271":{},"274":{},"275":{},"284":{},"292":{},"293":{},"294":{},"295":{},"296":{},"297":{},"298":{},"300":{},"301":{},"308":{},"309":{},"310":{},"318":{},"321":{},"322":{},"324":{},"325":{},"329":{},"332":{},"336":{},"340":{},"341":{},"346":{},"347":{}},"component":{}}],["objectcopi",{"_index":2931,"title":{"116-2":{},"203-2":{},"294-2":{}},"name":{},"text":{"116":{},"203":{},"294":{}},"component":{}}],["objectcopier.copy(custom",{"_index":2947,"title":{},"name":{},"text":{"116":{},"203":{},"294":{}},"component":{}}],["objectcopier.new",{"_index":2944,"title":{},"name":{},"text":{"116":{},"203":{},"294":{}},"component":{}}],["objectid",{"_index":1210,"title":{},"name":{},"text":{"14":{},"55":{},"66":{},"97":{},"111":{},"168":{},"178":{},"181":{},"223":{},"270":{},"309":{},"338":{}},"component":{}}],["objects.hash",{"_index":1513,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["objectstorag",{"_index":288,"title":{},"name":{},"text":{"3":{},"4":{},"75":{},"86":{},"87":{},"157":{},"216":{},"217":{},"231":{},"259":{},"260":{},"284":{}},"component":{}}],["objectstorage:one.microstream.enterprise.afs.oraclecloud.objectstorage.typ",{"_index":344,"title":{},"name":{},"text":{"3":{}},"component":{}}],["objectstoragecli",{"_index":2647,"title":{},"name":{},"text":{"75":{},"157":{},"231":{},"284":{}},"component":{}}],["object’",{"_index":2306,"title":{},"name":{},"text":{"55":{},"60":{},"111":{},"116":{},"117":{},"181":{},"203":{},"204":{},"294":{},"295":{},"309":{}},"component":{}}],["obtain",{"_index":3171,"title":{},"name":{},"text":{"246":{},"275":{}},"component":{}}],["occas",{"_index":1011,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["occasion",{"_index":997,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["occupi",{"_index":982,"title":{},"name":{},"text":{"10":{},"37":{},"93":{},"140":{},"174":{},"189":{},"266":{},"303":{}},"component":{}}],["occur",{"_index":1272,"title":{},"name":{},"text":{"16":{},"50":{},"99":{},"143":{},"197":{},"215":{},"239":{},"336":{},"346":{},"349":{}},"component":{}}],["occurr",{"_index":617,"title":{},"name":{},"text":{"3":{},"50":{},"86":{},"143":{},"197":{},"216":{},"259":{},"336":{}},"component":{}}],["oci/config",{"_index":2655,"title":{},"name":{},"text":{"75":{},"157":{},"231":{},"284":{}},"component":{}}],["oct",{"_index":1547,"title":{},"name":{},"text":{"24":{},"127":{},"251":{},"315":{}},"component":{}}],["offer",{"_index":1306,"title":{},"name":{},"text":{"18":{},"26":{},"29":{},"30":{},"121":{},"129":{},"132":{},"133":{},"241":{},"253":{},"257":{},"258":{},"317":{},"321":{},"322":{},"351":{}},"component":{}}],["offici",{"_index":768,"title":{},"name":{},"text":{"5":{},"50":{},"88":{},"101":{},"103":{},"143":{},"197":{},"218":{},"244":{},"246":{},"261":{},"272":{},"275":{},"336":{}},"component":{}}],["offset",{"_index":988,"title":{},"name":{},"text":{"10":{},"43":{},"50":{},"55":{},"93":{},"107":{},"111":{},"143":{},"174":{},"181":{},"195":{},"197":{},"266":{},"309":{},"329":{},"336":{}},"component":{}}],["oid",{"_index":1211,"title":{},"name":{},"text":{"14":{},"97":{},"178":{},"270":{}},"component":{}}],["ojdbc8",{"_index":2774,"title":{},"name":{},"text":{"81":{},"163":{},"235":{},"289":{}},"component":{}}],["ojdkbuild",{"_index":784,"title":{},"name":{},"text":{"5":{},"88":{},"218":{},"261":{}},"component":{}}],["okay",{"_index":1038,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["old",{"_index":161,"title":{},"name":{},"text":{"2":{},"3":{},"10":{},"12":{},"18":{},"34":{},"41":{},"50":{},"74":{},"85":{},"86":{},"93":{},"95":{},"105":{},"121":{},"137":{},"143":{},"156":{},"174":{},"176":{},"186":{},"193":{},"197":{},"214":{},"216":{},"241":{},"246":{},"259":{},"266":{},"268":{},"275":{},"300":{},"327":{},"336":{},"345":{},"351":{}},"component":{}}],["oldcontact",{"_index":2131,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["oldcontact.java",{"_index":2129,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["older",{"_index":480,"title":{},"name":{},"text":{"3":{},"10":{},"27":{},"37":{},"86":{},"93":{},"97":{},"130":{},"140":{},"174":{},"178":{},"189":{},"216":{},"254":{},"259":{},"266":{},"270":{},"303":{},"318":{}},"component":{}}],["omin",{"_index":2074,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["omit",{"_index":2266,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["on",{"_index":36,"title":{"47-2":{},"148-2":{},"210-2":{},"333-2":{}},"name":{},"text":{"1":{},"2":{},"3":{},"7":{},"10":{},"11":{},"12":{},"13":{},"14":{},"21":{},"22":{},"26":{},"27":{},"29":{},"34":{},"35":{},"36":{},"37":{},"40":{},"42":{},"44":{},"47":{},"49":{},"50":{},"51":{},"56":{},"67":{},"74":{},"77":{},"84":{},"85":{},"86":{},"90":{},"93":{},"94":{},"95":{},"96":{},"97":{},"104":{},"106":{},"108":{},"112":{},"116":{},"124":{},"125":{},"129":{},"130":{},"132":{},"137":{},"138":{},"139":{},"140":{},"143":{},"144":{},"148":{},"150":{},"156":{},"159":{},"169":{},"171":{},"174":{},"175":{},"176":{},"177":{},"178":{},"182":{},"186":{},"187":{},"188":{},"189":{},"192":{},"194":{},"196":{},"197":{},"198":{},"203":{},"210":{},"212":{},"213":{},"214":{},"216":{},"224":{},"246":{},"248":{},"249":{},"253":{},"254":{},"257":{},"259":{},"263":{},"266":{},"267":{},"268":{},"269":{},"270":{},"275":{},"294":{},"300":{},"301":{},"302":{},"303":{},"304":{},"310":{},"312":{},"313":{},"317":{},"318":{},"321":{},"326":{},"328":{},"330":{},"333":{},"335":{},"336":{},"337":{},"339":{},"344":{},"345":{}},"component":{}}],["on.microstream.afs.sql",{"_index":2865,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["onc",{"_index":1060,"title":{},"name":{},"text":{"10":{},"27":{},"34":{},"50":{},"62":{},"93":{},"119":{},"130":{},"137":{},"143":{},"174":{},"186":{},"197":{},"206":{},"254":{},"266":{},"298":{},"300":{},"318":{},"336":{},"340":{},"347":{}},"component":{}}],["onconnectionfound",{"_index":2377,"title":{},"name":{},"text":{"59":{},"63":{},"115":{},"120":{},"202":{},"207":{},"293":{},"299":{}},"component":{}}],["onconnectionfoundation(cf",{"_index":1899,"title":{},"name":{},"text":{"40":{},"104":{},"192":{},"326":{}},"component":{}}],["onconnectionfoundation(f",{"_index":1932,"title":{},"name":{},"text":{"42":{},"43":{},"106":{},"107":{},"194":{},"195":{},"328":{},"329":{}},"component":{}}],["one.microstream",{"_index":6,"title":{},"name":{},"text":{"1":{},"4":{},"9":{},"18":{},"19":{},"20":{},"28":{},"32":{},"35":{},"53":{},"56":{},"57":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"87":{},"92":{},"103":{},"109":{},"112":{},"113":{},"121":{},"122":{},"123":{},"131":{},"135":{},"138":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{},"165":{},"173":{},"182":{},"184":{},"187":{},"200":{},"213":{},"215":{},"217":{},"220":{},"226":{},"227":{},"228":{},"229":{},"230":{},"231":{},"232":{},"233":{},"234":{},"235":{},"236":{},"237":{},"241":{},"242":{},"243":{},"246":{},"247":{},"256":{},"260":{},"265":{},"271":{},"274":{},"275":{},"276":{},"278":{},"279":{},"280":{},"281":{},"282":{},"283":{},"284":{},"285":{},"286":{},"287":{},"288":{},"289":{},"290":{},"291":{},"301":{},"310":{},"311":{},"320":{},"324":{},"344":{},"346":{},"347":{},"351":{},"352":{}},"component":{}}],["one.microstream.af",{"_index":2827,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.afs.aws.dynamodb",{"_index":2841,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.afs.aws.s3",{"_index":2843,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.afs.azure.storag",{"_index":2845,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.afs.blobstor",{"_index":2847,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.afs.coher",{"_index":2849,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.afs.except",{"_index":2829,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.afs.hazelcast",{"_index":2851,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.afs.hibernate.typ",{"_index":2854,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.afs.jpa.hibern",{"_index":2853,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.afs.kafka",{"_index":2855,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.afs.mongodb",{"_index":2857,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.afs.nio",{"_index":2830,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.afs.nio.typ",{"_index":2831,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.afs.oracle.cloud.objectstorag",{"_index":2859,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.afs.oracle.nosql",{"_index":2861,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.afs.redi",{"_index":2863,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.afs.sql.typ",{"_index":2866,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.afs.sql.types.sqldatasourceprovid",{"_index":2758,"title":{},"name":{},"text":{"79":{},"80":{},"81":{},"82":{},"83":{},"161":{},"162":{},"163":{},"164":{},"165":{},"234":{},"235":{},"236":{},"237":{},"287":{},"288":{},"289":{},"290":{},"291":{}},"component":{}}],["one.microstream.afs.typ",{"_index":2828,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.auto",{"_index":3152,"title":{},"name":{},"text":{"246":{},"275":{}},"component":{}}],["one.microstream.autostart=fals",{"_index":3129,"title":{},"name":{},"text":{"243":{},"271":{},"274":{}},"component":{}}],["one.microstream.cach",{"_index":2832,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.cache.cachingprovider)caching.getcachingprovid",{"_index":75,"title":{},"name":{},"text":{"1":{},"84":{}},"component":{}}],["one.microstream.cache.except",{"_index":2834,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.cache.hibern",{"_index":2835,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.cache.hibernate.typ",{"_index":2836,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.cache.hibernate.types.cacheregionfactori",{"_index":1298,"title":{},"name":{},"text":{"17":{},"18":{},"100":{},"121":{},"240":{},"241":{},"350":{},"351":{}},"component":{}}],["one.microstream.cache.typ",{"_index":2833,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.cache.types.cacheconfigur",{"_index":1258,"title":{},"name":{},"text":{"15":{},"98":{},"238":{},"348":{}},"component":{}}],["one.microstream.cache.types.evictionmanag",{"_index":3101,"title":{},"name":{},"text":{"239":{},"349":{}},"component":{}}],["one.microstream.channel",{"_index":3115,"title":{},"name":{},"text":{"243":{},"246":{},"271":{},"274":{},"275":{}},"component":{}}],["one.microstream.channel.count=2",{"_index":3118,"title":{},"name":{},"text":{"243":{},"271":{},"274":{}},"component":{}}],["one.microstream.collect",{"_index":2868,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.com",{"_index":2837,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.com.binari",{"_index":2839,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.communication.binary.typ",{"_index":2840,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.communication.tls.securerandomprovider.default",{"_index":3056,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["one.microstream.communication.tls.tlskeymanagerprovider.default",{"_index":3040,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["one.microstream.communication.tls.tlskeymanagerprovider.pkcs12",{"_index":3044,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["one.microstream.communication.tls.tlsparametersprovider.default",{"_index":3051,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["one.microstream.communication.tls.tlstrustmanagerprovider.default",{"_index":3047,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["one.microstream.communication.tls.tlstrustmanagerprovider.pkcs12",{"_index":3050,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["one.microstream.communication.typ",{"_index":2838,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.ent",{"_index":2870,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.enterprise.afs.aws.dynamodb.typ",{"_index":2842,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.enterprise.afs.aws.s3.typ",{"_index":2844,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.enterprise.afs.azure.storage.typ",{"_index":2846,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.enterprise.afs.blobstore.typ",{"_index":2848,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.enterprise.afs.hazelcast.typ",{"_index":2852,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.enterprise.afs.kafka.typ",{"_index":2856,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.enterprise.afs.mongodb.typ",{"_index":2858,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.enterprise.afs.oracle.coherence.typ",{"_index":2850,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.enterprise.afs.oracle.nosql.typ",{"_index":2862,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.enterprise.afs.oraclecloud.objectstorage.typ",{"_index":2860,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.enterprise.afs.redis.typ",{"_index":2864,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.enterprise.afs.sql.typ",{"_index":2867,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.entity.codegen.entityprocessor",{"_index":1343,"title":{},"name":{},"text":{"20":{},"23":{},"123":{},"126":{},"247":{},"250":{},"311":{},"314":{}},"component":{}}],["one.microstream.exceptions.typecastexcept",{"_index":3186,"title":{},"name":{},"text":{"246":{}},"component":{}}],["one.microstream.green.channel",{"_index":3292,"title":{},"name":{},"text":{"275":{}},"component":{}}],["one.microstream.green.storag",{"_index":3290,"title":{},"name":{},"text":{"275":{}},"component":{}}],["one.microstream.ini",{"_index":3131,"title":{},"name":{},"text":{"243":{},"271":{}},"component":{}}],["one.microstream.integrations.cdi.types.config.embeddedstoragefoundationcustom",{"_index":3125,"title":{},"name":{},"text":{"243":{},"271":{}},"component":{}}],["one.microstream.integrations.cdi.types.config.storagemanageriniti",{"_index":3126,"title":{},"name":{},"text":{"243":{},"271":{}},"component":{}}],["one.microstream.integrations.quarkus.types.config.embeddedstoragefoundationcustom",{"_index":3265,"title":{},"name":{},"text":{"274":{}},"component":{}}],["one.microstream.integrations.quarkus.types.config.storagemanageriniti",{"_index":3266,"title":{},"name":{},"text":{"274":{}},"component":{}}],["one.microstream.integrations.spring.boot.types.config.embeddedstoragefoundationcustom",{"_index":3159,"title":{},"name":{},"text":{"246":{},"275":{}},"component":{}}],["one.microstream.integrations.spring.boot.types.config.storagemanageriniti",{"_index":3160,"title":{},"name":{},"text":{"246":{},"275":{}},"component":{}}],["one.microstream.java",{"_index":2877,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.jdk8.java.util",{"_index":2879,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.memory.sun",{"_index":2881,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.persistence.binary.java",{"_index":2878,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.persistence.binary.jdk8.java.util",{"_index":2880,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.persistence.binary.jdk8.typ",{"_index":2882,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.persistence.binary.one.microstream.collect",{"_index":2869,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.persistence.binary.one.microstream.ent",{"_index":2871,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.persistence.binary.one.microstream.persistence.typ",{"_index":2873,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.persistence.binary.one.microstream.refer",{"_index":2874,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.persistence.binary.one.microstream.util",{"_index":2876,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.persistence.binary.types.binarylegacytypehandler.abstractcustom",{"_index":1913,"title":{},"name":{},"text":{"41":{},"105":{},"193":{},"327":{}},"component":{}}],["one.microstream.persistence.lazi",{"_index":607,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.persistence.lazy.lazi",{"_index":619,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.persistence.lazy.lazy$default",{"_index":652,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.persistence.typ",{"_index":2872,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.persistence.types.persistencefoundation.setreferencefieldeagerevaluator(persistenceeagerstoringfieldevalu",{"_index":1930,"title":{},"name":{},"text":{"42":{},"106":{},"194":{},"328":{}},"component":{}}],["one.microstream.persistence.types.persistencelegacytypehandl",{"_index":1911,"title":{},"name":{},"text":{"41":{},"105":{},"193":{},"327":{}},"component":{}}],["one.microstream.red.channel",{"_index":3289,"title":{},"name":{},"text":{"275":{}},"component":{}}],["one.microstream.red.storag",{"_index":3287,"title":{},"name":{},"text":{"275":{}},"component":{}}],["one.microstream.refer",{"_index":608,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.reference.lazi",{"_index":621,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.storag",{"_index":3113,"title":{},"name":{},"text":{"243":{},"246":{},"271":{},"274":{},"275":{}},"component":{}}],["one.microstream.storage.configur",{"_index":2885,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.storage.directory=/opt/data/microstream",{"_index":3117,"title":{},"name":{},"text":{"243":{},"271":{},"274":{}},"component":{}}],["one.microstream.storage.embedded.configuration.typ",{"_index":2886,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.storage.embedded.typ",{"_index":2884,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.storage.restadapt",{"_index":2887,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.storage.restadapter.except",{"_index":2889,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.storage.restadapter.typ",{"_index":2888,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.storage.restcli",{"_index":2890,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.storage.restclient.app",{"_index":2893,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.storage.restclient.app.typ",{"_index":2894,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.storage.restclient.except",{"_index":2892,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.storage.restclient.jersey",{"_index":2895,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.storage.restclient.jersey.typ",{"_index":2896,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.storage.restclient.typ",{"_index":2891,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.storage.restservic",{"_index":2897,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.storage.restservice.except",{"_index":2899,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.storage.restservice.sparkjava",{"_index":2900,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.storage.restservice.sparkjava.except",{"_index":2902,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.storage.restservice.sparkjava.typ",{"_index":2901,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.storage.restservice.typ",{"_index":2898,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.storage.typ",{"_index":2883,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.storage.types.storagelivefileprovid",{"_index":1865,"title":{},"name":{},"text":{"38":{},"141":{},"190":{},"305":{}},"component":{}}],["one.microstream.test.spring.mydatasourceprovid",{"_index":3181,"title":{},"name":{},"text":{"246":{},"275":{}},"component":{}}],["one.microstream.us",{"_index":3188,"title":{},"name":{},"text":{"246":{}},"component":{}}],["one.microstream.util",{"_index":2875,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["one.microstream.wrapping.codegen.wrapperprocessor",{"_index":1592,"title":{},"name":{},"text":{"28":{},"131":{},"256":{},"320":{}},"component":{}}],["one.microstream:microstream",{"_index":660,"title":{},"name":{},"text":{"4":{},"87":{},"217":{},"260":{}},"component":{}}],["one/bookstor",{"_index":1662,"title":{},"name":{},"text":{"31":{},"134":{},"183":{},"323":{}},"component":{}}],["one/exampl",{"_index":1664,"title":{},"name":{},"text":{"31":{},"134":{},"183":{},"323":{}},"component":{}}],["one/microstream/tree/master/exampl",{"_index":1658,"title":{},"name":{},"text":{"31":{},"134":{},"183":{},"323":{}},"component":{}}],["op",{"_index":1846,"title":{},"name":{},"text":{"37":{},"140":{},"189":{},"303":{}},"component":{}}],["open",{"_index":719,"title":{},"name":{},"text":{"4":{},"53":{},"56":{},"77":{},"87":{},"109":{},"112":{},"159":{},"179":{},"182":{},"215":{},"217":{},"260":{},"304":{},"307":{},"310":{},"346":{}},"component":{}}],["openj9",{"_index":773,"title":{},"name":{},"text":{"5":{},"88":{},"218":{},"261":{}},"component":{}}],["openjdk",{"_index":770,"title":{},"name":{},"text":{"5":{},"88":{},"218":{},"261":{}},"component":{}}],["oper",{"_index":700,"title":{"5-2":{},"88-2":{},"218-2":{},"261-2":{}},"name":{},"text":{"4":{},"5":{},"9":{},"13":{},"16":{},"36":{},"49":{},"50":{},"62":{},"65":{},"74":{},"77":{},"87":{},"88":{},"92":{},"96":{},"99":{},"119":{},"139":{},"143":{},"150":{},"156":{},"159":{},"167":{},"173":{},"177":{},"188":{},"197":{},"206":{},"212":{},"217":{},"218":{},"222":{},"239":{},"260":{},"261":{},"265":{},"269":{},"275":{},"298":{},"302":{},"304":{},"335":{},"336":{},"340":{},"343":{},"349":{}},"component":{}}],["opportun",{"_index":3127,"title":{},"name":{},"text":{"243":{},"246":{},"271":{},"274":{},"275":{}},"component":{}}],["optim",{"_index":244,"title":{},"name":{},"text":{"3":{},"10":{},"32":{},"33":{},"43":{},"86":{},"93":{},"107":{},"135":{},"136":{},"174":{},"184":{},"185":{},"195":{},"216":{},"259":{},"266":{},"324":{},"325":{},"329":{}},"component":{}}],["option",{"_index":87,"title":{"44":{},"108":{},"196":{},"330":{},"347-6":{}},"name":{"44":{},"108":{},"196":{},"330":{}},"text":{"2":{},"23":{},"33":{},"44":{},"49":{},"50":{},"51":{},"53":{},"56":{},"59":{},"74":{},"85":{},"108":{},"109":{},"112":{},"115":{},"126":{},"136":{},"143":{},"144":{},"150":{},"156":{},"179":{},"182":{},"185":{},"196":{},"197":{},"198":{},"202":{},"212":{},"214":{},"220":{},"243":{},"246":{},"250":{},"271":{},"275":{},"293":{},"307":{},"310":{},"314":{},"325":{},"330":{},"335":{},"336":{},"337":{},"345":{},"347":{}},"component":{}}],["optionaldoubl",{"_index":1685,"title":{},"name":{},"text":{"32":{},"135":{},"184":{},"324":{}},"component":{}}],["optionalint",{"_index":1683,"title":{},"name":{},"text":{"32":{},"135":{},"184":{},"324":{}},"component":{}}],["optionallong",{"_index":1684,"title":{},"name":{},"text":{"32":{},"135":{},"184":{},"324":{}},"component":{}}],["oracl",{"_index":277,"title":{"75":{},"76":{},"77":{},"81":{},"157":{},"158":{},"159":{},"163":{},"231":{},"232":{},"235":{},"284":{},"285":{},"289":{}},"name":{"75":{},"76":{},"77":{},"81":{},"157":{},"158":{},"159":{},"163":{},"231":{},"232":{},"235":{},"284":{},"285":{},"289":{}},"text":{"3":{},"4":{},"5":{},"75":{},"76":{},"77":{},"81":{},"86":{},"87":{},"88":{},"157":{},"158":{},"159":{},"163":{},"216":{},"217":{},"218":{},"231":{},"232":{},"235":{},"259":{},"260":{},"261":{},"284":{},"285":{},"289":{}},"component":{}}],["oracle.kv.kvsecurityconst",{"_index":2733,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["oraclecloud",{"_index":287,"title":{},"name":{},"text":{"3":{},"4":{},"75":{},"86":{},"87":{},"157":{},"216":{},"217":{},"231":{},"259":{},"260":{},"284":{}},"component":{}}],["oraclecloudobjectstorageconnector.caching(cli",{"_index":2648,"title":{},"name":{},"text":{"75":{},"157":{},"231":{},"284":{}},"component":{}}],["oracledatasourc",{"_index":2776,"title":{},"name":{},"text":{"81":{},"163":{},"235":{},"289":{}},"component":{}}],["oraclenosqlconnector.caching(kvstor",{"_index":2678,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["oracle’",{"_index":2922,"title":{},"name":{},"text":{"101":{},"244":{},"272":{}},"component":{}}],["order",{"_index":1091,"title":{},"name":{},"text":{"11":{},"14":{},"26":{},"43":{},"50":{},"69":{},"70":{},"86":{},"94":{},"97":{},"107":{},"129":{},"143":{},"151":{},"152":{},"175":{},"178":{},"195":{},"197":{},"215":{},"216":{},"226":{},"227":{},"253":{},"259":{},"267":{},"270":{},"278":{},"279":{},"281":{},"317":{},"329":{},"336":{},"346":{}},"component":{}}],["org.apache.maven.plugin",{"_index":1338,"title":{},"name":{},"text":{"20":{},"28":{},"123":{},"131":{},"247":{},"256":{},"311":{},"320":{}},"component":{}}],["org.hibernate.jpa.hibernatepersistenceprovid",{"_index":1310,"title":{},"name":{},"text":{"18":{},"121":{},"241":{},"351":{}},"component":{}}],["org.mariadb.jdbc",{"_index":2745,"title":{},"name":{},"text":{"79":{},"161":{},"234":{},"288":{}},"component":{}}],["org.postgresql",{"_index":2785,"title":{},"name":{},"text":{"82":{},"164":{},"236":{},"290":{}},"component":{}}],["org.slf4j",{"_index":2333,"title":{},"name":{},"text":{"56":{},"112":{},"182":{},"310":{}},"component":{}}],["org.springframework",{"_index":1319,"title":{},"name":{},"text":{"19":{},"122":{},"242":{},"352":{}},"component":{}}],["org.springframework.boot",{"_index":1321,"title":{},"name":{},"text":{"19":{},"122":{},"242":{},"352":{}},"component":{}}],["org.xeri",{"_index":2798,"title":{},"name":{},"text":{"83":{},"165":{},"237":{},"291":{}},"component":{}}],["organ",{"_index":211,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["origin",{"_index":1618,"title":{},"name":{},"text":{"29":{},"116":{},"132":{},"203":{},"257":{},"294":{},"321":{}},"component":{}}],["orphan",{"_index":2191,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["osgi",{"_index":456,"title":{"49-7":{},"150-7":{},"212-7":{},"335-7":{}},"name":{},"text":{"3":{},"49":{},"86":{},"150":{},"212":{},"216":{},"259":{},"335":{}},"component":{}}],["other",{"_index":1837,"title":{},"name":{},"text":{"37":{},"140":{},"189":{},"303":{}},"component":{}}],["otherwis",{"_index":1351,"title":{},"name":{},"text":{"20":{},"22":{},"27":{},"42":{},"50":{},"51":{},"62":{},"68":{},"106":{},"119":{},"123":{},"125":{},"130":{},"143":{},"144":{},"170":{},"194":{},"197":{},"198":{},"206":{},"225":{},"247":{},"249":{},"254":{},"298":{},"311":{},"313":{},"318":{},"328":{},"336":{},"337":{},"341":{}},"component":{}}],["our",{"_index":801,"title":{},"name":{},"text":{"5":{},"88":{},"218":{},"261":{}},"component":{}}],["out",{"_index":132,"title":{},"name":{},"text":{"2":{},"3":{},"12":{},"20":{},"24":{},"35":{},"50":{},"68":{},"77":{},"85":{},"86":{},"95":{},"123":{},"127":{},"138":{},"143":{},"159":{},"170":{},"176":{},"182":{},"187":{},"197":{},"214":{},"215":{},"216":{},"225":{},"247":{},"251":{},"259":{},"268":{},"301":{},"310":{},"311":{},"315":{},"336":{},"341":{},"345":{},"346":{}},"component":{}}],["outdat",{"_index":1164,"title":{},"name":{},"text":{"12":{},"95":{},"176":{},"268":{}},"component":{}}],["outer",{"_index":1367,"title":{},"name":{},"text":{"21":{},"23":{},"124":{},"126":{},"248":{},"250":{},"312":{},"314":{}},"component":{}}],["output",{"_index":1391,"title":{},"name":{},"text":{"22":{},"24":{},"35":{},"50":{},"51":{},"125":{},"127":{},"138":{},"143":{},"144":{},"187":{},"197":{},"198":{},"249":{},"251":{},"255":{},"301":{},"313":{},"315":{},"319":{},"336":{},"337":{},"347":{}},"component":{}}],["outright",{"_index":549,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["outsid",{"_index":1159,"title":{},"name":{},"text":{"12":{},"33":{},"95":{},"136":{},"176":{},"185":{},"268":{},"325":{}},"component":{}}],["over",{"_index":569,"title":{},"name":{},"text":{"3":{},"21":{},"29":{},"30":{},"40":{},"43":{},"47":{},"50":{},"67":{},"86":{},"104":{},"107":{},"116":{},"124":{},"132":{},"133":{},"143":{},"148":{},"169":{},"192":{},"195":{},"197":{},"203":{},"210":{},"215":{},"216":{},"220":{},"224":{},"248":{},"257":{},"258":{},"259":{},"294":{},"312":{},"321":{},"322":{},"326":{},"329":{},"333":{},"336":{},"339":{},"346":{},"347":{}},"component":{}}],["overhead",{"_index":1125,"title":{},"name":{},"text":{"11":{},"12":{},"23":{},"29":{},"32":{},"43":{},"94":{},"95":{},"107":{},"126":{},"132":{},"135":{},"175":{},"176":{},"184":{},"195":{},"250":{},"257":{},"267":{},"268":{},"314":{},"321":{},"324":{},"329":{}},"component":{}}],["overkil",{"_index":1248,"title":{},"name":{},"text":{"14":{},"97":{},"178":{},"270":{}},"component":{}}],["overrid",{"_index":953,"title":{},"name":{},"text":{"9":{},"19":{},"22":{},"23":{},"24":{},"29":{},"30":{},"42":{},"63":{},"69":{},"70":{},"72":{},"74":{},"92":{},"106":{},"120":{},"122":{},"125":{},"126":{},"127":{},"132":{},"133":{},"151":{},"152":{},"154":{},"156":{},"173":{},"194":{},"207":{},"226":{},"227":{},"229":{},"242":{},"249":{},"250":{},"251":{},"257":{},"258":{},"265":{},"275":{},"278":{},"279":{},"282":{},"299":{},"313":{},"314":{},"315":{},"321":{},"322":{},"328":{},"352":{}},"component":{}}],["overs",{"_index":1050,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["overview",{"_index":2230,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["overwrit",{"_index":1639,"title":{},"name":{},"text":{"29":{},"46":{},"132":{},"147":{},"209":{},"257":{},"321":{},"332":{}},"component":{}}],["overwritten",{"_index":1589,"title":{},"name":{},"text":{"27":{},"130":{},"254":{},"318":{}},"component":{}}],["owner",{"_index":2384,"title":{},"name":{},"text":{"60":{},"117":{},"204":{},"295":{}},"component":{}}],["p2",{"_index":460,"title":{},"name":{},"text":{"3":{},"4":{},"49":{},"86":{},"87":{},"150":{},"212":{},"216":{},"217":{},"259":{},"260":{},"335":{}},"component":{}}],["packag",{"_index":180,"title":{"3-10":{},"86-15":{},"216-22":{},"259-31":{}},"name":{},"text":{"3":{},"19":{},"50":{},"79":{},"80":{},"81":{},"82":{},"83":{},"86":{},"122":{},"143":{},"161":{},"162":{},"163":{},"164":{},"165":{},"197":{},"216":{},"234":{},"235":{},"236":{},"237":{},"242":{},"259":{},"287":{},"288":{},"289":{},"290":{},"291":{},"336":{},"352":{}},"component":{}}],["page",{"_index":3154,"title":{},"name":{},"text":{"246":{},"275":{}},"component":{}}],["pair",{"_index":142,"title":{},"name":{},"text":{"2":{},"50":{},"85":{},"143":{},"197":{},"214":{},"243":{},"246":{},"271":{},"274":{},"275":{},"336":{},"345":{}},"component":{}}],["panic",{"_index":2190,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["paradigm",{"_index":1067,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["parallel",{"_index":2025,"title":{},"name":{},"text":{"49":{},"150":{},"212":{},"335":{}},"component":{}}],["paramet",{"_index":1247,"title":{"347-7":{}},"name":{},"text":{"14":{},"22":{},"28":{},"35":{},"48":{},"51":{},"53":{},"55":{},"97":{},"109":{},"111":{},"125":{},"131":{},"138":{},"144":{},"149":{},"178":{},"179":{},"181":{},"187":{},"198":{},"211":{},"249":{},"256":{},"270":{},"301":{},"307":{},"309":{},"313":{},"320":{},"334":{},"337":{},"340":{},"347":{}},"component":{}}],["pars",{"_index":2165,"title":{},"name":{},"text":{"50":{},"71":{},"143":{},"153":{},"197":{},"228":{},"239":{},"280":{},"336":{},"349":{}},"component":{}}],["parser",{"_index":235,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["part",{"_index":893,"title":{},"name":{},"text":{"7":{},"10":{},"29":{},"35":{},"45":{},"46":{},"57":{},"60":{},"90":{},"93":{},"113":{},"116":{},"117":{},"132":{},"138":{},"146":{},"147":{},"171":{},"174":{},"187":{},"200":{},"203":{},"204":{},"208":{},"209":{},"215":{},"220":{},"257":{},"263":{},"266":{},"276":{},"294":{},"295":{},"301":{},"321":{},"331":{},"332":{},"346":{},"347":{}},"component":{}}],["parti",{"_index":766,"title":{"5-3":{},"88-3":{},"218-3":{},"261-3":{}},"name":{},"text":{"12":{},"95":{},"176":{},"268":{}},"component":{}}],["partial",{"_index":873,"title":{},"name":{},"text":{"7":{},"12":{},"14":{},"47":{},"62":{},"77":{},"90":{},"95":{},"97":{},"119":{},"148":{},"159":{},"171":{},"176":{},"178":{},"206":{},"210":{},"263":{},"268":{},"270":{},"298":{},"333":{}},"component":{}}],["particular",{"_index":2078,"title":{},"name":{},"text":{"50":{},"77":{},"143":{},"159":{},"197":{},"336":{}},"component":{}}],["partit",{"_index":2703,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["partner",{"_index":1383,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["partner(anim",{"_index":1410,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["partner(fin",{"_index":1415,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["pass",{"_index":1238,"title":{},"name":{},"text":{"14":{},"43":{},"62":{},"77":{},"97":{},"107":{},"119":{},"159":{},"178":{},"195":{},"206":{},"243":{},"246":{},"270":{},"271":{},"274":{},"275":{},"298":{},"304":{},"329":{}},"component":{}}],["passiv",{"_index":830,"title":{},"name":{},"text":{"7":{},"90":{},"171":{},"263":{}},"component":{}}],["password",{"_index":2417,"title":{},"name":{},"text":{"63":{},"71":{},"74":{},"77":{},"79":{},"80":{},"81":{},"82":{},"120":{},"153":{},"156":{},"159":{},"161":{},"162":{},"163":{},"164":{},"207":{},"228":{},"234":{},"235":{},"236":{},"246":{},"275":{},"280":{},"287":{},"288":{},"289":{},"290":{},"299":{}},"component":{}}],["path",{"_index":494,"title":{},"name":{},"text":{"3":{},"15":{},"16":{},"32":{},"35":{},"55":{},"72":{},"75":{},"86":{},"98":{},"99":{},"111":{},"135":{},"138":{},"154":{},"157":{},"181":{},"184":{},"187":{},"215":{},"216":{},"229":{},"231":{},"238":{},"239":{},"259":{},"281":{},"282":{},"284":{},"301":{},"309":{},"324":{},"346":{},"348":{},"349":{}},"component":{}}],["paths.get(\"data",{"_index":958,"title":{},"name":{},"text":{"9":{},"35":{},"92":{},"138":{},"173":{},"187":{},"265":{},"301":{}},"component":{}}],["paths.get(args[0",{"_index":3028,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["paths.get(args[1",{"_index":3030,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["paths.get(s.file().identifi",{"_index":1117,"title":{},"name":{},"text":{"11":{},"94":{},"175":{}},"component":{}}],["pattern",{"_index":1610,"title":{},"name":{},"text":{"29":{},"32":{},"132":{},"135":{},"184":{},"257":{},"321":{},"324":{}},"component":{}}],["pay",{"_index":2911,"title":{},"name":{},"text":{"97":{},"178":{},"270":{}},"component":{}}],["payload",{"_index":999,"title":{"34-2":{},"137-2":{},"186-2":{},"300-2":{}},"name":{},"text":{"10":{},"34":{},"93":{},"137":{},"174":{},"186":{},"266":{},"300":{}},"component":{}}],["peek",{"_index":2517,"title":{},"name":{},"text":{"68":{},"170":{},"225":{},"341":{}},"component":{}}],["pend",{"_index":1842,"title":{},"name":{},"text":{"37":{},"140":{},"189":{},"303":{}},"component":{}}],["peopl",{"_index":2079,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["per",{"_index":1094,"title":{},"name":{},"text":{"11":{},"17":{},"34":{},"46":{},"49":{},"50":{},"54":{},"56":{},"77":{},"94":{},"100":{},"110":{},"112":{},"137":{},"143":{},"147":{},"150":{},"159":{},"175":{},"180":{},"182":{},"186":{},"197":{},"209":{},"212":{},"240":{},"267":{},"300":{},"308":{},"310":{},"332":{},"335":{},"336":{},"350":{}},"component":{}}],["perfect",{"_index":1014,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["perfectli",{"_index":884,"title":{},"name":{},"text":{"7":{},"11":{},"12":{},"33":{},"50":{},"51":{},"90":{},"94":{},"95":{},"136":{},"143":{},"144":{},"171":{},"175":{},"176":{},"185":{},"197":{},"198":{},"263":{},"267":{},"268":{},"325":{},"336":{},"337":{}},"component":{}}],["perform",{"_index":145,"title":{"50-8":{},"143-8":{},"197-8":{},"336-8":{}},"name":{},"text":{"2":{},"4":{},"8":{},"10":{},"11":{},"12":{},"16":{},"31":{},"32":{},"39":{},"43":{},"50":{},"59":{},"60":{},"61":{},"77":{},"85":{},"87":{},"91":{},"93":{},"94":{},"95":{},"97":{},"99":{},"107":{},"115":{},"117":{},"118":{},"134":{},"135":{},"142":{},"143":{},"159":{},"172":{},"174":{},"175":{},"176":{},"178":{},"183":{},"184":{},"191":{},"195":{},"197":{},"202":{},"204":{},"205":{},"214":{},"217":{},"239":{},"243":{},"246":{},"260":{},"264":{},"266":{},"267":{},"268":{},"270":{},"271":{},"274":{},"275":{},"293":{},"295":{},"296":{},"306":{},"323":{},"324":{},"329":{},"336":{},"340":{},"345":{},"349":{}},"component":{}}],["perhap",{"_index":2089,"title":{},"name":{},"text":{"50":{},"67":{},"143":{},"169":{},"197":{},"224":{},"336":{},"339":{}},"component":{}}],["permiss",{"_index":2555,"title":{},"name":{},"text":{"69":{},"70":{},"151":{},"152":{},"226":{},"227":{},"278":{},"279":{}},"component":{}}],["persist",{"_index":295,"title":{"47-1":{},"148-1":{},"210-1":{},"333-1":{}},"name":{},"text":{"3":{},"4":{},"7":{},"9":{},"10":{},"11":{},"12":{},"13":{},"18":{},"32":{},"33":{},"41":{},"44":{},"45":{},"46":{},"47":{},"51":{},"54":{},"62":{},"63":{},"86":{},"87":{},"90":{},"92":{},"93":{},"94":{},"95":{},"96":{},"105":{},"108":{},"110":{},"119":{},"120":{},"121":{},"135":{},"136":{},"144":{},"146":{},"147":{},"148":{},"171":{},"173":{},"174":{},"175":{},"176":{},"177":{},"180":{},"184":{},"185":{},"193":{},"196":{},"198":{},"206":{},"207":{},"208":{},"209":{},"210":{},"216":{},"217":{},"220":{},"241":{},"259":{},"260":{},"263":{},"265":{},"266":{},"267":{},"268":{},"269":{},"298":{},"299":{},"308":{},"324":{},"325":{},"327":{},"330":{},"331":{},"332":{},"333":{},"337":{},"347":{},"351":{}},"component":{}}],["persistence.binari",{"_index":296,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["persistence.binary.jdk8",{"_index":297,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["persistence.binary.jdk8:one.microstream.jdk8.java.util",{"_index":361,"title":{},"name":{},"text":{"3":{}},"component":{}}],["persistence.binary.jdk8:one.microstream.memory.sun",{"_index":363,"title":{},"name":{},"text":{"3":{}},"component":{}}],["persistence.binary:one.microstream.collect",{"_index":349,"title":{},"name":{},"text":{"3":{}},"component":{}}],["persistence.binary:one.microstream.ent",{"_index":351,"title":{},"name":{},"text":{"3":{}},"component":{}}],["persistence.binary:one.microstream.java",{"_index":359,"title":{},"name":{},"text":{"3":{}},"component":{}}],["persistence.binary:one.microstream.persistence.typ",{"_index":353,"title":{},"name":{},"text":{"3":{}},"component":{}}],["persistence.binary:one.microstream.refer",{"_index":355,"title":{},"name":{},"text":{"3":{}},"component":{}}],["persistence.binary:one.microstream.util",{"_index":357,"title":{},"name":{},"text":{"3":{}},"component":{}}],["persistence.refactoringmapping(paths.get(\"refactorings.csv",{"_index":2152,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["persistence.xml",{"_index":1309,"title":{},"name":{},"text":{"18":{},"121":{},"241":{},"351":{}},"component":{}}],["persistenceeagerstoringfieldevalu",{"_index":1917,"title":{},"name":{},"text":{"42":{},"59":{},"61":{},"106":{},"115":{},"118":{},"194":{},"202":{},"205":{},"293":{},"296":{},"328":{}},"component":{}}],["persistenceexcept",{"_index":585,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["persistencefieldevalu",{"_index":2418,"title":{},"name":{},"text":{"63":{},"120":{},"207":{},"299":{}},"component":{}}],["persistencefoundation#setfieldevaluatorpersist",{"_index":1983,"title":{},"name":{},"text":{"44":{},"108":{},"196":{},"330":{}},"component":{}}],["persistencelegacytypemappingresultor",{"_index":2093,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["persistencelegacytypemappingresultor.new",{"_index":2102,"title":{},"name":{},"text":{"50":{},"51":{},"143":{},"144":{},"197":{},"198":{},"336":{},"337":{}},"component":{}}],["persistenceload",{"_index":3331,"title":{},"name":{},"text":{"297":{}},"component":{}}],["persistencemembersimil",{"_index":2182,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["persistencestor",{"_index":1598,"title":{},"name":{},"text":{"28":{},"29":{},"30":{},"131":{},"132":{},"133":{},"256":{},"257":{},"258":{},"320":{},"321":{},"322":{}},"component":{}}],["persistencestoring'",{"_index":1611,"title":{},"name":{},"text":{"29":{},"132":{},"257":{},"321":{}},"component":{}}],["persistencestoring.java",{"_index":1613,"title":{},"name":{},"text":{"29":{},"132":{},"257":{},"321":{}},"component":{}}],["persistencestoringwithlog",{"_index":1620,"title":{},"name":{},"text":{"29":{},"30":{},"132":{},"133":{},"257":{},"258":{},"321":{},"322":{}},"component":{}}],["persistencestoringwithlogging(fin",{"_index":1621,"title":{},"name":{},"text":{"29":{},"30":{},"132":{},"133":{},"257":{},"258":{},"321":{},"322":{}},"component":{}}],["persistencestoringwithlogging(persistencestor",{"_index":1636,"title":{},"name":{},"text":{"29":{},"132":{},"257":{},"321":{}},"component":{}}],["persistencetypedictionary.ptd",{"_index":651,"title":{},"name":{},"text":{"3":{},"37":{},"86":{},"140":{},"189":{},"216":{},"259":{},"303":{}},"component":{}}],["persistenceunreachabletypehandl",{"_index":2206,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["persistend",{"_index":906,"title":{},"name":{},"text":{"7":{},"90":{},"171":{},"263":{}},"component":{}}],["person",{"_index":1353,"title":{},"name":{},"text":{"21":{},"23":{},"24":{},"25":{},"27":{},"51":{},"124":{},"126":{},"127":{},"128":{},"130":{},"144":{},"198":{},"248":{},"250":{},"251":{},"252":{},"254":{},"312":{},"314":{},"315":{},"316":{},"318":{},"337":{}},"component":{}}],["person)super.entitydata",{"_index":1479,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["person.firstnam",{"_index":1514,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["person.lastnam",{"_index":1515,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["person1",{"_index":1505,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["person2",{"_index":1506,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["person2.firstnam",{"_index":1508,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["person2.lastnam",{"_index":1510,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["personappend",{"_index":1520,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["personcr",{"_index":1486,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["personcreator.new",{"_index":1358,"title":{},"name":{},"text":{"21":{},"24":{},"25":{},"27":{},"124":{},"127":{},"128":{},"130":{},"248":{},"251":{},"252":{},"254":{},"312":{},"315":{},"316":{},"318":{}},"component":{}}],["personcreator.new(john",{"_index":1376,"title":{},"name":{},"text":{"21":{},"124":{},"248":{},"312":{}},"component":{}}],["persondata",{"_index":1370,"title":{},"name":{},"text":{"21":{},"23":{},"124":{},"126":{},"248":{},"250":{},"312":{},"314":{}},"component":{}}],["persondata(entityinst",{"_index":1491,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["persondata(fin",{"_index":1482,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["personent",{"_index":1366,"title":{},"name":{},"text":{"21":{},"23":{},"124":{},"126":{},"248":{},"250":{},"312":{},"314":{}},"component":{}}],["personhashequal",{"_index":1502,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["personupdat",{"_index":1494,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["personupdater.new(mik",{"_index":1557,"title":{},"name":{},"text":{"26":{},"129":{},"253":{},"317":{}},"component":{}}],["personupdater.setfirstname(mik",{"_index":1560,"title":{},"name":{},"text":{"26":{},"129":{},"253":{},"317":{}},"component":{}}],["personupdater.setlastname(john",{"_index":1544,"title":{},"name":{},"text":{"24":{},"27":{},"127":{},"130":{},"251":{},"254":{},"315":{},"318":{}},"component":{}}],["pet",{"_index":1389,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["pet)super.entitydata",{"_index":1438,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["pet.java",{"_index":1388,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["petcreat",{"_index":1445,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["petcreator.java",{"_index":1444,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["petdata",{"_index":1441,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["petdata(entityinst",{"_index":1448,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["petdata(fin",{"_index":1442,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["petdata.java",{"_index":1440,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["petent",{"_index":1437,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["petentity.java",{"_index":1436,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["petupdat",{"_index":1451,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["petupdater.java",{"_index":1450,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["pgsimpledatasourc",{"_index":2787,"title":{},"name":{},"text":{"82":{},"164":{},"236":{},"290":{}},"component":{}}],["phase",{"_index":3084,"title":{},"name":{},"text":{"216":{},"243":{},"259":{},"271":{}},"component":{}}],["phoenix",{"_index":2653,"title":{},"name":{},"text":{"75":{},"157":{},"231":{},"284":{}},"component":{}}],["physic",{"_index":862,"title":{},"name":{},"text":{"7":{},"45":{},"47":{},"49":{},"50":{},"90":{},"143":{},"146":{},"148":{},"150":{},"171":{},"197":{},"208":{},"210":{},"212":{},"263":{},"331":{},"333":{},"335":{},"336":{}},"component":{}}],["pick",{"_index":3339,"title":{},"name":{},"text":{"304":{}},"component":{}}],["pin",{"_index":2259,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["pkcs12",{"_index":3046,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["place",{"_index":894,"title":{},"name":{},"text":{"7":{},"33":{},"35":{},"45":{},"64":{},"66":{},"90":{},"136":{},"138":{},"146":{},"166":{},"168":{},"171":{},"185":{},"187":{},"208":{},"221":{},"223":{},"263":{},"301":{},"325":{},"331":{},"338":{},"342":{}},"component":{}}],["plain",{"_index":465,"title":{},"name":{},"text":{"3":{},"13":{},"14":{},"28":{},"33":{},"55":{},"74":{},"86":{},"96":{},"97":{},"111":{},"131":{},"136":{},"156":{},"177":{},"178":{},"181":{},"185":{},"216":{},"256":{},"259":{},"269":{},"270":{},"309":{},"320":{},"325":{}},"component":{}}],["platform",{"_index":91,"title":{},"name":{},"text":{"2":{},"12":{},"85":{},"95":{},"176":{},"214":{},"268":{},"345":{}},"component":{}}],["play",{"_index":807,"title":{},"name":{},"text":{"5":{},"88":{},"218":{},"261":{}},"component":{}}],["pleas",{"_index":1915,"title":{},"name":{},"text":{"41":{},"79":{},"80":{},"81":{},"82":{},"83":{},"105":{},"161":{},"162":{},"163":{},"164":{},"165":{},"193":{},"234":{},"235":{},"236":{},"237":{},"246":{},"275":{},"278":{},"279":{},"280":{},"281":{},"282":{},"283":{},"284":{},"285":{},"286":{},"287":{},"288":{},"289":{},"290":{},"291":{},"327":{}},"component":{}}],["pleasantli",{"_index":2213,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["plug",{"_index":2244,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["plugin",{"_index":722,"title":{},"name":{},"text":{"4":{},"20":{},"28":{},"87":{},"123":{},"131":{},"217":{},"247":{},"256":{},"260":{},"311":{},"320":{}},"component":{}}],["png",{"_index":1943,"title":{},"name":{},"text":{"43":{},"107":{},"195":{},"329":{}},"component":{}}],["point",{"_index":734,"title":{},"name":{},"text":{"4":{},"7":{},"12":{},"14":{},"50":{},"87":{},"90":{},"95":{},"97":{},"116":{},"143":{},"171":{},"176":{},"178":{},"197":{},"203":{},"217":{},"243":{},"246":{},"260":{},"263":{},"268":{},"270":{},"271":{},"275":{},"281":{},"294":{},"304":{},"336":{}},"component":{}}],["pointless",{"_index":2381,"title":{},"name":{},"text":{"60":{},"117":{},"204":{},"295":{}},"component":{}}],["pojo",{"_index":1996,"title":{},"name":{},"text":{"46":{},"147":{},"209":{},"243":{},"246":{},"271":{},"274":{},"275":{},"332":{}},"component":{}}],["polici",{"_index":394,"title":{},"name":{},"text":{"3":{},"16":{},"77":{},"86":{},"99":{},"159":{},"216":{},"239":{},"259":{},"349":{}},"component":{}}],["pom.xml",{"_index":5,"title":{},"name":{},"text":{"1":{},"4":{},"9":{},"18":{},"19":{},"20":{},"28":{},"32":{},"35":{},"53":{},"56":{},"84":{},"87":{},"92":{},"103":{},"109":{},"112":{},"121":{},"122":{},"123":{},"131":{},"135":{},"138":{},"173":{},"182":{},"184":{},"187":{},"213":{},"215":{},"217":{},"220":{},"241":{},"242":{},"243":{},"246":{},"247":{},"255":{},"256":{},"260":{},"265":{},"271":{},"275":{},"301":{},"310":{},"311":{},"319":{},"320":{},"324":{},"344":{},"346":{},"347":{},"351":{},"352":{}},"component":{}}],["pool",{"_index":2766,"title":{},"name":{},"text":{"79":{},"80":{},"81":{},"82":{},"83":{},"161":{},"162":{},"163":{},"164":{},"165":{},"234":{},"235":{},"236":{},"237":{},"287":{},"288":{},"289":{},"290":{},"291":{}},"component":{}}],["port",{"_index":2292,"title":{},"name":{},"text":{"53":{},"56":{},"77":{},"109":{},"112":{},"159":{},"179":{},"182":{},"215":{},"307":{},"310":{},"346":{}},"component":{}}],["port=80",{"_index":2294,"title":{},"name":{},"text":{"53":{},"109":{}},"component":{}}],["possibl",{"_index":144,"title":{"47-3":{},"49-1":{},"49-6":{},"148-3":{},"150-1":{},"150-6":{},"210-3":{},"212-1":{},"212-6":{},"333-3":{},"335-1":{},"335-6":{}},"name":{},"text":{"2":{},"5":{},"10":{},"11":{},"12":{},"13":{},"29":{},"34":{},"41":{},"43":{},"49":{},"50":{},"51":{},"57":{},"59":{},"63":{},"67":{},"85":{},"86":{},"88":{},"93":{},"94":{},"95":{},"96":{},"105":{},"107":{},"113":{},"115":{},"120":{},"132":{},"137":{},"143":{},"144":{},"150":{},"169":{},"174":{},"175":{},"176":{},"177":{},"186":{},"193":{},"195":{},"197":{},"198":{},"200":{},"202":{},"207":{},"212":{},"214":{},"215":{},"216":{},"218":{},"224":{},"246":{},"257":{},"259":{},"261":{},"266":{},"267":{},"268":{},"269":{},"276":{},"293":{},"299":{},"300":{},"304":{},"321":{},"327":{},"329":{},"335":{},"336":{},"337":{},"339":{},"345":{},"346":{},"347":{}},"component":{}}],["postaladdress",{"_index":2052,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["postgr",{"_index":3184,"title":{},"name":{},"text":{"246":{},"275":{}},"component":{}}],["postgresql",{"_index":469,"title":{"82":{},"164":{},"236":{},"290":{}},"name":{"82":{},"164":{},"236":{},"290":{}},"text":{"3":{},"82":{},"86":{},"164":{},"216":{},"236":{},"259":{},"290":{}},"component":{}}],["potenti",{"_index":531,"title":{},"name":{},"text":{"3":{},"5":{},"33":{},"50":{},"62":{},"86":{},"88":{},"119":{},"136":{},"143":{},"185":{},"197":{},"206":{},"216":{},"218":{},"259":{},"261":{},"298":{},"325":{},"336":{}},"component":{}}],["power",{"_index":2030,"title":{},"name":{},"text":{"49":{},"150":{},"212":{},"335":{}},"component":{}}],["practic",{"_index":578,"title":{"59":{},"115":{},"202":{},"293":{}},"name":{"59":{},"115":{},"202":{},"293":{}},"text":{"3":{},"9":{},"77":{},"86":{},"92":{},"116":{},"159":{},"173":{},"203":{},"216":{},"259":{},"265":{},"294":{}},"component":{}}],["precaut",{"_index":2252,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["precis",{"_index":1004,"title":{},"name":{},"text":{"10":{},"23":{},"44":{},"54":{},"93":{},"108":{},"110":{},"126":{},"174":{},"180":{},"196":{},"250":{},"266":{},"308":{},"314":{},"330":{}},"component":{}}],["preconfigur",{"_index":3008,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["predefin",{"_index":1531,"title":{},"name":{},"text":{"24":{},"27":{},"46":{},"127":{},"130":{},"147":{},"209":{},"251":{},"254":{},"315":{},"318":{},"332":{}},"component":{}}],["predetermin",{"_index":2271,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["prefer",{"_index":745,"title":{},"name":{},"text":{"4":{},"6":{},"17":{},"50":{},"51":{},"58":{},"65":{},"74":{},"87":{},"89":{},"100":{},"114":{},"143":{},"144":{},"156":{},"167":{},"197":{},"198":{},"201":{},"217":{},"219":{},"222":{},"240":{},"260":{},"262":{},"277":{},"336":{},"337":{},"343":{},"350":{}},"component":{}}],["prefix",{"_index":416,"title":{},"name":{},"text":{"3":{},"17":{},"37":{},"38":{},"39":{},"72":{},"86":{},"100":{},"140":{},"141":{},"142":{},"154":{},"189":{},"190":{},"191":{},"216":{},"229":{},"240":{},"243":{},"246":{},"259":{},"271":{},"274":{},"275":{},"282":{},"303":{},"305":{},"306":{},"350":{}},"component":{}}],["prefix+channelnumb",{"_index":1887,"title":{},"name":{},"text":{"39":{},"142":{},"191":{},"306":{}},"component":{}}],["prepar",{"_index":2915,"title":{},"name":{},"text":{"97":{},"178":{},"270":{}},"component":{}}],["prepend",{"_index":2121,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["prerequisit",{"_index":0,"title":{"1-1":{},"9-1":{},"84-1":{},"92-1":{},"173-1":{},"213-1":{},"215-2":{},"220-1":{},"265-1":{},"344-1":{},"346-2":{},"347-1":{}},"name":{},"text":{},"component":{}}],["present",{"_index":2202,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["preserv",{"_index":740,"title":{},"name":{},"text":{"4":{},"27":{},"87":{},"130":{},"217":{},"254":{},"260":{},"318":{}},"component":{}}],["pretti",{"_index":878,"title":{},"name":{},"text":{"7":{},"11":{},"50":{},"90":{},"94":{},"143":{},"171":{},"175":{},"197":{},"263":{},"267":{},"336":{}},"component":{}}],["prevent",{"_index":992,"title":{},"name":{},"text":{"10":{},"34":{},"36":{},"37":{},"50":{},"93":{},"97":{},"137":{},"139":{},"140":{},"143":{},"174":{},"178":{},"186":{},"188":{},"189":{},"197":{},"266":{},"270":{},"300":{},"302":{},"303":{},"336":{}},"component":{}}],["previou",{"_index":2471,"title":{},"name":{},"text":{"67":{},"169":{},"182":{},"224":{},"246":{},"275":{},"297":{},"310":{},"339":{}},"component":{}}],["previous",{"_index":2397,"title":{},"name":{},"text":{"61":{},"118":{},"205":{},"296":{}},"component":{}}],["price",{"_index":1161,"title":{},"name":{},"text":{"12":{},"95":{},"176":{},"268":{}},"component":{}}],["primari",{"_index":2423,"title":{},"name":{},"text":{"64":{},"166":{},"221":{},"275":{},"342":{}},"component":{}}],["primit",{"_index":1674,"title":{"50-6":{},"143-6":{},"197-6":{},"336-6":{}},"name":{},"text":{"32":{},"33":{},"43":{},"50":{},"107":{},"135":{},"136":{},"143":{},"184":{},"185":{},"195":{},"197":{},"324":{},"325":{},"329":{},"336":{}},"component":{}}],["principl",{"_index":2167,"title":{},"name":{},"text":{"50":{},"97":{},"143":{},"178":{},"197":{},"270":{},"275":{},"336":{}},"component":{}}],["print",{"_index":926,"title":{},"name":{},"text":{"9":{},"51":{},"92":{},"144":{},"173":{},"198":{},"265":{},"337":{}},"component":{}}],["printer",{"_index":2240,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["printinglegacytypemappingresultor.new(persistencelegacytypemappingresultor.new",{"_index":2239,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["prior",{"_index":2632,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["priorityqueu",{"_index":1706,"title":{},"name":{},"text":{"32":{},"86":{},"135":{},"184":{},"216":{},"259":{},"324":{}},"component":{}}],["privat",{"_index":947,"title":{},"name":{},"text":{"9":{},"22":{},"23":{},"29":{},"30":{},"59":{},"63":{},"67":{},"92":{},"115":{},"120":{},"125":{},"126":{},"132":{},"133":{},"169":{},"173":{},"202":{},"207":{},"224":{},"243":{},"246":{},"249":{},"250":{},"257":{},"258":{},"265":{},"271":{},"274":{},"275":{},"293":{},"299":{},"313":{},"314":{},"321":{},"322":{},"339":{}},"component":{}}],["privi",{"_index":2091,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["probabl",{"_index":1027,"title":{},"name":{},"text":{"10":{},"50":{},"58":{},"66":{},"93":{},"114":{},"143":{},"168":{},"174":{},"197":{},"201":{},"223":{},"266":{},"277":{},"336":{},"338":{}},"component":{}}],["problem",{"_index":552,"title":{},"name":{},"text":{"3":{},"7":{},"12":{},"14":{},"33":{},"49":{},"50":{},"67":{},"77":{},"86":{},"90":{},"95":{},"97":{},"136":{},"143":{},"150":{},"159":{},"169":{},"171":{},"176":{},"178":{},"185":{},"197":{},"212":{},"216":{},"224":{},"259":{},"263":{},"268":{},"270":{},"325":{},"335":{},"336":{},"339":{}},"component":{}}],["proce",{"_index":2693,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["procedur",{"_index":1935,"title":{},"name":{},"text":{"43":{},"107":{},"195":{},"329":{}},"component":{}}],["process",{"_index":548,"title":{"47-4":{},"148-4":{},"210-4":{},"333-4":{}},"name":{},"text":{"3":{},"4":{},"7":{},"8":{},"10":{},"12":{},"14":{},"44":{},"47":{},"49":{},"50":{},"86":{},"87":{},"90":{},"91":{},"93":{},"95":{},"97":{},"108":{},"143":{},"148":{},"150":{},"171":{},"172":{},"174":{},"176":{},"178":{},"196":{},"197":{},"210":{},"212":{},"216":{},"217":{},"246":{},"259":{},"260":{},"263":{},"264":{},"266":{},"268":{},"270":{},"275":{},"304":{},"330":{},"333":{},"335":{},"336":{}},"component":{}}],["processor",{"_index":1337,"title":{},"name":{},"text":{"20":{},"23":{},"28":{},"29":{},"37":{},"123":{},"126":{},"131":{},"132":{},"140":{},"189":{},"247":{},"250":{},"256":{},"257":{},"303":{},"311":{},"314":{},"320":{},"321":{}},"component":{}}],["procrastin",{"_index":2457,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["produc",{"_index":1093,"title":{},"name":{},"text":{"11":{},"29":{},"94":{},"132":{},"175":{},"257":{},"267":{},"321":{}},"component":{}}],["product",{"_index":1475,"title":{},"name":{},"text":{"23":{},"50":{},"58":{},"114":{},"126":{},"143":{},"197":{},"201":{},"250":{},"271":{},"277":{},"314":{},"336":{}},"component":{}}],["profil",{"_index":2551,"title":{},"name":{},"text":{"69":{},"70":{},"74":{},"75":{},"151":{},"152":{},"156":{},"157":{},"226":{},"227":{},"231":{},"271":{},"278":{},"279":{},"284":{}},"component":{}}],["program",{"_index":707,"title":{},"name":{},"text":{"4":{},"6":{},"12":{},"50":{},"67":{},"87":{},"89":{},"95":{},"116":{},"143":{},"169":{},"176":{},"197":{},"203":{},"217":{},"219":{},"224":{},"260":{},"262":{},"268":{},"294":{},"336":{},"339":{}},"component":{}}],["programmat",{"_index":3122,"title":{},"name":{},"text":{"243":{},"271":{},"274":{}},"component":{}}],["progress",{"_index":2690,"title":{},"name":{},"text":{"77":{},"159":{},"275":{}},"component":{}}],["prohibit",{"_index":1606,"title":{},"name":{},"text":{"28":{},"131":{},"256":{},"320":{}},"component":{}}],["project",{"_index":152,"title":{"31":{},"134":{},"183":{},"323":{}},"name":{"31":{},"134":{},"183":{},"323":{}},"text":{"2":{},"3":{},"31":{},"43":{},"50":{},"85":{},"86":{},"107":{},"134":{},"143":{},"182":{},"183":{},"195":{},"197":{},"213":{},"214":{},"216":{},"246":{},"259":{},"274":{},"275":{},"281":{},"310":{},"323":{},"329":{},"336":{},"344":{},"345":{}},"component":{}}],["project(",{"_index":1116,"title":{},"name":{},"text":{"11":{},"94":{},"175":{}},"component":{}}],["properli",{"_index":538,"title":{},"name":{},"text":{"3":{},"46":{},"50":{},"86":{},"143":{},"147":{},"197":{},"209":{},"216":{},"259":{},"332":{},"336":{}},"component":{}}],["properti",{"_index":168,"title":{"16":{},"37":{},"99":{},"140":{},"189":{},"239":{},"303":{},"349":{},"69-2":{},"70-2":{},"71-2":{},"72-2":{},"73-2":{},"74-2":{},"151-2":{},"152-2":{},"153-2":{},"154-2":{},"155-2":{},"156-2":{},"226-2":{},"227-2":{},"228-2":{},"229-2":{},"230-2":{},"278-2":{},"279-2":{},"280-2":{},"281-2":{},"282-2":{},"283-2":{}},"name":{"16":{},"37":{},"99":{},"140":{},"189":{},"239":{},"303":{},"349":{}},"text":{"2":{},"3":{},"15":{},"16":{},"17":{},"18":{},"21":{},"23":{},"26":{},"32":{},"34":{},"35":{},"37":{},"38":{},"39":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"85":{},"86":{},"98":{},"99":{},"100":{},"121":{},"124":{},"126":{},"129":{},"135":{},"137":{},"138":{},"140":{},"141":{},"142":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"184":{},"186":{},"187":{},"189":{},"190":{},"191":{},"214":{},"216":{},"226":{},"227":{},"228":{},"229":{},"230":{},"231":{},"232":{},"233":{},"238":{},"239":{},"240":{},"241":{},"243":{},"246":{},"248":{},"250":{},"253":{},"259":{},"271":{},"275":{},"278":{},"279":{},"280":{},"281":{},"282":{},"283":{},"284":{},"285":{},"286":{},"300":{},"301":{},"303":{},"305":{},"306":{},"312":{},"314":{},"317":{},"324":{},"340":{},"345":{},"347":{},"348":{},"349":{},"350":{},"351":{}},"component":{}}],["properties.bootstrap.servers=localhost:9093",{"_index":2587,"title":{},"name":{},"text":{"73":{},"155":{},"230":{},"283":{}},"component":{}}],["properties.setproperti",{"_index":2583,"title":{},"name":{},"text":{"73":{},"155":{},"230":{},"283":{}},"component":{}}],["proprietari",{"_index":113,"title":{},"name":{},"text":{"2":{},"36":{},"85":{},"139":{},"188":{},"214":{},"302":{},"345":{}},"component":{}}],["protect",{"_index":1395,"title":{},"name":{},"text":{"22":{},"23":{},"30":{},"125":{},"126":{},"133":{},"249":{},"250":{},"258":{},"313":{},"314":{},"322":{}},"component":{}}],["protocol",{"_index":713,"title":{},"name":{},"text":{"4":{},"74":{},"77":{},"87":{},"156":{},"159":{},"215":{},"217":{},"260":{},"346":{}},"component":{}}],["prototyp",{"_index":2372,"title":{},"name":{},"text":{"58":{},"114":{},"201":{},"277":{}},"component":{}}],["proverbi",{"_index":625,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["provid",{"_index":13,"title":{"43-3":{},"49-4":{},"49-5":{},"107-3":{},"150-4":{},"150-5":{},"195-3":{},"212-4":{},"212-5":{},"329-3":{},"335-4":{},"335-5":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"11":{},"12":{},"15":{},"17":{},"19":{},"20":{},"21":{},"23":{},"24":{},"28":{},"30":{},"32":{},"35":{},"36":{},"38":{},"40":{},"41":{},"49":{},"50":{},"53":{},"54":{},"59":{},"61":{},"62":{},"65":{},"68":{},"69":{},"70":{},"71":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"94":{},"95":{},"97":{},"98":{},"100":{},"104":{},"105":{},"109":{},"110":{},"115":{},"116":{},"118":{},"119":{},"122":{},"123":{},"124":{},"126":{},"127":{},"131":{},"133":{},"135":{},"138":{},"139":{},"141":{},"143":{},"150":{},"151":{},"152":{},"153":{},"161":{},"162":{},"163":{},"164":{},"165":{},"167":{},"170":{},"175":{},"176":{},"178":{},"179":{},"180":{},"182":{},"184":{},"187":{},"188":{},"190":{},"192":{},"193":{},"197":{},"202":{},"203":{},"205":{},"206":{},"212":{},"213":{},"214":{},"215":{},"216":{},"217":{},"222":{},"225":{},"226":{},"227":{},"228":{},"234":{},"235":{},"236":{},"237":{},"238":{},"240":{},"242":{},"243":{},"246":{},"247":{},"248":{},"250":{},"251":{},"256":{},"258":{},"259":{},"260":{},"267":{},"268":{},"270":{},"271":{},"274":{},"275":{},"278":{},"279":{},"280":{},"281":{},"282":{},"283":{},"284":{},"285":{},"286":{},"287":{},"288":{},"289":{},"290":{},"291":{},"293":{},"294":{},"296":{},"298":{},"301":{},"302":{},"305":{},"307":{},"308":{},"310":{},"311":{},"312":{},"314":{},"315":{},"320":{},"322":{},"324":{},"326":{},"327":{},"335":{},"336":{},"341":{},"343":{},"344":{},"345":{},"346":{},"347":{},"348":{},"350":{},"352":{}},"component":{}}],["providedatasource(configur",{"_index":2761,"title":{},"name":{},"text":{"79":{},"80":{},"81":{},"82":{},"83":{},"161":{},"162":{},"163":{},"164":{},"165":{},"234":{},"235":{},"236":{},"237":{},"287":{},"288":{},"289":{},"290":{},"291":{}},"component":{}}],["provider.get(databasecolor.green.getnam",{"_index":3282,"title":{},"name":{},"text":{"275":{}},"component":{}}],["provider.get(databasecolor.red.getnam",{"_index":3285,"title":{},"name":{},"text":{"275":{}},"component":{}}],["provider.getcachemanag",{"_index":17,"title":{},"name":{},"text":{"1":{},"15":{},"17":{},"84":{},"98":{},"100":{},"213":{},"238":{},"240":{},"344":{},"348":{},"350":{}},"component":{}}],["provider=com.sample.mydatasourceprovid",{"_index":2750,"title":{},"name":{},"text":{"79":{},"80":{},"81":{},"82":{},"83":{},"161":{},"162":{},"163":{},"164":{},"165":{},"234":{},"235":{},"236":{},"237":{},"287":{},"288":{},"289":{},"290":{},"291":{}},"component":{}}],["providetypehandl",{"_index":1964,"title":{},"name":{},"text":{"43":{},"107":{},"195":{},"329":{}},"component":{}}],["provision",{"_index":583,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["proxi",{"_index":1195,"title":{},"name":{},"text":{"12":{},"67":{},"95":{},"169":{},"176":{},"224":{},"268":{},"339":{}},"component":{}}],["pseudo",{"_index":1938,"title":{},"name":{},"text":{"43":{},"107":{},"195":{},"329":{}},"component":{}}],["pseudocod",{"_index":2952,"title":{},"name":{},"text":{"116":{},"203":{},"294":{}},"component":{}}],["public",{"_index":497,"title":{},"name":{},"text":{"3":{},"6":{},"9":{},"13":{},"19":{},"21":{},"22":{},"23":{},"24":{},"28":{},"29":{},"30":{},"42":{},"43":{},"50":{},"59":{},"63":{},"67":{},"68":{},"79":{},"80":{},"81":{},"82":{},"83":{},"86":{},"89":{},"92":{},"96":{},"106":{},"107":{},"115":{},"120":{},"122":{},"124":{},"125":{},"126":{},"127":{},"131":{},"132":{},"133":{},"143":{},"161":{},"162":{},"163":{},"164":{},"165":{},"169":{},"170":{},"173":{},"177":{},"194":{},"195":{},"197":{},"202":{},"207":{},"215":{},"216":{},"219":{},"224":{},"225":{},"234":{},"235":{},"236":{},"237":{},"242":{},"243":{},"246":{},"248":{},"249":{},"250":{},"251":{},"256":{},"257":{},"258":{},"259":{},"262":{},"265":{},"269":{},"271":{},"274":{},"275":{},"287":{},"288":{},"289":{},"290":{},"291":{},"293":{},"299":{},"312":{},"313":{},"314":{},"315":{},"320":{},"321":{},"322":{},"328":{},"329":{},"336":{},"339":{},"341":{},"346":{},"352":{}},"component":{}}],["public/one/microstream/storage.restclient.app/05.00.02",{"_index":2289,"title":{},"name":{},"text":{"53":{}},"component":{}}],["pump",{"_index":2478,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["purchas",{"_index":2937,"title":{},"name":{},"text":{"116":{},"203":{},"294":{}},"component":{}}],["pure",{"_index":924,"title":{},"name":{},"text":{"9":{},"92":{},"173":{},"265":{}},"component":{}}],["purpos",{"_index":159,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"12":{},"24":{},"35":{},"54":{},"58":{},"67":{},"85":{},"86":{},"87":{},"95":{},"110":{},"114":{},"127":{},"138":{},"169":{},"176":{},"180":{},"187":{},"201":{},"214":{},"216":{},"217":{},"220":{},"224":{},"251":{},"259":{},"260":{},"268":{},"277":{},"281":{},"301":{},"308":{},"315":{},"339":{},"345":{},"347":{}},"component":{}}],["push",{"_index":626,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["put",{"_index":63,"title":{},"name":{},"text":{"1":{},"2":{},"4":{},"16":{},"50":{},"67":{},"84":{},"85":{},"87":{},"99":{},"143":{},"169":{},"197":{},"213":{},"214":{},"217":{},"224":{},"239":{},"260":{},"336":{},"339":{},"344":{},"345":{},"349":{}},"component":{}}],["putlob",{"_index":2709,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["qualifi",{"_index":42,"title":{},"name":{},"text":{"1":{},"50":{},"84":{},"143":{},"197":{},"213":{},"239":{},"246":{},"275":{},"336":{},"344":{},"349":{}},"component":{}}],["qualifier(\"green",{"_index":3280,"title":{},"name":{},"text":{"275":{}},"component":{}}],["qualifier(\"r",{"_index":3283,"title":{},"name":{},"text":{"275":{}},"component":{}}],["quarku",{"_index":3205,"title":{"274":{}},"name":{"274":{}},"text":{"259":{},"273":{},"274":{}},"component":{}}],["quarkus.log.category.\"one.microstream\".level=debug",{"_index":3268,"title":{},"name":{},"text":{"274":{}},"component":{}}],["quarkus.log.category.\"one.microstream.integrations.quarkus\".level=debug",{"_index":3269,"title":{},"name":{},"text":{"274":{}},"component":{}}],["quarkus3",{"_index":3261,"title":{},"name":{},"text":{"274":{}},"component":{}}],["quarkus:add",{"_index":3257,"title":{},"name":{},"text":{"274":{}},"component":{}}],["queri",{"_index":1155,"title":{"13":{},"96":{},"177":{},"269":{}},"name":{"13":{},"96":{},"177":{},"269":{}},"text":{"12":{},"13":{},"54":{},"55":{},"66":{},"68":{},"74":{},"95":{},"96":{},"110":{},"111":{},"156":{},"168":{},"170":{},"176":{},"177":{},"180":{},"181":{},"223":{},"225":{},"268":{},"269":{},"308":{},"309":{},"338":{},"341":{}},"component":{}}],["question",{"_index":2156,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["queue",{"_index":1073,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["quick",{"_index":1213,"title":{},"name":{},"text":{"14":{},"97":{},"178":{},"270":{}},"component":{}}],["quickli",{"_index":1048,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["quota",{"_index":2452,"title":{},"name":{},"text":{"66":{},"168":{},"223":{},"281":{},"338":{}},"component":{}}],["race",{"_index":532,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["ram",{"_index":1833,"title":{},"name":{},"text":{"37":{},"67":{},"140":{},"169":{},"189":{},"224":{},"303":{},"339":{}},"component":{}}],["rang",{"_index":1580,"title":{},"name":{},"text":{"27":{},"130":{},"254":{},"318":{}},"component":{}}],["rapid",{"_index":2722,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["rapidli",{"_index":1025,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["rare",{"_index":1803,"title":{},"name":{},"text":{"36":{},"43":{},"107":{},"139":{},"188":{},"195":{},"302":{},"329":{}},"component":{}}],["ratio",{"_index":445,"title":{"37-7":{},"140-7":{},"189-7":{},"303-7":{}},"name":{},"text":{"3":{},"10":{},"34":{},"37":{},"86":{},"93":{},"137":{},"140":{},"174":{},"186":{},"189":{},"216":{},"259":{},"266":{},"300":{},"303":{}},"component":{}}],["re",{"_index":2743,"title":{},"name":{},"text":{"78":{},"160":{},"233":{},"286":{},"297":{}},"component":{}}],["reach",{"_index":2505,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["reachabl",{"_index":912,"title":{},"name":{},"text":{"8":{},"10":{},"50":{},"91":{},"93":{},"143":{},"172":{},"174":{},"197":{},"264":{},"266":{},"336":{}},"component":{}}],["reactor",{"_index":2816,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["read",{"_index":397,"title":{"304":{}},"name":{},"text":{"3":{},"7":{},"10":{},"11":{},"14":{},"15":{},"16":{},"28":{},"31":{},"34":{},"35":{},"37":{},"50":{},"54":{},"74":{},"77":{},"86":{},"90":{},"93":{},"94":{},"97":{},"98":{},"99":{},"110":{},"131":{},"134":{},"137":{},"138":{},"140":{},"143":{},"156":{},"159":{},"171":{},"174":{},"175":{},"178":{},"180":{},"183":{},"186":{},"187":{},"189":{},"197":{},"216":{},"238":{},"239":{},"240":{},"243":{},"246":{},"256":{},"259":{},"263":{},"266":{},"267":{},"270":{},"271":{},"275":{},"300":{},"301":{},"303":{},"304":{},"308":{},"320":{},"323":{},"336":{},"340":{},"348":{},"349":{},"350":{}},"component":{}}],["readabl",{"_index":1122,"title":{},"name":{},"text":{"11":{},"54":{},"67":{},"94":{},"110":{},"169":{},"175":{},"180":{},"224":{},"267":{},"308":{},"339":{}},"component":{}}],["readi",{"_index":1470,"title":{},"name":{},"text":{"23":{},"50":{},"126":{},"143":{},"197":{},"250":{},"314":{},"336":{}},"component":{}}],["readm",{"_index":2925,"title":{},"name":{},"text":{"103":{}},"component":{}}],["readonli",{"_index":3336,"title":{},"name":{"304":{}},"text":{},"component":{}}],["readthrough",{"_index":396,"title":{},"name":{},"text":{"3":{},"16":{},"17":{},"86":{},"99":{},"100":{},"216":{},"240":{},"259":{},"350":{}},"component":{}}],["real",{"_index":2208,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["realli",{"_index":840,"title":{"45-2":{},"146-2":{},"208-2":{},"331-2":{}},"name":{},"text":{"7":{},"12":{},"50":{},"51":{},"54":{},"67":{},"90":{},"95":{},"110":{},"143":{},"144":{},"169":{},"171":{},"176":{},"180":{},"197":{},"198":{},"224":{},"263":{},"268":{},"308":{},"336":{},"337":{},"339":{}},"component":{}}],["reason",{"_index":506,"title":{},"name":{},"text":{"3":{},"10":{},"12":{},"43":{},"50":{},"86":{},"93":{},"95":{},"107":{},"143":{},"174":{},"176":{},"195":{},"197":{},"216":{},"259":{},"266":{},"268":{},"329":{},"336":{}},"component":{}}],["receiv",{"_index":704,"title":{},"name":{},"text":{"4":{},"87":{},"215":{},"217":{},"243":{},"260":{},"271":{},"275":{},"340":{},"346":{}},"component":{}}],["recogn",{"_index":872,"title":{},"name":{},"text":{"7":{},"10":{},"43":{},"90":{},"93":{},"107":{},"171":{},"174":{},"195":{},"263":{},"266":{},"329":{}},"component":{}}],["recognit",{"_index":518,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["recommend",{"_index":2276,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{},"340":{}},"component":{}}],["record",{"_index":1089,"title":{"48-2":{},"149-2":{},"211-2":{},"334-2":{}},"name":{},"text":{"11":{},"14":{},"33":{},"43":{},"48":{},"50":{},"67":{},"94":{},"97":{},"107":{},"136":{},"143":{},"149":{},"169":{},"175":{},"178":{},"185":{},"195":{},"197":{},"211":{},"224":{},"267":{},"270":{},"325":{},"329":{},"334":{},"336":{},"339":{}},"component":{}}],["recoveri",{"_index":2724,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["recreat",{"_index":1997,"title":{},"name":{},"text":{"46":{},"147":{},"209":{},"332":{}},"component":{}}],["recurs",{"_index":567,"title":{},"name":{},"text":{"3":{},"50":{},"62":{},"86":{},"119":{},"143":{},"197":{},"206":{},"216":{},"259":{},"298":{},"336":{}},"component":{}}],["recyclerview",{"_index":1655,"title":{"31-4":{},"134-4":{},"183-4":{},"323-4":{}},"name":{},"text":{"31":{},"134":{},"183":{},"323":{}},"component":{}}],["red",{"_index":774,"title":{},"name":{},"text":{"5":{},"88":{},"218":{},"261":{},"275":{}},"component":{}}],["red\".equals(storagemanager.databasenam",{"_index":3296,"title":{},"name":{},"text":{"275":{}},"component":{}}],["redi",{"_index":292,"title":{"78":{},"160":{},"233":{},"286":{}},"name":{"78":{},"160":{},"233":{},"286":{}},"text":{"3":{},"4":{},"78":{},"86":{},"87":{},"160":{},"216":{},"217":{},"233":{},"259":{},"260":{},"286":{}},"component":{}}],["redis.uri",{"_index":2738,"title":{},"name":{},"text":{"78":{},"160":{},"233":{},"286":{}},"component":{}}],["redis://localhost:6379/0",{"_index":2735,"title":{},"name":{},"text":{"78":{},"160":{},"233":{},"286":{}},"component":{}}],["redis:one.microstream.enterprise.afs.redis.typ",{"_index":346,"title":{},"name":{},"text":{"3":{}},"component":{}}],["redisconnector.caching(redisuri",{"_index":2736,"title":{},"name":{},"text":{"78":{},"160":{},"233":{},"286":{}},"component":{}}],["redisuri",{"_index":2734,"title":{},"name":{},"text":{"78":{},"160":{},"233":{},"286":{}},"component":{}}],["redon",{"_index":1640,"title":{},"name":{},"text":{"29":{},"132":{},"257":{},"321":{}},"component":{}}],["reduc",{"_index":1671,"title":{},"name":{},"text":{"32":{},"135":{},"184":{},"216":{},"259":{},"324":{},"347":{}},"component":{}}],["redund",{"_index":1163,"title":{},"name":{},"text":{"12":{},"95":{},"176":{},"268":{}},"component":{}}],["refactor",{"_index":620,"title":{},"name":{},"text":{"3":{},"50":{},"51":{},"86":{},"143":{},"144":{},"197":{},"198":{},"216":{},"259":{},"336":{},"337":{}},"component":{}}],["refactorings.csv",{"_index":2135,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["refer",{"_index":54,"title":{"44":{},"66":{},"108":{},"168":{},"196":{},"223":{},"330":{},"338":{},"50-7":{},"68-1":{},"143-7":{},"170-1":{},"197-7":{},"225-1":{},"336-7":{},"341-1":{}},"name":{"44":{},"66":{},"108":{},"168":{},"196":{},"223":{},"330":{},"338":{}},"text":{"1":{},"3":{},"6":{},"8":{},"10":{},"14":{},"23":{},"33":{},"37":{},"43":{},"44":{},"45":{},"49":{},"50":{},"55":{},"60":{},"62":{},"66":{},"67":{},"68":{},"84":{},"86":{},"89":{},"91":{},"93":{},"97":{},"107":{},"108":{},"111":{},"116":{},"117":{},"119":{},"126":{},"136":{},"140":{},"143":{},"146":{},"150":{},"168":{},"169":{},"170":{},"172":{},"174":{},"178":{},"181":{},"185":{},"189":{},"195":{},"196":{},"197":{},"203":{},"204":{},"206":{},"208":{},"212":{},"213":{},"215":{},"216":{},"219":{},"223":{},"224":{},"225":{},"250":{},"259":{},"262":{},"264":{},"266":{},"270":{},"294":{},"295":{},"298":{},"303":{},"304":{},"309":{},"314":{},"325":{},"329":{},"330":{},"331":{},"335":{},"336":{},"338":{},"339":{},"341":{},"344":{},"346":{}},"component":{}}],["referenc",{"_index":1465,"title":{},"name":{},"text":{"23":{},"33":{},"50":{},"60":{},"61":{},"62":{},"66":{},"68":{},"117":{},"118":{},"119":{},"126":{},"136":{},"143":{},"168":{},"170":{},"185":{},"197":{},"204":{},"205":{},"206":{},"223":{},"225":{},"250":{},"295":{},"296":{},"298":{},"314":{},"325":{},"336":{},"338":{},"341":{}},"component":{}}],["reference/integration.html#cach",{"_index":1336,"title":{},"name":{},"text":{"19":{},"122":{},"242":{},"352":{}},"component":{}}],["referenti",{"_index":1468,"title":{},"name":{},"text":{"23":{},"33":{},"126":{},"136":{},"185":{},"250":{},"314":{},"325":{}},"component":{}}],["reflect",{"_index":1940,"title":{},"name":{},"text":{"43":{},"48":{},"50":{},"107":{},"143":{},"149":{},"195":{},"197":{},"211":{},"275":{},"329":{},"334":{},"336":{}},"component":{}}],["regard",{"_index":547,"title":{},"name":{},"text":{"3":{},"7":{},"23":{},"86":{},"90":{},"126":{},"171":{},"216":{},"250":{},"259":{},"263":{},"314":{}},"component":{}}],["regardless",{"_index":2694,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["region",{"_index":522,"title":{},"name":{},"text":{"3":{},"4":{},"17":{},"18":{},"69":{},"70":{},"75":{},"86":{},"87":{},"100":{},"121":{},"151":{},"152":{},"157":{},"216":{},"217":{},"226":{},"227":{},"231":{},"240":{},"241":{},"259":{},"260":{},"278":{},"279":{},"284":{},"350":{},"351":{}},"component":{}}],["regist",{"_index":1217,"title":{},"name":{},"text":{"14":{},"33":{},"42":{},"43":{},"50":{},"60":{},"66":{},"97":{},"106":{},"107":{},"117":{},"136":{},"143":{},"168":{},"178":{},"185":{},"194":{},"195":{},"197":{},"204":{},"215":{},"223":{},"270":{},"295":{},"325":{},"328":{},"329":{},"336":{},"338":{},"346":{},"347":{}},"component":{}}],["registerentitytyp",{"_index":3010,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["registerentitytypes(customer.class",{"_index":3094,"title":{},"name":{},"text":{"220":{},"347":{}},"component":{}}],["registr",{"_index":905,"title":{},"name":{},"text":{"7":{},"90":{},"171":{},"263":{},"347":{}},"component":{}}],["registri",{"_index":2405,"title":{},"name":{},"text":{"62":{},"66":{},"77":{},"119":{},"159":{},"168":{},"206":{},"223":{},"298":{},"338":{},"347":{}},"component":{}}],["regress",{"_index":192,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["regular",{"_index":3119,"title":{},"name":{},"text":{"243":{},"271":{}},"component":{}}],["rel",{"_index":1995,"title":{},"name":{},"text":{"45":{},"77":{},"116":{},"146":{},"159":{},"203":{},"208":{},"239":{},"294":{},"331":{},"349":{}},"component":{}}],["relat",{"_index":1062,"title":{},"name":{},"text":{"10":{},"38":{},"93":{},"141":{},"174":{},"190":{},"266":{},"274":{},"275":{},"305":{}},"component":{}}],["relay",{"_index":2998,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["releas",{"_index":188,"title":{},"name":{},"text":{"3":{},"49":{},"86":{},"101":{},"150":{},"212":{},"216":{},"244":{},"259":{},"272":{},"335":{}},"component":{}}],["relev",{"_index":577,"title":{},"name":{},"text":{"3":{},"47":{},"86":{},"148":{},"210":{},"216":{},"259":{},"333":{}},"component":{}}],["reli",{"_index":2275,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["reliabl",{"_index":857,"title":{},"name":{},"text":{"7":{},"36":{},"90":{},"139":{},"171":{},"188":{},"263":{},"302":{}},"component":{}}],["reload",{"_index":2195,"title":{"297":{}},"name":{"297":{}},"text":{"50":{},"66":{},"67":{},"143":{},"168":{},"169":{},"197":{},"223":{},"224":{},"297":{},"336":{},"338":{},"339":{}},"component":{}}],["reloaddeep",{"_index":3333,"title":{},"name":{},"text":{"297":{}},"component":{}}],["reloader.new(persistencemanag",{"_index":3334,"title":{},"name":{},"text":{"297":{}},"component":{}}],["reloader.reloadflat(root.getdata",{"_index":3335,"title":{},"name":{},"text":{"297":{}},"component":{}}],["reloadflat",{"_index":3332,"title":{},"name":{},"text":{"297":{}},"component":{}}],["remain",{"_index":505,"title":{},"name":{},"text":{"3":{},"50":{},"86":{},"116":{},"143":{},"197":{},"203":{},"216":{},"259":{},"294":{},"336":{}},"component":{}}],["rememb",{"_index":3237,"title":{},"name":{},"text":{"259":{},"304":{}},"component":{}}],["remov",{"_index":475,"title":{},"name":{},"text":{"3":{},"12":{},"37":{},"50":{},"66":{},"86":{},"95":{},"140":{},"143":{},"168":{},"176":{},"189":{},"197":{},"216":{},"223":{},"259":{},"268":{},"303":{},"304":{},"336":{},"338":{}},"component":{}}],["renam",{"_index":205,"title":{},"name":{},"text":{"3":{},"50":{},"86":{},"143":{},"197":{},"216":{},"259":{},"336":{}},"component":{}}],["render",{"_index":2037,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["reorder",{"_index":2044,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["reorgan",{"_index":3340,"title":{},"name":{},"text":{"304":{}},"component":{}}],["repeat",{"_index":1057,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["replac",{"_index":149,"title":{},"name":{},"text":{"2":{},"3":{},"9":{},"12":{},"23":{},"26":{},"50":{},"67":{},"72":{},"85":{},"86":{},"92":{},"95":{},"126":{},"129":{},"143":{},"154":{},"169":{},"173":{},"176":{},"197":{},"214":{},"216":{},"220":{},"224":{},"229":{},"246":{},"250":{},"253":{},"259":{},"265":{},"268":{},"275":{},"282":{},"314":{},"317":{},"336":{},"339":{},"345":{},"347":{}},"component":{}}],["replic",{"_index":2606,"title":{},"name":{},"text":{"74":{},"77":{},"156":{},"159":{}},"component":{}}],["replica",{"_index":2601,"title":{},"name":{},"text":{"74":{},"77":{},"156":{},"159":{}},"component":{}}],["repositori",{"_index":464,"title":{},"name":{},"text":{"3":{},"4":{},"86":{},"87":{},"101":{},"216":{},"217":{},"244":{},"259":{},"260":{},"272":{}},"component":{}}],["repres",{"_index":151,"title":{},"name":{},"text":{"2":{},"10":{},"11":{},"23":{},"39":{},"47":{},"49":{},"85":{},"93":{},"94":{},"126":{},"142":{},"148":{},"150":{},"174":{},"175":{},"191":{},"210":{},"212":{},"214":{},"250":{},"266":{},"267":{},"306":{},"314":{},"333":{},"335":{},"345":{}},"component":{}}],["represent",{"_index":733,"title":{},"name":{},"text":{"4":{},"74":{},"87":{},"156":{},"217":{},"260":{}},"component":{}}],["request",{"_index":835,"title":{},"name":{},"text":{"7":{},"10":{},"40":{},"50":{},"55":{},"77":{},"90":{},"93":{},"104":{},"111":{},"143":{},"159":{},"171":{},"174":{},"181":{},"192":{},"197":{},"240":{},"246":{},"263":{},"266":{},"275":{},"309":{},"326":{},"336":{},"340":{},"350":{}},"component":{}}],["requir",{"_index":767,"title":{"5":{},"88":{},"218":{},"261":{}},"name":{"5":{},"88":{},"218":{},"261":{}},"text":{"8":{},"9":{},"16":{},"22":{},"23":{},"33":{},"37":{},"41":{},"43":{},"45":{},"47":{},"50":{},"51":{},"52":{},"54":{},"58":{},"61":{},"62":{},"68":{},"77":{},"91":{},"92":{},"99":{},"105":{},"107":{},"110":{},"114":{},"116":{},"118":{},"119":{},"125":{},"126":{},"136":{},"140":{},"143":{},"144":{},"145":{},"146":{},"148":{},"159":{},"170":{},"172":{},"173":{},"180":{},"185":{},"189":{},"193":{},"195":{},"197":{},"198":{},"199":{},"201":{},"203":{},"205":{},"206":{},"208":{},"210":{},"215":{},"225":{},"239":{},"243":{},"246":{},"249":{},"250":{},"264":{},"265":{},"271":{},"274":{},"275":{},"277":{},"292":{},"294":{},"296":{},"298":{},"303":{},"308":{},"313":{},"314":{},"325":{},"327":{},"329":{},"331":{},"333":{},"336":{},"337":{},"340":{},"341":{},"346":{},"349":{}},"component":{}}],["rescu",{"_index":426,"title":{},"name":{},"text":{"3":{},"37":{},"86":{},"140":{},"189":{},"216":{},"259":{},"303":{}},"component":{}}],["rescuedfilesuffix",{"_index":425,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["reserv",{"_index":2482,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["resid",{"_index":1988,"title":{},"name":{},"text":{"45":{},"54":{},"110":{},"146":{},"180":{},"208":{},"308":{},"331":{}},"component":{}}],["resolv",{"_index":551,"title":{},"name":{},"text":{"3":{},"14":{},"33":{},"50":{},"56":{},"72":{},"86":{},"97":{},"112":{},"136":{},"143":{},"154":{},"178":{},"182":{},"185":{},"197":{},"216":{},"229":{},"243":{},"246":{},"259":{},"270":{},"271":{},"274":{},"275":{},"282":{},"310":{},"325":{},"336":{}},"component":{}}],["resourc",{"_index":388,"title":{},"name":{},"text":{"3":{},"16":{},"72":{},"86":{},"99":{},"154":{},"203":{},"216":{},"229":{},"239":{},"240":{},"259":{},"282":{},"294":{},"349":{},"350":{}},"component":{}}],["respect",{"_index":51,"title":{},"name":{},"text":{"1":{},"10":{},"84":{},"93":{},"174":{},"213":{},"240":{},"266":{},"344":{},"350":{}},"component":{}}],["respons",{"_index":155,"title":{},"name":{},"text":{"2":{},"55":{},"85":{},"111":{},"181":{},"214":{},"309":{},"345":{}},"component":{}}],["rest",{"_index":523,"title":{"54":{},"55":{},"110":{},"111":{},"180":{},"181":{},"308":{},"309":{},"56-1":{},"112-1":{},"182-1":{},"310-1":{}},"name":{"55":{},"111":{},"181":{},"309":{}},"text":{"3":{},"4":{},"50":{},"51":{},"53":{},"54":{},"56":{},"86":{},"87":{},"109":{},"110":{},"112":{},"143":{},"144":{},"179":{},"180":{},"182":{},"197":{},"198":{},"216":{},"217":{},"259":{},"260":{},"307":{},"308":{},"310":{},"336":{},"337":{}},"component":{}}],["restadapt",{"_index":303,"title":{},"name":{},"text":{"3":{},"4":{},"54":{},"86":{},"87":{},"110":{},"180":{},"216":{},"217":{},"259":{},"260":{},"308":{}},"component":{}}],["restadapter:one.microstream.storage.restadapter.types,except",{"_index":370,"title":{},"name":{},"text":{"3":{}},"component":{}}],["restart",{"_index":614,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"240":{},"259":{},"350":{}},"component":{}}],["restclient",{"_index":195,"title":{},"name":{},"text":{"3":{},"4":{},"53":{},"54":{},"86":{},"87":{},"109":{},"110":{},"179":{},"180":{},"216":{},"217":{},"259":{},"260":{},"307":{},"308":{}},"component":{}}],["restclient:one.microstream.storage.restclient.types,except",{"_index":372,"title":{},"name":{},"text":{"3":{}},"component":{}}],["restor",{"_index":1152,"title":{},"name":{},"text":{"12":{},"66":{},"95":{},"168":{},"176":{},"220":{},"223":{},"268":{},"297":{},"338":{},"347":{}},"component":{}}],["restrict",{"_index":1199,"title":{},"name":{},"text":{"13":{},"46":{},"47":{},"48":{},"67":{},"96":{},"147":{},"148":{},"149":{},"169":{},"177":{},"209":{},"210":{},"211":{},"224":{},"269":{},"304":{},"332":{},"333":{},"334":{},"339":{}},"component":{}}],["restructur",{"_index":247,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["restservic",{"_index":309,"title":{},"name":{},"text":{"3":{},"4":{},"54":{},"56":{},"86":{},"87":{},"110":{},"112":{},"180":{},"182":{},"216":{},"217":{},"259":{},"260":{},"308":{},"310":{}},"component":{}}],["restservice:one.microstream.storage.restservice.types,except",{"_index":378,"title":{},"name":{},"text":{"3":{}},"component":{}}],["result",{"_index":1278,"title":{},"name":{},"text":{"16":{},"47":{},"50":{},"65":{},"77":{},"99":{},"143":{},"148":{},"159":{},"167":{},"197":{},"210":{},"222":{},"239":{},"246":{},"275":{},"304":{},"333":{},"336":{},"340":{},"343":{},"349":{}},"component":{}}],["resultor",{"_index":2094,"title":{},"name":{},"text":{"50":{},"51":{},"143":{},"144":{},"197":{},"198":{},"336":{},"337":{}},"component":{}}],["resum",{"_index":2708,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["retir",{"_index":1001,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["retri",{"_index":2615,"title":{},"name":{},"text":{"74":{},"77":{},"156":{},"159":{}},"component":{}}],["retriev",{"_index":65,"title":{},"name":{},"text":{"1":{},"76":{},"84":{},"158":{},"213":{},"232":{},"240":{},"243":{},"271":{},"274":{},"285":{},"344":{},"350":{}},"component":{}}],["retrieve/oper",{"_index":3272,"title":{},"name":{},"text":{"275":{}},"component":{}}],["return",{"_index":860,"title":{},"name":{},"text":{"7":{},"9":{},"10":{},"13":{},"14":{},"22":{},"23":{},"27":{},"29":{},"30":{},"40":{},"42":{},"43":{},"50":{},"55":{},"67":{},"68":{},"72":{},"79":{},"80":{},"81":{},"82":{},"83":{},"90":{},"92":{},"93":{},"96":{},"97":{},"104":{},"106":{},"107":{},"111":{},"125":{},"126":{},"130":{},"132":{},"133":{},"143":{},"154":{},"161":{},"162":{},"163":{},"164":{},"165":{},"169":{},"170":{},"171":{},"173":{},"174":{},"177":{},"178":{},"181":{},"192":{},"194":{},"195":{},"197":{},"224":{},"225":{},"229":{},"234":{},"235":{},"236":{},"237":{},"240":{},"249":{},"250":{},"254":{},"257":{},"258":{},"263":{},"265":{},"266":{},"269":{},"270":{},"275":{},"281":{},"282":{},"287":{},"288":{},"289":{},"290":{},"291":{},"309":{},"313":{},"314":{},"318":{},"321":{},"322":{},"326":{},"328":{},"329":{},"336":{},"339":{},"341":{},"347":{},"350":{}},"component":{}}],["reus",{"_index":1633,"title":{},"name":{},"text":{"29":{},"132":{},"257":{},"321":{}},"component":{}}],["revenu",{"_index":2466,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["revert",{"_index":2415,"title":{},"name":{},"text":{"62":{},"119":{},"206":{},"297":{},"298":{}},"component":{}}],["rewir",{"_index":2098,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["rewrit",{"_index":110,"title":{},"name":{},"text":{"2":{},"85":{},"214":{},"345":{}},"component":{}}],["rewritten",{"_index":495,"title":{},"name":{},"text":{"3":{},"50":{},"86":{},"143":{},"197":{},"216":{},"259":{},"336":{}},"component":{}}],["rid",{"_index":2226,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["right",{"_index":2110,"title":{},"name":{},"text":{"50":{},"51":{},"143":{},"144":{},"197":{},"198":{},"336":{},"337":{}},"component":{}}],["rmi",{"_index":2719,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["robust",{"_index":535,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["roll",{"_index":2024,"title":{},"name":{},"text":{"49":{},"150":{},"212":{},"335":{}},"component":{}}],["root",{"_index":592,"title":{"14":{},"97":{},"178":{},"270":{},"9-3":{},"14-2":{},"55-1":{},"60-1":{},"92-3":{},"97-4":{},"111-1":{},"117-1":{},"173-3":{},"178-4":{},"181-1":{},"204-1":{},"243-2":{},"246-3":{},"265-3":{},"270-4":{},"271-2":{},"274-2":{},"275-3":{},"295-1":{},"309-1":{}},"name":{"14":{},"97":{},"178":{},"270":{}},"text":{"3":{},"9":{},"10":{},"14":{},"15":{},"35":{},"50":{},"52":{},"55":{},"60":{},"67":{},"86":{},"92":{},"93":{},"97":{},"98":{},"111":{},"117":{},"138":{},"143":{},"145":{},"169":{},"173":{},"174":{},"178":{},"180":{},"181":{},"182":{},"187":{},"197":{},"199":{},"204":{},"216":{},"224":{},"238":{},"243":{},"246":{},"259":{},"265":{},"266":{},"270":{},"271":{},"274":{},"275":{},"292":{},"295":{},"301":{},"304":{},"308":{},"309":{},"310":{},"336":{},"339":{},"348":{}},"component":{}}],["root.changedata",{"_index":2917,"title":{},"name":{},"text":{"97":{},"178":{},"270":{}},"component":{}}],["root.getcustomer(id",{"_index":2945,"title":{},"name":{},"text":{"116":{},"203":{},"294":{}},"component":{}}],["root.myarraylist.remove(0",{"_index":920,"title":{},"name":{},"text":{"8":{},"91":{},"172":{},"264":{}},"component":{}}],["root.myobjects.add(dataitem",{"_index":2389,"title":{},"name":{},"text":{"60":{},"117":{},"204":{},"295":{}},"component":{}}],["root.printallmyent",{"_index":1237,"title":{},"name":{},"text":{"14":{},"97":{},"178":{},"270":{}},"component":{}}],["root.setcontent(\"hello",{"_index":961,"title":{},"name":{},"text":{"9":{},"92":{},"173":{},"265":{}},"component":{}}],["root.setcustomer(id",{"_index":2949,"title":{},"name":{},"text":{"116":{},"203":{},"294":{}},"component":{}}],["roughli",{"_index":1757,"title":{},"name":{},"text":{"34":{},"137":{},"186":{},"300":{}},"component":{}}],["round",{"_index":2715,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["roundtrip",{"_index":2714,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["ruin",{"_index":987,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["rule",{"_index":1866,"title":{},"name":{},"text":{"38":{},"43":{},"46":{},"47":{},"51":{},"60":{},"107":{},"117":{},"141":{},"144":{},"147":{},"148":{},"190":{},"195":{},"198":{},"204":{},"209":{},"210":{},"239":{},"243":{},"246":{},"271":{},"274":{},"275":{},"295":{},"305":{},"329":{},"332":{},"333":{},"337":{},"349":{}},"component":{}}],["rules_jvm_extern",{"_index":684,"title":{},"name":{},"text":{"4":{},"87":{},"217":{},"260":{}},"component":{}}],["rules_jvm_external_sha",{"_index":682,"title":{},"name":{},"text":{"4":{},"87":{},"217":{},"260":{}},"component":{}}],["rules_jvm_external_tag",{"_index":680,"title":{},"name":{},"text":{"4":{},"87":{},"217":{},"260":{}},"component":{}}],["run",{"_index":246,"title":{},"name":{},"text":{"3":{},"7":{},"10":{},"13":{},"21":{},"36":{},"39":{},"47":{},"50":{},"54":{},"65":{},"69":{},"70":{},"74":{},"86":{},"90":{},"93":{},"96":{},"110":{},"124":{},"139":{},"142":{},"143":{},"148":{},"151":{},"152":{},"156":{},"167":{},"171":{},"174":{},"177":{},"180":{},"188":{},"191":{},"197":{},"210":{},"215":{},"216":{},"222":{},"226":{},"227":{},"248":{},"259":{},"263":{},"266":{},"269":{},"274":{},"275":{},"278":{},"279":{},"302":{},"304":{},"306":{},"308":{},"312":{},"333":{},"336":{},"343":{},"346":{}},"component":{}}],["runnabl",{"_index":2285,"title":{},"name":{},"text":{"53":{},"109":{},"179":{},"307":{}},"component":{}}],["runti",{"_index":3251,"title":{},"name":{},"text":{"271":{}},"component":{}}],["runtim",{"_index":1474,"title":{},"name":{},"text":{"23":{},"46":{},"50":{},"126":{},"143":{},"147":{},"197":{},"209":{},"215":{},"250":{},"314":{},"332":{},"336":{},"346":{}},"component":{}}],["runtimeexcept",{"_index":584,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["s",{"_index":686,"title":{},"name":{},"text":{"4":{},"87":{},"217":{},"260":{},"275":{}},"component":{}}],["s3",{"_index":271,"title":{"70":{},"152":{},"227":{},"279":{}},"name":{"70":{},"152":{},"227":{},"279":{}},"text":{"3":{},"4":{},"70":{},"86":{},"87":{},"152":{},"200":{},"216":{},"217":{},"227":{},"259":{},"260":{},"276":{},"279":{}},"component":{}}],["s3:one.microstream.enterprise.afs.aws.s3.typ",{"_index":328,"title":{},"name":{},"text":{"3":{}},"component":{}}],["s3client",{"_index":2556,"title":{},"name":{},"text":{"70":{},"152":{},"200":{},"227":{},"276":{},"279":{}},"component":{}}],["s3connector.caching(cli",{"_index":2557,"title":{},"name":{},"text":{"70":{},"152":{},"200":{},"227":{},"276":{},"279":{}},"component":{}}],["sa",{"_index":2567,"title":{},"name":{},"text":{"71":{},"153":{},"228":{},"280":{}},"component":{}}],["sacr",{"_index":2241,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["sadli",{"_index":983,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["safe",{"_index":963,"title":{"68":{},"170":{},"225":{},"341":{},"68-1":{},"170-1":{},"225-1":{},"341-1":{}},"name":{"68":{},"170":{},"225":{},"341":{}},"text":{"9":{},"10":{},"49":{},"64":{},"67":{},"68":{},"92":{},"93":{},"116":{},"150":{},"166":{},"169":{},"170":{},"173":{},"174":{},"203":{},"212":{},"221":{},"224":{},"225":{},"265":{},"266":{},"294":{},"335":{},"339":{},"341":{},"342":{}},"component":{}}],["safeti",{"_index":876,"title":{},"name":{},"text":{"7":{},"90":{},"171":{},"263":{}},"component":{}}],["salari",{"_index":1960,"title":{},"name":{},"text":{"43":{},"107":{},"195":{},"329":{}},"component":{}}],["sale",{"_index":2465,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["same",{"_index":66,"title":{"47-4":{},"148-4":{},"210-4":{},"333-4":{}},"name":{},"text":{"1":{},"3":{},"4":{},"7":{},"11":{},"14":{},"20":{},"23":{},"33":{},"36":{},"43":{},"50":{},"51":{},"57":{},"67":{},"77":{},"84":{},"86":{},"87":{},"90":{},"94":{},"97":{},"107":{},"113":{},"116":{},"123":{},"126":{},"136":{},"139":{},"143":{},"144":{},"159":{},"169":{},"171":{},"175":{},"178":{},"185":{},"188":{},"195":{},"197":{},"198":{},"200":{},"203":{},"213":{},"215":{},"216":{},"217":{},"224":{},"243":{},"246":{},"247":{},"250":{},"259":{},"260":{},"263":{},"267":{},"270":{},"271":{},"275":{},"276":{},"294":{},"302":{},"304":{},"311":{},"314":{},"325":{},"329":{},"336":{},"337":{},"339":{},"344":{},"346":{}},"component":{}}],["sampl",{"_index":1659,"title":{},"name":{},"text":{"31":{},"134":{},"183":{},"323":{}},"component":{}}],["sap",{"_index":467,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["sapmachin",{"_index":783,"title":{},"name":{},"text":{"5":{},"88":{},"218":{},"261":{}},"component":{}}],["sasl",{"_index":2626,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["save",{"_index":2041,"title":{},"name":{},"text":{"50":{},"97":{},"116":{},"143":{},"178":{},"197":{},"203":{},"270":{},"294":{},"336":{}},"component":{}}],["sbom",{"_index":3223,"title":{},"name":{},"text":{"259":{}},"component":{}}],["sbt",{"_index":666,"title":{},"name":{},"text":{"4":{},"87":{},"217":{},"260":{}},"component":{}}],["scala",{"_index":665,"title":{},"name":{},"text":{"4":{},"87":{},"217":{},"260":{}},"component":{}}],["scan",{"_index":998,"title":{},"name":{},"text":{"10":{},"50":{},"93":{},"143":{},"174":{},"197":{},"266":{},"336":{}},"component":{}}],["scope",{"_index":2570,"title":{},"name":{},"text":{"71":{},"153":{},"228":{},"243":{},"271":{},"274":{},"280":{}},"component":{}}],["scratch",{"_index":1221,"title":{},"name":{},"text":{"14":{},"97":{},"178":{},"270":{}},"component":{}}],["script",{"_index":2194,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["sdk",{"_index":788,"title":{},"name":{},"text":{"5":{},"69":{},"70":{},"88":{},"151":{},"152":{},"218":{},"226":{},"227":{},"261":{},"278":{},"279":{},"281":{}},"component":{}}],["search",{"_index":2220,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"281":{},"336":{},"340":{}},"component":{}}],["second",{"_index":120,"title":{"18":{},"121":{},"241":{},"351":{}},"name":{"18":{},"121":{},"241":{},"351":{}},"text":{"2":{},"34":{},"36":{},"37":{},"50":{},"85":{},"137":{},"139":{},"140":{},"143":{},"186":{},"188":{},"189":{},"197":{},"214":{},"243":{},"271":{},"300":{},"302":{},"303":{},"336":{},"345":{}},"component":{}}],["secondari",{"_index":1170,"title":{},"name":{},"text":{"12":{},"74":{},"95":{},"156":{},"176":{},"268":{}},"component":{}}],["secret",{"_index":2221,"title":{},"name":{},"text":{"50":{},"69":{},"70":{},"143":{},"151":{},"152":{},"197":{},"226":{},"227":{},"278":{},"279":{},"336":{}},"component":{}}],["secur",{"_index":871,"title":{},"name":{},"text":{"7":{},"50":{},"69":{},"70":{},"77":{},"90":{},"143":{},"151":{},"152":{},"159":{},"171":{},"197":{},"215":{},"226":{},"227":{},"263":{},"278":{},"279":{},"336":{},"346":{}},"component":{}}],["securerandom",{"_index":3059,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["securerandomprovid",{"_index":3025,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["securerandomprovider.default",{"_index":3039,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["see",{"_index":219,"title":{},"name":{},"text":{"3":{},"6":{},"9":{},"10":{},"21":{},"27":{},"33":{},"34":{},"37":{},"39":{},"41":{},"42":{},"46":{},"50":{},"51":{},"60":{},"61":{},"73":{},"77":{},"86":{},"89":{},"92":{},"93":{},"97":{},"101":{},"105":{},"106":{},"117":{},"118":{},"124":{},"130":{},"136":{},"137":{},"140":{},"142":{},"143":{},"144":{},"147":{},"155":{},"159":{},"173":{},"174":{},"178":{},"185":{},"186":{},"189":{},"191":{},"193":{},"194":{},"197":{},"198":{},"204":{},"205":{},"209":{},"216":{},"219":{},"230":{},"243":{},"244":{},"248":{},"254":{},"255":{},"259":{},"262":{},"265":{},"266":{},"270":{},"271":{},"272":{},"283":{},"295":{},"296":{},"300":{},"303":{},"306":{},"312":{},"318":{},"319":{},"325":{},"327":{},"328":{},"332":{},"336":{},"337":{}},"component":{}}],["seen",{"_index":1242,"title":{},"name":{},"text":{"14":{},"97":{},"178":{},"270":{}},"component":{}}],["segment",{"_index":3356,"title":{},"name":{},"text":{"340":{}},"component":{}}],["select",{"_index":2036,"title":{},"name":{},"text":{"49":{},"53":{},"67":{},"78":{},"109":{},"150":{},"160":{},"169":{},"179":{},"212":{},"224":{},"233":{},"286":{},"307":{},"335":{},"339":{}},"component":{}}],["self",{"_index":2460,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["selfstor",{"_index":566,"title":{},"name":{},"text":{"3":{},"29":{},"30":{},"86":{},"132":{},"133":{},"216":{},"257":{},"258":{},"259":{},"321":{},"322":{}},"component":{}}],["semeru",{"_index":3244,"title":{},"name":{},"text":{"261":{}},"component":{}}],["send",{"_index":703,"title":{},"name":{},"text":{"4":{},"87":{},"215":{},"217":{},"260":{},"346":{}},"component":{}}],["sens",{"_index":1722,"title":{},"name":{},"text":{"33":{},"50":{},"51":{},"136":{},"143":{},"144":{},"185":{},"197":{},"198":{},"325":{},"336":{},"337":{}},"component":{}}],["sent",{"_index":2603,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["separ",{"_index":520,"title":{},"name":{},"text":{"3":{},"4":{},"23":{},"28":{},"67":{},"77":{},"86":{},"87":{},"126":{},"131":{},"159":{},"169":{},"216":{},"217":{},"224":{},"250":{},"256":{},"259":{},"260":{},"314":{},"320":{},"339":{}},"component":{}}],["sequenc",{"_index":979,"title":{},"name":{},"text":{"10":{},"37":{},"43":{},"77":{},"93":{},"107":{},"140":{},"159":{},"174":{},"189":{},"195":{},"266":{},"303":{},"329":{}},"component":{}}],["serial",{"_index":135,"title":{"220":{},"347":{}},"name":{},"text":{"2":{},"4":{},"12":{},"43":{},"54":{},"85":{},"87":{},"95":{},"107":{},"110":{},"176":{},"180":{},"195":{},"214":{},"215":{},"216":{},"217":{},"220":{},"259":{},"260":{},"268":{},"308":{},"329":{},"345":{},"346":{},"347":{}},"component":{}}],["serializ",{"_index":1187,"title":{},"name":{},"text":{"12":{},"95":{},"176":{},"268":{}},"component":{}}],["serializer.bytes(found",{"_index":3095,"title":{},"name":{},"text":{"220":{},"347":{}},"component":{}}],["serializer.deserialize(data",{"_index":3097,"title":{},"name":{},"text":{"220":{},"347":{}},"component":{}}],["serializer.serialize(custom",{"_index":3096,"title":{},"name":{},"text":{"220":{},"347":{}},"component":{}}],["serializerfound",{"_index":3092,"title":{},"name":{},"text":{"220":{},"347":{}},"component":{}}],["serializerfoundation.new",{"_index":3093,"title":{},"name":{},"text":{"220":{},"347":{}},"component":{}}],["serializertypeinfostrategycr",{"_index":3372,"title":{},"name":{},"text":{"347":{}},"component":{}}],["serializertypeinfostrategycreator.incrementaldiff(fals",{"_index":3374,"title":{},"name":{},"text":{"347":{}},"component":{}}],["serv",{"_index":761,"title":{},"name":{},"text":{"4":{},"12":{},"47":{},"53":{},"54":{},"87":{},"95":{},"109":{},"110":{},"148":{},"176":{},"179":{},"180":{},"210":{},"217":{},"260":{},"268":{},"307":{},"308":{},"333":{}},"component":{}}],["server",{"_index":748,"title":{"40-1":{},"104-1":{},"192-1":{},"326-1":{}},"name":{},"text":{"4":{},"5":{},"12":{},"40":{},"53":{},"54":{},"71":{},"74":{},"77":{},"87":{},"88":{},"95":{},"104":{},"109":{},"110":{},"153":{},"156":{},"159":{},"176":{},"179":{},"180":{},"192":{},"217":{},"218":{},"228":{},"260":{},"261":{},"268":{},"280":{},"307":{},"308":{},"326":{}},"component":{}}],["server.port=8888",{"_index":2966,"title":{},"name":{},"text":{"179":{},"307":{}},"component":{}}],["serverkeystor",{"_index":3027,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["serverkeystorepassword",{"_index":3032,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["servertruststor",{"_index":3029,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["servertruststorepassword",{"_index":3034,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["servic",{"_index":524,"title":{"56-1":{},"112-1":{},"182-1":{},"310-1":{}},"name":{},"text":{"3":{},"4":{},"12":{},"53":{},"54":{},"56":{},"69":{},"70":{},"71":{},"74":{},"77":{},"86":{},"87":{},"95":{},"109":{},"110":{},"112":{},"151":{},"152":{},"153":{},"156":{},"159":{},"176":{},"179":{},"180":{},"182":{},"216":{},"217":{},"226":{},"227":{},"228":{},"259":{},"260":{},"268":{},"278":{},"279":{},"280":{},"281":{},"282":{},"283":{},"284":{},"285":{},"286":{},"287":{},"288":{},"289":{},"290":{},"291":{},"307":{},"308":{},"310":{}},"component":{}}],["service.ignite().port(80",{"_index":2353,"title":{},"name":{},"text":{"56":{},"112":{}},"component":{}}],["service.ignite().port(8888",{"_index":2973,"title":{},"name":{},"text":{"182":{},"310":{}},"component":{}}],["service.setinstancename(\"mi",{"_index":2354,"title":{},"name":{},"text":{"56":{},"112":{},"182":{},"310":{}},"component":{}}],["service.setsparkservic",{"_index":2352,"title":{},"name":{},"text":{"56":{},"112":{},"182":{},"310":{}},"component":{}}],["service.start",{"_index":2345,"title":{},"name":{},"text":{"56":{},"112":{},"182":{},"310":{}},"component":{}}],["service_nam",{"_index":2629,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["session",{"_index":1154,"title":{},"name":{},"text":{"12":{},"95":{},"176":{},"268":{}},"component":{}}],["session’",{"_index":1907,"title":{},"name":{},"text":{"40":{},"104":{},"192":{},"326":{}},"component":{}}],["set",{"_index":599,"title":{"135-3":{},"184-3":{},"324-3":{}},"name":{},"text":{"3":{},"7":{},"9":{},"10":{},"11":{},"14":{},"18":{},"20":{},"27":{},"33":{},"34":{},"35":{},"36":{},"37":{},"39":{},"43":{},"44":{},"47":{},"50":{},"51":{},"58":{},"59":{},"64":{},"66":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"86":{},"90":{},"92":{},"93":{},"94":{},"97":{},"107":{},"108":{},"114":{},"115":{},"121":{},"123":{},"130":{},"136":{},"137":{},"138":{},"139":{},"140":{},"142":{},"143":{},"144":{},"148":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{},"165":{},"166":{},"168":{},"171":{},"173":{},"174":{},"175":{},"178":{},"185":{},"186":{},"187":{},"188":{},"189":{},"191":{},"195":{},"196":{},"197":{},"198":{},"201":{},"202":{},"210":{},"215":{},"216":{},"221":{},"223":{},"226":{},"227":{},"228":{},"229":{},"230":{},"231":{},"232":{},"233":{},"234":{},"235":{},"236":{},"237":{},"240":{},"241":{},"243":{},"246":{},"247":{},"254":{},"259":{},"263":{},"265":{},"266":{},"267":{},"270":{},"271":{},"274":{},"275":{},"277":{},"278":{},"279":{},"280":{},"281":{},"282":{},"283":{},"284":{},"285":{},"286":{},"287":{},"288":{},"289":{},"290":{},"291":{},"293":{},"300":{},"301":{},"302":{},"303":{},"306":{},"311":{},"318":{},"325":{},"329":{},"330":{},"333":{},"336":{},"337":{},"338":{},"340":{},"342":{},"346":{},"347":{},"350":{},"351":{}},"component":{}}],["setbackupdirectory(\"a",{"_index":2424,"title":{},"name":{},"text":{"64":{},"166":{},"221":{},"342":{}},"component":{}}],["setbackupdirectory(\"backup",{"_index":1784,"title":{},"name":{},"text":{"35":{},"138":{},"187":{},"301":{}},"component":{}}],["setbackupsetup(backupsetup",{"_index":2432,"title":{},"name":{},"text":{"64":{},"166":{},"221":{},"342":{}},"component":{}}],["setbackupsetup(storagebackupsetup.new",{"_index":1777,"title":{},"name":{},"text":{"35":{},"138":{},"187":{},"301":{}},"component":{}}],["setchannelcount(4",{"_index":1785,"title":{},"name":{},"text":{"35":{},"39":{},"138":{},"142":{},"187":{},"191":{},"301":{},"306":{}},"component":{}}],["setchannelcountprovider(storage.channelcountprovider(4",{"_index":1895,"title":{},"name":{},"text":{"39":{},"142":{},"191":{},"306":{}},"component":{}}],["setchannelcountprovider(storagechannelcountprovider.new(4",{"_index":1776,"title":{},"name":{},"text":{"35":{},"138":{},"187":{},"301":{}},"component":{}}],["setchanneldirectoryprefix(\"canal_",{"_index":1869,"title":{},"name":{},"text":{"38":{},"141":{},"190":{},"305":{}},"component":{}}],["setchanneldirectoryprefix(\"channel_",{"_index":1891,"title":{},"name":{},"text":{"39":{},"142":{},"191":{},"306":{}},"component":{}}],["setconfigur",{"_index":1770,"title":{},"name":{},"text":{"35":{},"138":{},"187":{},"301":{}},"component":{}}],["setconnectionhandler(comtlsconnectionhandler.new",{"_index":3035,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["setcontent(fin",{"_index":952,"title":{},"name":{},"text":{"9":{},"92":{},"173":{},"265":{}},"component":{}}],["setdatafileevaluator(storage.datafileevaluator(1024*1024",{"_index":1753,"title":{},"name":{},"text":{"34":{},"137":{},"186":{},"300":{}},"component":{}}],["setdatafileprefix",{"_index":1870,"title":{},"name":{},"text":{"38":{},"141":{},"190":{},"305":{}},"component":{}}],["setdatafileprefix(\"channel_",{"_index":1892,"title":{},"name":{},"text":{"39":{},"142":{},"191":{},"306":{}},"component":{}}],["setdatafilesuffix",{"_index":1872,"title":{},"name":{},"text":{"38":{},"141":{},"190":{},"305":{}},"component":{}}],["setdatafilesuffix(\".bin",{"_index":1893,"title":{},"name":{},"text":{"39":{},"142":{},"191":{},"306":{}},"component":{}}],["setdeletiondirectori",{"_index":1881,"title":{},"name":{},"text":{"38":{},"141":{},"190":{},"305":{}},"component":{}}],["setdeletiondirectory(filesystem.ensuredirectorypath(deletiondir",{"_index":2430,"title":{},"name":{},"text":{"64":{},"166":{},"221":{},"342":{}},"component":{}}],["setdirectori",{"_index":1879,"title":{},"name":{},"text":{"38":{},"141":{},"190":{},"305":{}},"component":{}}],["setdirectory(filesystem.ensuredirectorypath(\"storag",{"_index":1897,"title":{},"name":{},"text":{"39":{},"142":{},"191":{},"306":{}},"component":{}}],["setdirectory(filesystem.ensuredirectorypath(\"storagedir",{"_index":1774,"title":{},"name":{},"text":{"35":{},"138":{},"187":{},"301":{}},"component":{}}],["setdirectory(filesystem.ensuredirectorypath(backupdir",{"_index":2429,"title":{},"name":{},"text":{"64":{},"166":{},"221":{},"342":{}},"component":{}}],["setentitycacheevaluator(storage.entitycacheevalu",{"_index":1763,"title":{},"name":{},"text":{"34":{},"137":{},"186":{},"300":{}},"component":{}}],["setexpirypolicyfactory(createdexpirypolicy.factoryof(duration.one_minut",{"_index":24,"title":{},"name":{},"text":{"1":{},"84":{},"213":{},"344":{}},"component":{}}],["setexpirypolicyfactory(createdexpirypolicy.factoryof(new",{"_index":1330,"title":{},"name":{},"text":{"19":{},"122":{},"242":{},"352":{}},"component":{}}],["setfilenameprovid",{"_index":1884,"title":{},"name":{},"text":{"38":{},"141":{},"190":{},"305":{}},"component":{}}],["setfirstname(fin",{"_index":1495,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["sethostchannelacceptor(channel",{"_index":2993,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["sethousekeepingcontroller(storage.housekeepingcontroller(1000",{"_index":1744,"title":{},"name":{},"text":{"34":{},"137":{},"186":{},"300":{}},"component":{}}],["setlastname(fin",{"_index":1497,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["setlockfilesetupprovider(storage.lockfilesetupprovid",{"_index":1808,"title":{},"name":{},"text":{"36":{},"139":{},"188":{},"302":{}},"component":{}}],["setname(fin",{"_index":1454,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["setpartner(fin",{"_index":1430,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["setreadonli",{"_index":3345,"title":{},"name":{},"text":{"304":{}},"component":{}}],["setserializertypeinfostrategycr",{"_index":3373,"title":{},"name":{},"text":{"347":{}},"component":{}}],["setspecies(fin",{"_index":1428,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["setstatisticsenabled(tru",{"_index":1334,"title":{},"name":{},"text":{"19":{},"122":{},"242":{},"352":{}},"component":{}}],["setstoragedirectoryinuserhome(\"data",{"_index":1783,"title":{},"name":{},"text":{"35":{},"138":{},"187":{},"301":{}},"component":{}}],["setstoragefileprovid",{"_index":1772,"title":{},"name":{},"text":{"35":{},"39":{},"138":{},"142":{},"187":{},"191":{},"301":{},"306":{}},"component":{}}],["setstoragefileprovider(storagelivefileprovider.new",{"_index":2433,"title":{},"name":{},"text":{"64":{},"166":{},"221":{},"342":{}},"component":{}}],["setstorebyvalue(fals",{"_index":23,"title":{},"name":{},"text":{"1":{},"84":{},"213":{},"344":{}},"component":{}}],["setstorebyvalue(tru",{"_index":1333,"title":{},"name":{},"text":{"19":{},"122":{},"242":{},"352":{}},"component":{}}],["setter",{"_index":1556,"title":{},"name":{},"text":{"26":{},"43":{},"107":{},"129":{},"195":{},"246":{},"253":{},"275":{},"317":{},"329":{}},"component":{}}],["settransactionsfileprefix(\"events_",{"_index":1873,"title":{},"name":{},"text":{"38":{},"141":{},"190":{},"305":{}},"component":{}}],["settransactionsfilesuffix(\".bin",{"_index":1874,"title":{},"name":{},"text":{"38":{},"141":{},"190":{},"305":{}},"component":{}}],["settruncationdirectory(filesystem.ensuredirectorypath(truncationdir",{"_index":1883,"title":{},"name":{},"text":{"38":{},"64":{},"141":{},"166":{},"190":{},"221":{},"305":{},"342":{}},"component":{}}],["settypedictionaryfilename(\"typedictionary.txt",{"_index":1875,"title":{},"name":{},"text":{"38":{},"141":{},"190":{},"305":{}},"component":{}}],["settypes(integer.class",{"_index":21,"title":{},"name":{},"text":{"1":{},"84":{}},"component":{}}],["setup",{"_index":832,"title":{"56":{},"112":{},"182":{},"310":{}},"name":{"56":{},"112":{},"182":{},"310":{}},"text":{"7":{},"9":{},"14":{},"19":{},"36":{},"40":{},"90":{},"92":{},"97":{},"104":{},"122":{},"139":{},"171":{},"173":{},"178":{},"188":{},"192":{},"215":{},"242":{},"263":{},"265":{},"267":{},"270":{},"302":{},"326":{},"346":{},"347":{},"352":{}},"component":{}}],["sever",{"_index":157,"title":{},"name":{},"text":{"2":{},"10":{},"50":{},"62":{},"85":{},"93":{},"97":{},"119":{},"143":{},"174":{},"178":{},"197":{},"206":{},"214":{},"266":{},"270":{},"298":{},"336":{},"340":{},"345":{}},"component":{}}],["sft",{"_index":1818,"title":{},"name":{},"text":{"37":{},"140":{},"189":{},"303":{}},"component":{}}],["sg",{"_index":2726,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["sha256",{"_index":687,"title":{},"name":{},"text":{"4":{},"87":{},"217":{},"260":{}},"component":{}}],["shall",{"_index":883,"title":{},"name":{},"text":{"7":{},"37":{},"90":{},"140":{},"171":{},"189":{},"263":{},"303":{}},"component":{}}],["shallow",{"_index":2930,"title":{"116-1":{},"203-1":{},"294-1":{}},"name":{},"text":{"116":{},"203":{},"294":{}},"component":{}}],["share",{"_index":1584,"title":{"97-2":{},"97-3":{},"178-2":{},"178-3":{},"270-2":{},"270-3":{}},"name":{},"text":{"27":{},"33":{},"69":{},"70":{},"71":{},"97":{},"116":{},"130":{},"136":{},"151":{},"152":{},"153":{},"178":{},"185":{},"203":{},"226":{},"227":{},"228":{},"246":{},"254":{},"270":{},"275":{},"278":{},"279":{},"280":{},"294":{},"318":{},"325":{}},"component":{}}],["sharedcach",{"_index":1317,"title":{},"name":{},"text":{"18":{},"121":{},"241":{},"351":{}},"component":{}}],["shell",{"_index":1466,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"281":{},"314":{}},"component":{}}],["shift",{"_index":1019,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["ship",{"_index":2921,"title":{},"name":{},"text":{"101":{},"244":{},"272":{}},"component":{}}],["shop.getarticles().stream",{"_index":1205,"title":{},"name":{},"text":{"13":{},"96":{},"177":{},"269":{}},"component":{}}],["short",{"_index":1188,"title":{"67-2":{},"169-2":{},"224-2":{},"339-2":{}},"name":{},"text":{"12":{},"14":{},"32":{},"37":{},"66":{},"95":{},"97":{},"135":{},"140":{},"168":{},"176":{},"178":{},"184":{},"189":{},"223":{},"268":{},"270":{},"303":{},"324":{},"338":{}},"component":{}}],["shortcut",{"_index":2358,"title":{},"name":{},"text":{"57":{},"113":{},"200":{},"276":{}},"component":{}}],["shorter",{"_index":2721,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["shortli",{"_index":2441,"title":{},"name":{},"text":{"66":{},"168":{},"223":{},"338":{}},"component":{}}],["shortsight",{"_index":2222,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["shouldn’t",{"_index":2251,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["show",{"_index":1660,"title":{},"name":{},"text":{"31":{},"37":{},"134":{},"140":{},"183":{},"189":{},"297":{},"303":{},"304":{},"323":{}},"component":{}}],["shown",{"_index":1253,"title":{},"name":{},"text":{"14":{},"97":{},"178":{},"270":{}},"component":{}}],["shut",{"_index":639,"title":{},"name":{},"text":{"3":{},"14":{},"86":{},"97":{},"178":{},"216":{},"240":{},"259":{},"270":{},"350":{}},"component":{}}],["shutdown",{"_index":838,"title":{},"name":{},"text":{"7":{},"9":{},"90":{},"92":{},"171":{},"173":{},"263":{},"265":{}},"component":{}}],["side",{"_index":2225,"title":{"67-3":{},"169-3":{},"224-3":{},"339-3":{}},"name":{},"text":{"50":{},"67":{},"143":{},"169":{},"197":{},"224":{},"336":{},"339":{}},"component":{}}],["significantli",{"_index":1130,"title":{},"name":{},"text":{"11":{},"94":{},"97":{},"175":{},"178":{},"267":{},"270":{}},"component":{}}],["similar",{"_index":171,"title":{},"name":{},"text":{"2":{},"3":{},"10":{},"50":{},"51":{},"67":{},"85":{},"86":{},"93":{},"116":{},"143":{},"144":{},"169":{},"174":{},"197":{},"198":{},"203":{},"214":{},"216":{},"224":{},"259":{},"266":{},"294":{},"336":{},"337":{},"339":{},"345":{}},"component":{}}],["simpl",{"_index":804,"title":{},"name":{},"text":{"5":{},"7":{},"9":{},"10":{},"14":{},"22":{},"43":{},"50":{},"53":{},"56":{},"67":{},"88":{},"90":{},"92":{},"93":{},"97":{},"107":{},"109":{},"112":{},"116":{},"125":{},"143":{},"169":{},"171":{},"173":{},"174":{},"178":{},"179":{},"180":{},"182":{},"195":{},"197":{},"203":{},"215":{},"218":{},"224":{},"249":{},"255":{},"261":{},"263":{},"265":{},"266":{},"270":{},"294":{},"307":{},"308":{},"310":{},"313":{},"319":{},"329":{},"336":{},"339":{},"346":{}},"component":{}}],["simple_major",{"_index":2699,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["simplest",{"_index":932,"title":{},"name":{},"text":{"9":{},"12":{},"14":{},"50":{},"92":{},"95":{},"97":{},"143":{},"173":{},"176":{},"178":{},"197":{},"265":{},"268":{},"270":{},"336":{}},"component":{}}],["simpli",{"_index":854,"title":{},"name":{},"text":{"7":{},"9":{},"12":{},"19":{},"50":{},"66":{},"67":{},"90":{},"92":{},"95":{},"116":{},"122":{},"143":{},"168":{},"169":{},"171":{},"173":{},"176":{},"197":{},"203":{},"220":{},"223":{},"224":{},"242":{},"263":{},"265":{},"268":{},"294":{},"336":{},"338":{},"339":{},"347":{},"352":{}},"component":{}}],["simplifi",{"_index":452,"title":{},"name":{},"text":{"3":{},"14":{},"43":{},"55":{},"86":{},"97":{},"107":{},"111":{},"178":{},"181":{},"195":{},"216":{},"259":{},"270":{},"309":{},"329":{}},"component":{}}],["simultan",{"_index":1802,"title":{},"name":{},"text":{"36":{},"139":{},"188":{},"302":{}},"component":{}}],["singl",{"_index":946,"title":{"47-3":{},"148-3":{},"210-3":{},"333-3":{}},"name":{},"text":{"9":{},"10":{},"14":{},"29":{},"39":{},"40":{},"50":{},"51":{},"67":{},"77":{},"92":{},"93":{},"97":{},"104":{},"116":{},"132":{},"142":{},"143":{},"144":{},"159":{},"169":{},"173":{},"174":{},"178":{},"191":{},"192":{},"197":{},"198":{},"203":{},"224":{},"257":{},"265":{},"266":{},"270":{},"294":{},"306":{},"321":{},"326":{},"336":{},"337":{},"339":{},"340":{}},"component":{}}],["singleton",{"_index":3162,"title":{},"name":{},"text":{"246":{},"275":{}},"component":{}}],["site",{"_index":462,"title":{},"name":{},"text":{"3":{},"4":{},"49":{},"86":{},"87":{},"101":{},"103":{},"150":{},"212":{},"216":{},"217":{},"244":{},"246":{},"259":{},"260":{},"272":{},"275":{},"335":{}},"component":{}}],["site/05.00.02",{"_index":693,"title":{},"name":{},"text":{"4":{},"49":{}},"component":{}}],["site/06.01.00",{"_index":2904,"title":{},"name":{},"text":{"87":{},"150":{}},"component":{}}],["site/07.01.00",{"_index":2976,"title":{},"name":{},"text":{"212":{},"217":{}},"component":{}}],["site/08.01.01",{"_index":3241,"title":{},"name":{},"text":{"260":{},"335":{}},"component":{}}],["situat",{"_index":2212,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["size",{"_index":441,"title":{"34-2":{},"37-5":{},"37-6":{},"137-2":{},"140-5":{},"140-6":{},"186-2":{},"189-5":{},"189-6":{},"300-2":{},"303-5":{},"303-6":{}},"name":{},"text":{"3":{},"10":{},"11":{},"12":{},"34":{},"37":{},"39":{},"47":{},"55":{},"65":{},"77":{},"86":{},"93":{},"94":{},"95":{},"111":{},"137":{},"140":{},"142":{},"148":{},"159":{},"167":{},"174":{},"175":{},"176":{},"181":{},"186":{},"189":{},"191":{},"210":{},"216":{},"222":{},"259":{},"266":{},"267":{},"268":{},"300":{},"303":{},"306":{},"309":{},"333":{},"340":{},"343":{}},"component":{}}],["skip",{"_index":632,"title":{},"name":{},"text":{"3":{},"43":{},"62":{},"86":{},"107":{},"119":{},"195":{},"206":{},"216":{},"259":{},"298":{},"329":{}},"component":{}}],["slf4j",{"_index":2334,"title":{},"name":{},"text":{"56":{},"112":{},"182":{},"255":{},"310":{},"319":{}},"component":{}}],["slight",{"_index":605,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["slightest",{"_index":1009,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["slightli",{"_index":3351,"title":{},"name":{},"text":{"340":{}},"component":{}}],["sllengin",{"_index":3058,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["slow",{"_index":2600,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["small",{"_index":1041,"title":{},"name":{},"text":{"10":{},"12":{},"14":{},"37":{},"45":{},"50":{},"51":{},"93":{},"95":{},"97":{},"140":{},"143":{},"144":{},"146":{},"174":{},"176":{},"178":{},"189":{},"197":{},"198":{},"208":{},"255":{},"266":{},"268":{},"270":{},"303":{},"319":{},"331":{},"336":{},"337":{},"340":{}},"component":{}}],["smaller",{"_index":563,"title":{},"name":{},"text":{"3":{},"10":{},"34":{},"86":{},"93":{},"137":{},"174":{},"186":{},"216":{},"259":{},"266":{},"300":{},"340":{}},"component":{}}],["smith",{"_index":1545,"title":{},"name":{},"text":{"24":{},"27":{},"127":{},"130":{},"251":{},"254":{},"315":{},"318":{}},"component":{}}],["snippet",{"_index":1254,"title":{},"name":{},"text":{"14":{},"59":{},"97":{},"115":{},"178":{},"182":{},"202":{},"270":{},"293":{},"297":{},"304":{},"310":{}},"component":{}}],["socket",{"_index":2720,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["soften",{"_index":2278,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["softwar",{"_index":2086,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["solut",{"_index":739,"title":{},"name":{},"text":{"4":{},"7":{},"12":{},"23":{},"29":{},"43":{},"49":{},"50":{},"57":{},"65":{},"67":{},"87":{},"90":{},"95":{},"107":{},"113":{},"126":{},"132":{},"143":{},"150":{},"167":{},"169":{},"171":{},"176":{},"195":{},"197":{},"200":{},"212":{},"217":{},"222":{},"224":{},"250":{},"257":{},"260":{},"263":{},"268":{},"276":{},"314":{},"321":{},"329":{},"335":{},"336":{},"339":{},"343":{}},"component":{}}],["solv",{"_index":858,"title":{},"name":{},"text":{"7":{},"14":{},"47":{},"67":{},"90":{},"97":{},"116":{},"148":{},"169":{},"171":{},"178":{},"203":{},"210":{},"224":{},"263":{},"270":{},"294":{},"333":{},"339":{}},"component":{}}],["somemethod",{"_index":3123,"title":{},"name":{},"text":{"243":{},"271":{},"274":{}},"component":{}}],["somemethodwitharc",{"_index":3263,"title":{},"name":{},"text":{"274":{}},"component":{}}],["someon",{"_index":2171,"title":{},"name":{},"text":{"50":{},"67":{},"143":{},"169":{},"197":{},"224":{},"336":{},"339":{}},"component":{}}],["someth",{"_index":837,"title":{},"name":{},"text":{"7":{},"10":{},"12":{},"14":{},"50":{},"51":{},"67":{},"90":{},"93":{},"95":{},"97":{},"143":{},"144":{},"169":{},"171":{},"174":{},"176":{},"178":{},"197":{},"198":{},"224":{},"263":{},"266":{},"268":{},"270":{},"336":{},"337":{},"339":{}},"component":{}}],["sometim",{"_index":2087,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["somewhat",{"_index":2116,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["somewher",{"_index":1029,"title":{},"name":{},"text":{"10":{},"50":{},"51":{},"93":{},"143":{},"144":{},"174":{},"197":{},"198":{},"266":{},"336":{},"337":{}},"component":{}}],["soon",{"_index":2082,"title":{},"name":{},"text":{"50":{},"51":{},"143":{},"144":{},"197":{},"198":{},"304":{},"336":{},"337":{}},"component":{}}],["sorage.backupfileproviderbuilder(filesystem",{"_index":2428,"title":{},"name":{},"text":{"64":{},"166":{},"221":{},"342":{}},"component":{}}],["sort",{"_index":2508,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["sound",{"_index":2181,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["sourc",{"_index":228,"title":{},"name":{},"text":{"3":{},"57":{},"74":{},"79":{},"80":{},"81":{},"82":{},"83":{},"86":{},"113":{},"116":{},"156":{},"161":{},"162":{},"163":{},"164":{},"165":{},"203":{},"216":{},"234":{},"235":{},"236":{},"237":{},"243":{},"246":{},"259":{},"271":{},"274":{},"275":{},"287":{},"288":{},"289":{},"290":{},"291":{},"294":{},"304":{}},"component":{}}],["space",{"_index":970,"title":{},"name":{},"text":{"10":{},"37":{},"43":{},"93":{},"107":{},"140":{},"174":{},"189":{},"195":{},"266":{},"303":{},"329":{}},"component":{}}],["spark",{"_index":2348,"title":{},"name":{},"text":{"56":{},"112":{},"182":{},"310":{}},"component":{}}],["sparkjava",{"_index":311,"title":{},"name":{},"text":{"3":{},"4":{},"54":{},"56":{},"86":{},"87":{},"110":{},"112":{},"180":{},"182":{},"216":{},"217":{},"259":{},"260":{},"308":{},"310":{}},"component":{}}],["sparkjavaone.microstream.storage.restservice.sparkjava.types,except",{"_index":380,"title":{},"name":{},"text":{"3":{}},"component":{}}],["speak",{"_index":1216,"title":{},"name":{},"text":{"14":{},"50":{},"97":{},"143":{},"178":{},"197":{},"270":{},"336":{}},"component":{}}],["speci",{"_index":1387,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["special",{"_index":564,"title":{"32":{},"135":{},"184":{},"324":{},"50-10":{},"143-10":{},"197-10":{},"336-10":{}},"name":{"32":{},"135":{},"184":{},"324":{}},"text":{"3":{},"4":{},"7":{},"9":{},"13":{},"14":{},"24":{},"32":{},"46":{},"50":{},"51":{},"86":{},"87":{},"90":{},"92":{},"96":{},"97":{},"127":{},"135":{},"143":{},"144":{},"147":{},"171":{},"173":{},"177":{},"178":{},"184":{},"197":{},"198":{},"209":{},"216":{},"217":{},"251":{},"259":{},"260":{},"263":{},"265":{},"269":{},"270":{},"315":{},"324":{},"332":{},"336":{},"337":{}},"component":{}}],["species(fin",{"_index":1414,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["species(str",{"_index":1409,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["specif",{"_index":721,"title":{},"name":{},"text":{"4":{},"7":{},"9":{},"14":{},"15":{},"27":{},"40":{},"43":{},"49":{},"50":{},"51":{},"87":{},"90":{},"92":{},"97":{},"98":{},"104":{},"107":{},"130":{},"143":{},"144":{},"150":{},"171":{},"173":{},"178":{},"192":{},"195":{},"197":{},"198":{},"212":{},"217":{},"238":{},"243":{},"246":{},"254":{},"260":{},"263":{},"265":{},"270":{},"271":{},"274":{},"275":{},"318":{},"326":{},"329":{},"335":{},"336":{},"337":{},"348":{}},"component":{}}],["specifi",{"_index":1811,"title":{},"name":{},"text":{"36":{},"37":{},"38":{},"43":{},"50":{},"51":{},"69":{},"70":{},"76":{},"77":{},"107":{},"139":{},"140":{},"141":{},"143":{},"144":{},"151":{},"152":{},"158":{},"159":{},"188":{},"189":{},"190":{},"195":{},"197":{},"198":{},"226":{},"227":{},"232":{},"243":{},"246":{},"271":{},"274":{},"275":{},"278":{},"279":{},"281":{},"285":{},"302":{},"303":{},"305":{},"329":{},"336":{},"337":{},"340":{},"347":{}},"component":{}}],["speed",{"_index":2174,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["split",{"_index":1051,"title":{"47-3":{},"148-3":{},"210-3":{},"333-3":{}},"name":{},"text":{"10":{},"34":{},"37":{},"86":{},"93":{},"137":{},"140":{},"174":{},"186":{},"189":{},"216":{},"259":{},"266":{},"300":{},"303":{},"340":{}},"component":{}}],["sporad",{"_index":249,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["spreadsheet",{"_index":1127,"title":{},"name":{},"text":{"11":{},"94":{},"175":{},"267":{}},"component":{}}],["spring",{"_index":125,"title":{"19":{},"103":{},"122":{},"242":{},"246":{},"275":{},"352":{},"17-1":{},"18-1":{},"31-3":{},"100-1":{},"121-1":{},"134-3":{},"183-3":{},"240-2":{},"241-1":{},"323-3":{},"350-2":{},"351-1":{}},"name":{"19":{},"103":{},"122":{},"242":{},"246":{},"275":{},"352":{}},"text":{"2":{},"3":{},"17":{},"18":{},"19":{},"31":{},"85":{},"86":{},"87":{},"100":{},"102":{},"103":{},"121":{},"122":{},"134":{},"183":{},"214":{},"216":{},"217":{},"240":{},"241":{},"242":{},"245":{},"246":{},"259":{},"260":{},"273":{},"275":{},"323":{},"345":{},"350":{},"351":{},"352":{}},"component":{}}],["spring.jpa.properties.hibernate.cache.microstream.missing_cache_strategi",{"_index":1292,"title":{},"name":{},"text":{"17":{},"100":{},"240":{},"350":{}},"component":{}}],["spring.jpa.properties.hibernate.cache.microstream.missing_cache_strategy=cr",{"_index":1311,"title":{},"name":{},"text":{"18":{},"121":{},"241":{},"351":{}},"component":{}}],["spring.jpa.properties.hibernate.cache.microstream.readthrough",{"_index":1293,"title":{},"name":{},"text":{"17":{},"100":{},"240":{},"350":{}},"component":{}}],["spring.jpa.properties.hibernate.cache.microstream.storage.basedirectori",{"_index":1295,"title":{},"name":{},"text":{"17":{},"100":{},"240":{},"350":{}},"component":{}}],["spring.jpa.properties.hibernate.cache.microstream.storage.channelcount",{"_index":1296,"title":{},"name":{},"text":{"17":{},"100":{},"240":{},"350":{}},"component":{}}],["spring.jpa.properties.hibernate.cache.microstreamwritethrough",{"_index":1294,"title":{},"name":{},"text":{"17":{},"100":{},"240":{},"350":{}},"component":{}}],["spring.jpa.properties.hibernate.cache.region.factory_class",{"_index":1297,"title":{},"name":{},"text":{"17":{},"100":{},"240":{},"350":{}},"component":{}}],["spring.jpa.properties.hibernate.cache.region.factory_class=one.microstream.cache.hibernate.types.cacheregionfactori",{"_index":1312,"title":{},"name":{},"text":{"18":{},"121":{},"241":{},"351":{}},"component":{}}],["spring.jpa.properties.hibernate.cache.use_query_cach",{"_index":1299,"title":{},"name":{},"text":{"17":{},"100":{},"240":{},"350":{}},"component":{}}],["spring.jpa.properties.hibernate.cache.use_query_cache=tru",{"_index":1313,"title":{},"name":{},"text":{"18":{},"121":{},"241":{},"351":{}},"component":{}}],["spring.jpa.properties.hibernate.cache.use_second_level_cach",{"_index":1300,"title":{},"name":{},"text":{"17":{},"100":{},"240":{},"350":{}},"component":{}}],["spring.jpa.properties.hibernate.cache.use_second_level_cache=tru",{"_index":1314,"title":{},"name":{},"text":{"18":{},"121":{},"241":{},"351":{}},"component":{}}],["spring.jpa.properties.javax.persistence.sharedcache.mode=al",{"_index":1315,"title":{},"name":{},"text":{"18":{},"121":{},"241":{},"351":{}},"component":{}}],["springbootappl",{"_index":1323,"title":{},"name":{},"text":{"19":{},"122":{},"242":{},"352":{}},"component":{}}],["sql",{"_index":294,"title":{},"name":{},"text":{"3":{},"4":{},"12":{},"13":{},"57":{},"79":{},"80":{},"81":{},"82":{},"83":{},"86":{},"87":{},"95":{},"96":{},"113":{},"161":{},"162":{},"163":{},"164":{},"165":{},"176":{},"177":{},"216":{},"217":{},"234":{},"235":{},"236":{},"237":{},"259":{},"260":{},"268":{},"269":{},"287":{},"288":{},"289":{},"290":{},"291":{}},"component":{}}],["sql:one.microstream.afs.sql.typ",{"_index":347,"title":{},"name":{},"text":{"3":{}},"component":{}}],["sql:one.microstream.enterprise.afs.sql.typ",{"_index":348,"title":{},"name":{},"text":{"3":{}},"component":{}}],["sqlconnector.cach",{"_index":2369,"title":{},"name":{},"text":{"57":{},"79":{},"80":{},"81":{},"82":{},"83":{},"113":{},"161":{},"162":{},"163":{},"164":{},"165":{},"234":{},"235":{},"236":{},"237":{},"287":{},"288":{},"289":{},"290":{},"291":{}},"component":{}}],["sqldatasourceprovid",{"_index":2760,"title":{},"name":{},"text":{"79":{},"80":{},"81":{},"82":{},"83":{},"161":{},"162":{},"163":{},"164":{},"165":{},"234":{},"235":{},"236":{},"237":{},"287":{},"288":{},"289":{},"290":{},"291":{}},"component":{}}],["sqlfilesystem",{"_index":2367,"title":{},"name":{},"text":{"57":{},"79":{},"80":{},"81":{},"82":{},"83":{},"113":{},"161":{},"162":{},"163":{},"164":{},"165":{},"234":{},"235":{},"236":{},"237":{},"287":{},"288":{},"289":{},"290":{},"291":{}},"component":{}}],["sqlfilesystem.new",{"_index":2368,"title":{},"name":{},"text":{"57":{},"79":{},"80":{},"81":{},"82":{},"83":{},"113":{},"161":{},"162":{},"163":{},"164":{},"165":{},"234":{},"235":{},"236":{},"237":{},"287":{},"288":{},"289":{},"290":{},"291":{}},"component":{}}],["sqlite",{"_index":2797,"title":{"83":{},"165":{},"237":{},"291":{}},"name":{"83":{},"165":{},"237":{},"291":{}},"text":{"83":{},"165":{},"237":{},"291":{}},"component":{}}],["sqlitedatasourc",{"_index":2800,"title":{},"name":{},"text":{"83":{},"165":{},"237":{},"291":{}},"component":{}}],["sqlproviderhana.new(datasourc",{"_index":3318,"title":{},"name":{},"text":{"287":{}},"component":{}}],["sqlprovidermariadb.new(datasourc",{"_index":2748,"title":{},"name":{},"text":{"79":{},"161":{},"234":{},"288":{}},"component":{}}],["sqlprovidermysql.new(datasourc",{"_index":2370,"title":{},"name":{},"text":{"57":{},"80":{},"113":{},"162":{}},"component":{}}],["sqlprovideroracle.new(datasourc",{"_index":2778,"title":{},"name":{},"text":{"81":{},"163":{},"235":{},"289":{}},"component":{}}],["sqlproviderpostgres.new(datasourc",{"_index":2790,"title":{},"name":{},"text":{"82":{},"164":{},"236":{},"290":{}},"component":{}}],["sqlprovidersqlite.new(datasourc",{"_index":2802,"title":{},"name":{},"text":{"83":{},"165":{},"237":{},"291":{}},"component":{}}],["sslengin",{"_index":3021,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["stack",{"_index":1694,"title":{},"name":{},"text":{"32":{},"135":{},"184":{},"324":{}},"component":{}}],["stall",{"_index":3083,"title":{},"name":{},"text":{"216":{},"259":{}},"component":{}}],["standalon",{"_index":747,"title":{},"name":{},"text":{"4":{},"12":{},"87":{},"95":{},"176":{},"217":{},"220":{},"260":{},"268":{},"347":{}},"component":{}}],["standard",{"_index":89,"title":{},"name":{},"text":{"2":{},"3":{},"13":{},"36":{},"41":{},"61":{},"85":{},"86":{},"96":{},"97":{},"105":{},"116":{},"118":{},"139":{},"177":{},"178":{},"188":{},"193":{},"203":{},"205":{},"214":{},"216":{},"246":{},"259":{},"269":{},"270":{},"275":{},"294":{},"296":{},"302":{},"327":{},"340":{},"345":{}},"component":{}}],["start",{"_index":4,"title":{"1":{},"9":{},"84":{},"92":{},"173":{},"213":{},"265":{},"344":{},"215-1":{},"346-1":{}},"name":{"1":{},"9":{},"84":{},"92":{},"173":{},"213":{},"265":{},"344":{}},"text":{"3":{},"7":{},"9":{},"10":{},"14":{},"33":{},"34":{},"36":{},"39":{},"40":{},"41":{},"53":{},"55":{},"56":{},"58":{},"59":{},"60":{},"63":{},"66":{},"67":{},"86":{},"90":{},"92":{},"93":{},"97":{},"104":{},"105":{},"109":{},"111":{},"112":{},"114":{},"115":{},"117":{},"120":{},"136":{},"137":{},"139":{},"142":{},"168":{},"169":{},"171":{},"173":{},"174":{},"178":{},"179":{},"181":{},"182":{},"185":{},"186":{},"188":{},"191":{},"192":{},"193":{},"201":{},"202":{},"204":{},"207":{},"216":{},"223":{},"224":{},"240":{},"243":{},"246":{},"259":{},"263":{},"265":{},"266":{},"270":{},"271":{},"274":{},"275":{},"277":{},"293":{},"295":{},"299":{},"300":{},"302":{},"304":{},"306":{},"307":{},"309":{},"310":{},"325":{},"326":{},"327":{},"338":{},"339":{},"350":{}},"component":{}}],["start(root",{"_index":1934,"title":{},"name":{},"text":{"42":{},"43":{},"106":{},"107":{},"194":{},"195":{},"328":{},"329":{}},"component":{}}],["start=fals",{"_index":3153,"title":{},"name":{},"text":{"246":{},"275":{}},"component":{}}],["starter",{"_index":1320,"title":{},"name":{},"text":{"19":{},"122":{},"242":{},"352":{}},"component":{}}],["startup",{"_index":1214,"title":{},"name":{},"text":{"14":{},"45":{},"52":{},"97":{},"145":{},"146":{},"178":{},"199":{},"208":{},"215":{},"246":{},"270":{},"275":{},"292":{},"304":{},"331":{},"340":{},"346":{}},"component":{}}],["state",{"_index":565,"title":{},"name":{},"text":{"3":{},"7":{},"27":{},"33":{},"44":{},"77":{},"86":{},"90":{},"108":{},"130":{},"136":{},"159":{},"171":{},"185":{},"196":{},"216":{},"254":{},"259":{},"263":{},"318":{},"325":{},"330":{}},"component":{}}],["stateless",{"_index":1503,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["statement",{"_index":2187,"title":{},"name":{},"text":{"50":{},"77":{},"143":{},"159":{},"197":{},"246":{},"275":{},"336":{}},"component":{}}],["static",{"_index":570,"title":{"43-3":{},"107-3":{},"195-3":{},"329-3":{}},"name":{},"text":{"3":{},"7":{},"22":{},"23":{},"26":{},"33":{},"43":{},"67":{},"68":{},"69":{},"70":{},"86":{},"90":{},"107":{},"125":{},"126":{},"129":{},"136":{},"151":{},"152":{},"169":{},"170":{},"171":{},"185":{},"195":{},"215":{},"216":{},"224":{},"225":{},"226":{},"227":{},"249":{},"250":{},"253":{},"259":{},"263":{},"278":{},"279":{},"313":{},"314":{},"317":{},"325":{},"329":{},"339":{},"341":{},"346":{}},"component":{}}],["statist",{"_index":403,"title":{"55-4":{},"111-4":{},"181-4":{},"309-4":{}},"name":{},"text":{"3":{},"16":{},"53":{},"55":{},"86":{},"99":{},"109":{},"111":{},"179":{},"181":{},"216":{},"239":{},"259":{},"307":{},"309":{},"349":{}},"component":{}}],["statisticsen",{"_index":402,"title":{},"name":{},"text":{"3":{},"16":{},"86":{},"99":{},"216":{},"259":{}},"component":{}}],["statu",{"_index":2711,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["step",{"_index":61,"title":{},"name":{},"text":{"1":{},"50":{},"84":{},"143":{},"197":{},"213":{},"336":{},"344":{}},"component":{}}],["still",{"_index":980,"title":{},"name":{},"text":{"10":{},"12":{},"46":{},"50":{},"51":{},"66":{},"93":{},"95":{},"143":{},"144":{},"147":{},"168":{},"174":{},"176":{},"197":{},"198":{},"209":{},"223":{},"240":{},"259":{},"266":{},"268":{},"275":{},"304":{},"332":{},"336":{},"337":{},"338":{},"350":{}},"component":{}}],["stop",{"_index":827,"title":{"7-1":{},"9-6":{},"90-1":{},"92-6":{},"171-1":{},"173-6":{},"263-1":{},"265-6":{}},"name":{},"text":{"7":{},"90":{},"171":{},"216":{},"259":{},"263":{}},"component":{}}],["storag",{"_index":88,"title":{"12":{},"17":{},"38":{},"44":{},"47":{},"57":{},"71":{},"75":{},"95":{},"100":{},"108":{},"113":{},"141":{},"148":{},"153":{},"157":{},"176":{},"190":{},"196":{},"200":{},"210":{},"228":{},"231":{},"240":{},"268":{},"276":{},"280":{},"284":{},"304":{},"305":{},"330":{},"333":{},"350":{},"3-13":{},"47-3":{},"86-18":{},"148-3":{},"210-3":{},"216-25":{},"259-34":{},"333-3":{}},"name":{"17":{},"38":{},"44":{},"47":{},"71":{},"75":{},"100":{},"108":{},"141":{},"148":{},"153":{},"157":{},"190":{},"196":{},"210":{},"228":{},"231":{},"240":{},"280":{},"284":{},"305":{},"330":{},"333":{},"350":{}},"text":{"2":{},"3":{},"4":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"14":{},"16":{},"17":{},"31":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"42":{},"43":{},"44":{},"49":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"85":{},"86":{},"87":{},"89":{},"90":{},"91":{},"92":{},"93":{},"94":{},"95":{},"97":{},"99":{},"100":{},"104":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"112":{},"113":{},"114":{},"115":{},"117":{},"119":{},"120":{},"134":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"144":{},"145":{},"150":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{},"165":{},"166":{},"167":{},"168":{},"169":{},"171":{},"172":{},"173":{},"174":{},"175":{},"176":{},"178":{},"179":{},"180":{},"181":{},"182":{},"183":{},"186":{},"187":{},"188":{},"189":{},"190":{},"191":{},"192":{},"194":{},"195":{},"196":{},"198":{},"199":{},"200":{},"201":{},"202":{},"204":{},"206":{},"207":{},"212":{},"213":{},"214":{},"216":{},"217":{},"219":{},"220":{},"221":{},"222":{},"223":{},"224":{},"226":{},"227":{},"228":{},"229":{},"230":{},"231":{},"232":{},"233":{},"234":{},"235":{},"236":{},"237":{},"239":{},"240":{},"243":{},"246":{},"259":{},"260":{},"262":{},"263":{},"264":{},"265":{},"266":{},"267":{},"268":{},"270":{},"271":{},"274":{},"275":{},"276":{},"277":{},"278":{},"279":{},"280":{},"281":{},"282":{},"283":{},"284":{},"285":{},"286":{},"287":{},"288":{},"289":{},"290":{},"291":{},"292":{},"293":{},"295":{},"297":{},"298":{},"299":{},"300":{},"301":{},"302":{},"303":{},"304":{},"305":{},"306":{},"307":{},"308":{},"309":{},"310":{},"323":{},"326":{},"328":{},"329":{},"330":{},"335":{},"337":{},"338":{},"339":{},"340":{},"342":{},"343":{},"344":{},"345":{},"347":{},"349":{},"350":{}},"component":{}}],["storage.basedirectori",{"_index":1289,"title":{},"name":{},"text":{"17":{},"100":{}},"component":{}}],["storage.channel",{"_index":3104,"title":{},"name":{},"text":{"240":{},"350":{}},"component":{}}],["storage.channelcount",{"_index":1290,"title":{},"name":{},"text":{"17":{},"100":{}},"component":{}}],["storage.config",{"_index":2650,"title":{},"name":{},"text":{"75":{},"157":{},"231":{},"284":{}},"component":{}}],["storage.configurationbuild",{"_index":1743,"title":{},"name":{},"text":{"34":{},"39":{},"137":{},"142":{},"186":{},"191":{},"300":{},"306":{}},"component":{}}],["storage.createconnect",{"_index":1103,"title":{},"name":{},"text":{"11":{},"94":{},"175":{},"267":{}},"component":{}}],["storage.createeagerstor",{"_index":2399,"title":{},"name":{},"text":{"61":{},"118":{},"205":{},"296":{}},"component":{}}],["storage.createlazystor",{"_index":2402,"title":{},"name":{},"text":{"61":{},"118":{},"205":{},"296":{}},"component":{}}],["storage.createstor",{"_index":2403,"title":{},"name":{},"text":{"61":{},"118":{},"205":{},"296":{}},"component":{}}],["storage.embed",{"_index":299,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["storage.embedded.configur",{"_index":301,"title":{},"name":{},"text":{"3":{},"35":{},"86":{},"138":{},"187":{},"216":{},"259":{},"301":{}},"component":{}}],["storage.embedded.configuration:one.microstream.storage.configur",{"_index":367,"title":{},"name":{},"text":{"3":{}},"component":{}}],["storage.embedded:one.microstream.storage.typ",{"_index":365,"title":{},"name":{},"text":{"3":{}},"component":{}}],["storage.fileproviderbuilder(filesystem",{"_index":1773,"title":{},"name":{},"text":{"35":{},"138":{},"187":{},"301":{}},"component":{}}],["storage.issuefullbackup",{"_index":2435,"title":{},"name":{},"text":{"65":{},"167":{},"222":{},"343":{}},"component":{}}],["storage.lockfilesetupprovid",{"_index":1809,"title":{},"name":{},"text":{"36":{},"139":{},"188":{},"302":{}},"component":{}}],["storage.properti",{"_index":1286,"title":{},"name":{},"text":{"17":{},"35":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"100":{},"138":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{},"165":{},"187":{},"226":{},"227":{},"228":{},"229":{},"230":{},"231":{},"232":{},"233":{},"234":{},"235":{},"236":{},"237":{},"240":{},"278":{},"279":{},"280":{},"281":{},"282":{},"283":{},"284":{},"285":{},"286":{},"287":{},"288":{},"289":{},"290":{},"291":{},"301":{},"350":{}},"component":{}}],["storage.region=u",{"_index":2652,"title":{},"name":{},"text":{"75":{},"157":{},"231":{},"284":{}},"component":{}}],["storage.restadapt",{"_index":302,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["storage.restadapter:one.microstream.storage.restadapt",{"_index":369,"title":{},"name":{},"text":{"3":{}},"component":{}}],["storage.restcli",{"_index":304,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["storage.restclient.app",{"_index":305,"title":{},"name":{},"text":{"3":{},"53":{},"86":{},"109":{},"216":{},"259":{}},"component":{}}],["storage.restclient.app:one.microstream.storage.restclient.app",{"_index":373,"title":{},"name":{},"text":{"3":{}},"component":{}}],["storage.restclient.jersey",{"_index":306,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["storage.restclient.jersey:one.microstream.storage.restclient.jersey",{"_index":375,"title":{},"name":{},"text":{"3":{}},"component":{}}],["storage.restclient:one.microstream.storage.restcli",{"_index":371,"title":{},"name":{},"text":{"3":{}},"component":{}}],["storage.restservic",{"_index":308,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["storage.restservice.sparkjava",{"_index":310,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["storage.restservice.sparkjava:one.microstream.storage.restservice.sparkjava",{"_index":379,"title":{},"name":{},"text":{"3":{}},"component":{}}],["storage.restservice:one.microstream.storage.restservic",{"_index":377,"title":{},"name":{},"text":{"3":{}},"component":{}}],["storage.root",{"_index":2282,"title":{},"name":{},"text":{"52":{},"145":{},"182":{},"199":{},"292":{},"310":{}},"component":{}}],["storage.setroot(new",{"_index":2337,"title":{},"name":{},"text":{"56":{},"112":{},"182":{},"310":{}},"component":{}}],["storage.storag",{"_index":3103,"title":{},"name":{},"text":{"240":{},"350":{}},"component":{}}],["storage.store(root.getcusom",{"_index":2950,"title":{},"name":{},"text":{"116":{},"203":{},"294":{}},"component":{}}],["storage.store(root.myarraylist",{"_index":921,"title":{},"name":{},"text":{"8":{},"91":{},"172":{},"264":{}},"component":{}}],["storage.storeall(itema",{"_index":2412,"title":{},"name":{},"text":{"62":{},"119":{},"206":{},"298":{}},"component":{}}],["storage.storeall(subset",{"_index":2411,"title":{},"name":{},"text":{"62":{},"119":{},"206":{},"298":{}},"component":{}}],["storage.storeroot",{"_index":2342,"title":{},"name":{},"text":{"56":{},"112":{},"182":{},"310":{}},"component":{}}],["storage.typedictionari",{"_index":1136,"title":{},"name":{},"text":{"11":{},"94":{},"175":{},"267":{}},"component":{}}],["storage:one.microstream.enterprise.afs.azure.storage.typ",{"_index":330,"title":{},"name":{},"text":{"3":{}},"component":{}}],["storage\\\\channel_0\\\\channel_0_1.dat",{"_index":2327,"title":{},"name":{},"text":{"55":{},"111":{},"181":{},"309":{}},"component":{}}],["storagebackupsetup",{"_index":1861,"title":{},"name":{},"text":{"37":{},"64":{},"140":{},"166":{},"189":{},"221":{},"303":{},"342":{}},"component":{}}],["storagebackupsetup.new",{"_index":2427,"title":{},"name":{},"text":{"64":{},"166":{},"221":{},"342":{}},"component":{}}],["storagechannelcountprovid",{"_index":1862,"title":{},"name":{},"text":{"37":{},"140":{},"189":{},"303":{}},"component":{}}],["storageconfigur",{"_index":2431,"title":{},"name":{},"text":{"64":{},"166":{},"221":{},"342":{}},"component":{}}],["storageconfiguration.build",{"_index":1771,"title":{},"name":{},"text":{"35":{},"64":{},"138":{},"166":{},"187":{},"221":{},"301":{},"342":{}},"component":{}}],["storageconfiguration.tostr",{"_index":3086,"title":{},"name":{},"text":{"216":{},"259":{}},"component":{}}],["storageconfigurationresourcenam",{"_index":387,"title":{},"name":{},"text":{"3":{},"16":{},"17":{},"86":{},"99":{},"100":{},"216":{},"259":{}},"component":{}}],["storageconnect",{"_index":514,"title":{},"name":{},"text":{"3":{},"10":{},"11":{},"86":{},"93":{},"94":{},"174":{},"175":{},"216":{},"259":{},"266":{},"267":{}},"component":{}}],["storageconnectionfound",{"_index":537,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["storagecontrol",{"_index":515,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["storagedataconvertercsvconfiguration.defaultconfigur",{"_index":1133,"title":{},"name":{},"text":{"11":{},"94":{},"175":{}},"component":{}}],["storagedataconvertertypebinarytocsv",{"_index":1131,"title":{},"name":{},"text":{"11":{},"94":{},"175":{},"267":{}},"component":{}}],["storagedataconvertertypebinarytocsv.new",{"_index":3248,"title":{},"name":{},"text":{"267":{}},"component":{}}],["storagedataconvertertypebinarytocsv.utf8",{"_index":1132,"title":{},"name":{},"text":{"11":{},"94":{},"175":{}},"component":{}}],["storagedataconvertertypecsvtobinari",{"_index":1145,"title":{},"name":{},"text":{"11":{},"94":{},"175":{},"267":{}},"component":{}}],["storagedataconvertertypecsvtobinary.new",{"_index":1146,"title":{},"name":{},"text":{"11":{},"94":{},"175":{},"267":{}},"component":{}}],["storagedatafileevalu",{"_index":1750,"title":{},"name":{},"text":{"34":{},"37":{},"137":{},"140":{},"186":{},"189":{},"300":{},"303":{}},"component":{}}],["storageentitycacheevalu",{"_index":1756,"title":{},"name":{},"text":{"34":{},"37":{},"137":{},"140":{},"186":{},"189":{},"300":{},"303":{}},"component":{}}],["storageentitytypeconversionfileprovider.default",{"_index":1134,"title":{},"name":{},"text":{"11":{},"94":{},"175":{}},"component":{}}],["storageentitytypeexportfileprovider.default",{"_index":1107,"title":{},"name":{},"text":{"11":{},"94":{},"175":{}},"component":{}}],["storageentitytypeexportstatist",{"_index":1104,"title":{},"name":{},"text":{"11":{},"94":{},"175":{},"267":{}},"component":{}}],["storageexcept",{"_index":586,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["storagefilenameprovid",{"_index":1863,"title":{},"name":{},"text":{"37":{},"38":{},"140":{},"141":{},"189":{},"190":{},"303":{},"305":{}},"component":{}}],["storagefilenameprovider.build",{"_index":1868,"title":{},"name":{},"text":{"38":{},"141":{},"190":{},"305":{}},"component":{}}],["storagefileprovid",{"_index":1894,"title":{},"name":{},"text":{"39":{},"142":{},"191":{},"306":{}},"component":{}}],["storagehousekeepingcontrol",{"_index":1739,"title":{},"name":{},"text":{"34":{},"37":{},"137":{},"140":{},"186":{},"189":{},"300":{},"303":{}},"component":{}}],["storagelivefileprovid",{"_index":1860,"title":{},"name":{},"text":{"37":{},"38":{},"140":{},"141":{},"189":{},"190":{},"303":{},"305":{}},"component":{}}],["storagelivefileprovider.build",{"_index":1896,"title":{},"name":{},"text":{"39":{},"142":{},"191":{},"306":{}},"component":{}}],["storagelockfilesetup",{"_index":1807,"title":{},"name":{},"text":{"36":{},"139":{},"188":{},"302":{}},"component":{}}],["storagemanag",{"_index":73,"title":{"240-1":{},"350-1":{}},"name":{},"text":{"1":{},"3":{},"7":{},"9":{},"14":{},"17":{},"35":{},"36":{},"37":{},"39":{},"50":{},"51":{},"52":{},"60":{},"64":{},"84":{},"86":{},"90":{},"92":{},"97":{},"100":{},"117":{},"138":{},"139":{},"140":{},"142":{},"143":{},"144":{},"145":{},"166":{},"171":{},"173":{},"178":{},"187":{},"188":{},"189":{},"191":{},"197":{},"198":{},"199":{},"204":{},"213":{},"216":{},"221":{},"240":{},"243":{},"246":{},"259":{},"263":{},"265":{},"270":{},"271":{},"274":{},"275":{},"292":{},"295":{},"297":{},"301":{},"302":{},"303":{},"306":{},"336":{},"337":{},"340":{},"342":{},"344":{},"350":{}},"component":{}}],["storagemanager.customroot",{"_index":1244,"title":{},"name":{},"text":{"14":{},"97":{},"178":{},"270":{}},"component":{}}],["storagemanager.databasenam",{"_index":3140,"title":{},"name":{},"text":{"243":{},"271":{}},"component":{}}],["storagemanager.defaultroot",{"_index":1243,"title":{},"name":{},"text":{"14":{},"97":{},"178":{},"270":{}},"component":{}}],["storagemanager.root",{"_index":1245,"title":{},"name":{},"text":{"14":{},"97":{},"178":{},"270":{}},"component":{}}],["storagemanager.setroot",{"_index":3141,"title":{},"name":{},"text":{"243":{},"246":{},"271":{},"274":{},"275":{}},"component":{}}],["storagemanager.setroot(\"hello",{"_index":929,"title":{},"name":{},"text":{"9":{},"14":{},"92":{},"97":{},"173":{},"178":{},"265":{},"270":{}},"component":{}}],["storagemanager.shutdown",{"_index":839,"title":{},"name":{},"text":{"7":{},"9":{},"90":{},"92":{},"171":{},"173":{},"263":{},"265":{}},"component":{}}],["storagemanager.store(dataitem",{"_index":2394,"title":{},"name":{},"text":{"60":{},"117":{},"204":{},"295":{}},"component":{}}],["storagemanager.store(modifiedobject",{"_index":966,"title":{},"name":{},"text":{"9":{},"92":{},"173":{},"265":{}},"component":{}}],["storagemanager.store(root",{"_index":2918,"title":{},"name":{},"text":{"97":{},"178":{},"270":{}},"component":{}}],["storagemanager.store(root.myobject",{"_index":2390,"title":{},"name":{},"text":{"60":{},"117":{},"204":{},"295":{}},"component":{}}],["storagemanager.storeroot",{"_index":931,"title":{},"name":{},"text":{"9":{},"14":{},"60":{},"92":{},"97":{},"117":{},"173":{},"178":{},"204":{},"243":{},"246":{},"265":{},"270":{},"271":{},"274":{},"275":{},"295":{}},"component":{}}],["storagemanager_",{"_index":3135,"title":{},"name":{},"text":{"243":{},"271":{}},"component":{}}],["storagemanageriniti",{"_index":3274,"title":{},"name":{},"text":{"275":{}},"component":{}}],["storagemanagerinitializer`and",{"_index":3294,"title":{},"name":{},"text":{"275":{}},"component":{}}],["storagemanagerprovid",{"_index":3165,"title":{},"name":{},"text":{"246":{},"275":{}},"component":{}}],["storagemanagerprovider.get",{"_index":3168,"title":{},"name":{},"text":{"246":{},"275":{}},"component":{}}],["storagerestservic",{"_index":2343,"title":{},"name":{},"text":{"56":{},"112":{},"182":{},"310":{}},"component":{}}],["storagerestserviceresolver.resolve(storag",{"_index":2344,"title":{},"name":{},"text":{"56":{},"112":{},"182":{},"310":{}},"component":{}}],["storagerestservicesparkjava",{"_index":2350,"title":{},"name":{},"text":{"56":{},"112":{},"182":{},"310":{}},"component":{}}],["storagerestservicesparkjava.new(storag",{"_index":2351,"title":{},"name":{},"text":{"56":{},"112":{},"182":{},"310":{}},"component":{}}],["storagethreadnameprovid",{"_index":642,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["storagewritecontrol",{"_index":3341,"title":{},"name":{},"text":{"304":{}},"component":{}}],["storagewritecontroller.setreadonly(fals",{"_index":3347,"title":{},"name":{},"text":{"304":{}},"component":{}}],["storagewritecontrollerreadonlymod",{"_index":3342,"title":{},"name":{},"text":{"304":{}},"component":{}}],["storagewritecontrollerreadonlymode(foundation.getwritecontrol",{"_index":3343,"title":{},"name":{},"text":{"304":{}},"component":{}}],["storage’",{"_index":938,"title":{},"name":{},"text":{"9":{},"92":{},"173":{},"265":{}},"component":{}}],["store",{"_index":52,"title":{"42":{},"60":{},"61":{},"62":{},"106":{},"117":{},"118":{},"119":{},"194":{},"204":{},"205":{},"206":{},"295":{},"296":{},"298":{},"328":{},"9-5":{},"47-1":{},"59-1":{},"60-1":{},"60-2":{},"60-3":{},"61-1":{},"61-2":{},"92-5":{},"115-1":{},"117-1":{},"117-2":{},"117-3":{},"118-1":{},"118-2":{},"148-1":{},"173-5":{},"202-1":{},"204-1":{},"204-2":{},"204-3":{},"205-1":{},"205-2":{},"210-1":{},"265-5":{},"293-1":{},"295-1":{},"295-2":{},"295-3":{},"296-1":{},"296-2":{},"333-1":{}},"name":{"42":{},"106":{},"194":{},"328":{}},"text":{"1":{},"2":{},"3":{},"4":{},"7":{},"8":{},"9":{},"10":{},"12":{},"13":{},"14":{},"16":{},"17":{},"29":{},"30":{},"42":{},"43":{},"44":{},"46":{},"47":{},"49":{},"52":{},"54":{},"59":{},"60":{},"61":{},"62":{},"77":{},"84":{},"85":{},"86":{},"87":{},"90":{},"91":{},"92":{},"93":{},"95":{},"96":{},"97":{},"99":{},"100":{},"106":{},"107":{},"108":{},"110":{},"115":{},"116":{},"117":{},"118":{},"119":{},"132":{},"133":{},"145":{},"147":{},"148":{},"150":{},"159":{},"171":{},"172":{},"173":{},"174":{},"176":{},"177":{},"178":{},"180":{},"182":{},"194":{},"195":{},"196":{},"199":{},"202":{},"203":{},"204":{},"205":{},"206":{},"209":{},"210":{},"212":{},"213":{},"214":{},"215":{},"216":{},"217":{},"239":{},"240":{},"243":{},"246":{},"257":{},"258":{},"259":{},"260":{},"263":{},"264":{},"265":{},"266":{},"268":{},"269":{},"270":{},"271":{},"274":{},"275":{},"281":{},"292":{},"293":{},"294":{},"295":{},"296":{},"297":{},"298":{},"304":{},"308":{},"310":{},"321":{},"322":{},"328":{},"329":{},"330":{},"332":{},"333":{},"335":{},"340":{},"344":{},"345":{},"346":{},"349":{},"350":{}},"component":{}}],["store(fin",{"_index":1623,"title":{},"name":{},"text":{"29":{},"30":{},"132":{},"133":{},"257":{},"258":{},"321":{},"322":{}},"component":{}}],["store(myforeignobject.hidden",{"_index":2376,"title":{},"name":{},"text":{"59":{},"115":{},"202":{},"293":{}},"component":{}}],["store(object",{"_index":1612,"title":{},"name":{},"text":{"29":{},"30":{},"62":{},"119":{},"132":{},"133":{},"206":{},"257":{},"258":{},"298":{},"321":{},"322":{}},"component":{}}],["storeall(fin",{"_index":1627,"title":{},"name":{},"text":{"29":{},"30":{},"132":{},"133":{},"257":{},"258":{},"321":{},"322":{}},"component":{}}],["storeall(iter",{"_index":1615,"title":{},"name":{},"text":{"29":{},"62":{},"119":{},"132":{},"206":{},"257":{},"298":{},"321":{}},"component":{}}],["storeall(object",{"_index":1614,"title":{},"name":{},"text":{"29":{},"62":{},"119":{},"132":{},"206":{},"257":{},"298":{},"321":{}},"component":{}}],["storebyvalu",{"_index":401,"title":{},"name":{},"text":{"3":{},"15":{},"16":{},"86":{},"98":{},"99":{},"216":{},"238":{},"239":{},"259":{},"348":{},"349":{}},"component":{}}],["stored/load",{"_index":1990,"title":{},"name":{},"text":{"45":{},"146":{},"208":{},"331":{}},"component":{}}],["storer",{"_index":633,"title":{},"name":{},"text":{"3":{},"51":{},"59":{},"61":{},"86":{},"115":{},"118":{},"144":{},"198":{},"202":{},"205":{},"216":{},"259":{},"293":{},"296":{},"337":{}},"component":{}}],["storer#skip",{"_index":635,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["storer.commit",{"_index":2401,"title":{},"name":{},"text":{"61":{},"118":{},"205":{},"296":{}},"component":{}}],["storer.store(mydata",{"_index":2400,"title":{},"name":{},"text":{"61":{},"118":{},"205":{},"296":{}},"component":{}}],["storeroot",{"_index":2382,"title":{},"name":{},"text":{"60":{},"117":{},"204":{},"295":{}},"component":{}}],["storeselfstoring(fin",{"_index":1630,"title":{},"name":{},"text":{"29":{},"30":{},"132":{},"133":{},"257":{},"258":{},"321":{},"322":{}},"component":{}}],["storeselfstoring(selfstor",{"_index":1616,"title":{},"name":{},"text":{"29":{},"132":{},"257":{},"321":{}},"component":{}}],["strategi",{"_index":1013,"title":{"49-3":{},"150-3":{},"212-3":{},"335-3":{}},"name":{},"text":{"10":{},"12":{},"43":{},"50":{},"59":{},"61":{},"67":{},"93":{},"95":{},"107":{},"115":{},"118":{},"143":{},"169":{},"174":{},"176":{},"195":{},"197":{},"202":{},"205":{},"224":{},"266":{},"268":{},"293":{},"296":{},"329":{},"336":{},"339":{},"340":{},"347":{}},"component":{}}],["stream",{"_index":1202,"title":{},"name":{},"text":{"13":{},"14":{},"33":{},"46":{},"77":{},"96":{},"97":{},"136":{},"147":{},"159":{},"177":{},"178":{},"185":{},"209":{},"269":{},"270":{},"281":{},"325":{},"332":{}},"component":{}}],["strict",{"_index":3254,"title":{},"name":{},"text":{"271":{}},"component":{}}],["strictli",{"_index":1215,"title":{},"name":{},"text":{"14":{},"23":{},"29":{},"50":{},"97":{},"126":{},"132":{},"143":{},"178":{},"197":{},"250":{},"257":{},"270":{},"314":{},"321":{},"336":{}},"component":{}}],["string",{"_index":27,"title":{},"name":{},"text":{"1":{},"3":{},"4":{},"9":{},"11":{},"15":{},"21":{},"22":{},"23":{},"28":{},"32":{},"33":{},"38":{},"43":{},"44":{},"50":{},"51":{},"55":{},"60":{},"63":{},"71":{},"74":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"86":{},"87":{},"92":{},"94":{},"98":{},"107":{},"108":{},"111":{},"117":{},"120":{},"124":{},"125":{},"126":{},"131":{},"135":{},"136":{},"141":{},"143":{},"144":{},"153":{},"156":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{},"165":{},"173":{},"175":{},"181":{},"184":{},"185":{},"190":{},"195":{},"196":{},"197":{},"198":{},"204":{},"207":{},"213":{},"215":{},"216":{},"217":{},"228":{},"233":{},"234":{},"235":{},"236":{},"237":{},"238":{},"248":{},"249":{},"250":{},"256":{},"259":{},"260":{},"265":{},"280":{},"286":{},"287":{},"288":{},"289":{},"290":{},"291":{},"295":{},"299":{},"305":{},"309":{},"312":{},"313":{},"314":{},"320":{},"324":{},"325":{},"329":{},"330":{},"336":{},"337":{},"344":{},"346":{},"348":{}},"component":{}}],["string.class",{"_index":22,"title":{},"name":{},"text":{"1":{},"15":{},"17":{},"84":{},"98":{},"100":{},"213":{},"238":{},"240":{},"344":{},"348":{},"350":{}},"component":{}}],["string.valueof(valu",{"_index":1971,"title":{},"name":{},"text":{"43":{},"107":{},"195":{},"329":{}},"component":{}}],["stringbuff",{"_index":1678,"title":{},"name":{},"text":{"32":{},"135":{},"184":{},"324":{}},"component":{}}],["stringbuild",{"_index":1679,"title":{},"name":{},"text":{"32":{},"135":{},"184":{},"324":{}},"component":{}}],["strip_prefix",{"_index":685,"title":{},"name":{},"text":{"4":{},"87":{},"217":{},"260":{}},"component":{}}],["strongli",{"_index":2026,"title":{},"name":{},"text":{"49":{},"150":{},"212":{},"335":{}},"component":{}}],["structur",{"_index":95,"title":{},"name":{},"text":{"2":{},"3":{},"12":{},"43":{},"49":{},"50":{},"85":{},"86":{},"95":{},"107":{},"116":{},"143":{},"150":{},"176":{},"195":{},"197":{},"203":{},"212":{},"214":{},"216":{},"259":{},"268":{},"294":{},"304":{},"329":{},"335":{},"336":{},"345":{}},"component":{}}],["stuff",{"_index":1485,"title":{},"name":{},"text":{"23":{},"54":{},"67":{},"110":{},"126":{},"169":{},"180":{},"224":{},"250":{},"308":{},"314":{},"339":{}},"component":{}}],["style",{"_index":2186,"title":{},"name":{},"text":{"50":{},"116":{},"143":{},"197":{},"203":{},"294":{},"336":{}},"component":{}}],["sub",{"_index":225,"title":{},"name":{},"text":{"3":{},"45":{},"48":{},"59":{},"86":{},"115":{},"146":{},"149":{},"202":{},"208":{},"211":{},"216":{},"259":{},"293":{},"331":{}},"component":{}}],["subclass",{"_index":1733,"title":{},"name":{},"text":{"33":{},"136":{},"185":{},"325":{}},"component":{}}],["subdirectori",{"_index":1815,"title":{},"name":{},"text":{"37":{},"140":{},"189":{},"303":{}},"component":{}}],["subgraph",{"_index":2215,"title":{},"name":{},"text":{"50":{},"116":{},"143":{},"197":{},"203":{},"294":{},"336":{}},"component":{}}],["subject",{"_index":1829,"title":{},"name":{},"text":{"37":{},"68":{},"74":{},"140":{},"156":{},"170":{},"189":{},"225":{},"303":{},"341":{}},"component":{}}],["submit",{"_index":2096,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["subsequ",{"_index":3246,"title":{},"name":{},"text":{"265":{},"270":{}},"component":{}}],["subset",{"_index":2407,"title":{},"name":{},"text":{"62":{},"119":{},"206":{},"298":{}},"component":{}}],["subset.foreach(item",{"_index":2409,"title":{},"name":{},"text":{"62":{},"119":{},"206":{},"298":{}},"component":{}}],["subtyp",{"_index":2621,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["success",{"_index":1536,"title":{},"name":{},"text":{"24":{},"62":{},"78":{},"119":{},"127":{},"160":{},"206":{},"233":{},"251":{},"286":{},"298":{},"315":{}},"component":{}}],["successfulli",{"_index":2984,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["such",{"_index":852,"title":{},"name":{},"text":{"7":{},"10":{},"12":{},"43":{},"46":{},"47":{},"49":{},"50":{},"59":{},"66":{},"90":{},"93":{},"95":{},"107":{},"115":{},"143":{},"147":{},"148":{},"150":{},"168":{},"171":{},"174":{},"176":{},"195":{},"197":{},"202":{},"209":{},"210":{},"212":{},"223":{},"246":{},"263":{},"266":{},"268":{},"293":{},"304":{},"329":{},"332":{},"333":{},"335":{},"336":{},"338":{}},"component":{}}],["suffici",{"_index":1804,"title":{},"name":{},"text":{"36":{},"40":{},"41":{},"77":{},"104":{},"105":{},"139":{},"159":{},"188":{},"192":{},"193":{},"220":{},"302":{},"326":{},"327":{},"347":{}},"component":{}}],["suffix",{"_index":419,"title":{},"name":{},"text":{"3":{},"37":{},"38":{},"39":{},"86":{},"140":{},"141":{},"142":{},"189":{},"190":{},"191":{},"216":{},"259":{},"303":{},"305":{},"306":{}},"component":{}}],["sugar",{"_index":1736,"title":{},"name":{},"text":{"33":{},"136":{},"185":{},"325":{}},"component":{}}],["suit",{"_index":1124,"title":{},"name":{},"text":{"11":{},"94":{},"175":{},"246":{},"267":{},"275":{}},"component":{}}],["suitabl",{"_index":1962,"title":{},"name":{},"text":{"43":{},"107":{},"195":{},"329":{}},"component":{}}],["sunx509",{"_index":3045,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["super",{"_index":948,"title":{},"name":{},"text":{"9":{},"22":{},"23":{},"29":{},"30":{},"51":{},"67":{},"92":{},"125":{},"126":{},"132":{},"133":{},"144":{},"169":{},"173":{},"198":{},"224":{},"249":{},"250":{},"257":{},"258":{},"265":{},"313":{},"314":{},"321":{},"322":{},"337":{},"339":{}},"component":{}}],["super(anim",{"_index":1435,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["super(ent",{"_index":1403,"title":{},"name":{},"text":{"22":{},"23":{},"125":{},"126":{},"249":{},"250":{},"313":{},"314":{}},"component":{}}],["super(person",{"_index":1500,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["super(pet",{"_index":1457,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["super(wrap",{"_index":1637,"title":{},"name":{},"text":{"29":{},"30":{},"132":{},"133":{},"257":{},"258":{},"321":{},"322":{}},"component":{}}],["super.store(inst",{"_index":1638,"title":{},"name":{},"text":{"29":{},"132":{},"257":{},"321":{}},"component":{}}],["superflu",{"_index":2209,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["superior",{"_index":741,"title":{},"name":{},"text":{"4":{},"87":{},"217":{},"260":{}},"component":{}}],["suppl",{"_index":3371,"title":{},"name":{},"text":{"347":{}},"component":{}}],["suppli",{"_index":2627,"title":{},"name":{},"text":{"74":{},"77":{},"156":{},"159":{},"215":{},"346":{}},"component":{}}],["support",{"_index":199,"title":{"33":{},"136":{},"185":{},"325":{},"5-1":{},"5-2":{},"6-3":{},"49-3":{},"69-2":{},"70-2":{},"71-2":{},"72-2":{},"73-2":{},"74-2":{},"88-1":{},"88-2":{},"89-3":{},"150-3":{},"151-2":{},"152-2":{},"153-2":{},"154-2":{},"155-2":{},"156-2":{},"212-3":{},"218-1":{},"218-2":{},"219-3":{},"226-2":{},"227-2":{},"228-2":{},"229-2":{},"230-2":{},"261-1":{},"261-2":{},"262-3":{},"278-2":{},"279-2":{},"280-2":{},"281-2":{},"282-2":{},"283-2":{},"335-3":{}},"name":{"33":{},"136":{},"185":{},"325":{}},"text":{"3":{},"4":{},"5":{},"6":{},"22":{},"33":{},"35":{},"37":{},"50":{},"57":{},"61":{},"63":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"77":{},"86":{},"87":{},"88":{},"89":{},"113":{},"116":{},"118":{},"120":{},"125":{},"136":{},"138":{},"140":{},"143":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"159":{},"185":{},"187":{},"189":{},"197":{},"200":{},"203":{},"205":{},"207":{},"216":{},"217":{},"218":{},"219":{},"226":{},"227":{},"228":{},"229":{},"230":{},"243":{},"246":{},"249":{},"259":{},"260":{},"261":{},"262":{},"271":{},"274":{},"275":{},"276":{},"278":{},"279":{},"280":{},"281":{},"282":{},"283":{},"294":{},"296":{},"299":{},"301":{},"303":{},"313":{},"325":{},"336":{}},"component":{}}],["supportnod",{"_index":2051,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["supportnot",{"_index":2134,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["suppos",{"_index":3106,"title":{},"name":{},"text":{"240":{},"350":{}},"component":{}}],["sure",{"_index":976,"title":{},"name":{},"text":{"10":{},"50":{},"51":{},"93":{},"143":{},"144":{},"174":{},"197":{},"198":{},"203":{},"266":{},"294":{},"336":{},"337":{}},"component":{}}],["surnam",{"_index":2260,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["surprisingli",{"_index":856,"title":{},"name":{},"text":{"7":{},"51":{},"90":{},"144":{},"171":{},"198":{},"263":{},"337":{}},"component":{}}],["suspect",{"_index":2095,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["swallow",{"_index":2817,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["switch",{"_index":3346,"title":{},"name":{},"text":{"304":{}},"component":{}}],["swizzl",{"_index":2439,"title":{},"name":{},"text":{"66":{},"168":{},"223":{},"338":{}},"component":{}}],["swoop",{"_index":2023,"title":{},"name":{},"text":{"49":{},"150":{},"212":{},"335":{}},"component":{}}],["synchron",{"_index":2697,"title":{"97-3":{},"178-3":{},"270-3":{}},"name":{},"text":{"77":{},"97":{},"116":{},"159":{},"178":{},"203":{},"270":{},"294":{}},"component":{}}],["syntax",{"_index":1735,"title":{"50-4":{},"143-4":{},"197-4":{},"336-4":{}},"name":{},"text":{"33":{},"50":{},"136":{},"143":{},"185":{},"197":{},"325":{},"336":{}},"component":{}}],["system",{"_index":201,"title":{"5":{},"58":{},"88":{},"114":{},"201":{},"218":{},"261":{},"277":{},"5-2":{},"48-1":{},"88-2":{},"149-1":{},"211-1":{},"218-2":{},"261-2":{},"334-1":{}},"name":{"5":{},"58":{},"88":{},"114":{},"201":{},"218":{},"261":{},"277":{}},"text":{"3":{},"4":{},"5":{},"7":{},"12":{},"13":{},"15":{},"33":{},"35":{},"36":{},"37":{},"47":{},"54":{},"57":{},"58":{},"65":{},"69":{},"70":{},"77":{},"86":{},"87":{},"88":{},"90":{},"95":{},"96":{},"98":{},"110":{},"113":{},"114":{},"136":{},"138":{},"139":{},"140":{},"148":{},"151":{},"152":{},"159":{},"167":{},"171":{},"176":{},"177":{},"180":{},"185":{},"187":{},"188":{},"189":{},"200":{},"201":{},"210":{},"215":{},"216":{},"217":{},"218":{},"222":{},"226":{},"227":{},"238":{},"259":{},"260":{},"261":{},"263":{},"267":{},"268":{},"269":{},"276":{},"277":{},"278":{},"279":{},"301":{},"302":{},"303":{},"308":{},"325":{},"333":{},"343":{},"346":{},"347":{},"348":{}},"component":{}}],["system.exit(0",{"_index":882,"title":{},"name":{},"text":{"7":{},"90":{},"171":{},"263":{}},"component":{}}],["system.out.println(\"receiv",{"_index":2995,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["system.out.println(storagemanager.root",{"_index":928,"title":{},"name":{},"text":{"9":{},"92":{},"173":{},"265":{}},"component":{}}],["system.properti",{"_index":2582,"title":{},"name":{},"text":{"72":{},"154":{},"229":{},"282":{}},"component":{}}],["systems’",{"_index":3042,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["systemtimecontext",{"_index":1574,"title":{},"name":{},"text":{"27":{},"130":{},"254":{},"318":{}},"component":{}}],["system’",{"_index":1801,"title":{},"name":{},"text":{"36":{},"139":{},"188":{},"302":{}},"component":{}}],["t",{"_index":1923,"title":{},"name":{},"text":{"42":{},"67":{},"106":{},"169":{},"194":{},"224":{},"255":{},"319":{},"328":{},"339":{}},"component":{}}],["tabl",{"_index":911,"title":{},"name":{},"text":{"8":{},"49":{},"91":{},"150":{},"172":{},"212":{},"259":{},"264":{},"335":{}},"component":{}}],["tag",{"_index":2609,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["tailor",{"_index":1725,"title":{},"name":{},"text":{"33":{},"44":{},"108":{},"136":{},"185":{},"196":{},"325":{},"330":{}},"component":{}}],["take",{"_index":1198,"title":{},"name":{},"text":{"13":{},"22":{},"27":{},"43":{},"50":{},"96":{},"107":{},"125":{},"130":{},"143":{},"177":{},"195":{},"197":{},"240":{},"249":{},"254":{},"269":{},"313":{},"318":{},"329":{},"336":{},"340":{},"350":{}},"component":{}}],["taken",{"_index":2279,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["target",{"_index":252,"title":{"57":{},"113":{},"200":{},"276":{}},"name":{},"text":{"3":{},"37":{},"49":{},"50":{},"57":{},"65":{},"74":{},"86":{},"113":{},"140":{},"143":{},"150":{},"156":{},"167":{},"189":{},"197":{},"200":{},"212":{},"215":{},"216":{},"222":{},"246":{},"259":{},"275":{},"276":{},"303":{},"335":{},"336":{},"343":{},"346":{}},"component":{}}],["task",{"_index":754,"title":{},"name":{},"text":{"4":{},"37":{},"87":{},"140":{},"189":{},"217":{},"246":{},"260":{},"275":{},"303":{}},"component":{}}],["tast",{"_index":1003,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["tcp",{"_index":2980,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["technic",{"_index":591,"title":{},"name":{},"text":{"3":{},"4":{},"12":{},"14":{},"23":{},"27":{},"33":{},"43":{},"47":{},"50":{},"67":{},"86":{},"87":{},"95":{},"97":{},"107":{},"116":{},"126":{},"130":{},"136":{},"143":{},"148":{},"169":{},"176":{},"178":{},"185":{},"195":{},"197":{},"203":{},"210":{},"216":{},"217":{},"224":{},"250":{},"254":{},"259":{},"260":{},"268":{},"270":{},"294":{},"314":{},"318":{},"325":{},"329":{},"333":{},"336":{},"339":{}},"component":{}}],["techniqu",{"_index":162,"title":{},"name":{},"text":{"2":{},"85":{},"214":{},"345":{}},"component":{}}],["technolog",{"_index":732,"title":{},"name":{},"text":{"4":{},"12":{},"87":{},"95":{},"97":{},"176":{},"178":{},"217":{},"260":{},"268":{},"270":{}},"component":{}}],["tell",{"_index":2445,"title":{},"name":{},"text":{"66":{},"168":{},"223":{},"338":{}},"component":{}}],["templat",{"_index":1374,"title":{},"name":{},"text":{"21":{},"124":{},"248":{},"312":{}},"component":{}}],["temurin",{"_index":2907,"title":{},"name":{},"text":{"88":{},"218":{},"261":{}},"component":{}}],["ten",{"_index":907,"title":{},"name":{},"text":{"7":{},"27":{},"90":{},"130":{},"171":{},"254":{},"263":{},"318":{}},"component":{}}],["tenant",{"_index":1980,"title":{},"name":{},"text":{"44":{},"108":{},"196":{},"330":{}},"component":{}}],["term",{"_index":1182,"title":{},"name":{},"text":{"12":{},"23":{},"50":{},"95":{},"126":{},"143":{},"176":{},"197":{},"250":{},"268":{},"314":{},"336":{}},"component":{}}],["test",{"_index":455,"title":{},"name":{},"text":{"3":{},"5":{},"58":{},"86":{},"88":{},"114":{},"201":{},"216":{},"218":{},"259":{},"261":{},"277":{}},"component":{}}],["text",{"_index":742,"title":{},"name":{},"text":{"4":{},"55":{},"87":{},"111":{},"181":{},"217":{},"260":{},"309":{}},"component":{}}],["tha",{"_index":1040,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["thank",{"_index":2934,"title":{},"name":{},"text":{"116":{},"203":{},"294":{}},"component":{}}],["that’",{"_index":901,"title":{},"name":{},"text":{"7":{},"14":{},"23":{},"28":{},"29":{},"50":{},"51":{},"56":{},"61":{},"66":{},"67":{},"90":{},"97":{},"112":{},"118":{},"126":{},"131":{},"132":{},"143":{},"144":{},"168":{},"169":{},"171":{},"178":{},"182":{},"197":{},"198":{},"205":{},"223":{},"224":{},"250":{},"256":{},"257":{},"263":{},"270":{},"296":{},"310":{},"314":{},"320":{},"321":{},"336":{},"337":{},"338":{},"339":{}},"component":{}}],["theori",{"_index":790,"title":{},"name":{},"text":{"5":{},"33":{},"88":{},"116":{},"136":{},"185":{},"218":{},"261":{},"325":{}},"component":{}}],["thereaft",{"_index":2442,"title":{},"name":{},"text":{"66":{},"168":{},"223":{},"338":{}},"component":{}}],["therefor",{"_index":1229,"title":{},"name":{},"text":{"14":{},"37":{},"51":{},"62":{},"67":{},"97":{},"119":{},"140":{},"144":{},"169":{},"178":{},"189":{},"198":{},"206":{},"224":{},"270":{},"298":{},"303":{},"337":{},"339":{}},"component":{}}],["thereof",{"_index":528,"title":{},"name":{},"text":{"3":{},"32":{},"50":{},"86":{},"135":{},"143":{},"184":{},"197":{},"216":{},"259":{},"324":{},"336":{}},"component":{}}],["there’",{"_index":841,"title":{},"name":{},"text":{"7":{},"21":{},"37":{},"90":{},"124":{},"140":{},"171":{},"189":{},"248":{},"263":{},"303":{},"312":{}},"component":{}}],["thewhol",{"_index":3306,"title":{},"name":{},"text":{"281":{}},"component":{}}],["thin",{"_index":2083,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["thing",{"_index":594,"title":{},"name":{},"text":{"3":{},"7":{},"12":{},"14":{},"50":{},"51":{},"67":{},"86":{},"90":{},"95":{},"97":{},"143":{},"144":{},"169":{},"171":{},"176":{},"178":{},"197":{},"198":{},"216":{},"224":{},"259":{},"263":{},"268":{},"270":{},"336":{},"337":{},"339":{}},"component":{}}],["think",{"_index":1174,"title":{},"name":{},"text":{"12":{},"95":{},"176":{},"268":{}},"component":{}}],["third",{"_index":765,"title":{"5-3":{},"88-3":{},"218-3":{},"261-3":{}},"name":{},"text":{"12":{},"95":{},"176":{},"268":{}},"component":{}}],["this.cont",{"_index":950,"title":{},"name":{},"text":{"9":{},"92":{},"173":{},"265":{}},"component":{}}],["this.entitydata().firstnam",{"_index":1480,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["this.entitydata().lastnam",{"_index":1481,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["this.entitydata().nam",{"_index":1439,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["this.entitydata().partn",{"_index":1399,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["this.entitydata().speci",{"_index":1398,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["this.firstnam",{"_index":1483,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["this.lastnam",{"_index":1484,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["this.nam",{"_index":1443,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["this.partn",{"_index":1405,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["this.person",{"_index":1524,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["this.provid",{"_index":3279,"title":{},"name":{},"text":{"275":{}},"component":{}}],["this.speci",{"_index":1404,"title":{},"name":{},"text":{"22":{},"125":{},"249":{},"313":{}},"component":{}}],["this.storagemanagerprovid",{"_index":3167,"title":{},"name":{},"text":{"246":{},"275":{}},"component":{}}],["this.turnov",{"_index":2499,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["this.turnovers.get",{"_index":2484,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["this.turnovers.getid",{"_index":2487,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["this.wrap",{"_index":1622,"title":{},"name":{},"text":{"29":{},"30":{},"132":{},"133":{},"257":{},"258":{},"321":{},"322":{}},"component":{}}],["this.wrapped().store(inst",{"_index":1642,"title":{},"name":{},"text":{"30":{},"133":{},"258":{},"322":{}},"component":{}}],["this.wrapped().storeall(inst",{"_index":1643,"title":{},"name":{},"text":{"30":{},"133":{},"258":{},"322":{}},"component":{}}],["this.wrapped().storeselfstoring(stor",{"_index":1644,"title":{},"name":{},"text":{"30":{},"133":{},"258":{},"322":{}},"component":{}}],["this.wrapped.store(inst",{"_index":1626,"title":{},"name":{},"text":{"29":{},"132":{},"257":{},"321":{}},"component":{}}],["this.wrapped.storeall(inst",{"_index":1628,"title":{},"name":{},"text":{"29":{},"132":{},"257":{},"321":{}},"component":{}}],["this.wrapped.storeselfstoring(stor",{"_index":1631,"title":{},"name":{},"text":{"29":{},"132":{},"257":{},"321":{}},"component":{}}],["those",{"_index":596,"title":{},"name":{},"text":{"3":{},"8":{},"10":{},"12":{},"14":{},"33":{},"41":{},"44":{},"50":{},"59":{},"61":{},"86":{},"91":{},"93":{},"95":{},"97":{},"105":{},"108":{},"115":{},"118":{},"136":{},"143":{},"172":{},"174":{},"176":{},"178":{},"185":{},"193":{},"196":{},"197":{},"202":{},"205":{},"216":{},"259":{},"264":{},"266":{},"268":{},"270":{},"293":{},"296":{},"325":{},"327":{},"330":{},"336":{},"347":{}},"component":{}}],["thought",{"_index":1225,"title":{},"name":{},"text":{"14":{},"50":{},"97":{},"143":{},"178":{},"197":{},"270":{},"336":{}},"component":{}}],["thousand",{"_index":2464,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["thread",{"_index":486,"title":{"49-2":{},"150-2":{},"212-2":{},"335-2":{}},"name":{},"text":{"3":{},"4":{},"7":{},"9":{},"10":{},"12":{},"33":{},"37":{},"39":{},"40":{},"42":{},"46":{},"49":{},"59":{},"75":{},"86":{},"87":{},"90":{},"92":{},"93":{},"95":{},"97":{},"104":{},"106":{},"115":{},"116":{},"136":{},"140":{},"142":{},"147":{},"150":{},"157":{},"171":{},"173":{},"176":{},"178":{},"185":{},"189":{},"191":{},"192":{},"194":{},"202":{},"203":{},"209":{},"212":{},"216":{},"217":{},"231":{},"246":{},"259":{},"260":{},"263":{},"265":{},"268":{},"270":{},"284":{},"293":{},"294":{},"303":{},"306":{},"325":{},"326":{},"328":{},"332":{},"335":{}},"component":{}}],["thread.currentthread().getcontextclassload",{"_index":1909,"title":{},"name":{},"text":{"40":{},"104":{},"192":{},"326":{}},"component":{}}],["thread’",{"_index":3187,"title":{},"name":{},"text":{"246":{}},"component":{}}],["three",{"_index":891,"title":{},"name":{},"text":{"7":{},"14":{},"22":{},"29":{},"50":{},"90":{},"97":{},"125":{},"132":{},"143":{},"171":{},"178":{},"197":{},"249":{},"257":{},"263":{},"270":{},"313":{},"321":{},"336":{},"347":{}},"component":{}}],["threshold",{"_index":436,"title":{},"name":{},"text":{"3":{},"34":{},"37":{},"51":{},"86":{},"137":{},"140":{},"144":{},"186":{},"189":{},"198":{},"216":{},"259":{},"300":{},"303":{},"337":{}},"component":{}}],["through",{"_index":398,"title":{},"name":{},"text":{"3":{},"16":{},"50":{},"53":{},"57":{},"67":{},"69":{},"70":{},"86":{},"99":{},"109":{},"113":{},"143":{},"151":{},"152":{},"169":{},"179":{},"180":{},"182":{},"197":{},"200":{},"216":{},"224":{},"226":{},"227":{},"239":{},"240":{},"243":{},"246":{},"259":{},"271":{},"274":{},"275":{},"276":{},"278":{},"279":{},"297":{},"304":{},"307":{},"308":{},"310":{},"336":{},"339":{},"349":{},"350":{}},"component":{}}],["throw",{"_index":559,"title":{},"name":{},"text":{"3":{},"50":{},"86":{},"143":{},"197":{},"216":{},"259":{},"304":{},"336":{}},"component":{}}],["thrown",{"_index":3329,"title":{},"name":{},"text":{"297":{},"304":{}},"component":{}}],["thu",{"_index":1010,"title":{},"name":{},"text":{"10":{},"49":{},"50":{},"60":{},"67":{},"93":{},"117":{},"143":{},"150":{},"169":{},"174":{},"197":{},"204":{},"212":{},"224":{},"243":{},"266":{},"271":{},"274":{},"295":{},"335":{},"336":{},"339":{}},"component":{}}],["ti",{"_index":1196,"title":{},"name":{},"text":{"12":{},"33":{},"95":{},"136":{},"176":{},"185":{},"268":{},"325":{}},"component":{}}],["time",{"_index":56,"title":{"34-1":{},"37-4":{},"137-1":{},"140-4":{},"186-1":{},"189-4":{},"300-1":{},"303-4":{}},"name":{},"text":{"1":{},"2":{},"3":{},"7":{},"9":{},"10":{},"23":{},"27":{},"29":{},"34":{},"37":{},"45":{},"47":{},"50":{},"66":{},"67":{},"68":{},"74":{},"75":{},"77":{},"84":{},"85":{},"86":{},"90":{},"92":{},"93":{},"97":{},"126":{},"130":{},"132":{},"137":{},"140":{},"143":{},"146":{},"148":{},"156":{},"157":{},"159":{},"168":{},"169":{},"170":{},"171":{},"173":{},"174":{},"178":{},"186":{},"189":{},"197":{},"208":{},"210":{},"213":{},"214":{},"215":{},"216":{},"223":{},"224":{},"225":{},"231":{},"243":{},"246":{},"250":{},"254":{},"257":{},"259":{},"263":{},"265":{},"266":{},"270":{},"271":{},"274":{},"275":{},"284":{},"300":{},"303":{},"314":{},"318":{},"321":{},"331":{},"333":{},"336":{},"338":{},"339":{},"340":{},"341":{},"344":{},"345":{},"346":{}},"component":{}}],["timeout",{"_index":438,"title":{},"name":{},"text":{"3":{},"34":{},"37":{},"66":{},"75":{},"77":{},"86":{},"137":{},"140":{},"157":{},"159":{},"168":{},"186":{},"189":{},"215":{},"216":{},"223":{},"231":{},"259":{},"284":{},"300":{},"303":{},"338":{},"346":{}},"component":{}}],["timespan",{"_index":1823,"title":{},"name":{},"text":{"37":{},"140":{},"189":{},"303":{}},"component":{}}],["timestamp",{"_index":1573,"title":{"68":{},"170":{},"225":{},"341":{},"68-2":{},"170-2":{},"225-2":{},"341-2":{}},"name":{"68":{},"170":{},"225":{},"341":{}},"text":{"27":{},"66":{},"68":{},"130":{},"168":{},"170":{},"223":{},"225":{},"254":{},"318":{},"338":{},"341":{}},"component":{}}],["tini",{"_index":1232,"title":{},"name":{},"text":{"14":{},"45":{},"67":{},"97":{},"146":{},"169":{},"178":{},"208":{},"224":{},"270":{},"331":{},"339":{}},"component":{}}],["tl",{"_index":2979,"title":{"215-9":{},"346-9":{}},"name":{},"text":{"215":{},"346":{}},"component":{}}],["tlskeymanagerprovid",{"_index":3022,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["tlskeymanagerprovider.pkcs12",{"_index":3036,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["tlsparametersprovid",{"_index":3024,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["tlsparametersprovider.default",{"_index":3038,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["tlstrustmanagerprovid",{"_index":3023,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["tlstrustmanagerprovider.pkcs12",{"_index":3037,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["tlsv1.2",{"_index":3053,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["to/from",{"_index":1989,"title":{},"name":{},"text":{"45":{},"146":{},"208":{},"331":{}},"component":{}}],["today",{"_index":1156,"title":{},"name":{},"text":{"12":{},"95":{},"176":{},"268":{}},"component":{}}],["todo",{"_index":2765,"title":{},"name":{},"text":{"79":{},"80":{},"81":{},"82":{},"83":{},"161":{},"162":{},"163":{},"164":{},"165":{},"234":{},"235":{},"236":{},"237":{},"287":{},"288":{},"289":{},"290":{},"291":{}},"component":{}}],["togeth",{"_index":2073,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"215":{},"336":{},"346":{}},"component":{}}],["toguard",{"_index":2685,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["token",{"_index":2568,"title":{},"name":{},"text":{"71":{},"153":{},"228":{},"280":{}},"component":{}}],["tolanguagetag",{"_index":648,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["tool",{"_index":1126,"title":{},"name":{},"text":{"11":{},"50":{},"54":{},"94":{},"110":{},"143":{},"175":{},"180":{},"197":{},"259":{},"267":{},"308":{},"336":{}},"component":{}}],["top",{"_index":701,"title":{},"name":{},"text":{"4":{},"12":{},"55":{},"87":{},"95":{},"111":{},"176":{},"181":{},"217":{},"260":{},"268":{},"309":{}},"component":{}}],["topic",{"_index":1656,"title":{},"name":{},"text":{"31":{},"134":{},"183":{},"323":{}},"component":{}}],["tostr",{"_index":954,"title":{},"name":{},"text":{"9":{},"92":{},"173":{},"265":{}},"component":{}}],["tostring(fin",{"_index":1522,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["total",{"_index":1200,"title":{},"name":{},"text":{"13":{},"77":{},"96":{},"159":{},"177":{},"269":{}},"component":{}}],["totaldatalength",{"_index":2331,"title":{},"name":{},"text":{"55":{},"111":{},"181":{},"309":{}},"component":{}}],["touch",{"_index":2455,"title":{"68":{},"170":{},"225":{},"341":{},"68-2":{},"170-2":{},"225-2":{},"341-2":{}},"name":{"68":{},"170":{},"225":{},"341":{}},"text":{"66":{},"168":{},"223":{},"338":{}},"component":{}}],["trace",{"_index":2914,"title":{},"name":{},"text":{"97":{},"178":{},"270":{}},"component":{}}],["track",{"_index":1562,"title":{},"name":{},"text":{"27":{},"68":{},"130":{},"170":{},"225":{},"254":{},"318":{},"341":{}},"component":{}}],["trail",{"_index":2706,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["transact",{"_index":421,"title":{"62":{},"119":{},"206":{},"298":{},"49-1":{},"62-2":{},"119-2":{},"150-1":{},"206-2":{},"212-1":{},"298-2":{},"335-1":{}},"name":{"62":{},"119":{},"206":{},"298":{}},"text":{"3":{},"37":{},"38":{},"49":{},"62":{},"77":{},"86":{},"116":{},"119":{},"140":{},"141":{},"150":{},"159":{},"189":{},"190":{},"203":{},"206":{},"212":{},"216":{},"259":{},"278":{},"279":{},"280":{},"281":{},"282":{},"283":{},"284":{},"285":{},"286":{},"287":{},"288":{},"289":{},"290":{},"291":{},"294":{},"298":{},"303":{},"305":{},"335":{}},"component":{}}],["transactionfileprefix",{"_index":420,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["transactionfilesuffix",{"_index":422,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["transactions_",{"_index":1817,"title":{},"name":{},"text":{"37":{},"140":{},"189":{},"303":{}},"component":{}}],["transfer",{"_index":706,"title":{},"name":{},"text":{"4":{},"37":{},"87":{},"140":{},"189":{},"215":{},"217":{},"220":{},"260":{},"303":{},"346":{},"347":{}},"component":{}}],["transform",{"_index":2040,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["transient",{"_index":598,"title":{"63":{},"120":{},"207":{},"299":{}},"name":{"63":{},"120":{},"207":{},"299":{}},"text":{"3":{},"44":{},"63":{},"86":{},"108":{},"120":{},"196":{},"207":{},"213":{},"216":{},"259":{},"299":{},"330":{},"344":{}},"component":{}}],["translat",{"_index":2166,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["transmit",{"_index":712,"title":{},"name":{},"text":{"4":{},"87":{},"217":{},"260":{}},"component":{}}],["transpar",{"_index":2492,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["transport",{"_index":2732,"title":{},"name":{},"text":{"77":{},"159":{},"220":{},"347":{}},"component":{}}],["travers",{"_index":2299,"title":{},"name":{},"text":{"54":{},"110":{},"180":{},"308":{}},"component":{}}],["treatment",{"_index":890,"title":{},"name":{},"text":{"7":{},"14":{},"90":{},"97":{},"171":{},"178":{},"263":{},"270":{}},"component":{}}],["tree",{"_index":224,"title":{},"name":{},"text":{"3":{},"86":{},"116":{},"216":{},"259":{}},"component":{}}],["treemap",{"_index":1703,"title":{},"name":{},"text":{"32":{},"135":{},"184":{},"324":{}},"component":{}}],["treeset",{"_index":1704,"title":{},"name":{},"text":{"32":{},"135":{},"184":{},"324":{}},"component":{}}],["tri",{"_index":1142,"title":{},"name":{},"text":{"11":{},"36":{},"50":{},"72":{},"94":{},"139":{},"143":{},"154":{},"175":{},"188":{},"197":{},"229":{},"282":{},"302":{},"336":{}},"component":{}}],["trick",{"_index":1982,"title":{},"name":{},"text":{"44":{},"108":{},"196":{},"330":{}},"component":{}}],["tricki",{"_index":2111,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["trigger",{"_index":1077,"title":{},"name":{},"text":{"10":{},"34":{},"93":{},"137":{},"174":{},"186":{},"266":{},"300":{}},"component":{}}],["trip",{"_index":2716,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["trivial",{"_index":1209,"title":{},"name":{},"text":{"14":{},"33":{},"50":{},"97":{},"136":{},"143":{},"178":{},"185":{},"197":{},"270":{},"325":{},"336":{}},"component":{}}],["true",{"_index":1111,"title":{},"name":{},"text":{"11":{},"17":{},"18":{},"20":{},"42":{},"74":{},"94":{},"100":{},"106":{},"121":{},"123":{},"156":{},"175":{},"194":{},"240":{},"241":{},"247":{},"311":{},"328":{},"347":{},"350":{},"351":{}},"component":{}}],["truncat",{"_index":412,"title":{},"name":{},"text":{"3":{},"7":{},"37":{},"38":{},"86":{},"90":{},"140":{},"141":{},"171":{},"189":{},"190":{},"216":{},"259":{},"263":{},"303":{},"305":{}},"component":{}}],["truncationdirectori",{"_index":411,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["trust",{"_index":2114,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["trustmanag",{"_index":3049,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["try(fin",{"_index":3003,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["turn",{"_index":1176,"title":{},"name":{},"text":{"12":{},"95":{},"176":{},"268":{}},"component":{}}],["turnov",{"_index":2475,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["two",{"_index":590,"title":{},"name":{},"text":{"3":{},"7":{},"14":{},"23":{},"31":{},"43":{},"49":{},"50":{},"51":{},"52":{},"61":{},"65":{},"86":{},"90":{},"97":{},"107":{},"116":{},"118":{},"126":{},"134":{},"143":{},"144":{},"145":{},"150":{},"167":{},"171":{},"178":{},"183":{},"195":{},"197":{},"198":{},"199":{},"205":{},"212":{},"215":{},"216":{},"222":{},"250":{},"259":{},"263":{},"270":{},"292":{},"296":{},"304":{},"314":{},"323":{},"329":{},"335":{},"336":{},"337":{},"343":{},"346":{}},"component":{}}],["type",{"_index":49,"title":{"32":{},"41":{},"43":{},"50":{},"105":{},"107":{},"135":{},"143":{},"184":{},"193":{},"195":{},"197":{},"324":{},"327":{},"329":{},"336":{},"32-1":{},"37-8":{},"55-3":{},"111-3":{},"135-1":{},"140-8":{},"181-3":{},"184-1":{},"189-8":{},"303-8":{},"309-3":{},"324-1":{},"347-3":{},"347-5":{}},"name":{"32":{},"41":{},"43":{},"105":{},"107":{},"135":{},"184":{},"193":{},"195":{},"324":{},"327":{},"329":{}},"text":{"1":{},"2":{},"3":{},"4":{},"9":{},"11":{},"14":{},"16":{},"22":{},"23":{},"24":{},"28":{},"29":{},"30":{},"32":{},"33":{},"35":{},"37":{},"38":{},"40":{},"41":{},"43":{},"44":{},"46":{},"49":{},"50":{},"51":{},"55":{},"60":{},"67":{},"69":{},"70":{},"71":{},"74":{},"84":{},"85":{},"86":{},"87":{},"92":{},"94":{},"97":{},"99":{},"104":{},"105":{},"107":{},"108":{},"111":{},"117":{},"125":{},"126":{},"127":{},"131":{},"132":{},"133":{},"135":{},"136":{},"138":{},"140":{},"141":{},"143":{},"144":{},"147":{},"150":{},"151":{},"152":{},"153":{},"156":{},"169":{},"173":{},"175":{},"178":{},"181":{},"184":{},"185":{},"187":{},"189":{},"190":{},"192":{},"193":{},"195":{},"196":{},"197":{},"198":{},"204":{},"209":{},"212":{},"213":{},"214":{},"215":{},"216":{},"217":{},"220":{},"224":{},"226":{},"227":{},"228":{},"239":{},"240":{},"243":{},"246":{},"249":{},"250":{},"251":{},"256":{},"257":{},"258":{},"259":{},"260":{},"265":{},"267":{},"270":{},"271":{},"274":{},"275":{},"278":{},"279":{},"280":{},"281":{},"295":{},"301":{},"303":{},"305":{},"309":{},"313":{},"314":{},"315":{},"320":{},"321":{},"322":{},"324":{},"325":{},"326":{},"327":{},"329":{},"330":{},"332":{},"335":{},"336":{},"337":{},"339":{},"344":{},"345":{},"346":{},"347":{},"349":{},"350":{}},"component":{}}],["type=row|column",{"_index":3321,"title":{},"name":{},"text":{"287":{}},"component":{}}],["typedictionari",{"_index":650,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{},"347":{}},"component":{}}],["typedictionaryfilenam",{"_index":423,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["typedseri",{"_index":3368,"title":{"347-4":{}},"name":{},"text":{"347":{}},"component":{}}],["typedserializer.bytes(found",{"_index":3370,"title":{},"name":{},"text":{"347":{}},"component":{}}],["typehandl",{"_index":1110,"title":{},"name":{},"text":{"11":{},"33":{},"43":{},"50":{},"94":{},"107":{},"136":{},"143":{},"175":{},"185":{},"195":{},"197":{},"325":{},"329":{},"336":{}},"component":{}}],["typeid",{"_index":2120,"title":{},"name":{},"text":{"50":{},"55":{},"111":{},"143":{},"181":{},"197":{},"309":{},"336":{}},"component":{}}],["typesaf",{"_index":3155,"title":{},"name":{},"text":{"246":{},"275":{}},"component":{}}],["typic",{"_index":971,"title":{},"name":{},"text":{"10":{},"12":{},"47":{},"54":{},"93":{},"95":{},"110":{},"148":{},"174":{},"176":{},"180":{},"210":{},"266":{},"268":{},"308":{},"333":{}},"component":{}}],["u",{"_index":1924,"title":{},"name":{},"text":{"42":{},"106":{},"194":{},"328":{}},"component":{}}],["ui",{"_index":530,"title":{},"name":{},"text":{"3":{},"86":{},"180":{},"216":{},"259":{},"308":{}},"component":{}}],["unaccept",{"_index":1180,"title":{},"name":{},"text":{"12":{},"95":{},"176":{},"268":{}},"component":{}}],["unalt",{"_index":3330,"title":{},"name":{},"text":{"297":{}},"component":{}}],["unambigu",{"_index":2124,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["unchang",{"_index":2406,"title":{},"name":{},"text":{"62":{},"119":{},"206":{},"298":{}},"component":{}}],["unclear",{"_index":2250,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["under",{"_index":490,"title":{},"name":{},"text":{"3":{},"6":{},"50":{},"67":{},"86":{},"89":{},"143":{},"169":{},"197":{},"216":{},"219":{},"224":{},"259":{},"262":{},"336":{},"339":{}},"component":{}}],["underli",{"_index":864,"title":{},"name":{},"text":{"7":{},"77":{},"90":{},"159":{},"171":{},"263":{},"304":{}},"component":{}}],["unfortun",{"_index":2938,"title":{},"name":{},"text":{"116":{},"203":{},"294":{}},"component":{}}],["uniqu",{"_index":164,"title":{},"name":{},"text":{"2":{},"14":{},"47":{},"49":{},"50":{},"85":{},"97":{},"143":{},"148":{},"150":{},"178":{},"197":{},"210":{},"212":{},"214":{},"270":{},"333":{},"335":{},"336":{},"345":{}},"component":{}}],["unit",{"_index":454,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["uniti",{"_index":1831,"title":{},"name":{},"text":{"37":{},"39":{},"140":{},"142":{},"189":{},"191":{},"303":{},"306":{}},"component":{}}],["unless",{"_index":3128,"title":{},"name":{},"text":{"243":{},"246":{},"271":{},"274":{},"275":{}},"component":{}}],["unlimit",{"_index":2308,"title":{},"name":{},"text":{"55":{},"111":{},"181":{},"309":{}},"component":{}}],["unload",{"_index":2516,"title":{},"name":{},"text":{"68":{},"170":{},"225":{},"259":{},"340":{},"341":{}},"component":{}}],["unnam",{"_index":2015,"title":{},"name":{},"text":{"48":{},"149":{},"211":{},"334":{}},"component":{}}],["unnecessari",{"_index":540,"title":{},"name":{},"text":{"3":{},"7":{},"86":{},"90":{},"171":{},"216":{},"259":{},"263":{}},"component":{}}],["unnecessarili",{"_index":1063,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["unneed",{"_index":975,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["unreach",{"_index":990,"title":{},"name":{},"text":{"10":{},"50":{},"93":{},"143":{},"174":{},"197":{},"266":{},"336":{}},"component":{}}],["unregist",{"_index":3011,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["unshar",{"_index":1467,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["unspecifi",{"_index":2643,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["until",{"_index":1023,"title":{},"name":{},"text":{"10":{},"50":{},"74":{},"93":{},"136":{},"143":{},"156":{},"174":{},"185":{},"197":{},"246":{},"266":{},"275":{},"325":{},"336":{}},"component":{}}],["unus",{"_index":1037,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["unvisit",{"_index":1072,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["unwant",{"_index":984,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["up",{"_index":166,"title":{},"name":{},"text":{"2":{},"4":{},"7":{},"10":{},"31":{},"34":{},"37":{},"50":{},"54":{},"66":{},"67":{},"85":{},"87":{},"90":{},"93":{},"110":{},"134":{},"137":{},"140":{},"143":{},"168":{},"169":{},"171":{},"174":{},"180":{},"183":{},"186":{},"189":{},"197":{},"203":{},"214":{},"217":{},"223":{},"224":{},"240":{},"243":{},"246":{},"260":{},"263":{},"266":{},"271":{},"274":{},"275":{},"294":{},"300":{},"303":{},"304":{},"308":{},"323":{},"336":{},"338":{},"339":{},"340":{},"345":{},"350":{}},"component":{}}],["updat",{"_index":461,"title":{"26":{},"129":{},"253":{},"317":{}},"name":{"26":{},"129":{},"253":{},"317":{}},"text":{"3":{},"4":{},"12":{},"16":{},"23":{},"24":{},"26":{},"27":{},"33":{},"36":{},"44":{},"49":{},"62":{},"86":{},"87":{},"95":{},"99":{},"108":{},"119":{},"126":{},"127":{},"129":{},"130":{},"136":{},"139":{},"150":{},"176":{},"185":{},"188":{},"196":{},"206":{},"212":{},"216":{},"217":{},"239":{},"250":{},"251":{},"253":{},"254":{},"259":{},"260":{},"265":{},"268":{},"270":{},"298":{},"302":{},"314":{},"315":{},"317":{},"318":{},"325":{},"330":{},"335":{},"349":{}},"component":{}}],["updated/fil",{"_index":1234,"title":{},"name":{},"text":{"14":{},"97":{},"178":{},"270":{}},"component":{}}],["updateinterv",{"_index":1810,"title":{},"name":{},"text":{"36":{},"139":{},"188":{},"302":{}},"component":{}}],["upgrad",{"_index":3209,"title":{},"name":{},"text":{"259":{}},"component":{}}],["upon",{"_index":575,"title":{},"name":{},"text":{"3":{},"44":{},"46":{},"86":{},"108":{},"147":{},"196":{},"209":{},"216":{},"259":{},"330":{},"332":{}},"component":{}}],["upper",{"_index":1053,"title":{},"name":{},"text":{"10":{},"59":{},"77":{},"93":{},"115":{},"159":{},"174":{},"202":{},"266":{},"293":{}},"component":{}}],["uptim",{"_index":3108,"title":{},"name":{},"text":{"240":{},"350":{}},"component":{}}],["uri",{"_index":511,"title":{},"name":{},"text":{"3":{},"32":{},"86":{},"135":{},"184":{},"216":{},"259":{},"324":{}},"component":{}}],["url",{"_index":512,"title":{},"name":{},"text":{"3":{},"4":{},"32":{},"53":{},"56":{},"72":{},"79":{},"80":{},"81":{},"82":{},"83":{},"86":{},"87":{},"109":{},"112":{},"135":{},"154":{},"161":{},"162":{},"163":{},"164":{},"165":{},"179":{},"182":{},"184":{},"216":{},"217":{},"229":{},"234":{},"235":{},"236":{},"237":{},"259":{},"260":{},"282":{},"287":{},"288":{},"289":{},"290":{},"291":{},"307":{},"310":{},"324":{}},"component":{}}],["us",{"_index":40,"title":{"39":{},"116":{},"142":{},"191":{},"203":{},"294":{},"306":{},"37-7":{},"47-2":{},"59-2":{},"115-2":{},"140-7":{},"148-2":{},"189-7":{},"202-2":{},"210-2":{},"293-2":{},"303-7":{},"333-2":{},"340-3":{}},"name":{"39":{},"142":{},"191":{},"306":{}},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"21":{},"22":{},"23":{},"24":{},"25":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"42":{},"43":{},"44":{},"45":{},"46":{},"49":{},"50":{},"51":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"61":{},"62":{},"66":{},"67":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"94":{},"95":{},"96":{},"97":{},"98":{},"99":{},"100":{},"104":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"112":{},"113":{},"114":{},"115":{},"116":{},"118":{},"119":{},"121":{},"122":{},"124":{},"125":{},"126":{},"127":{},"128":{},"130":{},"131":{},"132":{},"133":{},"134":{},"135":{},"136":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"143":{},"144":{},"146":{},"147":{},"150":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{},"165":{},"168":{},"169":{},"171":{},"173":{},"174":{},"175":{},"176":{},"177":{},"178":{},"179":{},"180":{},"181":{},"182":{},"183":{},"184":{},"185":{},"186":{},"187":{},"188":{},"189":{},"190":{},"191":{},"192":{},"194":{},"195":{},"196":{},"197":{},"198":{},"200":{},"201":{},"202":{},"203":{},"205":{},"206":{},"208":{},"209":{},"212":{},"213":{},"214":{},"215":{},"216":{},"217":{},"218":{},"219":{},"220":{},"223":{},"224":{},"226":{},"227":{},"228":{},"229":{},"230":{},"231":{},"232":{},"233":{},"234":{},"235":{},"236":{},"237":{},"238":{},"239":{},"240":{},"241":{},"242":{},"243":{},"246":{},"248":{},"249":{},"250":{},"251":{},"252":{},"254":{},"256":{},"257":{},"258":{},"259":{},"260":{},"261":{},"262":{},"263":{},"265":{},"266":{},"267":{},"268":{},"269":{},"270":{},"271":{},"274":{},"275":{},"276":{},"277":{},"278":{},"279":{},"280":{},"281":{},"282":{},"283":{},"284":{},"285":{},"286":{},"287":{},"288":{},"289":{},"290":{},"291":{},"293":{},"294":{},"296":{},"297":{},"298":{},"300":{},"301":{},"302":{},"303":{},"304":{},"305":{},"306":{},"307":{},"308":{},"309":{},"310":{},"312":{},"313":{},"314":{},"315":{},"316":{},"318":{},"320":{},"321":{},"322":{},"323":{},"324":{},"325":{},"326":{},"328":{},"329":{},"330":{},"331":{},"332":{},"335":{},"336":{},"337":{},"338":{},"339":{},"340":{},"344":{},"345":{},"346":{},"347":{},"348":{},"349":{},"350":{},"351":{},"352":{}},"component":{}}],["usabl",{"_index":714,"title":{"49-7":{},"150-7":{},"212-7":{},"335-7":{}},"name":{},"text":{"4":{},"67":{},"87":{},"169":{},"217":{},"220":{},"224":{},"260":{},"339":{},"347":{}},"component":{}}],["usag",{"_index":453,"title":{"30":{},"133":{},"258":{},"322":{},"39-1":{},"61-3":{},"118-3":{},"142-1":{},"191-1":{},"205-3":{},"220-2":{},"296-3":{},"306-1":{},"347-2":{}},"name":{"30":{},"133":{},"258":{},"322":{}},"text":{"3":{},"10":{},"44":{},"86":{},"93":{},"108":{},"174":{},"196":{},"216":{},"243":{},"259":{},"266":{},"271":{},"274":{},"278":{},"279":{},"280":{},"281":{},"282":{},"283":{},"284":{},"285":{},"286":{},"287":{},"288":{},"289":{},"290":{},"291":{},"330":{}},"component":{}}],["use_query_cach",{"_index":1304,"title":{},"name":{},"text":{"17":{},"18":{},"100":{},"121":{},"240":{},"241":{},"350":{},"351":{}},"component":{}}],["use_second_level_cach",{"_index":1305,"title":{},"name":{},"text":{"17":{},"18":{},"100":{},"121":{},"240":{},"241":{},"350":{},"351":{}},"component":{}}],["used.lock",{"_index":1820,"title":{},"name":{},"text":{"37":{},"140":{},"189":{},"303":{}},"component":{}}],["useless",{"_index":991,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["user",{"_index":618,"title":{"51":{},"144":{},"198":{},"337":{},"49-5":{},"150-5":{},"212-5":{},"335-5":{}},"name":{"51":{},"144":{},"198":{},"337":{}},"text":{"3":{},"4":{},"7":{},"12":{},"50":{},"51":{},"53":{},"54":{},"63":{},"74":{},"77":{},"79":{},"80":{},"81":{},"82":{},"86":{},"87":{},"90":{},"95":{},"109":{},"110":{},"120":{},"143":{},"144":{},"156":{},"159":{},"161":{},"162":{},"163":{},"164":{},"171":{},"176":{},"179":{},"180":{},"197":{},"198":{},"207":{},"216":{},"217":{},"234":{},"235":{},"236":{},"246":{},"259":{},"260":{},"263":{},"268":{},"275":{},"281":{},"287":{},"288":{},"289":{},"290":{},"299":{},"307":{},"308":{},"336":{},"337":{}},"component":{}}],["user.home}/.aws/config",{"_index":2537,"title":{},"name":{},"text":{"69":{},"70":{},"151":{},"152":{},"226":{},"227":{},"278":{},"279":{}},"component":{}}],["user.home}/.aws/credenti",{"_index":2536,"title":{},"name":{},"text":{"69":{},"70":{},"151":{},"152":{},"226":{},"227":{},"278":{},"279":{}},"component":{}}],["usernam",{"_index":2416,"title":{},"name":{},"text":{"63":{},"71":{},"74":{},"77":{},"120":{},"153":{},"156":{},"159":{},"207":{},"228":{},"280":{},"299":{}},"component":{}}],["userrepository(provid",{"_index":3166,"title":{},"name":{},"text":{"246":{},"275":{}},"component":{}}],["usual",{"_index":865,"title":{},"name":{},"text":{"7":{},"49":{},"50":{},"51":{},"90":{},"116":{},"143":{},"144":{},"150":{},"171":{},"197":{},"198":{},"203":{},"212":{},"263":{},"294":{},"304":{},"335":{},"336":{},"337":{}},"component":{}}],["utf",{"_index":1342,"title":{},"name":{},"text":{"20":{},"28":{},"123":{},"131":{},"247":{},"256":{},"311":{},"320":{}},"component":{}}],["util",{"_index":136,"title":{"116-2":{},"203-2":{},"294-2":{}},"name":{},"text":{"2":{},"3":{},"4":{},"10":{},"27":{},"32":{},"35":{},"49":{},"50":{},"54":{},"67":{},"85":{},"86":{},"87":{},"93":{},"110":{},"116":{},"130":{},"135":{},"138":{},"143":{},"150":{},"169":{},"174":{},"180":{},"184":{},"187":{},"197":{},"203":{},"212":{},"214":{},"215":{},"216":{},"217":{},"224":{},"254":{},"259":{},"260":{},"266":{},"294":{},"301":{},"308":{},"318":{},"324":{},"335":{},"336":{},"339":{},"345":{},"346":{}},"component":{}}],["uuid",{"_index":2616,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["v",{"_index":825,"title":{},"name":{},"text":{"6":{},"89":{},"219":{},"262":{}},"component":{}}],["v8.0",{"_index":3327,"title":{},"name":{},"text":{"297":{},"340":{}},"component":{}}],["valid",{"_index":572,"title":{},"name":{},"text":{"3":{},"7":{},"12":{},"49":{},"65":{},"72":{},"86":{},"90":{},"95":{},"150":{},"154":{},"167":{},"171":{},"176":{},"212":{},"216":{},"222":{},"229":{},"240":{},"243":{},"259":{},"263":{},"268":{},"271":{},"282":{},"335":{},"343":{},"350":{}},"component":{}}],["valu",{"_index":28,"title":{"32-1":{},"50-5":{},"50-6":{},"50-7":{},"135-1":{},"143-5":{},"143-6":{},"143-7":{},"184-1":{},"197-5":{},"197-6":{},"197-7":{},"215-8":{},"324-1":{},"336-5":{},"336-6":{},"336-7":{},"346-8":{}},"name":{},"text":{"1":{},"2":{},"3":{},"10":{},"14":{},"15":{},"16":{},"20":{},"22":{},"26":{},"33":{},"34":{},"36":{},"37":{},"39":{},"43":{},"44":{},"50":{},"51":{},"55":{},"60":{},"68":{},"69":{},"70":{},"71":{},"72":{},"74":{},"77":{},"84":{},"85":{},"86":{},"93":{},"97":{},"98":{},"99":{},"107":{},"108":{},"111":{},"117":{},"123":{},"125":{},"129":{},"136":{},"137":{},"139":{},"140":{},"142":{},"143":{},"144":{},"151":{},"152":{},"153":{},"154":{},"156":{},"159":{},"170":{},"174":{},"178":{},"181":{},"185":{},"186":{},"188":{},"189":{},"191":{},"195":{},"196":{},"197":{},"198":{},"204":{},"213":{},"214":{},"216":{},"225":{},"226":{},"227":{},"228":{},"229":{},"238":{},"239":{},"240":{},"243":{},"246":{},"247":{},"249":{},"253":{},"259":{},"266":{},"270":{},"271":{},"274":{},"275":{},"278":{},"279":{},"280":{},"281":{},"282":{},"295":{},"297":{},"300":{},"302":{},"303":{},"306":{},"309":{},"311":{},"313":{},"317":{},"325":{},"329":{},"330":{},"336":{},"337":{},"340":{},"341":{},"344":{},"345":{},"348":{},"349":{},"350":{}},"component":{}}],["value.thi",{"_index":2618,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["valuelength",{"_index":2307,"title":{},"name":{},"text":{"55":{},"111":{},"181":{},"309":{}},"component":{}}],["valuetyp",{"_index":386,"title":{},"name":{},"text":{"3":{},"16":{},"17":{},"86":{},"99":{},"100":{},"216":{},"259":{}},"component":{}}],["value⇐0",{"_index":2710,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["vanish",{"_index":855,"title":{},"name":{},"text":{"7":{},"90":{},"171":{},"263":{}},"component":{}}],["variabl",{"_index":2312,"title":{},"name":{},"text":{"55":{},"69":{},"70":{},"72":{},"111":{},"151":{},"152":{},"154":{},"181":{},"226":{},"227":{},"229":{},"243":{},"271":{},"274":{},"278":{},"279":{},"281":{},"282":{},"309":{}},"component":{}}],["variablelength",{"_index":2313,"title":{},"name":{},"text":{"55":{},"111":{},"181":{},"309":{}},"component":{}}],["variableoffset",{"_index":2311,"title":{},"name":{},"text":{"55":{},"111":{},"181":{},"309":{}},"component":{}}],["variables/system",{"_index":2579,"title":{},"name":{},"text":{"72":{},"154":{},"229":{},"282":{}},"component":{}}],["variant",{"_index":1246,"title":{"68":{},"170":{},"225":{},"341":{}},"name":{"68":{},"170":{},"225":{},"341":{}},"text":{"14":{},"50":{},"97":{},"143":{},"178":{},"197":{},"270":{},"336":{}},"component":{}}],["varieti",{"_index":117,"title":{},"name":{},"text":{"2":{},"3":{},"57":{},"85":{},"86":{},"113":{},"200":{},"214":{},"216":{},"259":{},"276":{},"345":{}},"component":{}}],["variou",{"_index":227,"title":{},"name":{},"text":{"3":{},"54":{},"74":{},"86":{},"102":{},"110":{},"156":{},"180":{},"216":{},"245":{},"259":{},"273":{},"308":{},"340":{}},"component":{}}],["varstr",{"_index":1525,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["varstring.append",{"_index":1521,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["vector",{"_index":1693,"title":{},"name":{},"text":{"32":{},"135":{},"184":{},"324":{}},"component":{}}],["vendor",{"_index":3144,"title":{},"name":{},"text":{"245":{},"273":{}},"component":{}}],["veri",{"_index":134,"title":{},"name":{},"text":{"2":{},"10":{},"12":{},"47":{},"65":{},"85":{},"93":{},"95":{},"116":{},"148":{},"167":{},"174":{},"176":{},"203":{},"210":{},"214":{},"222":{},"243":{},"246":{},"266":{},"268":{},"271":{},"274":{},"275":{},"294":{},"333":{},"340":{},"343":{},"345":{}},"component":{}}],["verif",{"_index":2705,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["verifi",{"_index":2707,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["versa",{"_index":1859,"title":{},"name":{},"text":{"37":{},"50":{},"140":{},"143":{},"189":{},"197":{},"220":{},"303":{},"336":{},"347":{}},"component":{}}],["version",{"_index":84,"title":{"27":{},"130":{},"254":{},"318":{}},"name":{"27":{},"130":{},"254":{},"318":{}},"text":{"2":{},"3":{},"5":{},"6":{},"9":{},"10":{},"23":{},"27":{},"30":{},"32":{},"37":{},"43":{},"48":{},"49":{},"50":{},"54":{},"74":{},"85":{},"86":{},"88":{},"89":{},"92":{},"93":{},"107":{},"110":{},"126":{},"130":{},"133":{},"135":{},"140":{},"143":{},"149":{},"150":{},"156":{},"173":{},"174":{},"180":{},"184":{},"189":{},"195":{},"197":{},"211":{},"212":{},"214":{},"215":{},"216":{},"218":{},"219":{},"220":{},"246":{},"250":{},"254":{},"258":{},"259":{},"261":{},"262":{},"265":{},"266":{},"271":{},"274":{},"275":{},"303":{},"304":{},"308":{},"314":{},"318":{},"322":{},"324":{},"329":{},"335":{},"336":{},"345":{},"346":{},"347":{}},"component":{}}],["versionclean",{"_index":1569,"title":{},"name":{},"text":{"27":{},"130":{},"254":{},"318":{}},"component":{}}],["versioncontext",{"_index":1552,"title":{},"name":{},"text":{"25":{},"27":{},"128":{},"130":{},"252":{},"254":{},"316":{},"318":{}},"component":{}}],["versioncontext.currentversion(\"rev",{"_index":1591,"title":{},"name":{},"text":{"27":{},"130":{},"254":{},"318":{}},"component":{}}],["versioncontext.versions(john).get(1l",{"_index":1566,"title":{},"name":{},"text":{"27":{},"130":{},"254":{},"318":{}},"component":{}}],["version}.jar",{"_index":2964,"title":{},"name":{},"text":{"179":{},"307":{}},"component":{}}],["version}:jar",{"_index":2961,"title":{},"name":{},"text":{"179":{},"307":{}},"component":{}}],["via",{"_index":526,"title":{},"name":{},"text":{"3":{},"4":{},"10":{},"12":{},"14":{},"15":{},"18":{},"30":{},"33":{},"35":{},"43":{},"44":{},"54":{},"66":{},"86":{},"87":{},"93":{},"95":{},"97":{},"98":{},"107":{},"108":{},"110":{},"121":{},"133":{},"136":{},"138":{},"168":{},"174":{},"176":{},"178":{},"180":{},"185":{},"187":{},"195":{},"196":{},"216":{},"217":{},"223":{},"238":{},"241":{},"258":{},"259":{},"260":{},"266":{},"268":{},"270":{},"301":{},"308":{},"322":{},"325":{},"329":{},"330":{},"338":{},"348":{},"351":{}},"component":{}}],["vice",{"_index":1858,"title":{},"name":{},"text":{"37":{},"50":{},"140":{},"143":{},"189":{},"197":{},"220":{},"303":{},"336":{},"347":{}},"component":{}}],["view",{"_index":735,"title":{},"name":{},"text":{"4":{},"12":{},"14":{},"50":{},"53":{},"87":{},"95":{},"97":{},"109":{},"143":{},"176":{},"178":{},"179":{},"197":{},"217":{},"260":{},"268":{},"270":{},"307":{},"336":{}},"component":{}}],["virtual",{"_index":1018,"title":{},"name":{},"text":{"10":{},"93":{},"174":{},"266":{}},"component":{}}],["visual",{"_index":960,"title":{},"name":{},"text":{"9":{},"92":{},"173":{},"265":{}},"component":{}}],["vm",{"_index":2013,"title":{},"name":{},"text":{"48":{},"149":{},"211":{},"334":{}},"component":{}}],["void",{"_index":951,"title":{},"name":{},"text":{"9":{},"19":{},"22":{},"24":{},"28":{},"29":{},"30":{},"32":{},"62":{},"92":{},"119":{},"122":{},"125":{},"127":{},"131":{},"132":{},"133":{},"135":{},"173":{},"184":{},"206":{},"215":{},"242":{},"243":{},"249":{},"251":{},"256":{},"257":{},"258":{},"265":{},"271":{},"274":{},"275":{},"298":{},"313":{},"315":{},"320":{},"321":{},"322":{},"324":{},"346":{},"352":{}},"component":{}}],["vs",{"_index":1527,"title":{"116-1":{},"203-1":{},"294-1":{}},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["vs.append(this.person.getclass().getsimplenam",{"_index":1528,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["w",{"_index":1647,"title":{},"name":{},"text":{"30":{},"74":{},"133":{},"156":{},"258":{},"322":{}},"component":{}}],["wait",{"_index":2605,"title":{},"name":{},"text":{"74":{},"75":{},"77":{},"156":{},"157":{},"159":{},"231":{},"284":{}},"component":{}}],["wannab",{"_index":1171,"title":{},"name":{},"text":{"12":{},"95":{},"176":{},"268":{}},"component":{}}],["want",{"_index":965,"title":{},"name":{},"text":{"9":{},"15":{},"20":{},"22":{},"27":{},"28":{},"29":{},"31":{},"32":{},"50":{},"51":{},"56":{},"58":{},"67":{},"92":{},"98":{},"112":{},"114":{},"123":{},"125":{},"130":{},"131":{},"132":{},"134":{},"135":{},"143":{},"144":{},"169":{},"173":{},"182":{},"183":{},"184":{},"197":{},"198":{},"201":{},"224":{},"238":{},"247":{},"249":{},"254":{},"256":{},"257":{},"265":{},"275":{},"277":{},"310":{},"311":{},"313":{},"318":{},"320":{},"321":{},"323":{},"324":{},"336":{},"337":{},"339":{},"347":{},"348":{}},"component":{}}],["warn",{"_index":2812,"title":{},"name":{},"text":{"86":{},"216":{},"259":{}},"component":{}}],["wasn’t",{"_index":1822,"title":{},"name":{},"text":{"37":{},"140":{},"189":{},"303":{}},"component":{}}],["wast",{"_index":1843,"title":{},"name":{},"text":{"37":{},"140":{},"189":{},"303":{}},"component":{}}],["way",{"_index":104,"title":{},"name":{},"text":{"2":{},"3":{},"7":{},"12":{},"13":{},"14":{},"15":{},"18":{},"28":{},"29":{},"30":{},"32":{},"41":{},"49":{},"50":{},"51":{},"52":{},"58":{},"61":{},"67":{},"74":{},"85":{},"86":{},"90":{},"95":{},"96":{},"97":{},"98":{},"105":{},"114":{},"116":{},"118":{},"121":{},"131":{},"132":{},"133":{},"135":{},"143":{},"144":{},"145":{},"150":{},"156":{},"169":{},"171":{},"176":{},"177":{},"178":{},"184":{},"193":{},"197":{},"198":{},"199":{},"201":{},"203":{},"205":{},"212":{},"214":{},"215":{},"216":{},"224":{},"238":{},"241":{},"243":{},"256":{},"257":{},"258":{},"259":{},"263":{},"268":{},"269":{},"270":{},"271":{},"277":{},"292":{},"294":{},"296":{},"320":{},"321":{},"322":{},"324":{},"327":{},"335":{},"336":{},"337":{},"339":{},"340":{},"345":{},"346":{},"348":{},"351":{}},"component":{}}],["waysid",{"_index":2088,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["weak",{"_index":2443,"title":{},"name":{},"text":{"66":{},"67":{},"168":{},"169":{},"223":{},"224":{},"338":{},"339":{}},"component":{}}],["weakhashmap",{"_index":1701,"title":{},"name":{},"text":{"32":{},"135":{},"184":{},"324":{}},"component":{}}],["weakrefer",{"_index":1729,"title":{},"name":{},"text":{"33":{},"66":{},"67":{},"136":{},"168":{},"169":{},"185":{},"223":{},"224":{},"325":{},"338":{},"339":{}},"component":{}}],["web",{"_index":529,"title":{},"name":{},"text":{"3":{},"4":{},"12":{},"53":{},"54":{},"86":{},"87":{},"95":{},"109":{},"110":{},"176":{},"179":{},"180":{},"216":{},"217":{},"259":{},"260":{},"268":{},"307":{},"308":{}},"component":{}}],["webservic",{"_index":763,"title":{},"name":{},"text":{"4":{},"54":{},"87":{},"110":{},"180":{},"217":{},"260":{},"308":{}},"component":{}}],["weird",{"_index":1166,"title":{},"name":{},"text":{"12":{},"95":{},"176":{},"268":{}},"component":{}}],["welcom",{"_index":813,"title":{"6":{},"89":{},"219":{},"262":{}},"name":{"6":{},"89":{},"219":{},"262":{}},"text":{"6":{},"89":{},"219":{},"262":{}},"component":{}}],["well",{"_index":736,"title":{},"name":{},"text":{"4":{},"5":{},"10":{},"12":{},"14":{},"17":{},"22":{},"27":{},"35":{},"37":{},"45":{},"50":{},"55":{},"58":{},"72":{},"87":{},"88":{},"93":{},"95":{},"97":{},"100":{},"111":{},"114":{},"125":{},"130":{},"138":{},"140":{},"143":{},"146":{},"154":{},"174":{},"176":{},"178":{},"181":{},"187":{},"189":{},"197":{},"201":{},"208":{},"217":{},"218":{},"220":{},"229":{},"240":{},"249":{},"254":{},"260":{},"261":{},"266":{},"268":{},"270":{},"277":{},"282":{},"301":{},"303":{},"309":{},"313":{},"318":{},"331":{},"336":{},"347":{},"350":{}},"component":{}}],["whatev",{"_index":1957,"title":{},"name":{},"text":{"43":{},"107":{},"195":{},"329":{}},"component":{}}],["whatsoev",{"_index":797,"title":{},"name":{},"text":{"5":{},"88":{},"218":{},"261":{}},"component":{}}],["what’",{"_index":810,"title":{"6-1":{},"89-1":{},"219-1":{},"262-1":{}},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["whenev",{"_index":859,"title":{},"name":{},"text":{"7":{},"29":{},"90":{},"132":{},"171":{},"257":{},"263":{},"321":{}},"component":{}}],["whether",{"_index":1282,"title":{},"name":{},"text":{"16":{},"37":{},"50":{},"74":{},"77":{},"99":{},"140":{},"143":{},"156":{},"159":{},"189":{},"197":{},"239":{},"303":{},"336":{},"349":{}},"component":{}}],["whole",{"_index":1047,"title":{},"name":{},"text":{"10":{},"14":{},"49":{},"65":{},"66":{},"93":{},"97":{},"150":{},"167":{},"168":{},"174":{},"178":{},"212":{},"222":{},"223":{},"265":{},"266":{},"270":{},"335":{},"338":{},"343":{}},"component":{}}],["whose",{"_index":2481,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["wide",{"_index":116,"title":{},"name":{},"text":{"2":{},"35":{},"85":{},"138":{},"187":{},"214":{},"301":{},"345":{}},"component":{}}],["widespread",{"_index":2935,"title":{},"name":{},"text":{"116":{},"203":{},"294":{}},"component":{}}],["window",{"_index":1841,"title":{},"name":{},"text":{"37":{},"140":{},"189":{},"303":{}},"component":{}}],["wise",{"_index":628,"title":{},"name":{},"text":{"3":{},"12":{},"86":{},"95":{},"176":{},"216":{},"259":{},"268":{}},"component":{}}],["wish",{"_index":153,"title":{},"name":{},"text":{"2":{},"85":{},"214":{},"345":{}},"component":{}}],["within",{"_index":106,"title":{},"name":{},"text":{"2":{},"85":{},"97":{},"103":{},"116":{},"178":{},"203":{},"214":{},"240":{},"243":{},"246":{},"259":{},"270":{},"271":{},"274":{},"275":{},"294":{},"297":{},"340":{},"345":{},"350":{}},"component":{}}],["without",{"_index":109,"title":{},"name":{},"text":{"2":{},"3":{},"7":{},"10":{},"14":{},"33":{},"43":{},"50":{},"51":{},"68":{},"74":{},"85":{},"86":{},"90":{},"93":{},"97":{},"107":{},"136":{},"143":{},"144":{},"156":{},"170":{},"171":{},"174":{},"178":{},"185":{},"195":{},"197":{},"198":{},"214":{},"216":{},"225":{},"243":{},"259":{},"263":{},"266":{},"270":{},"271":{},"275":{},"325":{},"329":{},"336":{},"337":{},"341":{},"345":{}},"component":{}}],["withstand",{"_index":889,"title":{},"name":{},"text":{"7":{},"90":{},"171":{},"263":{}},"component":{}}],["wonder",{"_index":129,"title":{},"name":{},"text":{"2":{},"85":{},"214":{},"345":{}},"component":{}}],["won’t",{"_index":2986,"title":{},"name":{},"text":{"215":{},"346":{}},"component":{}}],["work",{"_index":35,"title":{"48-1":{},"149-1":{},"211-1":{},"334-1":{}},"name":{},"text":{"1":{},"3":{},"7":{},"10":{},"14":{},"16":{},"27":{},"29":{},"32":{},"37":{},"50":{},"60":{},"67":{},"84":{},"86":{},"90":{},"93":{},"97":{},"99":{},"116":{},"117":{},"130":{},"132":{},"135":{},"140":{},"143":{},"169":{},"171":{},"174":{},"178":{},"184":{},"189":{},"197":{},"203":{},"204":{},"213":{},"216":{},"224":{},"239":{},"254":{},"257":{},"259":{},"263":{},"266":{},"270":{},"271":{},"294":{},"295":{},"303":{},"318":{},"321":{},"324":{},"336":{},"339":{},"344":{},"349":{}},"component":{}}],["workaround",{"_index":546,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["worker",{"_index":2010,"title":{},"name":{},"text":{"47":{},"148":{},"210":{},"333":{}},"component":{}}],["workspac",{"_index":677,"title":{},"name":{},"text":{"4":{},"87":{},"217":{},"260":{}},"component":{}}],["world",{"_index":2,"title":{"1-2":{},"9-2":{},"84-2":{},"92-2":{},"173-2":{},"213-2":{},"215-3":{},"265-2":{},"344-2":{},"346-3":{}},"name":{},"text":{"1":{},"3":{},"9":{},"12":{},"14":{},"15":{},"84":{},"86":{},"92":{},"95":{},"97":{},"98":{},"173":{},"176":{},"178":{},"213":{},"215":{},"216":{},"238":{},"259":{},"265":{},"268":{},"270":{},"344":{},"346":{},"348":{}},"component":{}}],["worri",{"_index":209,"title":{},"name":{},"text":{"3":{},"5":{},"14":{},"23":{},"50":{},"86":{},"88":{},"97":{},"116":{},"126":{},"143":{},"178":{},"197":{},"203":{},"216":{},"218":{},"250":{},"259":{},"261":{},"270":{},"294":{},"314":{},"336":{}},"component":{}}],["wouldn’t",{"_index":848,"title":{},"name":{},"text":{"7":{},"90":{},"171":{},"263":{}},"component":{}}],["wrap",{"_index":945,"title":{"29":{},"132":{},"257":{},"321":{}},"name":{},"text":{"9":{},"29":{},"30":{},"51":{},"67":{},"92":{},"132":{},"133":{},"144":{},"169":{},"173":{},"198":{},"224":{},"257":{},"258":{},"265":{},"304":{},"321":{},"322":{},"337":{},"339":{}},"component":{}}],["wrapper",{"_index":527,"title":{},"name":{},"text":{"3":{},"4":{},"28":{},"29":{},"30":{},"50":{},"54":{},"86":{},"87":{},"110":{},"131":{},"132":{},"133":{},"143":{},"180":{},"197":{},"216":{},"217":{},"256":{},"257":{},"258":{},"259":{},"260":{},"308":{},"320":{},"321":{},"322":{},"336":{}},"component":{}}],["wrapper.abstract",{"_index":1650,"title":{},"name":{},"text":{"30":{},"133":{},"258":{},"322":{}},"component":{}}],["wrapper.java",{"_index":1646,"title":{},"name":{},"text":{"30":{},"133":{},"258":{},"322":{}},"component":{}}],["wrappergenerationdummi",{"_index":1604,"title":{},"name":{},"text":{"28":{},"131":{},"256":{},"320":{}},"component":{}}],["wrapperpersistencestor",{"_index":1641,"title":{},"name":{},"text":{"30":{},"133":{},"258":{},"322":{}},"component":{}}],["wrapperpersistencestoring.super.store(inst",{"_index":1651,"title":{},"name":{},"text":{"30":{},"133":{},"258":{},"322":{}},"component":{}}],["write",{"_index":400,"title":{},"name":{},"text":{"3":{},"7":{},"10":{},"11":{},"16":{},"23":{},"37":{},"50":{},"51":{},"67":{},"74":{},"77":{},"86":{},"90":{},"93":{},"94":{},"97":{},"99":{},"126":{},"140":{},"143":{},"144":{},"156":{},"159":{},"169":{},"171":{},"174":{},"175":{},"178":{},"189":{},"197":{},"198":{},"216":{},"224":{},"239":{},"240":{},"250":{},"259":{},"263":{},"266":{},"267":{},"270":{},"303":{},"304":{},"314":{},"336":{},"337":{},"339":{},"340":{},"349":{},"350":{}},"component":{}}],["writer",{"_index":392,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"239":{},"259":{},"349":{}},"component":{}}],["writethrough",{"_index":399,"title":{},"name":{},"text":{"3":{},"16":{},"17":{},"86":{},"99":{},"100":{},"216":{},"240":{},"259":{},"350":{}},"component":{}}],["written",{"_index":863,"title":{},"name":{},"text":{"7":{},"10":{},"37":{},"49":{},"50":{},"62":{},"65":{},"67":{},"90":{},"93":{},"116":{},"119":{},"140":{},"143":{},"150":{},"167":{},"169":{},"171":{},"174":{},"189":{},"197":{},"203":{},"206":{},"212":{},"222":{},"224":{},"263":{},"266":{},"294":{},"298":{},"303":{},"335":{},"336":{},"339":{},"343":{}},"component":{}}],["wrong",{"_index":550,"title":{},"name":{},"text":{"3":{},"50":{},"51":{},"77":{},"86":{},"143":{},"144":{},"159":{},"197":{},"198":{},"216":{},"259":{},"336":{},"337":{}},"component":{}}],["wrongfulli",{"_index":476,"title":{},"name":{},"text":{"3":{},"86":{},"216":{},"259":{}},"component":{}}],["wrongli",{"_index":2265,"title":{},"name":{},"text":{"51":{},"144":{},"198":{},"337":{}},"component":{}}],["wtimeout",{"_index":2610,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["x.509",{"_index":2641,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["x.equal(person1.firstnam",{"_index":1507,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["x.equal(person1.lastnam",{"_index":1509,"title":{},"name":{},"text":{"23":{},"126":{},"250":{},"314":{}},"component":{}}],["x.list(\"a",{"_index":2339,"title":{},"name":{},"text":{"56":{},"112":{},"182":{},"310":{}},"component":{}}],["x03",{"_index":2622,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["x509",{"_index":2640,"title":{},"name":{},"text":{"74":{},"156":{}},"component":{}}],["xml",{"_index":230,"title":{},"name":{},"text":{"3":{},"4":{},"11":{},"35":{},"39":{},"64":{},"86":{},"87":{},"94":{},"138":{},"142":{},"166":{},"175":{},"187":{},"191":{},"216":{},"217":{},"221":{},"243":{},"259":{},"260":{},"267":{},"271":{},"301":{},"306":{},"342":{}},"component":{}}],["xsequenc",{"_index":1112,"title":{},"name":{},"text":{"11":{},"94":{},"175":{}},"component":{}}],["xthreads.executesynchron",{"_index":2916,"title":{},"name":{},"text":{"97":{},"116":{},"178":{},"203":{},"270":{},"294":{}},"component":{}}],["xxxxx",{"_index":3179,"title":{},"name":{},"text":{"246":{},"275":{}},"component":{}}],["y",{"_index":2071,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["yaml",{"_index":231,"title":{},"name":{},"text":{"3":{},"4":{},"35":{},"86":{},"87":{},"138":{},"187":{},"216":{},"217":{},"259":{},"260":{},"301":{}},"component":{}}],["yay",{"_index":1241,"title":{},"name":{},"text":{"14":{},"97":{},"178":{},"270":{}},"component":{}}],["ye",{"_index":2002,"title":{},"name":{},"text":{"47":{},"48":{},"49":{},"50":{},"143":{},"148":{},"149":{},"150":{},"197":{},"210":{},"211":{},"212":{},"333":{},"334":{},"335":{},"336":{}},"component":{}}],["year",{"_index":2462,"title":{},"name":{},"text":{"67":{},"169":{},"224":{},"339":{}},"component":{}}],["yield",{"_index":2158,"title":{},"name":{},"text":{"50":{},"143":{},"197":{},"336":{}},"component":{}}],["yourself",{"_index":1586,"title":{},"name":{},"text":{"27":{},"67":{},"130":{},"169":{},"224":{},"246":{},"254":{},"275":{},"318":{},"339":{}},"component":{}}],["you’r",{"_index":2336,"title":{},"name":{},"text":{"56":{},"112":{},"182":{},"310":{}},"component":{}}],["zero",{"_index":556,"title":{},"name":{},"text":{"3":{},"10":{},"34":{},"67":{},"86":{},"93":{},"137":{},"169":{},"174":{},"186":{},"216":{},"224":{},"259":{},"266":{},"300":{},"339":{}},"component":{}}],["zone",{"_index":2717,"title":{},"name":{},"text":{"77":{},"159":{}},"component":{}}],["zulu",{"_index":780,"title":{},"name":{},"text":{"5":{},"88":{},"218":{},"261":{}},"component":{}}]],"pipeline":["stemmer"]},"store":{"documents":{"1":{"id":1,"text":"pom.xml one.microstream microstream-cache 05.00.02-MS-GA CachingProvider provider = Caching.getCachingProvider(); CacheManager cacheManager = provider.getCacheManager(); MutableConfiguration configuration = new MutableConfiguration<>() .setTypes(Integer.class, String.class) .setStoreByValue(false) .setExpiryPolicyFactory(CreatedExpiryPolicy.factoryOf(Duration.ONE_MINUTE)); Cache cache = cacheManager.createCache(\"jCache\", configuration); cache.put(1, \"Hello World\"); String value = cache.get(1); Get the default CachingProvider implementation from the application’s classpath. This method will work if and only if there is only one JCache implementation available in the classpath. If there are multiple providers then use the fully qualified name + Caching.getCachingProvider(\"one.microstream.cache.types.CachingProvider\") instead. Get the default CacheManager instance using the provider. Create a cache configuration using MutableConfiguration with key type and value type as Integer and String respectively configured to store the cache entries by reference (not by value) and with an expiry time of one minute defined for entries from the moment they are created. Using the cache manager, create a cache named jCache with the configuration created in step 3. Put some data into the cache And retrieve it. The same can be done using MicroSteam’s CacheConfiguration API. This time we use a EmbeddedStorageManager as a backing store for the cache. EmbeddedStorageManager storageManager = EmbeddedStorage.start(); CachingProvider provider = (one.microstream.cache.CachingProvider)Caching.getCachingProvider(); CacheManager cacheManager = provider.getCacheManager(); CacheConfiguration configuration = CacheConfiguration .Builder(Integer.class, String.class, \"jCache\", storageManager) .expiryPolicyFactory(CreatedExpiryPolicy.factoryOf(Duration.ONE_HOUR)) .build(); Cache cache = cacheManager.createCache(\"jCache\", configuration); cache.put(1, \"one\"); String value = cache.get(1);","title":"Getting Started","component":"manual","version":"5.0","name":"getting-started","url":"/manual/5.0/cache/getting-started.html","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"Hello World","hash":"_hello_world","id":2}]},"2":{"id":2,"text":"Since version 3 MicroStream provides a JCache (JSR-107) implementation, which is optionally backed by the MicroStream Storage. JCache standardizes caching for the Java platform. It provides a common mechanism to cache values in a map-like structure. It expedites the mainstream adoption of in-memory computing by giving all Java developers an easy way to access memory from within Java. Businesses can change providers without rewriting their applications or maintaining a proprietary cache abstraction layer. This caching standard is used in a wide variety of environments. The most common use cases are: Second-level cache in JPA (e.g. Hibernate) Spring Cache Abstraction and many more Why another JCache implementation, you may wonder. There is already a myriad of providers out there. MicroStream’s very own serialization and storage can be utilized to get the best out of caches. For example you are not limited to java.io.Serializable types, when storing by value. That means every key-value pair gets copied every time you put and get entries in and out of a cache. And if a cache is used with a backing store, MicroStream’s storage can be used to get the best possible performance. And now, MicroStream being a JCache provider, you can use it as a drop-in replacement in your existing application. The caching provider represents the implementation of JCache that you are using. You can use more than one JCache implementation in your project if you wish, and CachingProvider is how you access the different providers that are in use. It is responsible for managing and providing access to many named caches. The cache holds the different values being cached. You can have several caches, each of which may be holding data for a different purpose. Each one can have a different configuration; for example, different caches may evict old data using different techniques. Each item of data in a cache is an entry, which is a key-value pair. The key is a unique value used to store and look up the data. The value is the actual data you wish to cache. Caches have some different properties than Maps, but the calls that you would use to store and lookup data is very similar.","title":"Cache","component":"manual","version":"5.0","name":"index","url":"/manual/5.0/cache/index.html","titles":[{"text":"Motivation","hash":"_motivation","id":1},{"text":"Basic Concepts of JCache","hash":"_basic_concepts_of_jcache","id":2},{"text":"CachingProvider","hash":"_cachingprovider","id":3},{"text":"CacheManager","hash":"_cachemanager","id":4},{"text":"Cache","hash":"_cache","id":5},{"text":"Entry","hash":"_entry","id":6}]},"3":{"id":3,"text":"Bugfix release. Fixed buffer flush regression [225] Bugfix release. Fixed broken build for microstream-storage-restclient-app This release introduces some breaking changes. To fully support the Java Module System (Jigsaw) and to meet Maven’s naming standards, we had to rename some packages and our artifact’s IDs. But don’t worry. Just change the dependency configuration and organize some imports, and you are good to go. Existing storages are not affected and are fully compatible with this version. For detailed information, see the migration guide below. General purpose configuration layer on which the storage and cache configuration are now based on, with following key features: Tree like structure to support sub-configurations Input from various sources (ini, xml, yaml, …​) Typed getters for properties Extendable: custom property parsers and configuration loaders Adaptable: easy adaption to other framework’s configurations, like e.g. Spring Boot Storage configuration now supports different file systems for live storage and backup GraalVM support: MicroStream’s optimized memory adapter is now used automatically when running on GraalVM Restructured MicroStream’s module and package structure to fully support the Java Module System and adopt Maven naming standards, see Migration Guide Fixed sporadic index out of bounds exception when storage and backup had different storage targets with a channel count greater than one First you must adjust the artifacts: Old (= 5) base microstream-base, microstream-afs and microstream-afs-nio (AFS and AFS/NIO) was extracted from base module) cache microstream-cache cache.hibernate microstream-cache-hibernate communication microstream-communication communication.binary microstream-communication-binary filesystem.aws microstream-enterprise-afs-aws-dynamodb and microstream-enterprise-afs-aws-s3 filesystem.azure microstream-enterprise-afs-azure-storage filesystem.blobstore microstream-enterprise-afs-blobstore filesystem.coherence microstream-enterprise-afs-oracle-coherence filesystem.hazelcast microstream-enterprise-afs-hazelcast filesystem.jpa.hibernate microstream-enterprise-afs-hibernate filesystem.kafka microstream-enterprise-afs-kafka filesystem.mongodb microstream-enterprise-afs-mongodb filesystem.oraclecloud microstream-enterprise-afs-oraclecloud-objectstorage filesystem.oraclenosql microstream-enterprise-afs-oracle-nosql filesystem.redis microstream-enterprise-afs-redis filesystem.sql microstream-afs-sql and microstream-enterprise-afs-sql persistence microstream-persistence persistence.binary microstream-persistence-binary persistence.binary.jdk8 microstream-persistence-binary-jdk8 storage microstream-storage storage.embedded microstream-storage-embedded storage.embedded.configuration microstream-storage-embedded-configuration storage.restadapter microstream-storage-restadapter storage.restclient microstream-storage-restclient storage.restclient.app microstream-storage-restclient-app storage.restclient.jersey microstream-storage-restclient-jersey storage.restservice microstream-storage-restservice storage.restservice.sparkjava microstream-storage-restservice-sparkjava These package names have changed: Old (= 5) [artifact:package] base:one.microstream.afs microstream-afs:one.microstream.afs.types,exceptions base:one.microstream.afs.nio microstream-afs-nio:one.microstream.afs.nio.types cache:one.microstream.cache microstream-cache:one.microstream.cache.types,exceptions cache.hibernate:one.microstream.cache.hibernate microstream-cache-hibernate:one.microstream.cache.hibernate.types communication:one.microstream.com microstream-communication:one.microstream.communication.types communication.binary:one.microstream.com.binary microstream-communication-binary:one.microstream.communication.binary.types filesystem.aws:one.microstream.afs.aws.dynamodb microstream-enterprise-afs-aws-dynamodb:one.microstream.enterprise.afs.aws.dynamodb.types filesystem.aws:one.microstream.afs.aws.s3 microstream-enterprise-afs-aws-s3:one.microstream.enterprise.afs.aws.s3.types filesystem.azure:one.microstream.afs.azure.storage microstream-enterprise-afs-azure-storage:one.microstream.enterprise.afs.azure.storage.types filesystem.blobstore:one.microstream.afs.blobstore microstream-enterprise-afs-blobstore:one.microstream.enterprise.afs.blobstore.types filesystem.coherence:one.microstream.afs.coherence microstream-enterprise-afs-oracle-coherence:one.microstream.enterprise.afs.oracle.coherence.types filesystem.hazelcast:one.microstream.afs.hazelcast microstream-enterprise-afs-hazelcast:one.microstream.enterprise.afs.hazelcast.types filesystem.jpa.hibernate:one.microstream.afs.jpa.hibernate microstream-enterprise-afs-hibernate:one.microstream.afs.hibernate.types filesystem.kafka:one.microstream.afs.kafka microstream-enterprise-afs-kafka:one.microstream.enterprise.afs.kafka.types filesystem.mongodb:one.microstream.afs.mongodb microstream-enterprise-afs-mongodb:one.microstream.enterprise.afs.mongodb.types filesystem.oraclecloud:one.microstream.afs.oracle.cloud.objectstorage microstream-enterprise-afs-oraclecloud-objectstorage:one.microstream.enterprise.afs.oraclecloud.objectstorage.types filesystem.redis:one.microstream.afs.redis microstream-enterprise-afs-redis:one.microstream.enterprise.afs.redis.types filesystem.sql microstream-afs-sql:one.microstream.afs.sql.types and microstream-enterprise-afs-sql:one.microstream.enterprise.afs.sql.types persistence.binary:one.microstream.collections persistence-binary:one.microstream.persistence.binary.one.microstream.collections persistence.binary:one.microstream.entity persistence-binary:one.microstream.persistence.binary.one.microstream.entity persistence.binary:one.microstream.persistence.types persistence-binary:one.microstream.persistence.binary.one.microstream.persistence.types persistence.binary:one.microstream.reference persistence-binary:one.microstream.persistence.binary.one.microstream.reference persistence.binary:one.microstream.util persistence-binary:one.microstream.persistence.binary.one.microstream.util persistence.binary:one.microstream.java.* persistence-binary:one.microstream.persistence.binary.java.* persistence.binary.jdk8:one.microstream.jdk8.java.util microstream-persistence-binary-jdk8:one.microstream.persistence.binary.jdk8.java.util persistence.binary.jdk8:one.microstream.memory.sun microstream-persistence-binary-jdk8:one.microstream.persistence.binary.jdk8.types storage.embedded:one.microstream.storage.types microstream-storage-embedded:one.microstream.storage.embedded.types storage.embedded.configuration:one.microstream.storage.configuration microstream-storage-embedded-configuration:one.microstream.storage.embedded.configuration.types storage.restadapter:one.microstream.storage.restadapter microstream-storage-restadapter:one.microstream.storage.restadapter.types,exceptions storage.restclient:one.microstream.storage.restclient microstream-storage-restclient:one.microstream.storage.restclient.types,exceptions storage.restclient.app:one.microstream.storage.restclient.app microstream-storage-restclient-app:one.microstream.storage.restclient.app.types storage.restclient.jersey:one.microstream.storage.restclient.jersey microstream-storage-restclient-jersey:one.microstream.storage.restclient.jersey.types storage.restservice:one.microstream.storage.restservice microstream-storage-restservice:one.microstream.storage.restservice.types,exceptions storage.restservice.sparkjava:one.microstream.storage.restservice.sparkjava microstream-storage-restservice-sparkjavaone.microstream.storage.restservice.sparkjava.types,exceptions The storage and cache configuration layers are now utilizing the newly introduced general purpose configuration layer. The configuration property names have changed from camelCase to the dash-notation. Old (= 5) keyType key-type valueType value-type storageConfigurationResourceName storage-configuration-resource-name cacheLoaderFactory cache-loader-factory cacheWriterFactory cache-writer-factory expiryPolicyFactory expiry-policy-factory evictionManagerFactory eviction-manager-factory readThrough read-through writeThrough write-through storeByValue store-by-value statisticsEnabled statistics-enabled managementEnabled management-enabled The old storage configuration API is deprecated and should be migrated to the new one. The configuration property names have changed from camelCase to the dash-notation. Old (= 5) baseDirectory storage-directory deletionDirectory deletion-directory truncationDirectory truncation-directory backupDirectory backup-directory channelCount channel-count channelDirectoryPrefix channel-directory-prefix dataFilePrefix data-file-prefix dataFileSuffix data-file-suffix transactionFilePrefix transaction-file-prefix transactionFileSuffix transaction-file-suffix typeDictionaryFilename type-dictionary-file-name rescuedFileSuffix rescued-file-suffix lockFileName lock-file-name houseKeepingIntervalMs housekeeping-interval housekeepingTimeBudgetNs housekeeping-time-budget entityCacheThreshold entity-cache-threshold entityCacheTimeoutMs entity-cache-timeout dataFileMinimumSize data-file-minimum-size dataFileMaximumSize data-file-maximum-size dataFileMinimumUseRatio data-file-minimum-use-ratio dataFileCleanupHeadFile data-file-cleanup-head-file API to create full backup additional to continuous backup Simplified usage of other NIO based file systems, e.g. in-memory file systems for unit testing OSGi Headers are added in released jar files and a p2 update site is available next to the maven repository Additional storage targets AWS S3 and DynamoDB Azure Storage Hazelcast Kafka MongoDB Redis Plain JDBC: SAP HANA, PostgreSQL, MariaDB Fixed type handler incompatibilities with JDK 11 Removed wrongfully initial values in configuration for deletion and truncation directories From 4.1 no actions are necessary, for older versions see below. File System Abstraction to support a variety of storage targets. Exporter API for storage configuration. Better error handling in housekeeping, to avoid storage channel thread interruptions. Fixed XML loading bug under Android. All configuration code, which includes file paths, may be rewritten to use the new Abstract File System. For example see Storage Files or Backup. Bugfix release for projects using an old non public version. Fixed bug in type dictionary parser for old legacy type handlers Added a convenience layer for defining custom type handlers Fully automatic lazy reference managing for clearing older Lazy references as free memory gets lower. Completed optimized persistence handling for remaining types in JDK that are reasonable to appear in entity graphs. E.g. Currency, Locale, URI, URL, Path Compatibility with projects using java modules (\"jigsaw\") Added JavaDoc for common types like StorageConnection, StorageManager, StorageController, etc. Auto-recognition for CSV separator character in configuration files (e.g. legacy type mapping) JSR-107 compatible JCache provider with additional Hibernate cache region factory Storage REST Service and Client are available to access the storage data via REST, a Java-Wrapper thereof and a Web-UI Fixed a potential race condition during loading Fixed a potential race condition and robustness issue during storing StorageConnectionFoundation instance is now properly created on demand. Removed unnecessary memory consumption exponential to channel count. Improved exception messages on invalid configuration values (file sizes etc.) Workarounded a JDK bug regarding file locking when importing files (JDK exception says another process is locking the file which is outright wrong) Fixed type resolving problems when different ClassLoaders are involved. Fixed a bug that caused loading of zero-length arrays to throw an exception despite everything being fine. Various smaller bugfixes for unnecessary exceptions in special cases and state robustness after exceptions. From 2.2 no actions are necessary, for older versions see below. Removed SelfStoring without replacement since it could not be used recursively and has no advantages over just creating a static storing utility method for a certain entity. Added state validation of value type objects (e.g. String, Integer, BigDecimal, etc.) upon loading. This is hardly relevant in practice, but not having it can lead to confusing hello-world-like test applications. EmbeddedStorageManager now implements java.lang.AutoClosable. Replaced all provisional RuntimeExceptions with either PersistenceException or StorageException, depending on the architectural level the corresponding source code it located. The two technically different root handling concepts (\"default\" and \"custom\") have been consolidated in a way that they are the same thing on the API level and interchangeable, meaning no more confusion with those root exception messages. All entity fields of type transient EmbeddedStorageManager now get a reference to the used EmbeddedStorageManager instance set upon loading/updating. The interfaces around storage managing have been enhanced so that it is now equally valid to just write StorageManager instead of EmbeddedStorageManager. (An EmbeddedStorageManager \"is a\" StorageManager) Slight technical consolidation of Lazy reference handling caused the type Lazy to be moved from the package one.microstream.persistence.lazy to one.microstream.reference. The reason is that the lazy handling has actually no inherent connection to persistence or storage. It’s actually just a generic concept that can be used by those layers. See Migration Guide below on how to adjust existing projects. Fixed an off-heap memory leak when restarting the storage multiple times in the same process. Fixed a bug where changing the fields of an entity type caused an exception. This was a regression bug from fixing a similar problem for another case in version 2.1. Now, both cases work correctly. All occurrences in user code of one.microstream.persistence.lazy.Lazy have to be refactored to one.microstream.reference.Lazy. Modern IDEs provide a functionality to \"auto-import\" missing types or automatically \"organize imports\", so this should be resolved with a proverbial push of a button. Android support MicroStream is now Java-wise fully compatible with Android. Replaced all usages of java.util.File with java.nio.file.Path to allow using custom file implementations. Improved skipping functionality of Storers (see EmbeddedStorageManager#createStorer and Storer#skip). The class Lazy is now an interface to allow custom implementations. See Migration guide below. Fixed a few minor bugs in the skipping functionality of Storers. Fixed a bug where files remained locked after the storage was shut down. Fixed a bug where files remained locked after an exception in storage initialization. Enums defining an abstract method are now handled correctly. By default, all threads created by MicroStream now start with the prefix \"MicroStream-\". This can be customized by the new interface StorageThreadNameProvider. Fixed a NullPointerException in import. Fixed a bug that caused enums with a certain field layout to be loaded inconsistently. java.util.Locale is now persisted and created using Locale’s #toLanguageTag and #forLanguageTag. In the directory of an existing storage, in the TypeDictionary file (default name \"PersistenceTypeDictionary.ptd\"), all occurrences of \"one.microstream.persistence.lazy.Lazy\" must be replaced with \"one.microstream.persistence.lazy.Lazy$Default\".","title":"Changelog","component":"manual","version":"5.0","name":"changelog","url":"/manual/5.0/intro/changelog.html","titles":[{"text":"5.0.2","hash":"_5_0_2","id":1},{"text":"Bugfixes","hash":"_bugfixes","id":2},{"text":"5.0.1","hash":"_5_0_1","id":3},{"text":"Bugfixes","hash":"_bugfixes_2","id":4},{"text":"5.0","hash":"_5_0","id":5},{"text":"Features","hash":"_features","id":6},{"text":"Bugfixes","hash":"_bugfixes_3","id":7},{"text":"Migration guide","hash":"_migration_guide","id":8},{"text":"Artifacts","hash":"_artifacts","id":9},{"text":"Packages","hash":"_packages","id":10},{"text":"Configuration","hash":"_configuration","id":11},{"text":"Cache","hash":"_cache","id":12},{"text":"Storage","hash":"_storage","id":13},{"text":"4.1","hash":"_4_1","id":14},{"text":"Features","hash":"_features_2","id":15},{"text":"Bugfixes","hash":"_bugfixes_4","id":16},{"text":"Migration guide","hash":"_migration_guide_2","id":17},{"text":"4.0","hash":"_4_0","id":18},{"text":"Features","hash":"_features_3","id":19},{"text":"Bugfixes","hash":"_bugfixes_5","id":20},{"text":"Migration guide","hash":"_migration_guide_3","id":21},{"text":"3.0.1","hash":"_3_0_1","id":22},{"text":"Bugfixes","hash":"_bugfixes_6","id":23},{"text":"3.0","hash":"_3_0","id":24},{"text":"Features","hash":"_features_4","id":25},{"text":"Bugfixes","hash":"_bugfixes_7","id":26},{"text":"Migration guide","hash":"_migration_guide_4","id":27},{"text":"2.2","hash":"_2_2","id":28},{"text":"Features","hash":"_features_5","id":29},{"text":"Bugfixes","hash":"_bugfixes_8","id":30},{"text":"Migration Guide","hash":"2_2_migration-guide","id":31},{"text":"2.1","hash":"_2_1","id":32},{"text":"Features","hash":"_features_6","id":33},{"text":"Bugfixes","hash":"_bugfixes_9","id":34},{"text":"Migration Guide","hash":"_migration_guide_5","id":35}]},"4":{"id":4,"text":"You can find the MicroStream libraries in the Maven Central repository. Maven [pom.xml] one.microstream microstream-storage-embedded 05.00.02-MS-GA Gradle (Groovy) [build.gradle] dependencies { implementation 'one.microstream:microstream-storage-embedded:05.00.02-MS-GA' } Gradle (Kotlin) [build.gradle.kts] dependencies { implementation(\"one.microstream:microstream-storage-embedded:05.00.02-MS-GA\") } Scala SBT [build.sbt] libraryDependencies += \"one.microstream\" % \"microstream-storage-embedded\" % \"05.00.02-MS-GA\" Apache Ivy [ivy.xml] Apache Buildr [Buildfile] define 'my-app' do compile.with 'one.microstream:microstream-storage-embedded:05.00.02-MS-GA' end Bazel [WORKSPACE] load(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\") RULES_JVM_EXTERNAL_TAG = \"2.8\" RULES_JVM_EXTERNAL_SHA = \"79c9850690d7614ecdb72d68394f994fef7534b292c4867ce5e7dec0aa7bdfad\" http_archive( name = \"rules_jvm_external\", strip_prefix = \"rules_jvm_external-%s\" % RULES_JVM_EXTERNAL_TAG, sha256 = RULES_JVM_EXTERNAL_SHA, url = \"https://github.com/bazelbuild/rules_jvm_external/archive/%s.zip\" % RULES_JVM_EXTERNAL_TAG, ) load(\"@rules_jvm_external//:defs.bzl\", \"maven_install\") maven_install( artifacts = [ \"one.microstream:microstream-storage-embedded:05.00.02-MS-GA\" ], ) Bazel [BUILD] maven_jar( name = \"microstream\", artifact = \"one.microstream:microstream-storage-embedded:05.00.02-MS-GA\" ) or in our P2 Update Site: https://repo.microstream.one/repository/update-site/05.00.02-MS-GA These are the different modules that make up MicroStream. ArtifactId Description microstream-base Collection of common utilities. Math, IO, Exceptions, Threads, String operations, and so on. microstream-cache JSR-107 JCache Provider microstream-cache-hibernate Hibernate region factory for jcache implementation microstream-communication Top-level framework for sending and receiving object graphs between Java applications. Only data is transferred, no program code (\"bytecode\"). The other application may be programmed in any language as long as it adheres to the transmitted communication protocol. Usable directly in the program code of a Java application to communicate with other applications or processes. The concrete form of persistence is left open and delivered via a specific implementation as a plugin. Examples of specific persistent forms are binary data, CSV, XML, Json. microstream-communication-binary Plugin framework for the top-level framework communication to convert the transferred object graphs to and from binary data. microstream-configuration General-purpose configuration layer. microstream-configuration-hocon Hocon extension for the configuration layer, which supports hocon, json and ini files. microstream-configuration-yaml Yaml extension for the configuration layer. microstream-afs Abstract file system (AFS) layer. microstream-afs-aws-dynamodb File system implementations for AWS DynamoDB. microstream-afs-aws-s3 File system implementations for AWS S3. microstream-afs-azure-storage File system implementations for Azure Cloud (Azure Storage). microstream-afs-blobstore Base for all blob store file system implementations. microstream-afs-hazelcast File system implementation for Hazelcast. microstream-afs-hibernate Generic file system implementation for JPA / Hibernate. microstream-afs-kafka File system implementation for Apache Kafka. microstream-afs-mongodb File system implementation for MongoDB. microstream-afs-nio File system implementation for the non-blocking IO implementation (java.nio.file) of the JDK. microstream-afs-oraclecloud-objectstorage File system implementation for Oracle Cloud Services (Object Storage). microstream-afs-oracle-coherence File system implementation for Oracle Coherence. microstream-afs-oracle-nosql File system implementation for Oracle NoSQL. microstream-afs-redis File system implementation for Redis. microstream-afs-sql File system implementation for SQL databases. microstream-persistence Base framework to convert a graph of java objects into a persistent form and back. Usable as a common, abstract base for all technologies implementing a specific persistent representation like binary data, CSV, XML or Json. From a technical point of view, storage as well as serialization is a process that puts a graph of Java instances into a persistent form. The only difference is that network communication serialization discards this persistent form while a database solution preserves it. microstream-persistence-binary Extension of the persistence base framework with a concrete implementation of the persistent form as binary data. This persistent form is superior to all text-based formats in storage and performance needs, making it the preferred method for storage and network serialization. microstream-persistence-binary-jdk8 Specialized type handlers for JDK 8 collection types. microstream-storage Basic framework to manage a graph of Java data persisted as binary data as a database. Can be used both to implement an embedded database solution (in the same process as the Java application) and a standalone or server-mode database solution (in a separate process). Other forms of persistence than binary data are deliberately not supported because they would not bring any noteworthy advantages but many disadvantages for the task. microstream-storage-embedded Top-level framework for use in a Java application that adds an embedded database solution to its object graphs. Can be used directly in the program code of a Java application to comfortably and efficiently persist its data. microstream-storage-embedded-configuration Layer with support for external configuration files (XML, INI) and convenience functionality to create foundations for the embedded storage. microstream-storage-restadapter Adapter for low-level storage data externalization. Used by the REST service to adapt to a MicroStream Storage. microstream-storage-restclient Abstract REST client interface, which serves as a Java wrapper for the REST API. microstream-storage-restclient-app Executable client app with web user interface, which connects to a REST service. microstream-storage-restclient-jersey REST client implementation which utilizes Jersey as a webservice framework. microstream-storage-restservice Abstract REST service interface, which uses the REST adapter to access low level storage data. microstream-storage-restservice-sparkjava REST service implementation which utilizes SparkJava and provides REST endpoints.","title":"Installation","component":"manual","version":"5.0","name":"installation","url":"/manual/5.0/intro/installation.html","titles":[{"text":"Build Configuration","hash":"_build_configuration","id":1},{"text":"Modules","hash":"_modules","id":2},{"text":"Dependency Graph","hash":"_dependency_graph","id":3}]},"5":{"id":5,"text":"Tested and officially supported JDKs: JDK Supported Versions Oracle JDK 8, 11, 16 OpenJDK Build by Oracle 8, 11, 16 AdoptOpenJDK (HotSpot / OpenJ9) 8, 11, 16 Red Hat OpenJDK 8, 11, 15 Amazon Corretto 8, 11, 16 Azul Zulu 8, 11, 16 Bellsoft Liberica 8, 11, 16 SapMachine 11, 16 ojdkbuild 8, 11, 14 MicroSoft OpenJDK 11, 16 GraalVM 20.0 Android SDK API level 26+ In theory MicroStream is compatible with all JDK distributions from Version 8 on. Every desktop or server operating system which the supported JVMs are available for Android 8+ MicroStream’s core itself doesn’t have any dependencies to other libraries whatsoever. So you don’t have to worry about potential conflicts in your environment. This was a matter of choice of ours to keep the life of the developers using MicroStream as simple as possible. On the other hand feel free to include any dependencies you need, MicroStream will play along well, e.g. a logging framework of your choice.","title":"System Requirements","component":"manual","version":"5.0","name":"system-requirements","url":"/manual/5.0/intro/system-requirements.html","titles":[{"text":"Supported JDKs","hash":"_supported_jdks","id":1},{"text":"Supported Operating Systems","hash":"_supported_operating_systems","id":2},{"text":"Third Party Libraries","hash":"_third_party_libraries","id":3}]},"6":{"id":6,"text":"Welcome to the MicroStream Reference Manual. This manual includes concepts, instructions and examples to guide you on how to use MicroStream Storage and Cache, version 5.0. You should be familiar with the Java programming language and you should have installed your preferred Integrated Development Environment (IDE). But since you are here we guest you got that covered ;) See Changelog. The API documentation is available at https://docs.microstream.one/api/5.0/. For information on the commercial support for MicroStream see microstream.one. MicroStream is available under Eclipse Public License - v 2.0.","title":"Welcome","component":"manual","version":"5.0","name":"welcome","url":"/manual/5.0/intro/welcome.html","titles":[{"text":"What’s new in 5.0","hash":"_whats_new_in_5_0","id":1},{"text":"API Docs","hash":"_api_docs","id":2},{"text":"Support","hash":"_support","id":3},{"text":"License","hash":"_license","id":4}]},"7":{"id":7,"text":"Actually, a database is a passive collection of persisted data that can never be live on its own. But the managing thread accessing it can. When an EmbeddedStorageManager is \"started\" it is actually just setup with all kinds of default and user-defined settings and definitions. What is actually \"started\" are the database managing threads that process storing and loading requests. // Setup the database manager and start the managing threads EmbeddedStorageManager storageManager = EmbeddedStorage.start(); Of course, for every start() method, there needs to be something like a shutdown() method. So there is in MicroStream: // Stop accessing the database storageManager.shutdown(); But is it really necessary to call shutdown? Should it be? What if there’s an error and the process stops without calling shutdown()? Will that cause the database to become inconsistent, corrupted, maybe even destroyed? The answer is: It wouldn’t be much of a database solution if a crash could cause any problem in the persisted data. MicroStream data-store is carefully designed in such a fashion that the process it runs in can simply vanish at any point in time and the persisted data will never be corrupted. This is surprisingly simple and reliable to solve: Whenever a .store() call returns, it is guaranteed that the data stored by it has been physically written to the underlying storage layer, usually a file system. Before that, there is no guarantee regarding written data at all. In fact, should the process die before the last byte has been written and secured, the next StorageManager initialization will recognize that and truncate the last partially written store. Either way, all the data that was guaranteed to be written will be consistently available after the next .start(). As a consequence, this safety mechanism makes an explicit .shutdown() call pretty much unnecessary. It doesn’t hurt, but it is effectively more-less the same as just calling System.exit(0);. The only time when an explicit shutdown is really needed is, if the database managing threads shall be stopped but the application itself keeps running. For example, it is perfectly valid to start the StorageManager, work with the database, then stop it, maybe change some configuration or copy files or something like that and then start it up again to continue working. In any other case, the shutdown method can be ignored and the live database can happily just be \"killed\" while running. It is specifically designed to withstand such a treatment. Any live MicroStream database basically consists of three major parts: A place where the persisted data is located. Usually a file system directory. The managing threads accessing (read and write) the persisted data. The EmbeddedStorageManager instance to use and control the database in the application. Apart from a lot of internal components (configuration, processing logic, housekeeping state, etc.), that’s all there is. There is nothing special or \"magic\" about it, no static state, no global registration in the JVM process or something like that. The consequence of this is: If two EmbeddedStorageManager instances are started, each one with a different location for its persistend data, then the application has two live databases! If three or ten or 100 are started, then that’s the number of live databases the application has. There is no limit and no conflict between different databases inside the same application process. The only important thing is that no two running StorageManagers can access the same data location.","title":"Application Life-Cycle","component":"manual","version":"5.0","name":"application-life-cycle","url":"/manual/5.0/storage/application-life-cycle.html","titles":[{"text":"Stopping or Crashing a Live Database","hash":"_stopping_or_crashing_a_live_database","id":1},{"text":"Multiple Databases","hash":"_multiple_databases","id":2}]},"8":{"id":8,"text":"Deleting data does not require performing explicit deleting actions like DELETE FROM table WHERE…​. Instead you just need to clear any references to the object in your object-graph and store those changes. If a stored object is not reachable anymore its data will be deleted from the storage later. This behavior is comparable to Java’s garbage collector. root.MyArrayList.remove(0); storage.store(root.MyArrayList); Deleted data is not erased immediately from the storage files. The erasing from the storage files is done by the housekeeping process.","title":"Deleting Data","component":"manual","version":"5.0","name":"deleting-data","url":"/manual/5.0/storage/deleting-data.html","titles":[]},"9":{"id":9,"text":"pom.xml one.microstream microstream-storage-embedded 05.00.02-MS-GA one.microstream microstream-storage-embedded-configuration 05.00.02-MS-GA // Initialize a storage manager (\"the database\") with purely defaults. final EmbeddedStorageManager storageManager = EmbeddedStorage.start(); // print the last loaded root instance, // replace it with a current version and store it System.out.println(storageManager.root()); storageManager.setRoot(\"Hello World! @ \" + new Date()); storageManager.storeRoot(); // shutdown storage storageManager.shutdown(); This simplest example will create a new storage if no existing storage is found, if a existing storage is found it will be loaded (this is all done at line 2 in the example above). In line 6 the current storage’s content is printed. Line 7 assigns some data to the storage, replacing existing data if there is some. In line 8 everything gets stored. When using MicroStream, your entire database is accessed starting at a root instance. This instance is the root object of an object graph that gets persisted by the MicroStream storage logic. While the root instance can be of any type (for example just a collection or an array), it is a good idea to define an explicit root type specific for the application. In this simple example, it is a class called DataRoot, which wraps a single String. public class DataRoot { private String content; public DataRoot() { super(); } public String getContent() { return this.content; } public void setContent(final String content) { this.content = content; } @Override public String toString() { return \"Root: \" + this.content; } } For further information, see root instances. The following code is all that is required to setup a an application backed by a MicroStream database. The application’s convenience root instance is defined and an EmbeddedStorageManager instance, linked to the root, is created (and its database managing threads are started). This is a fully operational Java database application. // Application-specific root instance final DataRoot root = new DataRoot(); // Initialize a storage manager (\"the database\") with the given directory. final EmbeddedStorageManager storageManager = EmbeddedStorage.start( root, // root object Paths.get(\"data\") // storage directory ); // Set content data to the root element, including the time to visualize // changes on the next execution. root.setContent(\"Hello World! @ \" + new Date()); // Store the modified root and its content. storageManager.storeRoot(); This call is all that is necessary to store data in the simplest case. Best practice is to safely shutdown the storage manager by simply calling: storageManager.shutdown(); storageManager.storeRoot() is a special case method that always stores the root object. If you want to store any other object than the root itself, just call storageManager.store(modifiedObject) The full code for the Hello World example is on GitHub.","title":"Getting Started","component":"manual","version":"5.0","name":"getting-started","url":"/manual/5.0/storage/getting-started.html","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"Hello World","hash":"_hello_world","id":2},{"text":"The Root Instance","hash":"_the_root_instance","id":3},{"text":"Creating a Database","hash":"creating-a-database","id":4},{"text":"Storing Data","hash":"_storing_data","id":5},{"text":"Stopping a Live Database","hash":"_stopping_a_live_database","id":6}]},"10":{"id":10,"text":"Housekeeping is an internal background logic to optimize the database’s usage of memory and persistent storage space (typically disc space). It is comprised of mechanisms for cleaning up storage files, clearing unneeded cached data and recognizing deleted entities via garbage collection. Housekeeping is performed with a configurable time budget in configurable intervals to make sure it never interferes with the application’s work load too much (see housekeeping configuration). If new versions of an entity are stored or if entities become no longer reachable (meaning the become effectively deleted or \"garbage\" data), their older data is no longer needed. However, the byte sequences representing that old data still exist in the storage files. But since they will never be needed again, they become logical \"gaps\" in the storage files. Space that is occupied, but will never be read again. It might as well be all zeroes or not exist at all. Sadly, unwanted areas cannot simple by \"cut\" from files. Above all because that would ruin all file offsets coming after them. So with every newly stored version of an entity and every entity that is recognized as unreachable \"garbage\", a storage file consists more and more of useless \"gaps\" and less and less of actually used data. This makes the storage space less and less efficient. To prevent eventually ending up with a drive that is filled with useless bytes despite an actually not that big database, the files need to be \"cleaned up\" from time to time. To do this, the Housekeeping occasionally scans the storage files. If their \"payload\" ratio goes below the configured limit, the affected files will be retired: all data that belongs to still live entities is copied to a new file. Then the old file consists of 100% unneeded gap data and can safely be deleted. Which ratio value to set in the configuration is a matter of taste or, more precisely, depends on each individual application’s demands. A value of 1.0 (100%) means: only files with 100% payload, so no gaps at all, are acceptable. This means that for every store that contains at least one new version of an already existing entity, the corresponding storage file will contain the slightest gap, thus dropping below the demanded ratio of 100% and as a consequence, will be retired on the next occasion. This very aggressive cleanup strategy will keep the disc space usage at a perfect minimum, but at the cost of enormous amounts of copied data, since virtually every store will cause one or more storage files to be retired and their content be shifted into a new file. Respectively, a value of 0.0 (0%) means something like: \"Never care about gaps, just fill up the disc until it bursts.\" This keeps the disc write loads for the file cleanup at 0, but at the cost of rapidly eating up disc space. The best strategy most probably lies somewhere in between. Somewhere between 0.1 and 0.9 (10% and 90%). The default value is 0.75 (75%). So a storage file containing up to 25% of unused gap data is okay. Containing more gaps that 25% will cause a storage file to be retired. In addition to the payload ratio check, the file cleanup also retired files tha are too small or too big. For example: The application logic might commit a single store that is 100 MB in size. But the storage files are configured to be no larger than 10 MB (for example to keep a single file cleanup nice and fast). A single store is always written as a whole in the currently last storage file. The reason for this is to process the store as fast as possible and quickly return control to the application logic. When the housekeeping file cleanup scan encounters such an oversized file, it will retire it immediately by splitting it up across 10 smaller files and then deleting the oversized file. A similar logic applies to files that are too small. Upper and lower size bounds can be freely configured to arbitrary values. The defaults are 1 MB and 8 MB. To avoid repeated reads to storage files (which are incredibly expensive compared to just reading memory), data of once loaded entities is cached in memory. If an entity’s cached data is not requested again for a certain amount of time in relation to how much data is already cached, it is cleared from the cache to avoid unnecessarily consuming memory. The mechanism to constantly evaluate and clear cached data where applicable, is part of the housekeeping. The aggressiveness of this mechanism can be configured via the housekeeping configuration. In a reference-based (or graph-like) data paradigm, instances never have to be deleted explicitly. For example, there is no \"delete\" in the java language. There are only references. If those references are utilized correctly, deleting can be done fully automatically without any need for the developer to care about it. This is called \"garbage collection\". The concept is basically very simple: when the last reference to an instance is cut, that instance can never be accessed again. It becomes \"garbage\" that occupies memory with it data that is not needed any longer. To identify those garbage instances, all an algorithm (the \"garbage collector\") has to do is to follow every reference, starting at some defined root instance (or several) of a graph and mark every instance it encounters as \"reachable\". When it has no more unvisited instances in its queue, the marking is completed. Every instance that is not marked as reachable by then must be unreachable garbage and will be deleted from memory. Similar to the JVM’s garbage collection to optimize its memory consumption, MicroStream has a garbage collection of its own, but for the level of persistent storage space instead of memory space. However, MicroStreams multi-threaded garbage collector is currently still in development and not activated, yet. Housekeeping can also be triggered manually from the StorageConnection . Related methods are: issueCacheCheck(nanoTimeBudgetBound) issueCacheCheck(nanoTimeBudgetBound, entityEvaluator) issueFileCheck(nanoTimeBudgetBound) issueFileCheck(nanoTimeBudgetBound, fileDissolvingEvaluator) issueFullCacheCheck() issueFullCacheCheck(entityEvaluator) issueFullFileCheck() issueFullFileCheck(fileDissolvingEvaluator) issueFullGarbageCollection() issueGarbageCollection(nanoTimeBudget) All Housekeeping methods can be given a defined time budget or can be run until full completion.","title":"Housekeeping","component":"manual","version":"5.0","name":"housekeeping","url":"/manual/5.0/storage/housekeeping.html","titles":[{"text":"File cleanup:","hash":"_file_cleanup","id":1},{"text":"Cache cleanup","hash":"_cache_cleanup","id":2},{"text":"Garbage collection","hash":"_garbage_collection","id":3},{"text":"Explicit Housekeeping","hash":"_explicit_housekeeping","id":4}]},"11":{"id":11,"text":"MicroStream provides an API to import and export persisted data of the storage. It is pretty much the same as writing and reading a backup. The records in the storage are distributed in lots of files and folders, depending on channel count and other settings. To get order in the chaos the export produces one file per type. This files are used again by the import to read the data into the storage. The created binary type data files contain only records of the according type, nevertheless they have the same format as the channel storage files. Export NioFileSystem fileSystem = NioFileSystem.New(); EmbeddedStorageManager storage = EmbeddedStorage.start( fileSystem.ensureDirectoryPath(\"storage\") ); String fileSuffix = \"bin\"; StorageConnection connection = storage.createConnection(); StorageEntityTypeExportStatistics exportResult = connection.exportTypes( new StorageEntityTypeExportFileProvider.Default( fileSystem.ensureDirectoryPath(\"export-dir\"), fileSuffix ), typeHandler -> true // export all, customize if necessary ); XSequence exportFiles = CQL .from(exportResult.typeStatistics().values()) .project(s -> Paths.get(s.file().identifier())) .execute() ; Import NioFileSystem fileSystem = NioFileSystem.New(); EmbeddedStorageManager storage = EmbeddedStorage.start( fileSystem.ensureDirectoryPath(\"storage\") ); StorageConnection connection = storage.createConnection(); connection.importFiles(X.Enum( fileSystem.ensureFilePath(\"type1.bin\"), fileSystem.ensureFilePath(\"type2.bin\") )); It is also possible to convert the exported binary files to a human readable format, namely CSV. Why CSV? Contrary to XML or JSON, CSV is perfectly suited to represent records with the least possible overhead. There are a lot of tools, like spreadsheet editors, which can read and modify CSV files. The file’s size is at the possible minimum and the performance of the converter is significantly better than with the other formats. Binary to CSV NioFileSystem fileSystem = NioFileSystem.New(); EmbeddedStorageManager storage = EmbeddedStorage.start( fileSystem.ensureDirectoryPath(\"storage\") ); StorageDataConverterTypeBinaryToCsv converter = new StorageDataConverterTypeBinaryToCsv.UTF8( StorageDataConverterCsvConfiguration.defaultConfiguration(), new StorageEntityTypeConversionFileProvider.Default( fileSystem.ensureDirectoryPath(\"csv-dir\"), \"csv\" ), storage.typeDictionary(), null, // no type name mapping 4096, // read buffer size 4096 // write buffer size ); AReadableFile dataFile = fileSystem.ensureFilePath(\"type1.bin\").useReading(); try { converter.convertDataFile(dataFile); } finally { dataFile.close(); } CSV to Binary NioFileSystem fileSystem = NioFileSystem.New(); EmbeddedStorageManager storage = EmbeddedStorage.start( fileSystem.ensureDirectoryPath(\"storage\") ); StorageDataConverterTypeCsvToBinary converter = StorageDataConverterTypeCsvToBinary.New( StorageDataConverterCsvConfiguration.defaultConfiguration(), storage.typeDictionary(), new StorageEntityTypeConversionFileProvider.Default( fileSystem.ensureDirectoryPath(\"bin-dir\"), \"dat\" ) ); converter.convertCsv(fileSystem.ensureFilePath(\"type1.csv\"));","title":"Import / Export","component":"manual","version":"5.0","name":"import-export","url":"/manual/5.0/storage/import-export.html","titles":[{"text":"Data Conversion","hash":"_data_conversion","id":1}]},"12":{"id":12,"text":"MicroStream Data-Store is a native Java object graph storage engine. From a technical point of view it serves one purpose only: To fully or partially persist and restore a Java object graph in the simplest way possible for the user. MicroStream Data-Store is a storage engine, but no database management system (DBMS). Many features that typical DBMS provide have been left out on purpose. The reason is that those features exist to make a DBMS something of a server application platform of an \"old kind\" on top of its data store functionality: A standalone process with user management, connection management, session handling, often even with a programming language of its own, a querying interface (SQL), etc. Today, all of those server application features are already and much better handled by dedicated server applications (the \"new kind\"), implemented in a modern language like Java. They have their built-in user, connection and session management, the querying interface to the outside world are typically web services instead of SQL, etc. But those modern server applications still lack one important thing: an easy to use and technically efficient way to store and restore their application’s data. So a \"new kind\" server often uses an \"old kind\" server just to do the data storing. This comes at the price of catching all the overhead and problems of redundant user, connection and session management AND the outdated concepts and limitations of the old querying interface (SQL). Isn’t that very weird and frustratingly complicated? Why not simply include a modern data storing library in the modern server and be done with it? A storing library that perfectly fits the modern technology and brings in no redundant overhead or complication of a secondary outdated wannabe server process. This is exactly what MicroStream Data-Store is and the reason why it is intentionally not a DBMS but \"only\" a storage engine. One might think the easiest way to store and load data in Java would be Java’s built-in serialization. However, it turned out long ago to be very limited, making it hard, if not impossible, to be used as a replacement for a DBMS: Only complete object graphs can be stored and restored, which is unacceptable for all but very small databases. It is very inefficient in terms of storage size and performance. It does not handle changing class structures very well, basically forbidding classes of persisted entities to ever change or introducing massive manual effort to compensate. It cannot handle third-party classes that do not implement Serializable but cannot be changed. In short: The Java Serialization is not an acceptable data store solution and hence no valid replacement for those outdated DBMS. MicroStream Data-store is such a solution: It can persist, load or update object graphs partially and on-demand. It is very efficient both size- and performance-wise. It handles changing class structures by mapping data in the old structure to the current structure during loading; implicitly via internal heuristics or explicitly via a user-defined mapping strategy. It can automatically handle any Java constructs, only excluding those that are technically or reasonably not persistable (e.g. lambdas, proxies or instances with ties to JVM-internals like threads, etc.). MicroStream is what the Java Serialization should have been and it is the first and only really fitting data storing solution for modern applications, completely removing the need to attach a wannabe secondary server DBMS just to store data.","title":"Storage","component":"manual","version":"5.0","name":"index","url":"/manual/5.0/storage/index.html","titles":[]},"13":{"id":13,"text":"The MicroStream engine takes care of persisting your object graph. When you do queries, they are not run on the data stored by MicroStream, queries run on your data in the local system memory. There is no need to use special query languages like SQL. All operations can be done with plain Java. MicroStream does not restrict you in the way you query your object graph. You are totally free to choose the best method fitting to your application. One possibility may be Streams if you use the standard Java collections. public List getUnAvailableArticles() { return shop.getArticles().stream() .filter(a -> !a.available()) .collect(Collectors.toList()) ; } Of course you must care about lazy loading if you use that feature.","title":"Queries","component":"manual","version":"5.0","name":"queries","url":"/manual/5.0/storage/queries.html","titles":[]},"14":{"id":14,"text":"Object instances can be stored as simple records. One value after another as a trivial byte stream. References between objects are mapped with unique numbers, called ObjectId, or short OID. + With both combined, byte streams and OIDs, an object graph can be stored in a simple and quick way, as well as loaded, as a whole or partially. But there is a small catch. Where does it start? What is the first instance or reference at startup? + Strictly speaking \"nothing\". That’s why at least one instance or a reference to an instance must be registered in a special way, so that the application has a starting point from where the object graph can be loaded. This is a \"Root Instance\". Same difference, another problem are instances which are references by constant fields in Java classes. These aren’t created when the records are loaded from the database, but by the JVM while loading the classes. Without special treatment, this would be a problem: The application, meaning the JVM or the JVM process, starts, the constant instances are created by the JVM, one or more of them are stored, then the application shuts down. The stored data of the constants are now stored with a certain OID in the database. The application starts again. The Constant instances are created again by the JVM. The data records are read by MicroStream. The problem is: How should the application know what values, which are stored with a certain OID, belong to which constant? The JVM created everything from scratch at startup and doesn’t know anything about OIDs. To resolve this, the constant instances must be registered, just like the entity graph’s root instance. Then MicroStream can associate the constant instances with the stored data via the OIDs. Constant instances can be thought of as JVM-created implicit root instances for the object graph. In both cases, root and constant instances, it is about registering special starting points for the object graph in order to load it correctly. For MicroStream, from a plain technical view, both cases don’t make a difference. In the most common cases, nothing at all. The default behavior is enough to get things going. By default, a single instance can be registered as the entity graph’s root, accessible via EmbeddedStorage.root(). + Therefore, this is already a fully fledged (although tiny) database application: // Start the database manager EmbeddedStorageManager storageManager = EmbeddedStorage.start(); // Set the entity (graph) as root storageManager.setRoot(\"Hello World\"); // Store root storageManager.storeRoot(); The simple default approach has its limits when the application defines an explicit root instance that must be updated/filled from the database directly during database initialization. Something like this: // Empty application-specific root, to be filled during start() MyApplicationRoot root = new MyApplicationRoot(); // Start the database manager EmbeddedStorageManager storage = EmbeddedStorage.start(); // root must be filled at this point... but how? root.printAllMyEntities(); To solve this, a custom root instance can be directly registered at the database setup. In the simplest case, is just has to be passed to .start();: // Empty application-specific root, to be filled during start() MyApplicationRoot root = new MyApplicationRoot(); // Start the database manager with a reference to the application's root. EmbeddedStorageManager storageManager = EmbeddedStorage.start(root); // root is \"magically\" filled at this point. (Yay!) root.printAllMyEntities(); Internally, the two concepts (default root and custom root) and handled by different mechanisms. This can be seen from the two different methods storageManager.defaultRoot(); storageManager.customRoot(); The simplified method storageManager.root(); automatically chooses the variant that is used. Since neither of those three methods can know the concrete type of the root instance (and adding a type parameter just for that would have been a complication overkill), they all can only be typed to return Object. So, to avoid annoying and dangerous casts, it is best to keep a direct reference to a custom root instance as shown in the code snippet above. Likewise, storageManager.storeRoot(); works for both variants, so there is no need to worry about how to store which one.","title":"Root Instances","component":"manual","version":"5.0","name":"root-instances","url":"/manual/5.0/storage/root-instances.html","titles":[{"text":"What Must Be Done in the Application?","hash":"_what_must_be_done_in_the_application","id":1},{"text":"Custom Root Instances","hash":"_custom_root_instances","id":2}]},"15":{"id":15,"text":"The default way to configure a JCache provider is to use the class javax.cache.configuration.MutableConfiguration. This is mostly used to avoid provider specific code. If you want to use all of MicroStream’s Cache features, you can use our configuration implementation: one.microstream.cache.types.CacheConfiguration CachingProvider provider = Caching.getCachingProvider(); CacheManager cacheManager = provider.getCacheManager(); CacheConfiguration configuration = CacheConfiguration .Builder(Integer.class, String.class) .storeByValue() .expiryPolicyFactory(CreatedExpiryPolicy.factoryOf(Duration.ONE_MINUTE)) .build(); Cache cache = cacheManager.createCache(\"jCache\", configuration); cache.put(1, \"Hello World\"); String value = cache.get(1); To read an external configuration use CacheConfigurationLoader and CacheConfigurationParser or the Load*() methods of CacheConfiguration. CacheConfiguration configuration = CacheConfiguration .Load(\"cache-config.properties\", Integer.class, String.class); If you just use CacheConfiguration.Load() the default configuration file is used, which is either a file in the classpath root named microstream-cache.properties, or the path configured via the system property microstream.cache.configuration.path.","title":"Configuration","component":"manual","version":"5.0","name":"index","url":"/manual/5.0/cache/configuration/index.html","titles":[]},"16":{"id":16,"text":"These are the available properties of the CacheConfiguration type. The names are used accordingly in the external configuration files. They can be found as constants in CacheConfigurationPropertyNames. Property Description keyType Determines the required type of keys for the Cache. valueType Determines the required type of values for the Cache. storageConfigurationResourceName Path for the storage configuration for the backing store. cacheLoaderFactory A CacheLoader should be configured for \"Read Through\" caches to load values when a cache miss occurs. cacheWriterFactory A CacheWriter is used for write-through to an external resource. expiryPolicyFactory Determines when cache entries will expire based on creation, access and modification operations. evictionManagerFactory Clears cache entries using a policy. Works interval-based or on entry creation. readThrough When in \"read-through\" mode, cache misses that occur due to cache entries not existing as a result of performing a \"get\" will appropriately cause the configured CacheLoader to be invoked. writeThrough When in \"write-through\" mode, cache updates that occur as a result of performing \"put\" operations will appropriately cause the configured CacheWriter to be invoked. storeByValue When a cache is storeByValue, any mutation to the key or value does not affect the key of value stored in the cache. statisticsEnabled Checks whether statistics collection is enabled in this cache. managementEnabled Checks whether management is enabled on this cache.","title":"Properties","component":"manual","version":"5.0","name":"properties","url":"/manual/5.0/cache/configuration/properties.html","titles":[]},"17":{"id":17,"text":"MicroStream’s storage can be used as a backing store for the cache. It functions as a CacheWriter as well as a CacheReader, depending on the writeThrough and readThrough configuration. Per default it is used for both. EmbeddedStorageManager storageManager = EmbeddedStorage.start(); CachingProvider provider = Caching.getCachingProvider(); CacheManager cacheManager = provider.getCacheManager(); CacheConfiguration configuration = CacheConfiguration .Builder(Integer.class, String.class, \"my-cache\", storageManager) .build(); Cache cache = cacheManager.createCache(\"jCache\", configuration); If you prefer an external configuration, you can link the storage configuration: cache-config.properties keyType = java.lang.Integer valueType = java.lang.String readThrough = true writeThrough = true storageConfigurationResourceName = microstream-storage.properties microstream-storage.properties baseDirectory = ~/cache-data channelCount = 4 Or you can embed the storage configuration using the storage. prefix: cache-config.properties keyType = java.lang.Integer valueType = java.lang.String readThrough = true writeThrough = true storage.baseDirectory = ~/cache-data storage.channelCount = 4 application.properties spring.jpa.properties.hibernate.cache.microstream.missing_cache_strategy = create spring.jpa.properties.hibernate.cache.microstream.readThrough = true spring.jpa.properties.hibernate.cache.microstreamwriteThrough = true spring.jpa.properties.hibernate.cache.microstream.storage.baseDirectory = ~/cache-data spring.jpa.properties.hibernate.cache.microstream.storage.channelCount = 4 spring.jpa.properties.hibernate.cache.region.factory_class = one.microstream.cache.hibernate.types.CacheRegionFactory spring.jpa.properties.hibernate.cache.use_query_cache = true spring.jpa.properties.hibernate.cache.use_second_level_cache = true application.yml spring: jpa: properties: hibernate: cache: microstream: missing_cache_strategy: create readThrough: true writeThrough: true storage: baseDirectory: ~/cache-data channelCount: 4 region: factory_class: one.microstream.cache.hibernate.types.CacheRegionFactory use_query_cache: true use_second_level_cache: true","title":"Storage","component":"manual","version":"5.0","name":"storage","url":"/manual/5.0/cache/configuration/storage.html","titles":[{"text":"Spring example","hash":"_spring_example","id":1}]},"18":{"id":18,"text":"MicroStream offers a Hibernate cache region factory, which can be found in the cache.hibernate module. pom.xml one.microstream microstream-cache-hibernate 05.00.02-MS-GA The region factory’s class name is one.microstream.cache.hibernate.types.CacheRegionFactory. It is configured via the property hibernate.cache.region.factory_class. Depending on your environment it can be configured in different ways. If you use a good old persistence.xml, set the property there: persistence.xml org.hibernate.jpa.HibernatePersistenceProvider ... ... ... application.properties spring.jpa.properties.hibernate.cache.microstream.missing_cache_strategy=create spring.jpa.properties.hibernate.cache.region.factory_class=one.microstream.cache.hibernate.types.CacheRegionFactory spring.jpa.properties.hibernate.cache.use_query_cache=true spring.jpa.properties.hibernate.cache.use_second_level_cache=true spring.jpa.properties.javax.persistence.sharedCache.mode=ALL application.yml spring: jpa: properties: hibernate: cache: microstream: missing_cache_strategy: create region: factory_class: one.microstream.cache.hibernate.types.CacheRegionFactory use_query_cache: true use_second_level_cache: true javax: persistence: sharedCache: mode: ALL","title":"Hibernate Second Level Cache","component":"manual","version":"5.0","name":"hibernate-second-level-cache","url":"/manual/5.0/cache/use-cases/hibernate-second-level-cache.html","titles":[{"text":"Spring Example","hash":"_spring_example","id":1}]},"19":{"id":19,"text":"First of all add the MicroStream Cache dependency: pom.xml one.microstream microstream-cache 05.00.02-MS-GA The core caching abstraction provided by Spring comes in the spring-context module. org.springframework spring-context ... If you use Spring Boot, then add the spring-boot-starter-cache package to add the caching dependencies: org.springframework.boot spring-boot-starter-cache To enable caching, Spring makes good use of annotations, much like enabling any other configuration level feature in the framework. The caching feature can be enabled by simply providing a cache setup component. @SpringBootApplication @EnableCaching public class MyApplication @Component public class CachingSetup implements JCacheManagerCustomizer { @Override public void customize(CacheManager cacheManager) { cacheManager.createCache(\"my_cache\", new MutableConfiguration<>() .setExpiryPolicyFactory(CreatedExpiryPolicy.factoryOf(new Duration(SECONDS, 10000))) .setStoreByValue(true) .setStatisticsEnabled(true)); } } More information about the Spring Cache Abstraction: https://docs.spring.io/spring/docs/current/spring-framework-reference/integration.html#cache","title":"Spring Cache","component":"manual","version":"5.0","name":"spring-cache","url":"/manual/5.0/cache/use-cases/spring-cache.html","titles":[]},"20":{"id":20,"text":"The layered entities code generator is an annotation processor, provided by the microstream-base module. The maven configuration looks like this: pom.xml one.microstream microstream-base 05.00.02-MS-GA org.apache.maven.plugins maven-compiler-plugin 3.8.1 1.8 1.8 UTF-8 one.microstream.entity.codegen.EntityProcessor -Amicrostream.entity.hashequalator=true -Amicrostream.entity.appendable=true If you don’t want the HashEqualator to be generated, just set the microstream.entity.hashequalator argument to false. You can leave it out otherwise, the default value is true. The same applies to the Appendable.","title":"Configuration","component":"manual","version":"5.0","name":"configuration","url":"/manual/5.0/misc/layered-entities/configuration.html","titles":[]},"21":{"id":21,"text":"Given is the following entity: public interface Person extends Entity { public String firstName(); public String lastName(); } So how is it done? Since the code generator provides a creator, we can use it to create a new Person. Person john = PersonCreator.New() .firstName(\"John\") .lastName(\"Doe\") .create(); Let’s see what the debugger displays if we run this code: There’s always an entity chain, with The identity (PersonEntity) as outer layer Then the logic layers, none here in our example And the inner most layer is always the data (PersonData), which holds the properties. The properties can be accessed like defined in the entity’s interface: String firstName = john.firstName(); // -> John String lastName = john.lastName(); // -> Doe The creator can also be used to create copies. Just hand over the existing one as template: Person mike = PersonCreator.New(john) // use John as template .firstName(\"Mike\") .create(); This will create a \"Mike Doe\".","title":"Creating Entities","component":"manual","version":"5.0","name":"creating-entities","url":"/manual/5.0/misc/layered-entities/creating-entities.html","titles":[]},"22":{"id":22,"text":"The entity types are just simple interfaces with value methods, which have following requirements: A return type, no void No parameters No type parameters No declared checked exceptions You are not limited otherwise. Use any types you want. Inheritance and generics are supported as well. Beeing.java public interface Beeing { public B partner(); } Named.java public interface Named { public String name(); } Animal.java public interface Animal extends Beeing, Entity { public String species(); } Pet.java public interface Pet extends Animal, Named { } Human.java public interface Human extends Beeing, Named, Entity { } There is one base type (Beeing), one feature interface (Named) and three entities (Animal, Pet, Human). The code generator takes care of the three entities, and its output looks like this: AnimalEntity.java public class AnimalEntity extends EntityLayerIdentity implements Animal { protected AnimalEntity() { super(); } @Override protected Animal entityData() { return (Animal)super.entityData(); } @Override public final String species() { return this.entityData().species(); } @Override public final Animal partner() { return this.entityData().partner(); } } AnimalData.java public class AnimalData extends EntityData implements Animal { private final String species; private final Animal partner; protected AnimalData(final Animal entity, final String species, final Animal partner) { super(entity); this.species = species; this.partner = partner; } @Override public String species() { return this.species; } @Override public Animal partner() { return this.partner; } } AnimalCreator.java public interface AnimalCreator extends Entity.Creator { public AnimalCreator species(String species); public AnimalCreator partner(Animal partner); public static AnimalCreator New() { return new Default(); } public static AnimalCreator New(final Animal other) { return new Default().copy(other); } public class Default extends Entity.Creator.Abstract implements AnimalCreator { private String species; private Animal partner; protected Default() { super(); } @Override public AnimalCreator species(final String species) { this.species = species; return this; } @Override public AnimalCreator partner(final Animal partner) { this.partner = partner; return this; } @Override protected EntityLayerIdentity createEntityInstance() { return new AnimalEntity(); } @Override public Animal createData(final Animal entityInstance) { return new AnimalData(entityInstance, this.species, this.partner); } @Override public AnimalCreator copy(final Animal other) { final Animal data = Entity.data(other); this.species = data.species(); this.partner = data.partner(); return this; } } } AnimalUpdater.java public interface AnimalUpdater extends Entity.Updater { public static boolean setSpecies(final Animal animal, final String species) { return New(animal).species(species).update(); } public static boolean setPartner(final Animal animal, final Animal partner) { return New(animal).partner(partner).update(); } public AnimalUpdater species(String species); public AnimalUpdater partner(Animal partner); public static AnimalUpdater New(final Animal animal) { return new Default(animal); } public class Default extends Entity.Updater.Abstract implements AnimalUpdater { private String species; private Animal partner; protected Default(final Animal animal) { super(animal); } @Override public AnimalUpdater species(final String species) { this.species = species; return this; } @Override public AnimalUpdater partner(final Animal partner) { this.partner = partner; return this; } @Override public Animal createData(final Animal entityInstance) { return new AnimalData(entityInstance, this.species, this.partner); } @Override public AnimalUpdater copy(final Animal other) { final Animal data = Entity.data(other); this.species = data.species(); this.partner = data.partner(); return this; } } } PetEntity.java public class PetEntity extends EntityLayerIdentity implements Pet { protected PetEntity() { super(); } @Override protected Pet entityData() { return (Pet)super.entityData(); } @Override public final String species() { return this.entityData().species(); } @Override public final Animal partner() { return this.entityData().partner(); } @Override public final String name() { return this.entityData().name(); } } PetData.java public class PetData extends EntityData implements Pet { private final String species; private final Animal partner; private final String name ; protected PetData(final Pet entity, final String species, final Animal partner, final String name ) { super(entity); this.species = species; this.partner = partner; this.name = name ; } @Override public String species() { return this.species; } @Override public Animal partner() { return this.partner; } @Override public String name() { return this.name; } } PetCreator.java public interface PetCreator extends Entity.Creator { public PetCreator species(String species); public PetCreator partner(Animal partner); public PetCreator name(String name); public static PetCreator New() { return new Default(); } public static PetCreator New(final Pet other) { return new Default().copy(other); } public class Default extends Entity.Creator.Abstract implements PetCreator { private String species; private Animal partner; private String name ; protected Default() { super(); } @Override public PetCreator species(final String species) { this.species = species; return this; } @Override public PetCreator partner(final Animal partner) { this.partner = partner; return this; } @Override public PetCreator name(final String name) { this.name = name; return this; } @Override protected EntityLayerIdentity createEntityInstance() { return new PetEntity(); } @Override public Pet createData(final Pet entityInstance) { return new PetData(entityInstance, this.species, this.partner, this.name ); } @Override public PetCreator copy(final Pet other) { final Pet data = Entity.data(other); this.species = data.species(); this.partner = data.partner(); this.name = data.name (); return this; } } } PetUpdater.java public interface PetUpdater extends Entity.Updater { public static boolean setSpecies(final Pet pet, final String species) { return New(pet).species(species).update(); } public static boolean setPartner(final Pet pet, final Animal partner) { return New(pet).partner(partner).update(); } public static boolean setName(final Pet pet, final String name) { return New(pet).name(name).update(); } public PetUpdater species(String species); public PetUpdater partner(Animal partner); public PetUpdater name(String name); public static PetUpdater New(final Pet pet) { return new Default(pet); } public class Default extends Entity.Updater.Abstract implements PetUpdater { private String species; private Animal partner; private String name ; protected Default(final Pet pet) { super(pet); } @Override public PetUpdater species(final String species) { this.species = species; return this; } @Override public PetUpdater partner(final Animal partner) { this.partner = partner; return this; } @Override public PetUpdater name(final String name) { this.name = name; return this; } @Override public Pet createData(final Pet entityInstance) { return new PetData(entityInstance, this.species, this.partner, this.name ); } @Override public PetUpdater copy(final Pet other) { final Pet data = Entity.data(other); this.species = data.species(); this.partner = data.partner(); this.name = data.name (); return this; } } } HumanEntity.java public class HumanEntity extends EntityLayerIdentity implements Human { protected HumanEntity() { super(); } @Override protected Human entityData() { return (Human)super.entityData(); } @Override public final Human partner() { return this.entityData().partner(); } @Override public final String name() { return this.entityData().name(); } }","title":"Defining Entities","component":"manual","version":"5.0","name":"defining-entities","url":"/manual/5.0/misc/layered-entities/defining-entities.html","titles":[{"text":"Entities","hash":"_entities","id":1},{"text":"Generated Code","hash":"_generated_code","id":2}]},"23":{"id":23,"text":"Concept to separate the basic aspects of what defines an entity into separate instances of different layers: Identity, a never to be replaced instance representing an entity in terms of references to it Logic, nestable in an arbitrary number of dynamically created logic layers, e.g. logging, locking, versioning, etc. Data, always immutable Entity graphs are constructed by strictly only referencing identity instances (the \"outer shell\" of an entity), while every inner layer instance is unshared. This also allows the actual data instance to be immutable, while at the same time leaving referential integrity of an entity graph intact. MicroStream provides ready-to-use logic layers for: Logging Versioning While the layers admittedly introduce considerable technical complexity and runtime overhead, this concept is a production ready solution for nearly all requirements regarding cross cutting concerns and aspects. To use this concept in your code, there need to be at least implementations for the entity’s identity and data. Let’s say the entity looks like this: public interface Person extends Entity { public String firstName(); public String lastName(); } There needs to be a identity class: public class PersonEntity extends EntityLayerIdentity implements Person { protected PersonEntity() { super(); } @Override protected Person entityData() { return (Person)super.entityData(); } @Override public final String firstName() { return this.entityData().firstName(); } @Override public final String lastName() { return this.entityData().lastName(); } } And a data class: public class PersonData extends EntityData implements Person { private final String firstName; private final String lastName ; protected PersonData(final Person entity, final String firstName, final String lastName ) { super(entity); this.firstName = firstName; this.lastName = lastName ; } @Override public String firstName() { return this.firstName; } @Override public String lastName() { return this.lastName; } } A lot of code to write to get an entity with two properties! But don’t worry, there is a code generator for that. An annotation processor to be precise. The only code you have to provide are the entity interfaces, all the other stuff will be generated. Just add the annotation processor type one.microstream.entity.codegen.EntityProcessor to your compiler configuration. That’s it. The generator also builds a creator: public interface PersonCreator extends Entity.Creator { public PersonCreator firstName(String firstName); public PersonCreator lastName(String lastName); public static PersonCreator New() { return new Default(); } public static PersonCreator New(final Person other) { return new Default().copy(other); } public class Default extends Entity.Creator.Abstract implements PersonCreator { private String firstName; private String lastName ; protected Default() { super(); } @Override public PersonCreator firstName(final String firstName) { this.firstName = firstName; return this; } @Override public PersonCreator lastName(final String lastName) { this.lastName = lastName; return this; } @Override protected EntityLayerIdentity createEntityInstance() { return new PersonEntity(); } @Override public Person createData(final Person entityInstance) { return new PersonData(entityInstance, this.firstName, this.lastName ); } @Override public PersonCreator copy(final Person other) { final Person data = Entity.data(other); this.firstName = data.firstName(); this.lastName = data.lastName (); return this; } } } An Updater: public interface PersonUpdater extends Entity.Updater { public static boolean setFirstName(final Person person, final String firstName) { return New(person).firstName(firstName).update(); } public static boolean setLastName(final Person person, final String lastName) { return New(person).lastName(lastName).update(); } public PersonUpdater firstName(String firstName); public PersonUpdater lastName(String lastName); public static PersonUpdater New(final Person person) { return new Default(person); } public class Default extends Entity.Updater.Abstract implements PersonUpdater { private String firstName; private String lastName ; protected Default(final Person person) { super(person); } @Override public PersonUpdater firstName(final String firstName) { this.firstName = firstName; return this; } @Override public PersonUpdater lastName(final String lastName) { this.lastName = lastName; return this; } @Override public Person createData(final Person entityInstance) { return new PersonData(entityInstance, this.firstName, this.lastName ); } @Override public PersonUpdater copy(final Person other) { final Person data = Entity.data(other); this.firstName = data.firstName(); this.lastName = data.lastName (); return this; } } } An optional equalator, with equals and hashCode methods: public interface PersonHashEqualator extends HashEqualator { public static PersonHashEqualator New() { return new Default(); } public final class Default implements PersonHashEqualator, Stateless { public static boolean equals(final Person person1, final Person person2) { return X.equal(person1.firstName(), person2.firstName()) && X.equal(person1.lastName (), person2.lastName ()) ; } public static int hashCode(final Person person) { return Objects.hash( person.firstName(), person.lastName () ); } Default() { super(); } @Override public boolean equal(final Person person1, final Person person2) { return equals(person1, person2); } @Override public int hash(final Person person) { return hashCode(person); } } } And an optional Appendable: public interface PersonAppendable extends VarString.Appendable { public static String toString(final Person person) { return New(person).appendTo(VarString.New()).toString(); } public static PersonAppendable New(final Person person) { return new Default(person); } public static class Default implements PersonAppendable { private final Person person; Default(final Person person) { super(); this.person = person; } @Override public VarString appendTo(final VarString vs) { return vs.append(this.person.getClass().getSimpleName()) .append(\" [lastName = \") .append(this.person.lastName()) .append(\", firstName = \") .append(this.person.firstName()) .append(']'); } } }","title":"Layered Entities","component":"manual","version":"5.0","name":"index","url":"/manual/5.0/misc/layered-entities/index.html","titles":[]},"24":{"id":24,"text":"Another predefined logic layer is for logging purposes. Since there is a myriad of loggers out there, MicroStream doesn’t provide any special adapter, but a generic type which can be used to adapt to the logging framework of your choice. Just create a class and implement EntityLogger, and you are good to go. public class JulLogger implements EntityLogger { @Override public void afterUpdate( final Entity identity, final Entity data, final boolean successful) { Logger.getLogger(identity.getClass().getName()) .info(\"Entity updated\"); } } Additional to afterUpdate there are further hooks: entityCreated afterRead beforeUpdate Now just add the logger when creating entities: JulLogger logger = new JulLogger(); Person john = PersonCreator.New() .addLayer(logger) .firstName(\"John\") .lastName(\"Doe\") .create(); When you call PersonUpdater.setLastName(john, \"Smith\"); the logger’s output is Oct 15, 2019 11:17:53 AM JulLogger afterUpdate INFO: Entity updated","title":"Logging","component":"manual","version":"5.0","name":"logging","url":"/manual/5.0/misc/layered-entities/logging.html","titles":[]},"25":{"id":25,"text":"Entities can be created with an arbitrary amount of layers, so feel free to combine them as you like: EntityVersionContext versionContext = EntityVersionContext.AutoIncrementingLong(); JulLogger logger = new JulLogger(); Person john = PersonCreator.New() .addLayer(versionContext) .addLayer(logger) .firstName(\"John\") .lastName(\"Doe\") .create(); The example on GitHub makes use of all the described features.","title":"Multiple Layers","component":"manual","version":"5.0","name":"multiple-layers","url":"/manual/5.0/misc/layered-entities/multiple-layers.html","titles":[]},"26":{"id":26,"text":"The data layer is always immutable. In order to update the values we have to replace the data layer completely. This is done with the updater. The property setter methods can be chained, so it is easy to update multiple properties, for example: PersonUpdater.New(mike) .firstName(\"Jim\") .lastName(\"Hope\") .update(); If only one property needs to be updated, the updater class offers static convenience methods for that: PersonUpdater.setFirstName(mike, \"Jim\");","title":"Updating Entities","component":"manual","version":"5.0","name":"updating-entities","url":"/manual/5.0/misc/layered-entities/updating-entities.html","titles":[]},"27":{"id":27,"text":"An arbitrary amount of logic layers can be added to entities. Let’s use the predefined versioning layer. It will keep track of all changes. Technically every new data layer which is added by the updater, will create a new version entry. EntityVersionContext versionContext = EntityVersionContext.AutoIncrementingLong(); Person john = PersonCreator.New() .addLayer(versionContext) .firstName(\"John\") .lastName(\"Doe\") .create(); Let’s have a look at the debugger: Now the versioning layer is chained between the identity layer and the data layer. If we update the entity a few times, we will see how the versioning layer works. In this case we use an auto-incrementing Long as key. PersonUpdater.setLastName(john, \"Smith\"); PersonUpdater.setLastName(john, \"Archer\"); PersonUpdater.setLastName(john, \"Bennett\"); john.lastName() // now returns \"Bennett\" If you want to access older versions use the context: versionContext.versions(john).get(1L); // -> \"John Smith\" To limit the amount of preserved versions, a cleaner can be utilized: EntityVersionCleaner versionCleaner = EntityVersionCleaner.AmountPreserving(10); EntityVersionContext versionContext = EntityVersionContext.AutoIncrementingLong(cleaner); This will keep only the last ten versions of the person. Additionally to number keys, timestamps can be used as well. EntityVersionContext systemTimeContext = EntityVersionContext.AutoIncrementingSystemTimeMillis(); EntityVersionContext nanoTimeContext = EntityVersionContext.AutoIncrementingSystemNanoTime(); EntityVersionContext instantContext = EntityVersionContext.AutoIncrementingInstant(); They can be preserved for a specific time range: EntityVersionCleaner cleaner = EntityVersionCleaner.AgePreservingInstant(Duration.of(1, ChronoUnit.YEARS)); EntityVersionContext context = EntityVersionContext.AutoIncrementingInstant(cleaner); The version context can be used as a shared state object. So you can control versioning for multiple entities at once, or even for the hole entity graph. The auto-incrementing contexts take care of the key creation. If you need to control it by yourself, use the mutable context. But be aware that you have to set the version before updating any data, otherwise the current one will be overwritten. EntityVersionContext.Mutable versionContext = EntityVersionContext.Mutable(); versionContext.currentVersion(\"rev-1\"); Person john = PersonCreator.New() .addLayer(versionContext) .firstName(\"John\") .lastName(\"Doe\") .create(); versionContext.currentVersion(\"rev-2\"); PersonUpdater.setLastName(john, \"Smith\"); versionContext.currentVersion(\"rev-3\"); PersonUpdater.setLastName(john, \"Archer\"); versionContext.currentVersion(\"rev-4\"); PersonUpdater.setLastName(john, \"Bennett\");","title":"Versioning","component":"manual","version":"5.0","name":"versioning","url":"/manual/5.0/misc/layered-entities/versioning.html","titles":[]},"28":{"id":28,"text":"The wrapper code generator is an annotation processor, provided by the base module. The maven configuration looks like this: pom.xml one.microstream microstream-base 05.00.02-MS-GA org.apache.maven.plugins maven-compiler-plugin 3.8.1 1.8 1.8 UTF-8 one.microstream.wrapping.codegen.WrapperProcessor -Amicrostream.wrapper.types=one.microstream.persistence.types.PersistenceStoring There are following ways to get the base wrapper types generated. If you want it for your own types, the best way is to use the GenerateWrapper annotation. @GenerateWrapper public interface MyInterface { public void doStuff(); public String getStuff(); } Or, if you want it for interfaces in libraries, like PersistenceStoring, you cannot add an annotation. That’s what the microstream.wrapper.types parameter is for. This is just a comma separated list of types. Alternatively you can use the GenerateWrapperFor annotation: @GenerateWrapperFor(\"one.microstream.persistence.types.PersistenceStoring\") public class WrapperGenerationDummy { } It accepts a list of type names. Plain strings have to be used instead of class literals, because it is read inside the compilation cycle which prohibits access to class elements.","title":"Configuration","component":"manual","version":"5.0","name":"configuration","url":"/manual/5.0/misc/wrapping/configuration.html","titles":[]},"29":{"id":29,"text":"MicroStream uses a strictly interface-based architecture. All types in the public API are, whenever possible, interfaces. This offers the best possibilities to extend or exchange parts of the engine. A good ways to enrich a type with features, is the wrapper (decorator) pattern. For example, let’s say we want to add logging to the PersistenceStoring's store(object) method. PersistenceStoring.java public interface PersistenceStoring { public long store(Object instance); public long[] storeAll(Object... instances); public void storeAll(Iterable instances); public void storeSelfStoring(SelfStoring storing); } Conventionally it would be done that way: A new type, implementing the original interface, would be handed over the wrapped instance, all interface methods have to be implemented and delegated. And in the single method, we wanted to add functionality; the actual implementation of the logging is done. public class PersistenceStoringWithLogging implements PersistenceStoring { private final PersistenceStoring wrapped; public PersistenceStoringWithLogging(final PersistenceStoring wrapped) { super(); this.wrapped = wrapped; } @Override public long store(final Object instance) { Logger.getLogger(PersistenceStoring.class.getName()) .info(\"Object stored: \" + instance); return this.wrapped.store(instance); } @Override public long[] storeAll(final Object... instances) { return this.wrapped.storeAll(instances); } @Override public void storeAll(final Iterable instances) { this.wrapped.storeAll(instances); } @Override public void storeSelfStoring(final SelfStoring storing) { this.wrapped.storeSelfStoring(storing); } } This produces a lot of overhead. In this case, three methods are just boilerplate code to delegate the calls to the wrapped instance. A common solution for that is to create an abstract base wrapper type for the designated interface, and to reuse it whenever needed. public abstract class BaseWrapperPersistenceStoring implements PersistenceStoring { private final PersistenceStoring wrapped; public BaseWrapperPersistenceStoring(final PersistenceStoring wrapped) { super(); this.wrapped = wrapped; } @Override public long store(final Object instance) { return this.wrapped.store(instance); } @Override public long[] storeAll(final Object... instances) { return this.wrapped.storeAll(instances); } @Override public void storeAll(final Iterable instances) { this.wrapped.storeAll(instances); } @Override public void storeSelfStoring(final SelfStoring storing) { this.wrapped.storeSelfStoring(storing); } } And then, based on that, the implementation of the logger type would look like this: public class PersistenceStoringWithLogging extends BaseWrapperPersistenceStoring { public PersistenceStoringWithLogging(PersistenceStoring wrapped) { super(wrapped); } @Override public long store(Object instance) { Logger.getLogger(PersistenceStoring.class.getName()) .info(\"Object stored: \" + instance); return super.store(instance); } } That’s better. No more boilerplate code. Just overwrite the methods you want to extend. The only work left is, to generate the base wrapper types. One way is to let your IDE generate the wrapper or delegation code. Disadvantage of that is, it has to be redone every time your interfaces change. A code generator, which does it automatically would be nice. And that’s what the base module brings along. Like the layered entity code generator, it is an annotation processor.","title":"Wrapping","component":"manual","version":"5.0","name":"index","url":"/manual/5.0/misc/wrapping/index.html","titles":[]},"30":{"id":30,"text":"MicroStream’s wrapper code generator generates following wrapper type for PersistenceStoring: public interface WrapperPersistenceStoring extends Wrapper, PersistenceStoring { @Override public default long store(final Object instance) { return this.wrapped().store(instance); } @Override public default long[] storeAll(final Object... instances) { return this.wrapped().storeAll(instances); } @Override public default void storeAll(final Iterable instances) { this.wrapped().storeAll(instances); } @Override public default void storeSelfStoring(final SelfStoring storing) { this.wrapped().storeSelfStoring(storing); } } It is not an abstract class, but an interface, which extends the Wrapper interface of the microstream-base module, and the wrapped type itself. This offers you the most flexible way to use it in your application. The Wrapper type is just a typed interface and an abstract implementation of itself. Wrapper.java public interface Wrapper { public W wrapped(); public abstract class Abstract implements Wrapper { private final W wrapped; protected Abstract(final W wrapped) { super(); this.wrapped = wrapped; } @Override public final W wrapped() { return this.wrapped; } } } You can either implement the Wrapper interface and provide the wrapped instance via the wrapped() method, or you can extend the abstract class and hand over the wrapped instance to the super constructor. Version with the abstract type: public class PersistenceStoringWithLogging extends Wrapper.Abstract implements WrapperPersistenceStoring { public PersistenceStoringWithLogging(final PersistenceStoring wrapped) { super(wrapped); } @Override public long store(Object instance) { Logger.getLogger(PersistenceStoring.class.getName()) .info(\"Object stored: \" + instance); return WrapperPersistenceStoring.super.store(instance); } } Or only the interface, then you have to provide the wrapped instance via wrapped(): public class PersistenceStoringWithLogging implements WrapperPersistenceStoring { private final PersistenceStoring wrapped; public PersistenceStoringWithLogging(final PersistenceStoring wrapped) { super(); this.wrapped = wrapped; } @Override public PersistenceStoring wrapped() { return this.wrapped; } @Override public long store(Object instance) { Logger.getLogger(PersistenceStoring.class.getName()) .info(\"Object stored: \" + instance); return WrapperPersistenceStoring.super.store(instance); } }","title":"Usage","component":"manual","version":"5.0","name":"usage","url":"/manual/5.0/misc/wrapping/usage.html","titles":[]},"31":{"id":31,"text":"A collection of examples with different topics: https://github.com/microstream-one/microstream/tree/master/examples The BookStore Demo is a fully fledged sample application. It shows how to design an application with MicroStream from the ground up. https://github.com/microstream-one/bookstore-demo If you want to compare MicroStream with a database of your choice, it can be done with following project, which is based on the BookStore Demo. https://github.com/microstream-one/bookstore-demo-performance Combination of two great frameworks. https://github.com/microstream-one/example-spring-crud Further reading: https://medium.com/@microstream/microstream-with-spring-8265525fb3fc This example shows how to effectively use MicroStream storage with Android RecyclerView. https://github.com/microstream-one/example-android-recyclerview Further reading: https://medium.com/@microstream/android-recyclerview-with-microstream-da91641c0015","title":"Examples and Demo Projects","component":"manual","version":"5.0","name":"examples-and-demo-projects","url":"/manual/5.0/storage/addendum/examples-and-demo-projects.html","titles":[{"text":"Examples Collection","hash":"_examples_collection","id":1},{"text":"BookStore Demo","hash":"_bookstore_demo","id":2},{"text":"Spring Crud","hash":"_spring_crud","id":3},{"text":"Android RecyclerView","hash":"_android_recyclerview","id":4}]},"32":{"id":32,"text":"Although most types in the JDK or any other Java library will work with MicroStream, there is a bunch of specialized type handlers for the most commonly used types. They are optimized to reduce memory overhead and increase performance. The following list describes all types for which special type handlers are implemented. All other types are analyzed generically. Primitive Types All primitive Types and arrays thereof java.lang Byte Boolean Short Character Integer Float Long Double Void Object String StringBuffer StringBuilder java.math BigDecimal BigInteger java.util Date Currency Locale OptionalInt OptionalLong OptionalDouble java.util.regex Pattern java.io File java.nio.file Path java.net InetAddress Inet4Address Inet6Address InetSocketAddress URI URL java.util Vector Stack Hashtable Properties ArrayList HashSet HashMap LinkedHashSet LinkedHashMap WeakHashMap LinkedList TreeMap TreeSet IdentityHashMap PriorityQueue ArrayDeque java.util.concurrent ConcurrentHashMap ConcurrentSkipListMap ConcurrentSkipListSet ConcurrentLinkedQueue ConcurrentLinkedDeque CopyOnWriteArrayList Most collections above are handled in a generic way. If you want a more optimized version of JDK collection handlers, you can utilize the provided module microstream-persistence-binary-jdk8. pom.xml one.microstream microstream-persistence-binary-jdk8 05.00.02-MS-GA final EmbeddedStorageFoundation foundation = EmbeddedStorage.Foundation(); foundation.onConnectionFoundation(BinaryHandlersJDK8::registerJDK8TypeHandlers);","title":"Specialized Type Handlers","component":"manual","version":"5.0","name":"specialized-type-handlers","url":"/manual/5.0/storage/addendum/specialized-type-handlers.html","titles":[{"text":"Value Types","hash":"_value_types","id":1},{"text":"Collections","hash":"_collections","id":2}]},"33":{"id":33,"text":"Feature Supported Note Classes Classes without default constructor Abstract classes / Interfaces Perfectly handleable as types, but there can never be instances to be persisted in the first place. Inner classes Anonymous inner classes Primitives References Final fields Static fields Not supported since they are outside of an entity graph / a database, i.e. potentially shared by multiple graphs. Constant primitives No sense in persisting those. These are just plain trivial values outside of an entity graph / a database. Constant instances Must be registered for loading to update them instead of creating independent new instances. Primitive arrays Object arrays Multi dimensional arrays Technically the same as object arrays as every array is an object itself. JDK value types (String, Number types, Date, File, Locale, Optional, …​) Optimized handling via custom TypeHandlers. Collections Via generic handling logic (List, Set, Map, etc.). Optimal handling required tailored TypeHandler (e.g. correctly handling loadFactor in java.util.HashMap) Nested Collections JVM system-tied classes (Thread, ClassLoader, WeakReference, …​) Technically handleable, but handling system-instances could cause fatal problems (e.g. start a Thread just from loading data), so it is intentionally disabled. JVM external-tied classes (IO-Streams, FileChannel, …​) Technically handleable, but external dependencies could cause fatal problems (e.g. existence of a referenced file), so it is intentionally disabled. Feature Supported Note Enums Automatically handled as constant instances to maintain referential integrity / identity. Enums with mutable state Enums anonymous subclasses Feature Supported Note Lambdas Type-handleable in theory. But JVM is not able to resolve its own type definitions for lambdas. Feature Supported Note Records Records are mere syntax sugar for classes, see FAQ.","title":"Supported Java Features","component":"manual","version":"5.0","name":"supported-java-features","url":"/manual/5.0/storage/addendum/supported-java-features.html","titles":[{"text":"Java 5","hash":"_java_5","id":1},{"text":"Java 8","hash":"_java_8","id":2},{"text":"Java 14","hash":"_java_14","id":3}]},"34":{"id":34,"text":"Housekeeping interval and time budget is configured by setting up a StorageHousekeepingController. Available properties are: Property Description housekeeping-interval Interval the housekeeping is triggered in milliseconds, default once per every second housekeeping-time-budget Time budget for housekeeping in nanoseconds, default is 0.01 seconds EmbeddedStorageManager storage = EmbeddedStorage.Foundation( Storage.ConfigurationBuilder() .setHousekeepingController(Storage.HousekeepingController(1000, 10_000_000)) .createConfiguration()) .start(); The desired file min and max sizes and payload ratio is configured by the StorageDataFileEvaluator: available properties are: Property Description data-file-minimum-size Files smaller then minimum file size will be merged with other files if possible, default is 1 MB. data-file-maximum-size Files larger then maximum file size will be split in smaller ones, default is 8 MB. data-file-minimum-use-ratio Ratio of non-gap data contained in a storage file to prevent the file from being dissolved, default is 0.75 (75%). EmbeddedStorageManager storage = EmbeddedStorage.Foundation( Storage.ConfigurationBuilder() .setDataFileEvaluator(Storage.DataFileEvaluator(1024*1024, 1024*1024*8, 0.75)) .createConfiguration()) .start(); The lifetime of objects in the internal entity cache can be configured by the StorageEntityCacheEvaluator: Available properties are: Property Description entity-cache-threshold Abstract threshold value, roughly comparable to size in bytes with a time component, at which a cache must be cleared of some entities. Default is 1000000000. entity-cache-timeout Time in milliseconds after that an entity is considered to be old if not read meanwhile. Must be greater zero, default is 86400000ms (1 day). EmbeddedStorageManager storage = EmbeddedStorage.Foundation( Storage.ConfigurationBuilder() .setEntityCacheEvaluator(Storage.EntityCacheEvaluator( 86_400_000, 1_000_000_000)) .createConfiguration()) .start(); For external configuration see: Properties","title":"Housekeeping","component":"manual","version":"5.0","name":"housekeeping","url":"/manual/5.0/storage/configuration/housekeeping.html","titles":[{"text":"Intervall and Time Budget","hash":"_intervall_and_time_budget","id":1},{"text":"File Sizes and Payload","hash":"storage-data-file-evaluator","id":2},{"text":"Cache","hash":"_cache","id":3}]},"35":{"id":35,"text":"The EmbeddedStorageManager is mostly created with factory methods of EmbeddedStorage, where the most common settings, like database directory or the root instance, can be configured. EmbeddedStorageManager storageManager = EmbeddedStorage.start( myRoot, // root object of entity graph Paths.get(\"data-dir\") // storage data directory ); To achieve a more detailed customization, you can utilize the EmbeddedStorageFoundation factory type. It holds and creates on demand all the parts that form an EmbeddedStorageManager. NioFileSystem fileSystem = NioFileSystem.New(); EmbeddedStorageManager storageManager = EmbeddedStorageFoundation.New() .setConfiguration( StorageConfiguration.Builder() .setStorageFileProvider( Storage.FileProviderBuilder(fileSystem) .setDirectory(fileSystem.ensureDirectoryPath(\"storageDir\")) .createFileProvider() ) .setChannelCountProvider(StorageChannelCountProvider.New(4)) .setBackupSetup(StorageBackupSetup.New( fileSystem.ensureDirectoryPath(\"backupDir\") )) .createConfiguration() ) .createEmbeddedStorageManager(); The artifact microstream-storage-embedded-configuration provides a convenience layer for configuration purposes, as well as facilities to read external configuration. pom.xml one.microstream microstream-storage-embedded-configuration 05.00.02-MS-GA The EmbeddedStorageConfigurationBuilder type consolidates the most widely used parameters from the storage foundations in one place. It’s output is an EmbeddedStorageFoundation from which a EmbeddedStorageManager can be created. EmbeddedStorageManager storageManager = EmbeddedStorageConfiguration.Builder() .setStorageDirectoryInUserHome(\"data-dir\") .setBackupDirectory(\"backup-dir\") .setChannelCount(4) .createEmbeddedStorageFoundation() .createEmbeddedStorageManager(); To read an external configuration use ConfigurationLoader and ConfigurationParser or the load*() methods of EmbeddedStorageConfiguration. Out of the box, XML and INI files are supported. Java (XML) EmbeddedStorageManager storageManager = EmbeddedStorageConfiguration.load( \"/META-INF/microstream/storage.xml\" ) .createEmbeddedStorageFoundation() .createEmbeddedStorageManager(); XML Java (INI) EmbeddedStorageManager storageManager = EmbeddedStorageConfiguration.load( \"/META-INF/microstream/storage.ini\" ) .createEmbeddedStorageFoundation() .createEmbeddedStorageManager(); INI storage-directory = data channel-count = 4 If you just use EmbeddedStorageConfiguration.load() the default configuration file is used, which is either a file in the classpath root named microstream-storage.properties, or the path configured via the system property microstream.storage.configuration.path. The full example can be found on GitHub. The EmbeddedStorageConfigurationBuilder is based on the common configuration layer, newly introduced in MicroStream 5.0. The artifact configuration, which is a dependency of storage.embedded.configuration, contains support for XML and INI files. Other formats are available in different artifacts. Artifact Formats microstream-configuration-hocon hocon, json microstream-configuration-yaml yaml Java (Yaml) EmbeddedStorageManager storageManager = EmbeddedStorageConfiguration.load( ConfigurationLoader.New(\"/META-INF/microstream/storage.yaml\"), ConfigurationParserYaml.New() ) .createEmbeddedStorageFoundation() .createEmbeddedStorageManager(); Yaml storage-directory: \"data\" channel-count: 4 Java (Json) EmbeddedStorageManager storageManager = EmbeddedStorageConfiguration.load( ConfigurationLoader.New(\"/META-INF/microstream/storage.json\"), ConfigurationParserHocon.New() ) .createEmbeddedStorageFoundation() .createEmbeddedStorageManager(); Json { \"storage-directory\": \"data\", \"channel-count\": 4 }","title":"Configuration","component":"manual","version":"5.0","name":"index","url":"/manual/5.0/storage/configuration/index.html","titles":[{"text":"Foundations","hash":"_foundations","id":1},{"text":"External Configuration","hash":"external-configuration","id":2},{"text":"Additional Formats","hash":"_additional_formats","id":3}]},"36":{"id":36,"text":"By default, MicroStream uses the operation system’s standard file locking mechanism to prevent simultaneous access to the storage files. In the rare case that this is not sufficient to control the file access MicroStream provides a proprietary file lock implementation to ensure exclusive access to the storage files from different applications using MicroStream. Using this file lock may only be necessary if, while a MicroStream application is running, a second MicroStream application may try to access the same storage and the default file locks are not reliable. You don’t need to activate this feature if: Only one MicroStream application will access the storage, MicroStream applications that may access the same storage run on the same system, other applications that may access the storage files don’t use MicroStream to access them. To activate the internal file lock you need to setup StorageLockFileSetup: EmbeddedStorageManager storageManager = EmbeddedStorage .Foundation() .setLockFileSetupProvider(Storage.LockFileSetupProvider()) .start(); The default interval the locks are updated is 10 seconds, you can set a custom value in milliseconds with: Storage.LockFileSetupProvider( final long updateInterval ) To specify the charset used by the lock files use: Storage.LockFileSetupProvider( final Charset charset ) or, to customize both: LockFileSetupProvider( final Charset charset , final long updateInterval )","title":"Lock File","component":"manual","version":"5.0","name":"lock-file","url":"/manual/5.0/storage/configuration/lock-file.html","titles":[]},"37":{"id":37,"text":"These are the available properties of the EmbeddedStorageConfigurationBuilder type. The names are used accordingly in the external configuration files. They can be found as constants in EmbeddedStorageConfigurationPropertyNames. Property Short Description storage-directory The base directory of the storage in the file system. Default is \"storage\" in the working directory. storage-filesystem The live file system configuration. See storage targets configuration. deletion-directory If configured, the storage will not delete files. Instead of deleting a file it will be moved to this directory. truncation-directory If configured, files that will get truncated are copied into this directory. backup-directory The backup directory. backup-filesystem The backup file system configuration. See storage targets configuration. channel-count The number of threads and number of directories used by the storage engine. Every thread has exclusive access to its directory. Default is 1. channel-directory-prefix Name prefix of the subdirectories used by the channel threads. Default is \"channel_\". data-file-prefix Name prefix of the storage files. Default is \"channel_\". data-file-suffix Name suffix of the storage files. Default is \".dat\". transaction-file-prefix Name prefix of the storage transaction file. Default is \"transactions_\". transaction-file-suffix Name suffix of the storage transaction file. Default is \".sft\". type-dictionary-file-name The name of the dictionary file. Default is \"PersistenceTypeDictionary.ptd\". rescued-file-suffix Name suffix of the storage rescue files. Default is \".bak\". lock-file-name Name of the lock file. Default is \"used.lock\". housekeeping-interval Interval for the housekeeping. This is work like garbage collection or cache checking. In combination with houseKeepingNanoTimeBudget the maximum processor time for housekeeping work can be set. Default is 1 second. housekeeping-time-budget Number of nanoseconds used for each housekeeping cycle. Default is 10 milliseconds = 0.01 seconds. entity-cache-threshold Abstract threshold value for the lifetime of entities in the cache. Default is 1000000000. entity-cache-timeout Timeout in milliseconds for the entity cache evaluator. If an entity wasn’t accessed in this timespan it will be removed from the cache. Default is 1 day. data-file-minimum-size Minimum file size for a data file to avoid cleaning it up. Default is 1024^2 = 1 MiB. data-file-maximum-size Maximum file size for a data file to avoid cleaning it up. Default is 1024^2*8 = 8 MiB. data-file-minimum-use-ratio The ratio (value in ]0.0;1.0]) of non-gap data contained in a storage file to prevent the file from being dissolved. Default is 0.75 (75%). data-file-cleanup-head-file A flag defining whether the current head file (the only file actively written to) shall be subjected to file cleanups as well. Number of threads used by the storage engine. It depicts the numbers of subdirectories as well. Each thread manages one directory in which it writes to and reads from exclusively. The unity of thread, directory and the cached data therefore is called a \"Channel\". __________________________________________________ [RAM ]{ Code } | ( Filesystem ) ,- \"Channel 0\": [Data]{Thread} (Storage Subdirectory 0) /-- \"Channel 1\": [Data]{Thread} (Storage Subdirectory 1) StorageManager | \\-- \"Channel 2\": [Data]{Thread} (Storage Subdirectory 2) '- \"Channel 3\": [Data]{Thread} (Storage Subdirectory 3) _________________________________________________| For further information see Using Channels. Time for the house keeping interval. House keeping tasks are, among others: Garbage Collection Cache Check File Cleanup Check In combination with housekeeping-time-budget, it can be specified how many CPU time should be used for house keeping. E.g. interval=1000ms and budget=10000000ns means every second there’s 0.01 seconds time for house keeping, so max 1% CPU time used for house keeping. This CPU time window is only used if house keeping work is pending. If nothing has to be done, no time is wasted. Time used for each housekeeping cycle. However, no matter how low the number is, one item of work will always be completed. But if there is nothing to clean up, no processor time will be wasted. Default is 10000000 (10 million nanoseconds = 10 milliseconds = 0.01 seconds). + However, no matter how small the time is, one item is done at least. This is to avoid no-ops, if a too small time window is configured. + This time budget is a \"best effort\" threshold, meaning when at 1ns left, a huge file has to be cleaned or the references of a huge collection have to be marked for GC, then this budget can be exceeded considerably. For further information see Housekeeping. Minimum file size in bytes of a storage file to avoid merging with other files during housekeeping. + Must be greater than 1, maximum is 2GB. Maximum file size in bytes of a storage file to avoid splitting in more files during housekeeping. + Must be greater than 1, maximum is 2GB. Due to internal implementation details files larger than 2GB are not supported! The ratio (value in ]0.0;1.0]) of non-gap data contained in a storage file to prevent the file from being dissolved. \"Gap\" data is anything that is not the latest version of an entity’s data, including older versions of an entity and \"comment\" bytes (a sequence of bytes beginning with its length as a negative value length header). The closer this value is to 1.0 (100%), the less disk space is occupied by storage files, but the more file dissolving (data transfers to new files) is required and vice versa. This list shows which property configures which type, used by the foundation types, to create the storage manager. Property Used by storage-directory StorageLiveFileProvider storage-filesystem StorageLiveFileProvider deletion-directory StorageLiveFileProvider truncation-directory StorageLiveFileProvider backup-directory StorageBackupSetup backup-filesystem StorageBackupSetup channel-count StorageChannelCountProvider channel-directory-prefix StorageFileNameProvider data-file-prefix StorageFileNameProvider data-file-suffix StorageFileNameProvider transaction-file-prefix StorageFileNameProvider transaction-file-suffix StorageFileNameProvider type-dictionary-filename StorageFileNameProvider rescued-file-suffix StorageFileNameProvider lock-filename StorageFileNameProvider housekeeping-interval StorageHousekeepingController housekeeping-time-budget StorageHousekeepingController entity-cache-threshold StorageEntityCacheEvaluator entity-cache-timeout StorageEntityCacheEvaluator data-file-minimum-size StorageDataFileEvaluator data-file-maximum-size StorageDataFileEvaluator data-file-minimum-use-ratio StorageDataFileEvaluator data-file-cleanup-head-file StorageDataFileEvaluator","title":"Properties","component":"manual","version":"5.0","name":"properties","url":"/manual/5.0/storage/configuration/properties.html","titles":[{"text":"Detailed Description","hash":"_detailed_description","id":1},{"text":"channel-count","hash":"channel-count","id":2},{"text":"housekeeping-interval","hash":"housekeeping-interval","id":3},{"text":"housekeeping-time-budget","hash":"housekeeping-time-budget","id":4},{"text":"data-file-minimum-size","hash":"data-file-minimum-size","id":5},{"text":"data-file-maximum-size","hash":"data-file-maximum-size","id":6},{"text":"data-file-minimum-use-ratio","hash":"data-file-minimum-use-ratio","id":7},{"text":"Involved Types","hash":"_involved_types","id":8}]},"38":{"id":38,"text":"Using a Storage Live File Provider (one.microstream.storage.types.StorageLiveFileProvider) allows to specify the location and naming rules for all storage related files. Available properties are: Property Description storage-directory The Microstream storages location base directory. Contains channel directories and type dictionary file. deletion-directory If configured, the storage will not delete files. Instead of deleting a file it will be moved to this directory. truncation-directory If configured, files that will get truncated are copied into this directory. channel-directory-prefix Channel directory prefix string storage-file-prefix Storage file prefix string storage-file-suffix storage file extension transactions-file-prefix transactions file prefix transactions-file-suffix transaction file extension type-dictionary-file-name filename of the type dictionary StorageFileNameProvider fileNameProvider = StorageFileNameProvider.Builder() .setChannelDirectoryPrefix(\"canal_\") .setDataFilePrefix (\"canal_\") .setDataFileSuffix (\".bin\") .setTransactionsFilePrefix(\"events_\") .setTransactionsFileSuffix(\".bin\") .setTypeDictionaryFileName(\"typeDictionary.txt\") .createFileNameProvider () ; NioFileSystem fileSystem = NioFileSystem.New(); StorageLiveFileProvider fileProvider = Storage .FileProviderBuilder (fileSystem) .setDirectory (fileSystem.ensureDirectoryPath(WORKINGDIR)) .setDeletionDirectory (fileSystem.ensureDirectoryPath(DELETIONDIR)) .setTruncationDirectory(fileSystem.ensureDirectoryPath(TRUNCATIONDIR)) .setFileNameProvider (fileNameProvider) .createFileProvider () ;","title":"Storage Files and Directories","component":"manual","version":"5.0","name":"storage-files-and-directories","url":"/manual/5.0/storage/configuration/storage-files-and-directories.html","titles":[]},"39":{"id":39,"text":"Channels are the IO threads used by the MicroStream storage engine. A single channel represents the unity of a thread, a storage directory and cached data. Increasing the number of channels means to run more IO threads. The channel count is an important configuration value that impacts to IO performance. For the channel configuration the following configuration properties are available: Property Description channel-count The number of channels that MicroStream will use. Must be 2^n channel-directory-prefix The channel directory will be prefix+channelNumber e.g. \"ch_0\" if prefix is \"ch_\" data-file-prefix Default is \"channel_\" data-file-suffix Default is \".dat\" Channel file size configuration is done by the the Storage Data File Evaluator. They can be set by microstream-storage-embedded-configuration API: Java EmbeddedStorageManager storageManager = EmbeddedStorageConfigurationBuilder.New() .setChannelCount(4) .setChannelDirectoryPrefix(\"channel_\") .setDataFilePrefix(\"channel_\") .setDataFileSuffix(\".bin\") .createEmbeddedStorageFoundation() .createEmbeddedStorageManager(); XML INI channel-count = 4 channel-directory-prefix = prefix data-file-prefix = channel_ data-file-suffix = .dat Or by setting a StorageFileProvider using the EmbeddedStorageFoundation factory NioFileSystem fileSystem = NioFileSystem.New(); EmbeddedStorageManager storage = EmbeddedStorage.Foundation( Storage.ConfigurationBuilder() .setChannelCountProvider(Storage.ChannelCountProvider(4)) .setStorageFileProvider( StorageLiveFileProvider.Builder() .setDirectory(fileSystem.ensureDirectoryPath(\"storage\")) .createFileProvider() ) .createConfiguration() ) .start(); See also: Configuration","title":"Using Channels","component":"manual","version":"5.0","name":"using-channels","url":"/manual/5.0/storage/configuration/using-channels.html","titles":[{"text":"Channel Usage","hash":"_channel_usage","id":1},{"text":"Channel Configuration","hash":"_channel_configuration","id":2}]},"40":{"id":40,"text":"In certain environments or setups it is necessary to provide specific ClassLoader instances. This can be done by customizing the connection foundation. If a single ClassLoader is sufficient, just create a new provider by handing over the instance: EmbeddedStorageManager storage = EmbeddedStorage.Foundation(Paths.get(\"mydb\")) .onConnectionFoundation(cf -> cf.setClassLoaderProvider(ClassLoaderProvider.New(myClassLoader)) ) .start(); Or return a ClassLoader depending on the requested type: EmbeddedStorageManager storage = EmbeddedStorage.Foundation(Paths.get(\"mydb\")) .onConnectionFoundation(cf -> cf.setClassLoaderProvider(typeName -> { if(typeName.startsWith(\"com.company.module1.\")) { return module1ClassLoader; } if(typeName.startsWith(\"com.company.module2.\")) { return module2ClassLoader; } return ClassLoader.getSystemClassLoader(); }) ) .start(); Most application servers load the session’s classes with the context class loader. Just use the one of the current thread: EmbeddedStorageManager storage = EmbeddedStorage.Foundation(Paths.get(\"mydb\")) .onConnectionFoundation(cf -> cf.setClassLoaderProvider(ClassLoaderProvider.New( Thread.currentThread().getContextClassLoader() )) ) .start();","title":"Custom Class Loader","component":"manual","version":"5.0","name":"custom-class-loader","url":"/manual/5.0/storage/customizing/custom-class-loader.html","titles":[{"text":"Class Loader in Application Server","hash":"_class_loader_in_application_server","id":1}]},"41":{"id":41,"text":"In addition to the methods for legacy type mapping described in chapter Legacy Type Mapping there is also the possibility to implement custom legacy type handlers. Those handlers are the most flexible way to do the mapping from old to new types. The basic interface that has to be implemented is one.microstream.persistence.types.PersistenceLegacyTypeHandler. Fortunately the standard persistence implementation provides the abstract class one.microstream.persistence.binary.types.BinaryLegacyTypeHandler.AbstractCustom that should be sufficient to start with a custom implementation in most cases. See the example customLegacyTypeHandler on GitHub Please note the this example requires manual code modifications as described in it’s main class.","title":"Custom Legacy Type Handler","component":"manual","version":"5.0","name":"custom-legacy-type-handler","url":"/manual/5.0/storage/customizing/custom-legacy-type-handler.html","titles":[]},"42":{"id":42,"text":"Implementing the PersistenceEagerStoringFieldEvaluator interface allows you to handle the eager/lazy storing behavior of any known member. The default implementation of the MicroStream engine threads all fields as lazy storing. See Lazy and Eager Storing for details on lazy and eager storing. The PersistenceEagerStoringFieldEvaluator has only one method to be implemented: public boolean isEagerStoring(Class t, Field u) return true if the field has to be eager, otherwise return false. public class CustomEagerStoringFieldEvaluator implements PersistenceEagerStoringFieldEvaluator { @Override public boolean isEagerStoring(Class clazz, Field field) { if(clazz == MyClass.class && field.getName().equals(\"eagerField\") { return true; } return false; } } To register the customized PersistenceEagerStoringFieldEvaluator add it using the one.microstream.persistence.types.PersistenceFoundation.setReferenceFieldEagerEvaluator(PersistenceEagerStoringFieldEvaluator) method during the storage initialization. NioFileSystem fileSystem = NioFileSystem.New(); EmbeddedStorageManager storage = EmbeddedStorage .Foundation(fileSystem.ensureDirectoryPath(WORKINGDIR)) .onConnectionFoundation(f -> { f.setReferenceFieldEagerEvaluator(new CustomEagerStoringFieldEvaluator()); }) .start(ROOT) ;","title":"Custom Storing Behavior","component":"manual","version":"5.0","name":"custom-storing-behavior","url":"/manual/5.0/storage/customizing/custom-storing-behavior.html","titles":[]},"43":{"id":43,"text":"Custom type handlers allow taking control over the storing and loading procedure of specific java types. This is useful to optimize the performance for storing complex objects or in the rare case that it is not possible to store a type with the default type handlers. There are two strategies for a simplified type handler implementation. Implementing a class that extends CustomBinaryHandler and defines a sequence of BinaryFields via the #Field~ static pseudo-constructor methods. Everything else like setting the name, calculating the binary offsets, etc. is then done implicitly via reflection. Example on GitHub This example implements a custom type handler for the java.awt.image.BufferedImage class. Instead of storing the rather complex object structure of that class the image is serialized as PNG image format using javax.imageio.ImageIO into a byte array. This byte array is then stored by MicroStream. The custom type handler must be registered in the CustomTypeHandlerRegistry to enable it: EmbeddedStorageManager storage = EmbeddedStorage .Foundation(WORKINGDIR) .onConnectionFoundation(f -> f.registerCustomTypeHandlers(new CustomBufferedImageHandler()) ) .start(ROOT); Implementing a class can be skipped altogether by using the method Binary#TypeHandler and passing the BinaryFields directly. Registering such a generically created TypeHandler is not required, either, since Version 3 of MicroStream brought a solution to just define a static method in the entity class that will be recognized and used by MicroStream. The following is a simple technical example on how a custom binary handler can be easily defined and technically leveraged to optimize storage behavior. E.g. imagine having millions of such objects that now only create 1 database record with a fraction of the required storage space instead of 4 records but hold the same information. public class Employee { /* * Fields with primitive data are (for whatever reason, e.g. project * design rules) all object types, but records should be stored as * efficient as possible, i.e. without overhead of references and value objects. * * MicroStream's generic type analysis does not know of this and hence cannot * do it. But defining a custom type handler can */ String id ; Double salary ; Date dateOfBirth; // constructor, getters, setters, etc /* * The entity class must just contain \"any\" method returning a suitable type * handler and MicroStream will recognize it and use the returned handler * automatically. * * Type type handler just needs to specify the entity class and define a list * of fields comprised of (name, getter, setter) in arbitrary order. */ static BinaryTypeHandler provideTypeHandler() { return Binary.TypeHandler( Employee.class, Binary.Field_long(\"id\", e -> Long.parseLong(e.id), (e, value) -> e.id = String.valueOf(value) ), Binary.Field_long(\"dateOfBirth\", e -> e.dateOfBirth.getTime(), (e, value) -> e.dateOfBirth = new Date(value) ), Binary.Field_double(\"salary\", e -> e.salary.longValue(), (e, value) -> e.salary = Double.valueOf(value) ) ); } } Full example is available on GitHub.","title":"Custom Type Handler","component":"manual","version":"5.0","name":"custom-type-handler","url":"/manual/5.0/storage/customizing/custom-type-handler.html","titles":[{"text":"Implementation","hash":"_implementation","id":1},{"text":"A Custom Binary Handler","hash":"_a_custom_binary_handler","id":2},{"text":"A Static Provider Method","hash":"_a_static_provider_method","id":3}]},"44":{"id":44,"text":"When a reference to the loading storage is needed in entities, e.g. usage of different tenants or to store its internal state in a tailored fashion, this can be done by this little trick. If an entity type contains one or more transient fields with field type compatible to Persister, the updating processing during loading will set the Persister instance (e.g. an EmbeddedStorageManager instance) used to load the entity instance to those fields. The fields must be transient to exclude them from the persistent form of the entity. Checking for transient fields is only the default implementation. The checking logic can be customized via PersistenceFoundation#setFieldEvaluatorPersistable. A more precise check for Persister fields can be customized via PersistenceFoundation#setFieldEvaluatorPersister. Note, however, that the check for compatibility with the Persister type is done in any case to avoid inconsistencies/crashes. If no applicable field is found, nothing happens and no additional meta data is kept in memory. This feature is completely optional. class MyEntity { String name ; int value; transient EmbeddedStorageManager storage; } Upon loading an instance of class MyEntity, a reference to the EmbeddedStorageManager used to load it is set to its field storage.","title":"Optional Storage Manager Reference in Entities","component":"manual","version":"5.0","name":"optional-storage-manager-reference-in-entities","url":"/manual/5.0/storage/customizing/optional-storage-manager-reference-in-entities.html","titles":[]},"45":{"id":45,"text":"MicroStream connects your application’s entity graph residing in memory to a physical form of data (i.e. persistent data) to/from which entity data is stored/loaded as required. MicroStream uses the common concept of Lazy Loading, allowing you to define which parts of your data (entity sub-graphs) are loaded only when required instead of eagerly at startup. A few well-placed lazy references in your entity model make your application load only a tiny bit of \"head\" entities at startup time and load everything else later on demand. This allows the handling of arbitrarily big databases with relatively small memory requirements.","title":"Data Management","component":"manual","version":"5.0","name":"data-management","url":"/manual/5.0/storage/faq/data-management.html","titles":[{"text":"Where is the data of my database located","hash":"_where_is_the_data_of_my_database_located","id":1},{"text":"What if my database is really big?","hash":"_what_if_my_database_is_really_big","id":2}]},"46":{"id":46,"text":"No. MicroStream allows you to store any Java object. Instances of any and all types can be handled, there are no special restrictions like having to implement an interface, using annotations or having a default constructor (see POJO). Only types bound to JVM-internals like Thread, IO-streams and the like are deliberately excluded from being persistable since they could not be properly recreated upon loading, but such instances should not be part of entity data models, anyway. During initialization, MicroStream automatically checks if your runtime entity classes are still matching the persistent data. Mismatches are automatically mapped when loading data based on predefined rules that you can extend and overwrite on a per-case basis if needed. For more information, see Legacy Type Mapping","title":"Data Model","component":"manual","version":"5.0","name":"data-model","url":"/manual/5.0/storage/faq/data-model.html","titles":[{"text":"Do I have to adapt my object-model to MicroStream?","hash":"_do_i_have_to_adapt_my_object_model_to_microstream","id":1},{"text":"What if I have to change my entity classes?","hash":"_what_if_i_have_to_change_my_entity_classes","id":2}]},"47":{"id":47,"text":"MicroStream stores persistent data in a physical form, typically in native file-system files. Yes, as many as you like. Each MicroStream instance represents one coherent entity graph of persistent data. Yes. This is already done automatically. The minimum and maximum size of every partial file can be configured, although this is a very technical detail that should not be relevant in most cases. At any given time, only one JVM process may directly access the files representing a unique set of data. Such a restriction is crucial for the correct execution of any application: changes to an application’s persistent data have to be guarded by the rules of the application’s business logic, i.e. the process that currently runs the application. Allowing another process to bypass these rules would eventually result in catastrophic consistency errors. The requirement to distribute an application over multiple processes must be solved by a clustering approach (e.g. by distributing logic AND persistent data over multiple processes or by having one process to serve as the data master for multiple worker processes).","title":"File Storage","component":"manual","version":"5.0","name":"file-storage","url":"/manual/5.0/storage/faq/file-storage.html","titles":[{"text":"Where does MicroStream store persistent data?","hash":"_where_does_microstream_store_persistent_data","id":1},{"text":"Can my application use more than one MicroStream instance?","hash":"_can_my_application_use_more_than_one_microstream_instance","id":2},{"text":"Is it possible to split the file-storage into many single files?","hash":"_is_it_possible_to_split_the_file_storage_into_many_single_files","id":3},{"text":"May multiple JVM processes access the same MicroStream database?","hash":"_may_multiple_jvm_processes_access_the_same_microstream_database","id":4}]},"48":{"id":48,"text":"Yes, all jars bring the necessary module-info class, in the multi-version sub-directory in the META-INF folder. Meaning, despite MicroStream is compiled with Java 8, it is fully compatible with the JMS. Yes, but due to reflection restrictions of records introduced in Java 15 an export has to be added to the VM parameters: --add-exports java.base/jdk.internal.misc=ALL-UNNAMED","title":"Java Features","component":"manual","version":"5.0","name":"java-features","url":"/manual/5.0/storage/faq/java-features.html","titles":[{"text":"Does MicroStream work with the Java Module System (Jigsaw)?","hash":"_does_microstream_work_with_the_java_module_system_jigsaw","id":1},{"text":"Can MicroStream handle Records?","hash":"records","id":2}]},"49":{"id":49,"text":"Yes. In fact, every storing of data is executed as a transaction, an atomic all-or-nothing action. When one or more entities are stored, their data is collected into a continuous block of bytes and that block is written to the physical form (the \"files\") in one fell swoop. Any problem during the IO-operation causes the whole block to be deleted (rolled back). Yes. The storing and loading process can be parallelized by using multiple threads and thus be strongly accelerated. There is no limitation on how many threads can be used, apart from the mathematical constraint that the thread count must be a power of 2 (1, 2, 4, 8, 16, etc.). Yes. There are currently two options available to create backups: An on-the-fly backup that copies and validates stored entity data after it has been written and the possibility to export all database files to a target location (which is in fact just a low-level file copying, but executed in a concurrency-safe way). Yes. MicroStream provides a per-type export of binary data and a utility to convert its binary data into the CSV format. The other way around (convert CSV to binary an import binary files) is also possible. No, because it doesn’t need to. Such concerns are long covered by the application itself, with the DBMS usually being degraded to only being the application’s exclusive database. Thus, all that is needed for a modern business application is just an application-exclusive data storage solution, which is exactly what MicroStream is. Yes, if the data is structured in a format conforming to the entity classes and with references being represented in globally unique and bijective numbers. How hard that is for a given database depends on its specifics, but it can be as easy as executing one generically created SELECT per table. Yes, since Version 4.1 the released jar files contain the necessary OSGi Headers. Also a P2 Update Site distribution is available at: https://repo.microstream.one/repository/update-site/05.00.02-MS-GA","title":"Miscellaneous","component":"manual","version":"5.0","name":"miscellaneous","url":"/manual/5.0/storage/faq/miscellaneous.html","titles":[{"text":"Are transactions possible in MicroStream?","hash":"_are_transactions_possible_in_microstream","id":1},{"text":"Is MicroStream multi-threaded?","hash":"_is_microstream_multi_threaded","id":2},{"text":"Does MicroStream support a backup strategy?","hash":"_does_microstream_support_a_backup_strategy","id":3},{"text":"Does MicroStream provide data export/import functionality?","hash":"_does_microstream_provide_data_exportimport_functionality","id":4},{"text":"Does MicroStream provide a user management, authentication and authorization etc., like conventional DBMS ?","hash":"_does_microstream_provide_a_user_management_authentication_and_authorization_etc_like_conventional_dbms","id":5},{"text":"Is it possible to migrate an existing database to MicroStream?","hash":"_is_it_possible_to_migrate_an_existing_database_to_microstream","id":6},{"text":"Is MicroStream usable in an OSGi Environment?","hash":"_is_microstream_usable_in_an_osgi_environment","id":7}]},"50":{"id":50,"text":"If one or more fields in a class have changed, the data structure of this class doesn’t match anymore with the records in the database. This renders the application and the database incompatible. It’s like in an IDE. You change the structure of a class and the tooling takes care of the rest. Problem is, in a database, the \"rest\" can be, in some circumstances, several gigabytes or even more, that have to be refactored and written again. It’s one way to do it, but there are better alternatives. At best, the data is transformed when it’s accessed only. The old (legacy) type data is being mapped to the new type when it’s being loaded, hence: Legacy Type Mapping. Nothing needs to be rewritten. All records are, as they were saved, compatible with all other versions of their type. Simply by mapping while loading. What has to be done to achieve this? In the most common cases, nothing! The heuristic attempts to automatically detect which fields are new, have been removed, reordered or altered. Contact.java (old) public class Contact { String name ; String firstname; int age ; String email ; String note ; Object link ; } Contact.java (new) public class Contact { String firstname ; // moved String lastname ; // renamed String emailAddress ; // renamed String supportNode ; // renamed PostalAddress postalAddress; // new int age ; // moved } Console Output ---------- Legacy type mapping required for legacy type 1000055:Contact to current type 1000056:Contact Fields: java.lang.String Contact#firstname -1.000 ----> java.lang.String Contact#firstname java.lang.String Contact#name -0.750 ----> java.lang.String Contact#lastname java.lang.String Contact#email -0.708 ----> java.lang.String Contact#emailAddress java.lang.String Contact#note -0.636 ----> java.lang.String Contact#supportNode [***new***] PostalAddress Contact#postalAddress int Contact#age -1.000 ----> int Contact#age java.lang.Object Contact#link [discarded] --- Write 'y' to accept the mapping. The fields in the Contact entity class have been renamed, reordered, one was removed, one is new. What the heuristic is doing now is something like this: String firstname is equal in both classes, so it has to be the same, pretty much as int age. name and lastname is pretty similar, type is the same too. If there is nothing better for the two, they probably belong together. Same with the other two fields. In the end, the ominous link and postalAddress remain. The heuristic can not make sense of that, so it assumes that one thing falls away and the other one is added. In this particular example, that worked perfectly. Well done, heuristic. But: Just as people can make mistakes in estimating similarities (\"I would have thought …​\"), even programs can make mistakes as soon as they logically go on thin ice. There is nothing more with absolute correctness that you actually know from (bug-free) software. Such a similarity matching will be correct in the most cases, but sometimes it will also fall by the wayside. Example: perhaps only PostalAddress instances were referenced in the application under link and the two fields would actually be the same, only now properly typed and named. How should heuristics know that? Nobody could know that either, if he is not privy to the details of the concrete application. That’s why Legacy Type Mapping has two mechanisms that prevent things from going wrong: A callback interface is used to create the desired mapping result: PersistenceLegacyTypeMappingResultor Optionally, an explicit mapping can be specified, which is then preferred to the heuristic approach. If you do not want that, you can simply set another resultor. Like in this example each suspected mapping is submitted once to the user for control in the console. This is done with the InquiringLegacyTypeMappingResultor. Maybe even one, where the user can \"rewire\" the mapping itself, write out the mapping, and then return an appropriate result. EmbeddedStorageFoundation foundation = EmbeddedStorage.Foundation(myDataDir); foundation.getConnectionFoundation().setLegacyTypeMappingResultor( InquiringLegacyTypeMappingResultor.New( PersistenceLegacyTypeMappingResultor.New() ) ); EmbeddedStorageManager storageManager = foundation.createEmbeddedStorageManager(myRoot).start(); All you need is two columns of strings: from old to new. By default MicroStream uses a CSV file, but you can also write something else. In the end, a lot of string pairs for \"old → new\" mappings have to come into the program somewhere. The concept is simple: If there are two strings, this is interpreted as a mapping from an old thing to a new thing. If the second value is missing, it is interpreted as an old thing to be deleted. Missing the first value, then it’s as a new thing. Why call it \"thing\"? Because this applies to several structural elements: Constant identifier Class names Field names Example: count; articleCount means: the field named earlier count is called articleCount in the current version of the class. count; means: the early field count should be ignored during the mapping. More specifically, the values ​​of this field per record. ;articleCount means, this is a newly added field, DO NOT try to match it with anything else heuristically. You can also mix explicit mapping and heuristics. Only explicitly specify so many changes until the analysis gets the rest right by itself. That means you never have to specify the annoying trivial cases explicitly. Only the tricky ones. Usually, nothing should be necessary at all, or maybe a view indications at most to avoid mishaps. However, those who strictly prefer to make any change explicitly, instead of trusting a \"guessing\" software, can also do that. No problem. For class names, the three variants map, add and remove are somewhat tricky in meaning: Map is just old → new, same as with fields. To make an entry for a new class doesn’t make sense. It’s covered by the new class itself. You can do it, but it has no effect. Marking a removed class as deleted makes no sense either, except one special case. It is not required to specify the fields mapping of mapped classes if the mapping heuristic can do a correct field mapping. Especially if classes have been renamed only. Classes are simply referred to by their full qualified class name: com.my.app.entities.Order In some cases you need to specify the exact Version of the class, then the TypeId has to be prepended: 1012345:com.my.app.entities.Order Mapping from old to new: com.my.app.entities.Order;com.my.app.entities.OrderImplementation For fields it’s a bit more complex. To unambiguously refer a field, the full qualified name of its defining class has to be used. com.my.app.entities.Order#count;com.my.app.entities.Order#articleCount The # is based on official Java syntax, like e.g. in JavaDoc. If inheritance is involved, which must be uniquely resolved (each class in the hierarchy can have a field named \"count\"), you must also specify the declaring class. Like this: com.my.app.entities.Order#com.my.app.entities.ArticleHolder#count; ⤦ com.my.App.entities.Order#com.my.app.entities.ArticleHolder#articleCount A simple example: OldContact.java package com.my.app.entities; public class OldContact { String name ; String firstname; int age ; String email ; String note ; Object link ; // to be discarded } NewContact.java package com.my.app.entities; public class NewContact { String firstname ; // moved String lastname ; // renamed String emailAddress ; // renamed String supportNote ; // renamed PostalAddress postalAddress; // new int age ; // moved } refactorings.csv old current com.my.app.entities.OldContact com.my.app.entities.NewContact com.my.app.entities.OldContact#firstname com.my.app.entities.NewContact#firstname com.my.app.entities.OldContact#name com.my.app.entities.NewContact#lastname com.my.app.entities.OldContact#email com.my.app.entities.NewContact#emailAddress com.my.app.entities.OldContact#note com.my.app.entities.NewContact#supportNote com.my.app.entities.NewContact#postalAddress com.my.app.entities.OldContact#age com.my.app.entities.NewContact#age com.my.app.entities.OldContact#link EmbeddedStorageFoundation foundation = EmbeddedStorage.Foundation(dataDir); foundation.setRefactoringMappingProvider( Persistence.RefactoringMapping(Paths.get(\"refactorings.csv\")) ); EmbeddedStorageManager storageManager = foundation.createEmbeddedStorageManager(root).start(); So far so good, all classes and fields are getting mapped, automatically or manually. But what about the data? How are the values getting transformed from old to new? Technically speaking it’s done fully automatic. But there are some interesting questions: What if the primitive types changes? What if primitives change to references and vice versa? How fast is it? Let’s say int to float. Just to copy the four bytes would yield wrong results. It has to be converted, like float floatValue = (float)intValue; Can it be done? Yes, fully automatic. The class BinaryValueTranslators does the job for you, it has a converter function from each primitive to another. Currently MicroStream supports conversion between primitives and their wrapper types, and vice versa. When converting a wrapper to a primitive, null is converted to 0. If you need special conversions between object types, you can add custom BinaryValueSetter for that, see customizing. How fast is that? The type analysis happens only once during initialization. If no exception occurs, the Legacy Type Mapping is ready-configured for each necessary type and will then only be called if required. For normal entity classes that are parsed by reflection, legacy type mapping loading is just as fast as a normal load. An array of such value translator functions is put together once and they are run through each time they are loaded. With legacy mapping, only the order and the target offsets are different, but the principle is the same as with normal loading. For custom handlers an intermediate step is necessary: ​​First put all the old values ​​together in an order that the custom handler expects and then read the binary data normally, as if loading a record in the current format. That’s necessary because MicroStream can’t know what such a custom handler does internally. If someone ever uses such a custom handler, the small detour is not likely to be noticeable in terms of performance. And if it should be the case and it has a negative effect on the productive operation: No problem, because: Of course you can also write a custom legacy type handler. It would run at full speed even with tricky special cases. Of course there is the possibility, as always, of intervening in the machinery massively with customizing. If you need the highest possible performance for some cases, or for logging / debugging, or anyway: Register any value translator implementations. In the simplest case this is 1 line of code, so do not worry. Being able to specify refactoring mapping in a different way than a CSV file is another example. You can even customize (extend or replace) the strategy that is looked up in refactoring mapping. Furthermore, you can also replace the heuristic logic with your own. This is easier than it sounds. This is just a primitive little interface (PersistenceMemberSimilator) and the default implementation thereof calls e.g. just a Levenshtein algorithm for names. You can certainly do that 10 times more clever. Or \"more appropriate\" for a particular application or programming style. E.g. utilize annotations. The basic statement is: If there is a problem somewhere, whether with the heuristic or a special case request or performance problem loading a gazillion entities all at once, or if there is a need for debugging in depth or something like that: do not panic. Most likely, this is easily possible with a few lines of code. Customizing examples You can not just mark classes as deleted. As long as there are records of a certain type in the database, the corresponding class must also exist so that the instances from the database can be loaded into the application. If there are no more records, then that means that there are only a few bytes of orphaned description in the type dictionary, but nobody cares. Is it possible to delete it by hand (or rather not, there are good reasons against it) or you can just ignore it and leave it there forever. In both cases, you must not mark a class as deleted. Now the special case: In the entity graph (root instances and all recursively reachable instances from there) all references to instances of a certain type are filled in. It’s done by the application logic or possibly by a specially written script. That is, all instances of this type are unreachable. No instance is available, no instance can ever be reloaded. This means that the type is \"deleted\" from the database at the logical level. One does not have to register anywhere, that is implicitly just like that. You can actually delete the corresponding Java class from the application project because it will never be needed again during the loading process at runtime. So far so good. There is only one problem: even if the instances are never logically accessible again: the data records are still around in the database files. The initialization scans over all database files, registers all entities, collects all occurring TypeIds and ensures for every TypeId that there is a TypeHandler for it. If necessary, a LegacyTypeHandler with mapping, but still: there must be a TypeHandler for each TypeId. And a TypeHandler needs a runtime type. That is, ass-backwards, over records that are logically already deleted, but only physically still lying around, now it is again enforced that the erasable entity class must be present. Bummer. One can prevent this: there is a \"cleanup\" function in the database management logic, which cleans up all logical gaps in the database files (actually copies all non-gaps into a new file and thus deletes the old file altogether). You would have to call it, then all physical occurrences of the unreachable records disappear and you could easily delete the associated class. But that is annoying. That is why it makes sense for these cases - and only for them - to do the following: If you as a developer are absolutely sure that no single instance of a given class is ever reachable again, i.e. must be loaded, then you can mark a type as \"deleted\" (rather \"unreachable\") in the refactoring mapping. Then the Type Handling will create a dummy TypeHandler that does not need a runtime class. See PersistenceUnreachableTypeHandler. But be careful: if you are mistaken and an instance of such a type is still referenced somewhere and eventually loaded later at runtime, then the Unreachable handler will throw an exception. At some point during the runtime of the application, not even during initialization. The cleanup provides real security: remove all logical gaps and if then with a deleted class no more error in the initialization occurs, it is really superfluous. Any ideas, such as simply returning null in the dummy type handler instead of an instance, are a fire hazard: it may dissolve some annoying situations pleasantly, but it would also mean that existing datasets, potentially entire subgraphs, become hidden from the application. Nevertheless, the database would continue to drag them along, perhaps becoming inexplicably large, and any search for the reason would yield nothing, because the dummy type handler keeps the data records secret. Shortsighted great, but catastrophic in the long run. That’s not good. The only clean solution is: you have to know what to do with your data model. As long as there are still available instances, they must also be loadable. The annoying special case above can be defused without side effects. But it can not be more than that, otherwise it will get rid of the chaos, problems and lost confidence in the correctness of the database solution.","title":"Legacy Type Mapping","component":"manual","version":"5.0","name":"index","url":"/manual/5.0/storage/legacy-type-mapping/index.html","titles":[{"text":"Automatic Mapping","hash":"_automatic_mapping","id":1},{"text":"Explicit Mapping","hash":"_explicit_mapping","id":2},{"text":"Explicit Mapping of Classes","hash":"_explicit_mapping_of_classes","id":3},{"text":"Explicit Mapping Syntax","hash":"_explicit_mapping_syntax","id":4},{"text":"Value Conversion","hash":"_value_conversion","id":5},{"text":"Value Conversion of Primitives","hash":"value-conversion-of-primitives","id":6},{"text":"Value Conversion of References / Objects","hash":"value-conversion-of-references","id":7},{"text":"Performance","hash":"performance","id":8},{"text":"Customizing","hash":"customizing","id":9},{"text":"Special Case: Deleted Class","hash":"special-case-deleted-class","id":10}]},"51":{"id":51,"text":"Here is an overview of how to enable and configure different levels of user interaction for the Legacy Type Mapping. Somewhere you have a foundation instance, a foundation in where everything is configured, from which the StorageManager is created. EmbeddedStorageFoundation foundation = EmbeddedStorage.Foundation(); // or from somewhere else It itself contains a foundation for connections. To access the inner thing needs a little detour. Incidentally, that’s not a JDBC connection, but this is just one thing that creates helper instances like Storer and Loader. Because Legacy Type Mapping affects loading, it has to go in there. Either you access it directly, like this: EmbeddedStorageConnectionFoundation f = foundation.getConnectionFoundation(); Or like this, that’s better for method chaining. foundation.onConnectionFoundation(f -> { ... }); If you have that, the configuration for the Legacy Type Mapping callback logic is just a one liner: f.setLegacyTypeMappingResultor(...); Default PersistenceLegacyTypeMappingResultor.New() That’s just the necessary logic, without anything further. If you do not change anything, this is done by default. With Console Output PrintingLegacyTypeMappingResultor.New(PersistenceLegacyTypeMappingResultor.New()) That wraps a printer around the necessary logic. All these storage and persistence classes are nothing sacred or super-duper intertwined or anything. These are just interfaces and if you plug in another implementation then it will be used. Inquiry InquiringLegacyTypeMappingResultor.New(PersistenceLegacyTypeMappingResultor.New()) Resultor which asks the user to apply. More customization is possible, see below. And so on With the implementation of just one single interface method, you can build anything else you can imagine. For example, logging to a file instead of the console. Or in the personally preferred logging framework. Or write confirmed mappings into the refactorings file. Everything is possible. For the inquiring implementation (InquiringLegacyTypeMappingResultor) there are a few settings: When should he ask? Always or only if something is unclear. Never does not make any sense of course, then you shouldn’t use it, or alternatively the printing resultor. When is a mapping unclear? If at least one field mapping is not completely clear. A field mapping is clear if: If two fields are exactly the same (similarity 1.0 or 100%) Or if two fields are specified by the explicit mapping. So if all fields are clear according to the above rule, then there is no need to ask. And there is another special case: If a field is discarded that is not explicitly marked as discardable, then as a precaution an inquiry is always done. Although no data is lost, but the data would not be available in the application, so better ask. There are options to control this a bit finer. You can optionally specify a double as a threshold (from 0.0 to 1.0, otherwise Exception): The value determines how similar two matching fields automatically have to be so that they are not inquired. Example: The value is 0.9 (90%), but a match found is only 0.8 (80%) similar. This is according to the specification too little, there must be an inquiry as a precaution. If you specify 1.0, that means: always ask, everything is really perfectly clear. If you enter 0.0, this means: never ask or only for implicitly dropping fields. Looks like this: InquiringLegacyTypeMappingResultor.New( PersistenceLegacyTypeMappingResultor.New()) // implicitely 1.0 InquiringLegacyTypeMappingResultor.New( PersistenceLegacyTypeMappingResultor.New(), 0.7) // 0.7 threshold Here a small example with a Person class. int customerid ; // -> pin String firstname ; // -> firstName String surname ; // -> lastName String comment ; // discarded, NOT new commerceId It should be changed to: Integer pin ; // firstName surname -0,688----> lastName comment -0,750----> commerceId [***new***] address customerid [discarded] customerid and pin are too different to be automatically assigned to each other. Therefore, it is wrongly assumed that customerid is omitted and pin is new. comment and commerceId are surprisingly similar (75%) and are therefore assigned. But that’s not what we want. Incidentally, it would not matter here what is defined as a threshold: customerid would be eliminated by the implicit decision. This is too delicate not to inquire, so it is always necessary to ask. To get the mapping right, you have to specify two entries: customerid is now called pin and comment should be omitted Then the inquiry looks like this: customerid -[mapped]-> pin firstname -0,944----> firstName surname -0,688----> lastName [***new***] commerceId [***new***] address comment [discarded] Due to the explicit mapping from customerid to pin, the similarity does not matter, it is the mapping that matters. To indicate this, it says \"[mapped]\" instead of the similarity. The rest is as usual. Only comment is now \"[discarded]\", according to the mapping. The difference to the above is namely: This is an explicitly predetermined absence. That does not force inquiry. This clears the way for the threshold: If you enter 0.7 or more then you will be asked. As far as everything would be clear, but the mapping of surname to lastName is below the required \"minimum similarity\", so rather ask. If you enter 0.6 or less, you will no longer be asked. Because all assignments are either explicitly specified or they are according to \"minimum similarity\" similar enough to rely on it. A recommendation for a good value for the \"minimum similarity\" is difficult. As soon as one softens rules, there is always the danger of a mistake. See comment example above: is 75% similar to commerceId. Still wrong. Then prefer 80%? Or 90%? Of course it is better, but the danger is still there. If you want to be sure, just make 1.0 or omit the parameter, then by default 1.0 is taken. The most important is the explicit mapping anyway : if \"enough\" is given by the user, there is no need to ask.","title":"User Interaction","component":"manual","version":"5.0","name":"user-interaction","url":"/manual/5.0/storage/legacy-type-mapping/user-interaction.html","titles":[]},"52":{"id":52,"text":"Loading data can be done in two ways, eager and Lazy. The basic, default way of loading is eager loading. This means that all objects of a stored object graph are loaded immediately. This is done during startup of the MicroStream database instance automatically if an already existing database is found. Contrary to lazy loading, eager loading has no requirements to your entity model. To load your data you just need to create an EmbeddedStorageManager instance: EmbeddedStorageManager storage = EmbeddedStorage.start(); After that just get the root instance of your object graph from the StorageManager by calling EmbeddedStorageManager.root() and check for null as this indicates a non-existing database final EmbeddedStorageManager storage = EmbeddedStorage.start(); if(storage.root() == null) { //No existing Database found } else { MyRoot root = (MyRoot) storage.root(); } The full code for the eager loading example is on GitHub.","title":"Loading Data","component":"manual","version":"5.0","name":"index","url":"/manual/5.0/storage/loading-data/index.html","titles":[]},"53":{"id":53,"text":"Based on the REST API we provide a client, which serves a convenient web user interface to browse through the storage data. It is a runnable jar which starts a simple web server which then can be accessed by a browser of your choice. To download it use maven pom.xml one.microstream microstream-storage-restclient-app 05.00.02-MS-GA or this direct link: https://repo.microstream.one/repository/maven-public/one/microstream/storage.restclient.app/05.00.02-MS-GA/storage.restclient.app-05.00.02-MS-GA.jar Start the client. The port parameter is optional, default port is 8080. java -jar storage.restclient.app-05.00.02-MS-GA.jar --port=80 Then just open http://localhost in your browser, select the base URL of the REST service and click connect. Now you can browse through the data of the storage: Or view the statistics:","title":"Client GUI","component":"manual","version":"5.0","name":"client-gui","url":"/manual/5.0/storage/rest-interface/client-gui.html","titles":[]},"54":{"id":54,"text":"The MicroStream Storage isn’t a typical database server with administrative tooling and stuff like that. It is just a Java library which runs embedded in your application. The storage data layer, per default the file system, contains the serialized and persisted data. But it is not really accessible, or more precise, human-readable. Nor do we provide a query language to access the storage data. The Java objects, which reside in memory, are easy to inspect and traverse, e.g. with a debugger. But for various purposes, like monitoring, the requirement to read the actual stored data has come up. Since version 3.0 a REST interface for the storage data is included. It enables you to access the data via REST calls or a convenient user interface. It is made up of the following modules: ArtifactId Description microstream-storage-restadapter Adapter for low-level storage data externalization. Used by the REST service to adapt to a MicroStream Storage. microstream-storage-restservice Abstract REST service interface, which uses the REST adapter to access low level storage data. microstream-storage-restservice-sparkjava REST service implementation which utilizes SparkJava and provides REST endpoints. microstream-storage-restclient Abstract REST client interface, which serves as a Java wrapper for the REST API. microstream-storage-restclient-jersey REST client implementation which utilizes Jersey as a webservice framework. microstream-storage-restclient-app microstream-Executable client app with web user interface, which connects to a REST service.","title":"REST Interface","component":"manual","version":"5.0","name":"index","url":"/manual/5.0/storage/rest-interface/index.html","titles":[]},"55":{"id":55,"text":"[instance-name]/root Returns the name and object id of the current storage root element. Response { name: \"ROOT\", objectId: \"1000000000000000028\" } [instance-name]/object/:objectid Returns description and values of a distinct object. Path parameters Parameter Type Description objectId integer The requested object’s id Query parameters Parameter Type Description Default valueLength integer Limit size of returned value elements, e.g. String values. unlimited fixedOffset integer Fixed size members start offset. 0 fixedLength integer Amount of returned fixed size members. unlimited variableOffset integer Variable size members start offset. 0 variableLength integer Amount of returned variable size members. unlimited references boolean Determines if top-level references of the object should be returned as well. false Response { \"objectId\": \"1000000000000000028\", \"typeId\": \"110\", \"length\": \"0\", \"variableLength\": [ \"3\" ], \"simplified\": false, \"data\": [ [ \"1000000000000000029\", \"1000000000000000030\", \"1000000000000000031\" ] ], \"references\": null } [instance-name]/dictionary Returns the type dictionary as plain text. Response [Type dictionary contents] [instance-name]/maintenance/filesStatistics Returns statistics of the used storage files and channels. Response { \"creationTime\": \"2020-04-15T13:32:26.003Z\", \"channelStatistics\": { \"0\": { \"channelIndex\": 0, \"files\": [ { \"fileNumber\": \"1\", \"file\": \"storage\\\\channel_0\\\\channel_0_1.dat\", \"fileCount\": \"1\", \"liveDataLength\": \"2898\", \"totalDataLength\": \"2930\" } ], \"fileCount\": \"1\", \"liveDataLength\": \"2898\", \"totalDataLength\": \"2930\" } }, \"fileCount\": \"1\", \"liveDataLength\": \"2898\", \"totalDataLength\": \"2930\" }","title":"REST API","component":"manual","version":"5.0","name":"rest-api","url":"/manual/5.0/storage/rest-interface/rest-api.html","titles":[{"text":"GET Root","hash":"_get_root","id":1},{"text":"GET Object","hash":"_get_object","id":2},{"text":"GET Type Dictionary","hash":"_get_type_dictionary","id":3},{"text":"GET Statistics","hash":"_get_statistics","id":4}]},"56":{"id":56,"text":"First of all we have to connect a storage to a REST service. Just add the REST service implementation to your dependencies, the logger is optional. pom.xml one.microstream microstream-storage-restservice-sparkjava 05.00.02-MS-GA org.slf4j slf4j-simple 1.7.30 Now use the resolver to connect the service to a storage, start it, and you’re good to go. EmbeddedStorageManager storage = EmbeddedStorage.start(); if(storage.root() == null) { storage.setRoot(new Object[] { LocalDate.now(), X.List(\"a\", \"b\", \"c\"), 1337 }); storage.storeRoot(); } // create the REST service StorageRestService service = StorageRestServiceResolver.resolve(storage); // and start it service.start(); That’s all you have to do to open the REST endpoints to access the storage data. The base URL of the opened endpoints is per default: http://localhost:4567/microstream/ Internally, there is a REST adapter which opens access to the low-level storage data. This is used by the REST service layer, which is an abstract service interface. The default implementation of it, which uses Sparkjava, is used to open the REST endpoints. We just have to use this one to get started. If you want to change the default port (4567) or instance name (microstream) it can be done by using the rest service implementation directly. The spark service can then be customized by your liking. StorageRestServiceSparkJava service = StorageRestServiceSparkJava.New(storage); service.setSparkService( Service.ignite().port(80) ); service.setInstanceName(\"my-name\"); This will change the base URL to http://localhost/my-name/","title":"Setup","component":"manual","version":"5.0","name":"setup","url":"/manual/5.0/storage/rest-interface/setup.html","titles":[{"text":"REST Service","hash":"_rest_service","id":1},{"text":"Configuration","hash":"_configuration","id":2}]},"57":{"id":57,"text":"MicroStream supports a variety of storage targets. Through an abstracted file system (AFS), it is possible to connect to a lot of different back ends. The AFS allows to use folders and files, like in all common file systems, but with different connectors it is possible to use different solutions as the actual storage. To connect to the local file system use the Java Non-Blocking IO (NIO) connector, which is part of the base module, so no additional dependency is needed. EmbeddedStorage.start(Paths.get(\"path\", \"to\", \"storage\")); Internally this creates and uses a NioFileSystem and is a shortcut for: NioFileSystem fileSystem = NioFileSystem.New(); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"path\", \"to\", \"storage\")); The file system API is the same for all connectors, like for MySQL. This is part of another module. one.microstream microstream-enterprise-filesystem-sql 05.00.02-MS-GA mysql mysql-connector-java 8.0.21 // create JDBC data source MysqlDataSource dataSource = new MysqlDataSource(); dataSource.setUrl(\"jdbc:mysql://host:3306/mydb\"); dataSource.setUser(\"user\"); dataSource.setPassword(\"secret\"); // create sql file system SqlFileSystem fileSystem = SqlFileSystem.New( // use caching connector SqlConnector.Caching( SqlProviderMySql.New(dataSource) ) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"path\", \"to\", \"storage\"));","title":"Storage Targets","component":"manual","version":"5.0","name":"index","url":"/manual/5.0/storage/storage-targets/index.html","titles":[]},"58":{"id":58,"text":"The NIO connector can access the local or mounted file systems, as well as different in-memory file systems. This is probably the easiest way to start, especially for prototyping and testing purposes. For productive use, the other file systems are preferred. NioFileSystem fileSystem = NioFileSystem.New(); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"path\", \"to\", \"storage\")); The local file system is the default setting. If you want to use external configuration, no further action is required.","title":"Local File System","component":"manual","version":"5.0","name":"local-file-system","url":"/manual/5.0/storage/storage-targets/local-file-system.html","titles":[{"text":"Configuration","hash":"_configuration","id":1}]},"59":{"id":59,"text":"In some cases, it can be necessary to store modified encapsulated objects that cannot be a accessed from your code. public class ForeignObject { ... private HiddenObject hidden; ... } In the upper code snippet the \"hidden\" object cannot be accessed by store(myForeignObject.hidden) if no getter is available. To allow such hidden objects to be stored after they have been modified you have to options: Set the global storing strategy of the MicroStream instance to eager storing or Implement and set a custom PersistenceEagerStoringFieldEvaluator for this field. EmbeddedStorageManager storage = EmbeddedStorage.Foundation() .onConnectionFoundation( f -> f.setReferenceFieldEagerEvaluator( new CustomEagerStoringFieldEvaluator() ) ) .start(); To increase performance use immutable sub-graphs as often as possible. Storing those with the provided convenience storing methods or using a thread local storer to insert those sub-graphs concurrently can give a great performance boost.","title":"Best Practice","component":"manual","version":"5.0","name":"best-practice","url":"/manual/5.0/storage/storing-data/best-practice.html","titles":[{"text":"Storing Hidden Encapsulated Objects","hash":"_storing_hidden_encapsulated_objects","id":1},{"text":"Use Immutable data models","hash":"_use_immutable_data_models","id":2}]},"60":{"id":60,"text":"MicroStream is designed to work with object graphs. Thus, storing data means to store an object graph. This includes the object’s value fields and references to other objects. Storing an object will also store all instances referenced by this objects that have not been stored before. While storing your data most of the work MicroStream performs for you. You only need to call the store method on the correct object. The rule is: \"The Object that has been modified has to be stored!\". Storing objects that are not part of an object graph is most likely pointless. See Getting Started how to create a database with a root instance. To store the registered root instance just call the storeRoot() method of a EmbeddedStorageManager instance. // Init storage manager final EmbeddedStorageManager storageManager = EmbeddedStorage.start(root); // Store the root object storageManager.storeRoot(); To store a newly created object, store the \"owner\" of the object. In the example below a new object is created and added to the myObjects list of the root object. Then the modified list gets stored. This will also store the new object. // Add a new data object to the list in root MyData dataItem = new MyData(\"Alice\"); root.myObjects.add(dataItem); // Store the modified list storageManager.store(root.myObjects); Before storing a modified object keep in your mind that the modified object needs to be stored. In case of a value types, like int, it is the object that has the int field as a member: // Modify a value type memeber and store it dataItem.setIntValue(100); storageManager.store(dataItem); Don’t forget immutable objects Immutable objects like String cannot be modified. Assigning a new value to a String does not modify the String object. Instead a new String instance is created and the reference is changed! // Change a string object and store it dataItem.setName(\"Bob\"); storageManager.store(dataItem); The full code for the example is on GitHub.","title":"Storing Data","component":"manual","version":"5.0","name":"index","url":"/manual/5.0/storage/storing-data/index.html","titles":[{"text":"Storing Root Instances","hash":"_storing_root_instances","id":1},{"text":"Storing New Objects","hash":"_storing_new_objects","id":2},{"text":"Storing Modified Objects","hash":"_storing_modified_objects","id":3}]},"61":{"id":61,"text":"The MicroStream engine supports two general storing strategies: lazy and eager storing. By default, MicroStream uses the lazy storing strategy. These storing strategies differ in the way how objects, referenced by the object to be stored are handled if those referenced objects had already been stored. Lazy storing is the default storing mode of the MicroStream engine. Referenced instances are stored only if they have not been stored yet. If a referenced instance has been stored previously it is not stored again even if it has been modified. That’s why modified objects must be stored explicitly. In eager storing mode referenced instances are stored even if they had been stored before. Contrary to Lazy storing this will also store modified child objects at the cost of performance. To use lazy or eager storing explicitly, get an instance of the required Storer and use it’s store methods: Storer storer = storage.createEagerStorer(); storer.store(myData); storer.commit(); Available Storers are: storage.createLazyStorer() storage.createEagerStorer() Standard storing: storage.createStorer() will provide corresponding Storer instances. Beside the 'global' lazy or eager storing strategies MicroStream allows to implement an individual handling for the storing behavior. See PersistenceEagerStoringFieldEvaluator for details.","title":"Lazy and Eager Storing","component":"manual","version":"5.0","name":"lazy-eager-full","url":"/manual/5.0/storage/storing-data/lazy-eager-full.html","titles":[{"text":"Lazy Storing","hash":"_lazy_storing","id":1},{"text":"Eager Storing","hash":"eager-storing","id":2},{"text":"Usage","hash":"_usage","id":3},{"text":"Custom Handling","hash":"_custom_handling","id":4}]},"62":{"id":62,"text":"Beside long store(Object instance) MicroStream provides some convenience methods to store several objects at once: void storeAll(Iterable instances)` Stores the passed instance in any case and all referenced instances of persistable references recursively, but stores referenced instances only if they are newly encountered (e.g. don’t have an id associated with them in the object registry, yet and are therefore required to be handled). This is useful for the common case of just storing an updated instance and potentially newly created instances along with it while skipping all existing (and normally unchanged) referenced instances. List subset = myCollection.getSubset(); subset.foreach(item -> item.modify()); storage.storeAll(subset); long[] storeAll(Object... instances) Convenience method to store multiple instances. The passed array (maybe implicitly created by the compiler) itself is NOT stored. storage.storeAll(itemA, iteamB, iteamC); MicroStream does not provide explicit transactions, every call to a store method is automatically a transaction. A store operation is an atomic all or nothing operation If the store call is successful all data is written to the storage. Otherwise no data is persisted. Partially persisted data will be reverted.","title":"Convenience Methods and Explicit Storing (Transactions)","component":"manual","version":"5.0","name":"transactions","url":"/manual/5.0/storage/storing-data/transactions.html","titles":[{"text":"Convenience Methods","hash":"_convenience_methods","id":1},{"text":"Transactions","hash":"_transactions","id":2}]},"63":{"id":63,"text":"The default MicroStream implementation fully supports the Java transient field modifier. Class members marked transient will not be persisted. public class User { private String username; //do not persist the users password private transient String password; } It is possible to override the default behavior by implementing a custom PersistenceFieldEvaluator. PersistenceFieldEvaluator fieldEvaluator = (clazz, field) -> !field.getName().startsWith(\"_\"); EmbeddedStorageManager storage = EmbeddedStorage.Foundation() .onConnectionFoundation( c -> c.setFieldEvaluatorPersistable(fieldEvaluator) ) .createEmbeddedStorageManager() .start();","title":"Transient Fields","component":"manual","version":"5.0","name":"transient-fields","url":"/manual/5.0/storage/storing-data/transient-fields.html","titles":[]},"64":{"id":64,"text":"By default, the continuous backup is disabled. If enabled the MicroStream instance will clone all changes to another directory. The backup is identical to the primary MicroStream storage. To enable the continuous backup just set the backup directory: With microstream-storage-embedded-configuration API: Java EmbeddedStorageManager storageManager = EmbeddedStorageConfigurationBuilder.New() .setBackupDirectory(\"A safe place\") .createEmbeddedStorageFoundation() .createEmbeddedStorageManager(); XML ... INI backupDirectory = backupDir With MicroStream foundation classes: Java NioFileSystem fileSystem = NioFileSystem.New(); StorageBackupSetup backupSetup = StorageBackupSetup.New( Sorage.BackupFileProviderBuilder(fileSystem) .setDirectory(fileSystem.ensureDirectoryPath(BACKUPDIR)) .setTruncationDirectory(fileSystem.ensureDirectoryPath(TRUNCATIONDIR)) .setDeletionDirectory(fileSystem.ensureDirectoryPath(DELETIONDIR)) .createFileProvider() ); StorageConfiguration configuration = StorageConfiguration.Builder() .setBackupSetup(backupSetup) .setStorageFileProvider(StorageLiveFileProvider.New( fileSystem.ensureDirectoryPath(WORKINGDIR) )) .createConfiguration() ;","title":"Continuous Backup","component":"manual","version":"5.0","name":"continuous-backup","url":"/manual/5.0/storage/configuration/backup/continuous-backup.html","titles":[]},"65":{"id":65,"text":"To issue a full backup of the whole storage to be executed, the EmbeddedStorageManager provides two methods named issueFullBackup. Keep in mind that this could result in a very long running operation, depending on the storage size. Although the full backup may be a valid solution in some circumstances, the continuous backup should be preferred, since it is by far more efficient. EmbeddedStorageManager storage = ...; storage.issueFullBackup( NioFileSystem.New().ensureDirectoryPath(\"full\", \"backup\", \"dir\") ); The backup can be written to any available storage target, not just the local file system.","title":"Full Backup","component":"manual","version":"5.0","name":"full-backup","url":"/manual/5.0/storage/configuration/backup/full-backup.html","titles":[]},"66":{"id":66,"text":"The Lazy class has a .clear() method. When called, the reference held in the Lazy Reference is removed and only the ID is kept so that the instance can be reloaded when needed. Important background knowledge: However, such a clear does not mean that the referenced instance immediately disappears from memory. That’s the job of the garbage collector of the JVM. The reference is even registered in another place, namely in a global directory (Swizzle Registry), in which each known instance is registered with its ObjectId in a bijective manner. This means: if you clear such a reference, but shortly thereafter the Lazy Reference is queried again, probably nothing has to be loaded from the database, but simply the reference from the Swizzle Registry is restored. Nevertheless, the Swizzle Registry is not a memory leak, because it references the instances only via WeakReference. In short, if an instance is only referenced as \"weak,\" the JVM GC will still clean it up. So that the Lazy References do not have to be managed manually, but the whole goes automatically, there is the following mechanism: Each Lazy instance has a lastTouched timestamp. Each .get() call sets it to the current time. This will tell you how long a Lazy Reference has not been used, i.e. if it is needed at all. The LazyReferenceManager audits this. It is enabled by default, with a timeout of 1,000,000 milliseconds, which is about 15 minutes. A custom manager can be set easily, which should happen before a storage is started. LazyReferenceManager.set(LazyReferenceManager.New( Lazy.Checker( Duration.ofMinutes(30).toMillis(), // timeout of lazy access 0.75 // memory quota ) ); The timeout of lazy references is set to 30 minutes, meaning references which haven’t been touched for this time are cleared. In combination with a memory quota of 0.75.","title":"Clearing Lazy References","component":"manual","version":"5.0","name":"clearing-lazy-references","url":"/manual/5.0/storage/loading-data/lazy-loading/clearing-lazy-references.html","titles":[{"text":"Manually","hash":"_manually","id":1},{"text":"Automatically","hash":"automatically","id":2}]},"67":{"id":67,"text":"In this chapter it is explained how Lazy Loading is done with MicroStream. Of course, it’s not really about the technical implementation of procrastination, but about efficiency: why bloat the limited RAM with stuff before you even need it? Classic example: The application has self-contained data areas that contain a large amount of data. The data for an area is not loaded if the area is not worked at all. Instead, you only load a tiny amount of \"head data\" for each area (name or other for displaying purposes) and the actual data only when the application really needs it. E.g. fiscal years with hundreds of thousands or millions of sales. One million revenue records for 2010, one million for 2011, for 2012, etc. In 2019, most of the time only 2019 and 2018 will be needed. The previous few, and the year 2000 sales are not of great interest anymore. Therefore: load data only when needed. Super efficient. For example let’s say the app \"MyBusinessApp\" has a root instance class, looking like this: public class MyBusinessApp { // ... private HashMap businessYears = new HashMap<>(); // ... } The business year hold the turnovers: public class BusinessYear { // ... private ArrayList turnovers = new ArrayList<>(); // ... } This approach would be a problem: During initialization, the root instance would be loaded, from there its HashMap with all BusinessYear instances, each with its ArrayList and thus all conversions. For all years. 20 years of approximately 1 million sales makes 20 million entities, which are pumped directly into the RAM at the start. It does not matter if someone needs it or not. We don’t want it that way. It would be nice if you could simply add a \"lazy\" to the turnover list. And that’s exactly how it works: public class BusinessYear { // ... private Lazy> turnovers = ...; // we will get to that // ... } And bingo, the turnovers are now loaded lazily. Of course, this is no longer an ArrayList field, which is now magically loaded lazy, but this is now a Lazy field and the instances of this type are typed generically to ArrayList . Lazy is just a simple class whose instances internally hold an ID and a reference to the actual thing (here the ArrayList instance). If the internal reference is zero, the reserved ID is used to reload it. If it is not null, it is simply returned. So just a reference intermediate instance. Similar to the JDK’s WeakReference, just not JVM-weak, but storage-lazy. What do you have to do now to get the actual ArrayList instance? ArrayList turnovers = this.turnovers.get(); Just as with WeakReference, or simply as one would expect from a reference intermediate type in general: a simple get method. The .get() call reloads the data as needed. But you do not want to mess around with that yourself. No \"SELECT bla FROM turnovers WHERE ID =\" + this.turnovers.getId(). Since you want to program your application you don' t have to mess around with low-level database ID-loading stuff. That’s what the MicroStream Code does internally. You do not even need to access the ID, you just have to say \"get!\". That’s it. There are different strategies, what you write here. Analogous to the code example before it would be simply: private Lazy> turnovers = Lazy.Reference(new ArrayList<>()); So always a new ArrayList instance, wrapped in a Lazy instance. If the actual ArrayList reference should be null at first, it works the same way: private Lazy> turnovers = Lazy.Reference(null); The this.turnovers.get() also just always returns null. Completely transparent. But you could also do this: private Lazy> turnovers = null; If there is no list, then you do not make any intermediate reference instance for any list. A separate instance for null is indeed a bit …​ meh. But that has a nasty problem elsewhere: this.turnovers.get() does not work then. Because NullPointerException. Anytime you need to write this here, the readability of code is not exactly conducive: return this.turnovers == null ? null : this.turnovers.get(); But there is a simple solution: Just move this check into a static utility method. Just like that: return Lazy.get(this.turnovers); This is the same .get(), just with a static null-check around it. This always puts you on the safe side. For Lazy Loading, simply wrap Lazy<> around the actual field and then call .get() or maybe better Lazy.get(...). It’s as simple as that. The full example can be found on GitHub. Why do you have to replace your actual instance with a lazy loading intermediate instance and fiddle around with generics? Why is not something like this: @Lazy private ArrayList turnovers = new ArrayList<>(); Put simply: If it were just that it would be bare Java bytecode for accessing an ArrayList. There would be no way for a middleware library to get access and look it up and perhaps reload it. What’s written there is an ArrayList reference. There is no lazy anymore. Either, the instance is null, or it is not null. If you wanted to reach in there, you would have to start with bytecode manipulation. Technically possible, but something you really don’t want in your application. So there must always be some form of intermediary. Hibernate solves this through its own collection implementations that do lazy loading internally. Although the lazy loading is nicely hidden in some way (or not, if you need an annotation for that), it also comes with all sorts of limitations. You can only use interfaces instead of concrete classes for collections. At first, the instance is not the one you dictate, the code becomes non-transparent and difficult to debug, you have to use a collection, even if it’s just a single instance, and so on. You want to be able to write anything you want and you want full insight and control (debugability, etc.) over the code. All this can be done with the tiny Lazy Interim Reference class. No restrictions, no incomprehensible \"magic\" under the hood (proxy instances and stuff) and also usable for individual instances.","title":"Lazy Loading","component":"manual","version":"5.0","name":"index","url":"/manual/5.0/storage/loading-data/lazy-loading/index.html","titles":[{"text":"What about the \"…​\" ?","hash":"_what_about_the","id":1},{"text":"In Short","hash":"_in_short","id":2},{"text":"Side Note","hash":"_side_note","id":3}]},"68":{"id":68,"text":"For convenience MicroStream provides Null-safe static access methods for lazy references. Method Description Lazy.get(Lazy) Gets the lazy referenced object, loads it if required. return value: null if the lazy reference itself is null otherwise the referenced object Lazy.peek(Lazy) Get the lazy referenced object if it is loaded, no lazy loading is done. If the object has been unloaded before peek will return null. return value: null if the lazy reference itself is null otherwise the current reference without on-demand loading Lazy.clear(Lazy) Clears the lazy reference if it is not null. All lazy references track the time of their last access (creation or querying) as a timestamp in milliseconds. If an instance is deemed timed out by a LazyReferenzManager its subject gets cleared. The timestamp is currently not public accessible.","title":"Touched Timestamp, Null-Safe Variant","component":"manual","version":"5.0","name":"touched-timestamp-null-safe-variant","url":"/manual/5.0/storage/loading-data/lazy-loading/touched-timestamp-null-safe-variant.html","titles":[{"text":"Null-safe Lazy Reference Access","hash":"_null_safe_lazy_reference_access","id":1},{"text":"Touched Timestamp","hash":"_touched_timestamp","id":2}]},"69":{"id":69,"text":"This is an enterprise feature. one.microstream microstream-enterprise-afs-aws-dynamodb 05.00.02-MS-GA DynamoDbClient client = ...; BlobStoreFileSystem fileSystem = BlobStoreFileSystem.New( DynamoDbConnector.Caching(client) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration AWS DynamoDB can be set as follows. microstream-storage.properties storage-filesystem.aws.dynamodb.credentials.type=static storage-filesystem.aws.dynamodb.credentials.access-key-id=my-access-key-id storage-filesystem.aws.dynamodb.credentials.secret-acces-key=my-secret-access-key storage-filesystem.aws.dynamodb.credentials.region=us-east-1 Property Description endpoint-override The endpoint with which the SDK should communicate. region Configure the region with which the SDK should communicate. If this is not specified, the SDK will attempt to identify the endpoint automatically using the following logic: Check the 'aws.region' system property for the region. Check the 'AWS_REGION' environment variable for the region. Check the {user.home}/.aws/credentials and {user.home}/.aws/config files for the region. If running in EC2, check the EC2 metadata service for the region. credentials.type The type of the credentials provider. Supported values are: \"environment-variables\" Credentials will be loaded from the AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY and AWS_SESSION_TOKEN environment variables. \"system-properties\" Credentials will be loaded from the aws.accessKeyId, aws.secretAccessKey and aws.sessionToken system properties. \"static\" Credentials will be loaded from the credentials.access-key-id and credentials.secret-access-key properties. \"default\" Credentials provider chain that looks for credentials in this order: Java System Properties - aws.accessKeyId and aws.secretKey Environment Variables - AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY Credential profiles file at the default location (~/.aws/credentials) shared by all AWS SDKs and the AWS CLI Credentials delivered through the Amazon EC2 container service if AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\" environment variable is set and security manager has permission to access the variable, Instance profile credentials delivered through the Amazon EC2 metadata service credentials.access-key-id The access key id, used when \"credentials.type\" is \"static\". credentials.secret-access-key The secret access key, used when \"credentials.type\" is \"static\".","title":"AWS DynamoDB","component":"manual","version":"5.0","name":"aws-dynamodb","url":"/manual/5.0/storage/storage-targets/blob-stores/aws-dynamodb.html","titles":[{"text":"Configuration","hash":"_configuration","id":1},{"text":"Supported properties","hash":"_supported_properties","id":2}]},"70":{"id":70,"text":"This is an enterprise feature. one.microstream microstream-enterprise-afs-aws-s3 05.00.02-MS-GA S3Client client = ...; BlobStoreFileSystem fileSystem = BlobStoreFileSystem.New( S3Connector.Caching(client) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration AWS S3 can be set as follows. microstream-storage.properties storage-filesystem.aws.s3.credentials.type=static storage-filesystem.aws.s3.credentials.access-key-id=my-access-key-id storage-filesystem.aws.s3.credentials.secret-acces-key=my-secret-access-key storage-filesystem.aws.s3.credentials.region=us-east-1 Property Description endpoint-override The endpoint with which the SDK should communicate. region Configure the region with which the SDK should communicate. If this is not specified, the SDK will attempt to identify the endpoint automatically using the following logic: Check the 'aws.region' system property for the region. Check the 'AWS_REGION' environment variable for the region. Check the {user.home}/.aws/credentials and {user.home}/.aws/config files for the region. If running in EC2, check the EC2 metadata service for the region. credentials.type The type of the credentials provider. Supported values are: \"environment-variables\" Credentials will be loaded from the AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY and AWS_SESSION_TOKEN environment variables. \"system-properties\" Credentials will be loaded from the aws.accessKeyId, aws.secretAccessKey and aws.sessionToken system properties. \"static\" Credentials will be loaded from the credentials.access-key-id and credentials.secret-access-key properties. \"default\" Credentials provider chain that looks for credentials in this order: Java System Properties - aws.accessKeyId and aws.secretKey Environment Variables - AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY Credential profiles file at the default location (~/.aws/credentials) shared by all AWS SDKs and the AWS CLI Credentials delivered through the Amazon EC2 container service if AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\" environment variable is set and security manager has permission to access the variable, Instance profile credentials delivered through the Amazon EC2 metadata service credentials.access-key-id The access key id, used when \"credentials.type\" is \"static\". credentials.secret-access-key The secret access key, used when \"credentials.type\" is \"static\".","title":"AWS S3","component":"manual","version":"5.0","name":"aws-s3","url":"/manual/5.0/storage/storage-targets/blob-stores/aws-s3.html","titles":[{"text":"Configuration","hash":"_configuration","id":1},{"text":"Supported properties","hash":"_supported_properties","id":2}]},"71":{"id":71,"text":"This is an enterprise feature. one.microstream microstream-enterprise-afs-azure-storage 05.00.02-MS-GA BlobServiceClient client = ...; BlobStoreFileSystem fileSystem = BlobStoreFileSystem.New( AzureStorageConnector.Caching(client) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration Azure Storage can be set as follows. microstream-storage.properties storage-filesystem.azure.storage.credentials.type=basic storage-filesystem.azure.storage.credentials.username=user storage-filesystem.azure.storage.credentials.password=secret Property Description endpoint Sets the blob service endpoint, additionally parses it for information (SAS token). connection-string Sets the connection string to connect to the service. encryption-scope Sets the encryption scope that is used to encrypt blob contents on the server. credentials.type The type of the credentials provider. Supported values are: \"basic\" Credentials will be loaded from the credentials.username and credentials.password properties. \"shared-key\" Credentials will be loaded from the credentials.account-name and credentials.account-key properties. credentials.username The username, used when \"credentials.type\" is \"basic\". credentials.password The password, used when \"credentials.type\" is \"basic\". credentials.account-name The account name, used when \"credentials.type\" is \"shared-key\". credentials.account-key The account key, used when \"credentials.type\" is \"shared-key\".","title":"Azure Storage","component":"manual","version":"5.0","name":"azure-storage","url":"/manual/5.0/storage/storage-targets/blob-stores/azure-storage.html","titles":[{"text":"Configuration","hash":"_configuration","id":1},{"text":"Supported properties","hash":"_supported_properties","id":2}]},"72":{"id":72,"text":"This is an enterprise feature. one.microstream microstream-enterprise-afs-hazelcast 05.00.02-MS-GA HazelcastInstance hazelcast = ...; BlobStoreFileSystem fileSystem = BlobStoreFileSystem.New( HazelcastConnector.Caching(cache) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration Hazelcast can be set as follows. microstream-storage.properties storage-filesystem.hazelcast.configuration=path-to-hazelcast-configuration-file Property Description hazelcast.configuration Supported values: \"default\" It tries to load Hazelcast configuration from a list of well-known locations, and then applies overrides found in environment variables/system properties. When no location contains Hazelcast configuration then it returns default. \"classpath:path-to-hazelcast-configuration-file\" When the \"classpath:\" prefix is used, the file is loaded from a classpath resource. a valid URL Creates new Config which is loaded from the given URL and uses the System.properties to replace variables. a file path Creates a Config based on a Hazelcast file and uses the System.properties to resolve variables.","title":"Hazelcast","component":"manual","version":"5.0","name":"hazelcast","url":"/manual/5.0/storage/storage-targets/blob-stores/hazelcast.html","titles":[{"text":"Configuration","hash":"_configuration","id":1},{"text":"Supported properties","hash":"_supported_properties","id":2}]},"73":{"id":73,"text":"This is an enterprise feature. one.microstream microstream-enterprise-afs-kafka 05.00.02-MS-GA Properties properties = new Properties(); properties.setProperty( CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9093\" ); BlobStoreFileSystem fileSystem = BlobStoreFileSystem.New( KafkaConnector.Caching(properties) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration Kafka can be set as follows. microstream-storage.properties storage-filesystem.kafka-properties.bootstrap.servers=localhost:9093 All supported properties of Kafka, see https://kafka.apache.org/documentation/","title":"Kafka","component":"manual","version":"5.0","name":"kafka","url":"/manual/5.0/storage/storage-targets/blob-stores/kafka.html","titles":[{"text":"Configuration","hash":"_configuration","id":1},{"text":"Supported properties","hash":"_supported_properties","id":2}]},"74":{"id":74,"text":"This is an enterprise feature. one.microstream microstream-enterprise-afs-mongodb 05.00.02-MS-GA MongoClient mongoClient = MongoClients.create(); MongoDatabase database = mongoClient.getDatabase(\"db\"); BlobStoreFileSystem fileSystem = BlobStoreFileSystem.New( MongoDbConnector.Caching(database) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration MongoDB can be set as follows. microstream-storage.properties storage-filesystem.mongodb.database=mydatabase storage-filesystem.mongodb.auth-mechanism=mongo-cr storage-filesystem.mongodb.username=username storage-filesystem.mongodb.password=secret Property Description database The database name for the storage target. application-name Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. connection-string Sets the connection string to connect to the service. read-concern The read concern level. read-preference The preferred replica set members to which a query or command can be sent. write-concern Controls the acknowledgment of write operations with various options. w 0: Don’t wait for acknowledgement from the server 1: Wait for acknowledgement, but don’t wait for secondaries to replicate >=2: Wait for one or more secondaries to also acknowledge \"majority\": Wait for a majority of data bearing nodes to acknowledge \"\": Wait for one or more secondaries to also acknowledge based on a tag set name wtimeout - how long to wait for secondaries to acknowledge before failing 0: indefinite >0: time to wait in milliseconds Other options: journal: If true block until write operations have been committed to the journal. Cannot be used in combination with fsync. Write operations will fail with an exception if this option is used when the server is running without journaling. retry-reads Sets whether reads should be retried if they fail due to a network error. retry-writes Sets whether writes should be retried if they fail due to a network error. uuid-representation The representation to use when converting a UUID to a BSON binary value.This class is necessary because the different drivers used to have different ways of encoding UUID, with the BSON subtype: \\x03 UUID old. credentials.auth-mechanism The type of the authentication mechanism. Supported values are: \"gssapi\" Creates a MongoCredential instance for the GSSAPI SASL mechanism with the supplied \"configuration.username\" property. To override the default service name of \"mongodb\", add a mechanism property with the name \"SERVICE_NAME\". To force canonicalization of the host name prior to authentication, add a mechanism property with the name \"CANONICALIZE_HOST_NAME\" with the value true. To override the javax.security.auth.Subject with which the authentication executes, add a mechanism property with the name \"JAVA_SUBJECT\" with the value of a Subject instance. To override the properties of the javax.security.sasl.SaslClient with which the authentication executes, add a mechanism property with the name \"JAVA_SASL_CLIENT_PROPERTIES\" with the value of a Map instance containing the necessary properties. This can be useful if the application is customizing the default javax.security.sasl.SaslClientFactory. \"plain\" Creates a MongoCredential instance for the PLAIN SASL mechanism. Credentials will be loaded from the credentials.username, credentials.source and credentials.password properties. \"mongodb-x509\" Creates a MongoCredential instance for the MongoDB X.509 protocol with the supplied \"configuration.username\" property. \"mongo-cr\" Creates a MongoCredential instance with an unspecified mechanism. The client will negotiate the best mechanism based on the version of the server that the client is authenticating to. Credentials will be loaded from the credentials.username and credentials.password properties. credentials.username The username, used for various auth mechanisms. credentials.password The password, used for various auth mechanisms. credentials.source The source where the user is defined. This can be either \"$external\" or the name of a database. Used when credentials.auth-mechanism=plain. auth-mechanism-properties Further properties for the authentication mechanism.","title":"MongoDB","component":"manual","version":"5.0","name":"mongodb","url":"/manual/5.0/storage/storage-targets/blob-stores/mongodb.html","titles":[{"text":"Configuration","hash":"_configuration","id":1},{"text":"Supported properties","hash":"_supported_properties","id":2}]},"75":{"id":75,"text":"This is an enterprise feature. one.microstream microstream-enterprise-afs-oraclecloud-objectstorage 05.00.02-MS-GA ObjectStorageClient client = ...; BlobStoreFileSystem fileSystem = BlobStoreFileSystem.New( OracleCloudObjectStorageConnector.Caching(client) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration Oracle Cloud Object Storage can be set as follows. microstream-storage.properties storage-filesystem.oraclecloud.object-storage.config-file.profile=production storage-filesystem.oraclecloud.object-storage.region=us-phoenix-1 Property Description config-file.path The path of the config file, if not set the default is used: \"~/.oci/config\" config-file.profile The configuration profile to use, if not set \"DEFAULT\" is used. config-file.charset The encoding of the config file. client.connection-timeout-millis The max time to wait for a connection, in millis. Default is 10000. client.read-timeout-millis The max time to wait for data, in millis. Default is 60000. client.max-async-threads The max number of async threads to use. Default is 50. region Sets the region to call (ex, 'us-phoenix-1'). endpoint Sets the endpoint to call (ex, https://www.example.com).","title":"Oracle Cloud Object Storage","component":"manual","version":"5.0","name":"oracle-cloud-object-storage","url":"/manual/5.0/storage/storage-targets/blob-stores/oracle-cloud-object-storage.html","titles":[{"text":"Configuration","hash":"_configuration","id":1}]},"76":{"id":76,"text":"This is an enterprise feature. one.microstream microstream-enterprise-afs-oracle-coherence 05.00.02-MS-GA NamedCache cache = CacheFactory.getCache(\"cache-name\"); BlobStoreFileSystem fileSystem = BlobStoreFileSystem.New( CoherenceConnector.Caching(cache) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration Coherence can be set as follows. microstream-storage.properties storage-filesystem.oracle.coherence.cache-name=my-cache Property Description cache-name The name of the cache which is used to retrieve the named cache from the cache factory. cache-config It is used to specify a custom cache configuration deployment descriptor to be used instead of the configured default cache configuration deployment descriptor.","title":"Oracle Coherence","component":"manual","version":"5.0","name":"oracle-coherence","url":"/manual/5.0/storage/storage-targets/blob-stores/oracle-coherence.html","titles":[{"text":"Configuration","hash":"_configuration","id":1}]},"77":{"id":77,"text":"This is an enterprise feature. one.microstream microstream-enterprise-afs-oracle-nosql 05.00.02-MS-GA KVStore kvstore = KVStoreFactory.getStore( new KVStoreConfig(\"kvstore\", \"kvlite:5000\") ); BlobStoreFileSystem fileSystem = BlobStoreFileSystem.New( OracleNoSqlConnector.Caching(kvstore) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration Oracle NoSQL can be set as follows. microstream-storage.properties storage-filesystem.oracle.nosql.store-name=kvstore storage-filesystem.oracle.nosql.helper-hosts=kvlite:5000 storage-filesystem.oracle.nosql.username=user storage-filesystem.oracle.nosql.password=secret Property Description store-name The name of the KVStore. The store name is used toguard against accidental use of the wrong host or port. The store name must consist entirely of upper or lower-case, letters and digits. helper-hosts Comma separated list containing the host and port of an active node in the KVStore. Each string has the format hostname:port. It is good practice to pass multiple hosts so that if one host is down, the system will attempt to open the next one, and so on. username Username used for authentication. password Password used for authentication. check-interval Configures the default interval for checking on data definition operation progress. consistency Configures the default read Consistency to be used when a Consistency is not specified for a particular read operation. Supported values: NONE_REQUIRED A consistency policy that lets a transaction on a replica using this policy proceed regardless of the state of the Replica relative to the Master. ABSOLUTE A consistency policy that requires that a transaction be serviced on the Master so that consistency is absolute. durability Configures the default write Durability to be used when a Durability is not specified for a particular write operation. Supported values: COMMIT_SYNC A convenience constant that defines a durability policy with COMMIT_SYNC for Master commit synchronization. The policies default to COMMIT_NO_SYNC for commits of replicated transactions that need acknowledgment and SIMPLE_MAJORITY for the acknowledgment policy. COMMIT_NO_SYNC A convenience constant that defines a durability policy with COMMIT_NO_SYNC for Master commit synchronization. The policies default to COMMIT_NO_SYNC for commits of replicated transactions that need acknowledgment and SIMPLE_MAJORITY for the acknowledgment policy. COMMIT_WRITE_NO_SYNC A convenience constant that defines a durability policy with COMMIT_WRITE_NO_SYNC for Master commit synchronization. The policies default to COMMIT_NO_SYNC for commits of replicated transactions that need acknowledgment and SIMPLE_MAJORITY for the acknowledgment policy. lob-chunk-size Configures the chunk size associated with the chunks used to store a LOB. lob-chunks-per-partition Configures the number of contiguous chunks that can be stored in the same partition for a given LOB. lob-timeout Configures default timeout value associated with chunk access during operations on LOBs. lob-verification-bytes Configures the number of trailing bytes of a partial LOB that must be verified against the user supplied LOB stream when resuming a putLOB operation. A value⇐0 disables verification. max-check-retries Set the number of times the client will attempt to check status for the execution of an asynchronous data definition or administrative statement execution in the face of network connection problems. network-roundtrip-timeout Configures the amount of time to allow for a single round-trip network communication with the server. This value is added to the request timeout to determine the total amount of time that the client should wait for a request to complete before timing out. read-zones Comma separated lists of zones in which nodes must be located to be used for read operations. If the argument is null, or this method has not been called, then read operations can be performed on nodes in any zone. registry-open-timeout Configures the connect/open timeout used when making RMI registry lookup requests. registry-read-timeout Configures the read timeout associated with sockets used to make RMI registry requests. Shorter timeouts result in more rapid failure detection and recovery. However, this timeout should be sufficiently long so as to allow for the longest timeout associated with a request. request-timeout Configures the default request timeout. sg-attrs-cache-timeout Sets the timeout of cached sequence generator attributes in milliseconds. socket-open-timeout Configures the open timeout used when establishing sockets used to make client requests. Shorter timeouts result in more rapid failure detection and recovery. The default open timeout (3000 milliseconds) should be adequate for most applications. socket-read-timeout Configures the read timeout associated with the underlying sockets used to make client requests. Shorter timeouts result in more rapid failure detection and recovery. However, this timeout should be sufficiently long so as to allow for the longest timeout associated with a request. use-async Specifies whether calls to the store should use the async network protocol. security-properties Configures security properties for the client. The supported properties include both authentication properties and transport properties. See oracle.kv.KVSecurityConstants for details.","title":"Oracle NoSQL","component":"manual","version":"5.0","name":"oracle-nosql","url":"/manual/5.0/storage/storage-targets/blob-stores/oracle-nosql.html","titles":[{"text":"Configuration","hash":"_configuration","id":1}]},"78":{"id":78,"text":"This is an enterprise feature. one.microstream microstream-enterprise-afs-redis 05.00.02-MS-GA String redisUri = \"redis://localhost:6379/0\"; BlobStoreFileSystem fileSystem = BlobStoreFileSystem.New( RedisConnector.Caching(redisUri) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration Redis can be set as follows. microstream-storage.properties storage-filesystem.redis.uri=redis://localhost:6379/0 Property Description redis.uri The RedisURI contains the host/port and can carry authentication/database details. On a successful connect you get authenticated, and the database is selected afterward. This applies also after re-establishing a connection after a connection loss.","title":"Redis","component":"manual","version":"5.0","name":"redis","url":"/manual/5.0/storage/storage-targets/blob-stores/redis.html","titles":[{"text":"Configuration","hash":"_configuration","id":1}]},"79":{"id":79,"text":"one.microstream microstream-afs-sql 05.00.02-MS-GA org.mariadb.jdbc mariadb-java-client 2.7.1 MariaDbDataSource dataSource = new MariaDbDataSource(); dataSource.setUrl(\"jdbc:mysql://host:3306/mydb\"); dataSource.setUser(\"user\"); dataSource.setPassword(\"secret\"); SqlFileSystem fileSystem = SqlFileSystem.New( SqlConnector.Caching( SqlProviderMariaDb.New(dataSource) ) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration MariaDB can be set as follows. Please note that you have to define a data source provider. microstream-storage.properties storage-filesystem.sql.mariadb.data-source-provider=com.sample.MyDataSourceProvider storage-filesystem.sql.mariadb.catalog=mycatalog storage-filesystem.sql.mariadb.schema=myschema storage-filesystem.sql.mariadb.url=jdbc:mysql://host:3306/mydb storage-filesystem.sql.mariadb.user=username storage-filesystem.sql.mariadb.password=secret MyDataSourceProvider.java package com.sample; import one.microstream.afs.sql.types.SqlDataSourceProvider public class MyDataSourceProvider implements SqlDataSourceProvider { public DataSource provideDataSource(Configuration configuration) { String url = configuration.get(\"url\"); String user = configuration.get(\"user\"); String password = configuration.get(\"password\"); // TODO: return data source of your choice, e.g. from a connection pool } }","title":"MariaDB","component":"manual","version":"5.0","name":"mariadb","url":"/manual/5.0/storage/storage-targets/sql-databases/mariadb.html","titles":[{"text":"Configuration","hash":"_configuration","id":1}]},"80":{"id":80,"text":"This is an enterprise feature. one.microstream microstream-enterprise-afs-sql 05.00.02-MS-GA mysql mysql-connector-java 8.0.21 MysqlDataSource dataSource = new MysqlDataSource(); dataSource.setUrl(\"jdbc:mysql://host:3306/mydb\"); dataSource.setUser(\"user\"); dataSource.setPassword(\"secret\"); SqlFileSystem fileSystem = SqlFileSystem.New( SqlConnector.Caching( SqlProviderMySql.New(dataSource) ) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration MySQL can be set as follows. Please note that you have to define a data source provider. microstream-storage.properties storage-filesystem.sql.mysql.data-source-provider=com.sample.MyDataSourceProvider storage-filesystem.sql.mysql.catalog=mycatalog storage-filesystem.sql.mysql.schema=myschema storage-filesystem.sql.mysql.url=jdbc:mysql://host:3306/mydb storage-filesystem.sql.mysql.user=username storage-filesystem.sql.mysql.password=secret MyDataSourceProvider.java package com.sample; import one.microstream.afs.sql.types.SqlDataSourceProvider public class MyDataSourceProvider implements SqlDataSourceProvider { public DataSource provideDataSource(Configuration configuration) { String url = configuration.get(\"url\"); String user = configuration.get(\"user\"); String password = configuration.get(\"password\"); // TODO: return data source of your choice, e.g. from a connection pool } }","title":"MySQL","component":"manual","version":"5.0","name":"mysql","url":"/manual/5.0/storage/storage-targets/sql-databases/mysql.html","titles":[{"text":"Configuration","hash":"_configuration","id":1}]},"81":{"id":81,"text":"This is an enterprise feature. one.microstream microstream-enterprise-afs-sql 05.00.02-MS-GA com.oracle.database.jdbc ojdbc8 19.7.0.0 OracleDataSource dataSource = new OracleDataSource(); dataSource.setURL(\"jdbc:oracle:thin:@localhost:1521/db\"); dataSource.setUser(\"user\"); dataSource.setPassword(\"secret\"); SqlFileSystem fileSystem = SqlFileSystem.New( SqlConnector.Caching( SqlProviderOracle.New(dataSource) ) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration Oracle can be set as follows. Please note that you have to define a data source provider. microstream-storage.properties storage-filesystem.sql.oracle.data-source-provider=com.sample.MyDataSourceProvider storage-filesystem.sql.oracle.catalog=mycatalog storage-filesystem.sql.oracle.schema=myschema storage-filesystem.sql.oracle.url=jdbc:oracle:thin:@localhost:1521/db storage-filesystem.sql.oracle.user=username storage-filesystem.sql.oracle.password=secret MyDataSourceProvider.java package com.sample; import one.microstream.afs.sql.types.SqlDataSourceProvider public class MyDataSourceProvider implements SqlDataSourceProvider { public DataSource provideDataSource(Configuration configuration) { String url = configuration.get(\"url\"); String user = configuration.get(\"user\"); String password = configuration.get(\"password\"); // TODO: return data source of your choice, e.g. from a connection pool } }","title":"Oracle","component":"manual","version":"5.0","name":"oracle","url":"/manual/5.0/storage/storage-targets/sql-databases/oracle.html","titles":[{"text":"Configuration","hash":"_configuration","id":1}]},"82":{"id":82,"text":"one.microstream microstream-afs-sql 05.00.02-MS-GA org.postgresql postgresql 42.2.14 PGSimpleDataSource dataSource = new PGSimpleDataSource(); dataSource.setUrl(\"jdbc:postgresql://localhost:5432/mydb\"); dataSource.setUser(\"postgres\"); dataSource.setPassword(\"secret\"); SqlFileSystem fileSystem = SqlFileSystem.New( SqlConnector.Caching( SqlProviderPostgres.New(dataSource) ) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration PostgreSQL can be set as follows. Please note that you have to define a data source provider. microstream-storage.properties storage-filesystem.sql.postgres.data-source-provider=com.sample.MyDataSourceProvider storage-filesystem.sql.postgres.catalog=mycatalog storage-filesystem.sql.postgres.schema=myschema storage-filesystem.sql.postgres.url=jdbc:postgresql://localhost:5432/mydb storage-filesystem.sql.postgres.user=username storage-filesystem.sql.postgres.password=secret MyDataSourceProvider.java package com.sample; import one.microstream.afs.sql.types.SqlDataSourceProvider public class MyDataSourceProvider implements SqlDataSourceProvider { public DataSource provideDataSource(Configuration configuration) { String url = configuration.get(\"url\"); String user = configuration.get(\"user\"); String password = configuration.get(\"password\"); // TODO: return data source of your choice, e.g. from a connection pool } }","title":"PostgreSQL","component":"manual","version":"5.0","name":"postgresql","url":"/manual/5.0/storage/storage-targets/sql-databases/postgresql.html","titles":[{"text":"Configuration","hash":"_configuration","id":1}]},"83":{"id":83,"text":"one.microstream microstream-afs-sql 05.00.02-MS-GA org.xerial sqlite-jdbc 3.32.3 SQLiteDataSource dataSource = new SQLiteDataSource(); dataSource.setUrl(\"jdbc:sqlite:microstreamdb\"); SqlFileSystem fileSystem = SqlFileSystem.New( SqlConnector.Caching( SqlProviderSqlite.New(dataSource) ) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration SQLite can be set as follows. Please note that you have to define a data source provider. microstream-storage.properties storage-filesystem.sql.sqlite.data-source-provider=com.sample.MyDataSourceProvider storage-filesystem.sql.sqlite.catalog=mycatalog storage-filesystem.sql.sqlite.schema=myschema storage-filesystem.sql.sqlite.url=jdbc:sqlite:microstreamdb MyDataSourceProvider.java package com.sample; import one.microstream.afs.sql.types.SqlDataSourceProvider public class MyDataSourceProvider implements SqlDataSourceProvider { public DataSource provideDataSource(Configuration configuration) { String url = configuration.get(\"url\"); // TODO: return data source of your choice, e.g. from a connection pool } }","title":"SQLite","component":"manual","version":"5.0","name":"sqlite","url":"/manual/5.0/storage/storage-targets/sql-databases/sqlite.html","titles":[{"text":"Configuration","hash":"_configuration","id":1}]},"84":{"id":84,"text":"pom.xml one.microstream microstream-cache 06.01.00-MS-GA CachingProvider provider = Caching.getCachingProvider(); CacheManager cacheManager = provider.getCacheManager(); MutableConfiguration configuration = new MutableConfiguration<>() .setTypes(Integer.class, String.class) .setStoreByValue(false) .setExpiryPolicyFactory(CreatedExpiryPolicy.factoryOf(Duration.ONE_MINUTE)); Cache cache = cacheManager.createCache(\"jCache\", configuration); cache.put(1, \"Hello World\"); String value = cache.get(1); Get the default CachingProvider implementation from the application’s classpath. This method will work if and only if there is only one JCache implementation available in the classpath. If there are multiple providers then use the fully qualified name + Caching.getCachingProvider(\"one.microstream.cache.types.CachingProvider\") instead. Get the default CacheManager instance using the provider. Create a cache configuration using MutableConfiguration with key type and value type as Integer and String respectively configured to store the cache entries by reference (not by value) and with an expiry time of one minute defined for entries from the moment they are created. Using the cache manager, create a cache named jCache with the configuration created in step 3. Put some data into the cache And retrieve it. The same can be done using MicroSteam’s CacheConfiguration API. This time we use a EmbeddedStorageManager as a backing store for the cache. EmbeddedStorageManager storageManager = EmbeddedStorage.start(); CachingProvider provider = (one.microstream.cache.CachingProvider)Caching.getCachingProvider(); CacheManager cacheManager = provider.getCacheManager(); CacheConfiguration configuration = CacheConfiguration .Builder(Integer.class, String.class, \"jCache\", storageManager) .expiryPolicyFactory(CreatedExpiryPolicy.factoryOf(Duration.ONE_HOUR)) .build(); Cache cache = cacheManager.createCache(\"jCache\", configuration); cache.put(1, \"one\"); String value = cache.get(1);","title":"Getting Started","component":"manual","version":"6.0","name":"getting-started","url":"/manual/6.0/cache/getting-started.html","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"Hello World","hash":"_hello_world","id":2}]},"85":{"id":85,"text":"Since version 3 MicroStream provides a JCache (JSR-107) implementation, which is optionally backed by the MicroStream Storage. JCache standardizes caching for the Java platform. It provides a common mechanism to cache values in a map-like structure. It expedites the mainstream adoption of in-memory computing by giving all Java developers an easy way to access memory from within Java. Businesses can change providers without rewriting their applications or maintaining a proprietary cache abstraction layer. This caching standard is used in a wide variety of environments. The most common use cases are: Second-level cache in JPA (e.g. Hibernate) Spring Cache Abstraction and many more Why another JCache implementation, you may wonder. There is already a myriad of providers out there. MicroStream’s very own serialization and storage can be utilized to get the best out of caches. For example you are not limited to java.io.Serializable types, when storing by value. That means every key-value pair gets copied every time you put and get entries in and out of a cache. And if a cache is used with a backing store, MicroStream’s storage can be used to get the best possible performance. And now, MicroStream being a JCache provider, you can use it as a drop-in replacement in your existing application. The caching provider represents the implementation of JCache that you are using. You can use more than one JCache implementation in your project if you wish, and CachingProvider is how you access the different providers that are in use. It is responsible for managing and providing access to many named caches. The cache holds the different values being cached. You can have several caches, each of which may be holding data for a different purpose. Each one can have a different configuration; for example, different caches may evict old data using different techniques. Each item of data in a cache is an entry, which is a key-value pair. The key is a unique value used to store and look up the data. The value is the actual data you wish to cache. Caches have some different properties than Maps, but the calls that you would use to store and lookup data is very similar.","title":"Cache","component":"manual","version":"6.0","name":"index","url":"/manual/6.0/cache/index.html","titles":[{"text":"Motivation","hash":"_motivation","id":1},{"text":"Basic Concepts of JCache","hash":"_basic_concepts_of_jcache","id":2},{"text":"CachingProvider","hash":"_cachingprovider","id":3},{"text":"CacheManager","hash":"_cachemanager","id":4},{"text":"Cache","hash":"_cache","id":5},{"text":"Entry","hash":"_entry","id":6}]},"86":{"id":86,"text":"Bugfix release. Fixed various bugs in backup [194][272][273][278][280] Fixed storage restart error with same configuration instance [279] Fixed Javadoc warnings [281] Spring Boot Integration Specialized type handlers for Java 17 collection Deep-copy utility Examples included in reactor build Fixed swallowed exceptions in storage channels [265] Fixed failing import with multiple channels [254] Fixed zero byte blocks in storage [255] Fixed faulty loading behaviour in persisted cache [226] Fixed possible deadlock in persistence manager [240] Fixed bug in type handler for PriorityQueue [234] From version 5 no actions are necessary, for older versions see below. Bugfix release. Fixed buffer flush regression [225] Bugfix release. Fixed broken build for microstream-storage-restclient-app This release introduces some breaking changes. To fully support the Java Module System (Jigsaw) and to meet Maven’s naming standards, we had to rename some packages and our artifact’s IDs. But don’t worry. Just change the dependency configuration and organize some imports, and you are good to go. Existing storages are not affected and are fully compatible with this version. For detailed information, see the migration guide below. General purpose configuration layer on which the storage and cache configuration are now based on, with following key features: Tree like structure to support sub-configurations Input from various sources (ini, xml, yaml, …​) Typed getters for properties Extendable: custom property parsers and configuration loaders Adaptable: easy adaption to other framework’s configurations, like e.g. Spring Boot Storage configuration now supports different file systems for live storage and backup GraalVM support: MicroStream’s optimized memory adapter is now used automatically when running on GraalVM Restructured MicroStream’s module and package structure to fully support the Java Module System and adopt Maven naming standards, see Migration Guide Fixed sporadic index out of bounds exception when storage and backup had different storage targets with a channel count greater than one In order to fully support the Java Module System and adopt Maven naming standards we had to introduce some changes: These are the changed artifacts and their packages. Old (= 5) base microstream-base AFS and AFS/NIO were extracted from base module: base microstream-afs one.microstream.afs one.microstream.afs.types, one.microstream.afs.exceptions base microstream-afs-nio one.microstream.afs.nio one.microstream.afs.nio.types cache microstream-cache one.microstream.cache one.microstream.cache.types, one.microstream.cache.exceptions cache.hibernate microstream-cache-hibernate one.microstream.cache.hibernate one.microstream.cache.hibernate.types communication microstream-communication one.microstream.com one.microstream.communication.types communication.binary microstream-communication-binary one.microstream.com.binary one.microstream.communication.binary.types AWS was split into AWS-DynamoDB and AWS-S3: filesystem.aws microstream-enterprise-afs-aws-dynamodb one.microstream.afs.aws.dynamodb one.microstream.enterprise.afs.aws.dynamodb.types filesystem.aws microstream-enterprise-afs-aws-s3 one.microstream.afs.aws.s3 one.microstream.enterprise.afs.aws.s3.types filesystem.azure microstream-enterprise-afs-azure-storage one.microstream.afs.azure.storage one.microstream.enterprise.afs.azure.storage.types filesystem.blobstore microstream-enterprise-afs-blobstore one.microstream.afs.blobstore one.microstream.enterprise.afs.blobstore.types filesystem.coherence microstream-enterprise-afs-oracle-coherence one.microstream.afs.coherence one.microstream.enterprise.afs.oracle.coherence.types filesystem.hazelcast microstream-enterprise-afs-hazelcast one.microstream.afs.hazelcast one.microstream.enterprise.afs.hazelcast.types filesystem.jpa.hibernate microstream-enterprise-afs-hibernate one.microstream.afs.jpa.hibernate one.microstream.afs.hibernate.types filesystem.kafka microstream-enterprise-afs-kafka one.microstream.afs.kafka one.microstream.enterprise.afs.kafka.types filesystem.mongodb microstream-enterprise-afs-mongodb one.microstream.afs.mongodb one.microstream.enterprise.afs.mongodb.types filesystem.oraclecloud microstream-enterprise-afs-oraclecloud-objectstorage one.microstream.afs.oracle.cloud.objectstorage one.microstream.enterprise.afs.oraclecloud.objectstorage.types filesystem.oraclenosql microstream-enterprise-afs-oracle-nosql one.microstream.afs.oracle.nosql one.microstream.enterprise.afs.oracle.nosql.types filesystem.redis microstream-enterprise-afs-redis one.microstream.afs.redis one.microstream.enterprise.afs.redis.types SQL was split into SQL and Enterprise-SQL: filesystem.sql microstream-afs-sql on.microstream.afs.sql one.microstream.afs.sql.types filesystem.sql microstream-enterprise-afs-sql on.microstream.afs.sql one.microstream.enterprise.afs.sql.types persistence microstream-persistence persistence.binary microstream-persistence-binary one.microstream.collections one.microstream.persistence.binary.one.microstream.collections one.microstream.entity one.microstream.persistence.binary.one.microstream.entity one.microstream.persistence.types one.microstream.persistence.binary.one.microstream.persistence.types one.microstream.reference one.microstream.persistence.binary.one.microstream.reference one.microstream.util one.microstream.persistence.binary.one.microstream.util one.microstream.java.* one.microstream.persistence.binary.java.* persistence.binary.jdk8 microstream-persistence-binary-jdk8 one.microstream.jdk8.java.util one.microstream.persistence.binary.jdk8.java.util one.microstream.memory.sun one.microstream.persistence.binary.jdk8.types storage microstream-storage storage.embedded microstream-storage-embedded one.microstream.storage.types one.microstream.storage.embedded.types storage.embedded.configuration microstream-storage-embedded-configuration one.microstream.storage.configuration one.microstream.storage.embedded.configuration.types storage.restadapter microstream-storage-restadapter one.microstream.storage.restadapter one.microstream.storage.restadapter.types, one.microstream.storage.restadapter.exceptions storage.restclient microstream-storage-restclient one.microstream.storage.restclient one.microstream.storage.restclient.types, one.microstream.storage.restclient.exceptions storage.restclient.app microstream-storage-restclient-app one.microstream.storage.restclient.app one.microstream.storage.restclient.app.types storage.restclient.jersey microstream-storage-restclient-jersey one.microstream.storage.restclient.jersey one.microstream.storage.restclient.jersey.types storage.restservice microstream-storage-restservice one.microstream.storage.restservice one.microstream.storage.restservice.types, one.microstream.storage.restservice.exceptions storage.restservice.sparkjava microstream-storage-restservice-sparkjava one.microstream.storage.restservice.sparkjava one.microstream.storage.restservice.sparkjava.types, one.microstream.storage.restservice.sparkjava.exceptions The storage and cache configuration layers are now utilizing the newly introduced general purpose configuration layer. The configuration property names have changed from camelCase to the dash-notation. Old (= 5) keyType key-type valueType value-type storageConfigurationResourceName storage-configuration-resource-name cacheLoaderFactory cache-loader-factory cacheWriterFactory cache-writer-factory expiryPolicyFactory expiry-policy-factory evictionManagerFactory eviction-manager-factory readThrough read-through writeThrough write-through storeByValue store-by-value statisticsEnabled statistics-enabled managementEnabled management-enabled The old storage configuration API is deprecated and should be migrated to the new one. The configuration property names have changed from camelCase to the dash-notation. Old (= 5) baseDirectory storage-directory deletionDirectory deletion-directory truncationDirectory truncation-directory backupDirectory backup-directory channelCount channel-count channelDirectoryPrefix channel-directory-prefix dataFilePrefix data-file-prefix dataFileSuffix data-file-suffix transactionFilePrefix transaction-file-prefix transactionFileSuffix transaction-file-suffix typeDictionaryFilename type-dictionary-file-name rescuedFileSuffix rescued-file-suffix lockFileName lock-file-name houseKeepingIntervalMs housekeeping-interval housekeepingTimeBudgetNs housekeeping-time-budget entityCacheThreshold entity-cache-threshold entityCacheTimeoutMs entity-cache-timeout dataFileMinimumSize data-file-minimum-size dataFileMaximumSize data-file-maximum-size dataFileMinimumUseRatio data-file-minimum-use-ratio dataFileCleanupHeadFile data-file-cleanup-head-file API to create full backup additional to continuous backup Simplified usage of other NIO based file systems, e.g. in-memory file systems for unit testing OSGi Headers are added in released jar files and a p2 update site is available next to the maven repository Additional storage targets AWS S3 and DynamoDB Azure Storage Hazelcast Kafka MongoDB Redis Plain JDBC: SAP HANA, PostgreSQL, MariaDB Fixed type handler incompatibilities with JDK 11 Removed wrongfully initial values in configuration for deletion and truncation directories From 4.1 no actions are necessary, for older versions see below. File System Abstraction to support a variety of storage targets. Exporter API for storage configuration. Better error handling in housekeeping, to avoid storage channel thread interruptions. Fixed XML loading bug under Android. All configuration code, which includes file paths, may be rewritten to use the new Abstract File System. For example see Storage Files or Backup. Bugfix release for projects using an old non public version. Fixed bug in type dictionary parser for old legacy type handlers Added a convenience layer for defining custom type handlers Fully automatic lazy reference managing for clearing older Lazy references as free memory gets lower. Completed optimized persistence handling for remaining types in JDK that are reasonable to appear in entity graphs. E.g. Currency, Locale, URI, URL, Path Compatibility with projects using java modules (\"jigsaw\") Added JavaDoc for common types like StorageConnection, StorageManager, StorageController, etc. Auto-recognition for CSV separator character in configuration files (e.g. legacy type mapping) JSR-107 compatible JCache provider with additional Hibernate cache region factory Storage REST Service and Client are available to access the storage data via REST, a Java-Wrapper thereof and a Web-UI Fixed a potential race condition during loading Fixed a potential race condition and robustness issue during storing StorageConnectionFoundation instance is now properly created on demand. Removed unnecessary memory consumption exponential to channel count. Improved exception messages on invalid configuration values (file sizes etc.) Workarounded a JDK bug regarding file locking when importing files (JDK exception says another process is locking the file which is outright wrong) Fixed type resolving problems when different ClassLoaders are involved. Fixed a bug that caused loading of zero-length arrays to throw an exception despite everything being fine. Various smaller bugfixes for unnecessary exceptions in special cases and state robustness after exceptions. From 2.2 no actions are necessary, for older versions see below. Removed SelfStoring without replacement since it could not be used recursively and has no advantages over just creating a static storing utility method for a certain entity. Added state validation of value type objects (e.g. String, Integer, BigDecimal, etc.) upon loading. This is hardly relevant in practice, but not having it can lead to confusing hello-world-like test applications. EmbeddedStorageManager now implements java.lang.AutoClosable. Replaced all provisional RuntimeExceptions with either PersistenceException or StorageException, depending on the architectural level the corresponding source code it located. The two technically different root handling concepts (\"default\" and \"custom\") have been consolidated in a way that they are the same thing on the API level and interchangeable, meaning no more confusion with those root exception messages. All entity fields of type transient EmbeddedStorageManager now get a reference to the used EmbeddedStorageManager instance set upon loading/updating. The interfaces around storage managing have been enhanced so that it is now equally valid to just write StorageManager instead of EmbeddedStorageManager. (An EmbeddedStorageManager \"is a\" StorageManager) Slight technical consolidation of Lazy reference handling caused the type Lazy to be moved from the package one.microstream.persistence.lazy to one.microstream.reference. The reason is that the lazy handling has actually no inherent connection to persistence or storage. It’s actually just a generic concept that can be used by those layers. See Migration Guide below on how to adjust existing projects. Fixed an off-heap memory leak when restarting the storage multiple times in the same process. Fixed a bug where changing the fields of an entity type caused an exception. This was a regression bug from fixing a similar problem for another case in version 2.1. Now, both cases work correctly. All occurrences in user code of one.microstream.persistence.lazy.Lazy have to be refactored to one.microstream.reference.Lazy. Modern IDEs provide a functionality to \"auto-import\" missing types or automatically \"organize imports\", so this should be resolved with a proverbial push of a button. Android support MicroStream is now Java-wise fully compatible with Android. Replaced all usages of java.util.File with java.nio.file.Path to allow using custom file implementations. Improved skipping functionality of Storers (see EmbeddedStorageManager#createStorer and Storer#skip). The class Lazy is now an interface to allow custom implementations. See Migration guide below. Fixed a few minor bugs in the skipping functionality of Storers. Fixed a bug where files remained locked after the storage was shut down. Fixed a bug where files remained locked after an exception in storage initialization. Enums defining an abstract method are now handled correctly. By default, all threads created by MicroStream now start with the prefix \"MicroStream-\". This can be customized by the new interface StorageThreadNameProvider. Fixed a NullPointerException in import. Fixed a bug that caused enums with a certain field layout to be loaded inconsistently. java.util.Locale is now persisted and created using Locale’s #toLanguageTag and #forLanguageTag. In the directory of an existing storage, in the TypeDictionary file (default name \"PersistenceTypeDictionary.ptd\"), all occurrences of \"one.microstream.persistence.lazy.Lazy\" must be replaced with \"one.microstream.persistence.lazy.Lazy$Default\".","title":"Changelog","component":"manual","version":"6.0","name":"changelog","url":"/manual/6.0/intro/changelog.html","titles":[{"text":"6.1","hash":"_6_1","id":1},{"text":"Bugfixes","hash":"_bugfixes","id":2},{"text":"6.0","hash":"_6_0","id":3},{"text":"Features","hash":"_features","id":4},{"text":"Bugfixes","hash":"_bugfixes_2","id":5},{"text":"Migration guide","hash":"_migration_guide","id":6},{"text":"5.0.2","hash":"_5_0_2","id":7},{"text":"Bugfixes","hash":"_bugfixes_3","id":8},{"text":"5.0.1","hash":"_5_0_1","id":9},{"text":"Bugfixes","hash":"_bugfixes_4","id":10},{"text":"5.0","hash":"_5_0","id":11},{"text":"Features","hash":"_features_2","id":12},{"text":"Bugfixes","hash":"_bugfixes_5","id":13},{"text":"Migration guide","hash":"5_0_migration-guide","id":14},{"text":"Artifacts and Packages","hash":"_artifacts_and_packages","id":15},{"text":"Configuration","hash":"_configuration","id":16},{"text":"Cache","hash":"_cache","id":17},{"text":"Storage","hash":"_storage","id":18},{"text":"4.1","hash":"_4_1","id":19},{"text":"Features","hash":"_features_3","id":20},{"text":"Bugfixes","hash":"_bugfixes_6","id":21},{"text":"Migration guide","hash":"4_1_migration-guide","id":22},{"text":"4.0","hash":"_4_0","id":23},{"text":"Features","hash":"_features_4","id":24},{"text":"Bugfixes","hash":"_bugfixes_7","id":25},{"text":"Migration guide","hash":"4_0_migration-guide","id":26},{"text":"3.0.1","hash":"_3_0_1","id":27},{"text":"Bugfixes","hash":"_bugfixes_8","id":28},{"text":"3.0","hash":"_3_0","id":29},{"text":"Features","hash":"_features_5","id":30},{"text":"Bugfixes","hash":"_bugfixes_9","id":31},{"text":"Migration guide","hash":"3_0_migration-guide","id":32},{"text":"2.2","hash":"_2_2","id":33},{"text":"Features","hash":"_features_6","id":34},{"text":"Bugfixes","hash":"_bugfixes_10","id":35},{"text":"Migration Guide","hash":"2_2_migration-guide","id":36},{"text":"2.1","hash":"_2_1","id":37},{"text":"Features","hash":"_features_7","id":38},{"text":"Bugfixes","hash":"_bugfixes_11","id":39},{"text":"Migration Guide","hash":"_migration_guide_2","id":40}]},"87":{"id":87,"text":"You can find the MicroStream libraries in the Maven Central repository. Maven [pom.xml] one.microstream microstream-storage-embedded 06.01.00-MS-GA Gradle (Groovy) [build.gradle] dependencies { implementation 'one.microstream:microstream-storage-embedded:06.01.00-MS-GA' } Gradle (Kotlin) [build.gradle.kts] dependencies { implementation(\"one.microstream:microstream-storage-embedded:06.01.00-MS-GA\") } Scala SBT [build.sbt] libraryDependencies += \"one.microstream\" % \"microstream-storage-embedded\" % \"06.01.00-MS-GA\" Apache Ivy [ivy.xml] Apache Buildr [Buildfile] define 'my-app' do compile.with 'one.microstream:microstream-storage-embedded:06.01.00-MS-GA' end Bazel [WORKSPACE] load(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\") RULES_JVM_EXTERNAL_TAG = \"2.8\" RULES_JVM_EXTERNAL_SHA = \"79c9850690d7614ecdb72d68394f994fef7534b292c4867ce5e7dec0aa7bdfad\" http_archive( name = \"rules_jvm_external\", strip_prefix = \"rules_jvm_external-%s\" % RULES_JVM_EXTERNAL_TAG, sha256 = RULES_JVM_EXTERNAL_SHA, url = \"https://github.com/bazelbuild/rules_jvm_external/archive/%s.zip\" % RULES_JVM_EXTERNAL_TAG, ) load(\"@rules_jvm_external//:defs.bzl\", \"maven_install\") maven_install( artifacts = [ \"one.microstream:microstream-storage-embedded:06.01.00-MS-GA\" ], ) Bazel [BUILD] maven_jar( name = \"microstream\", artifact = \"one.microstream:microstream-storage-embedded:06.01.00-MS-GA\" ) or in our P2 Update Site: https://repo.microstream.one/repository/update-site/06.01.00-MS-GA These are the different modules that make up MicroStream. ArtifactId Description microstream-base Collection of common utilities. Math, IO, Exceptions, Threads, String operations, and so on. microstream-cache JSR-107 JCache Provider microstream-cache-hibernate Hibernate region factory for jcache implementation microstream-communication Top-level framework for sending and receiving object graphs between Java applications. Only data is transferred, no program code (\"bytecode\"). The other application may be programmed in any language as long as it adheres to the transmitted communication protocol. Usable directly in the program code of a Java application to communicate with other applications or processes. The concrete form of persistence is left open and delivered via a specific implementation as a plugin. Examples of specific persistent forms are binary data, CSV, XML, Json. microstream-communication-binary Plugin framework for the top-level framework communication to convert the transferred object graphs to and from binary data. microstream-configuration General-purpose configuration layer. microstream-configuration-hocon Hocon extension for the configuration layer, which supports hocon, json and ini files. microstream-configuration-yaml Yaml extension for the configuration layer. microstream-afs Abstract file system (AFS) layer. microstream-enterprise-afs-aws-dynamodb File system implementations for AWS DynamoDB. microstream-enterprise-afs-aws-s3 File system implementations for AWS S3. microstream-enterprise-afs-azure-storage File system implementations for Azure Cloud (Azure Storage). microstream-enterprise-afs-blobstore Base for all blob store file system implementations. microstream-enterprise-afs-hazelcast File system implementation for Hazelcast. microstream-enterprise-afs-hibernate Generic file system implementation for JPA / Hibernate. microstream-enterprise-afs-kafka File system implementation for Apache Kafka. microstream-enterprise-afs-mongodb File system implementation for MongoDB. microstream-afs-nio File system implementation for the non-blocking IO implementation (java.nio.file) of the JDK. microstream-enterprise-afs-oraclecloud-objectstorage File system implementation for Oracle Cloud Services (Object Storage). microstream-enterprise-afs-oracle-coherence File system implementation for Oracle Coherence. microstream-enterprise-afs-oracle-nosql File system implementation for Oracle NoSQL. microstream-enterprise-afs-redis File system implementation for Redis. microstream-afs-sql File system implementation for SQL databases. microstream-persistence Base framework to convert a graph of java objects into a persistent form and back. Usable as a common, abstract base for all technologies implementing a specific persistent representation like binary data, CSV, XML or Json. From a technical point of view, storage as well as serialization is a process that puts a graph of Java instances into a persistent form. The only difference is that network communication serialization discards this persistent form while a database solution preserves it. microstream-persistence-binary Extension of the persistence base framework with a concrete implementation of the persistent form as binary data. This persistent form is superior to all text-based formats in storage and performance needs, making it the preferred method for storage and network serialization. microstream-persistence-binary-jdk8 Specialized type handlers for JDK 8 collection types. microstream-persistence-binary-jdk17 Specialized type handlers for immutable JDK 17 collection types. microstream-storage Basic framework to manage a graph of Java data persisted as binary data as a database. Can be used both to implement an embedded database solution (in the same process as the Java application) and a standalone or server-mode database solution (in a separate process). Other forms of persistence than binary data are deliberately not supported because they would not bring any noteworthy advantages but many disadvantages for the task. microstream-storage-embedded Top-level framework for use in a Java application that adds an embedded database solution to its object graphs. Can be used directly in the program code of a Java application to comfortably and efficiently persist its data. microstream-storage-embedded-configuration Layer with support for external configuration files (XML, INI) and convenience functionality to create foundations for the embedded storage. microstream-storage-restadapter Adapter for low-level storage data externalization. Used by the REST service to adapt to a MicroStream Storage. microstream-storage-restclient Abstract REST client interface, which serves as a Java wrapper for the REST API. microstream-storage-restclient-app Executable client app with web user interface, which connects to a REST service. microstream-storage-restclient-jersey REST client implementation which utilizes Jersey as a webservice framework. microstream-storage-restservice Abstract REST service interface, which uses the REST adapter to access low level storage data. microstream-storage-restservice-sparkjava REST service implementation which utilizes SparkJava and provides REST endpoints. microstream-integrations-spring-boot Spring Boot Integration","title":"Installation","component":"manual","version":"6.0","name":"installation","url":"/manual/6.0/intro/installation.html","titles":[{"text":"Build Configuration","hash":"_build_configuration","id":1},{"text":"Modules","hash":"_modules","id":2}]},"88":{"id":88,"text":"Tested and officially supported JDKs: JDK Supported Versions Oracle JDK 8, 11, 17 OpenJDK Build by Oracle 8, 11, 17 Adoptium Temurin (HotSpot / OpenJ9) 8, 11, 17 Red Hat OpenJDK 8, 11 Amazon Corretto 8, 11, 17 Azul Zulu 8, 11, 17 Bellsoft Liberica 8, 11, 17 SapMachine 11, 17 ojdkbuild 8, 11 MicroSoft OpenJDK 11, 17 Alibaba Dragonwell 8, 11 GraalVM 20.0+ Android SDK API level 26+ In theory MicroStream is compatible with all JDK distributions from Version 8 on. Every desktop or server operating system which the supported JVMs are available for Android 8+ MicroStream’s core itself doesn’t have any dependencies to other libraries whatsoever. So you don’t have to worry about potential conflicts in your environment. This was a matter of choice of ours to keep the life of the developers using MicroStream as simple as possible. On the other hand feel free to include any dependencies you need, MicroStream will play along well, e.g. a logging framework of your choice.","title":"System Requirements","component":"manual","version":"6.0","name":"system-requirements","url":"/manual/6.0/intro/system-requirements.html","titles":[{"text":"Supported JDKs","hash":"_supported_jdks","id":1},{"text":"Supported Operating Systems","hash":"_supported_operating_systems","id":2},{"text":"Third Party Libraries","hash":"_third_party_libraries","id":3}]},"89":{"id":89,"text":"Welcome to the MicroStream Reference Manual. This manual includes concepts, instructions and examples to guide you on how to use MicroStream Storage and Cache, version 6.1. You should be familiar with the Java programming language and you should have installed your preferred Integrated Development Environment (IDE). But since you are here we guest you got that covered ;) See Changelog. The API documentation is available at https://docs.microstream.one/api/6.0/. For information on the commercial support for MicroStream see microstream.one. MicroStream is available under Eclipse Public License - v 2.0.","title":"Welcome","component":"manual","version":"6.0","name":"welcome","url":"/manual/6.0/intro/welcome.html","titles":[{"text":"What’s new in 6.1","hash":"_whats_new_in_6_1","id":1},{"text":"API Docs","hash":"_api_docs","id":2},{"text":"Support","hash":"_support","id":3},{"text":"License","hash":"_license","id":4}]},"90":{"id":90,"text":"Actually, a database is a passive collection of persisted data that can never be live on its own. But the managing thread accessing it can. When an EmbeddedStorageManager is \"started\" it is actually just setup with all kinds of default and user-defined settings and definitions. What is actually \"started\" are the database managing threads that process storing and loading requests. // Setup the database manager and start the managing threads EmbeddedStorageManager storageManager = EmbeddedStorage.start(); Of course, for every start() method, there needs to be something like a shutdown() method. So there is in MicroStream: // Stop accessing the database storageManager.shutdown(); But is it really necessary to call shutdown? Should it be? What if there’s an error and the process stops without calling shutdown()? Will that cause the database to become inconsistent, corrupted, maybe even destroyed? The answer is: It wouldn’t be much of a database solution if a crash could cause any problem in the persisted data. MicroStream data-store is carefully designed in such a fashion that the process it runs in can simply vanish at any point in time and the persisted data will never be corrupted. This is surprisingly simple and reliable to solve: Whenever a .store() call returns, it is guaranteed that the data stored by it has been physically written to the underlying storage layer, usually a file system. Before that, there is no guarantee regarding written data at all. In fact, should the process die before the last byte has been written and secured, the next StorageManager initialization will recognize that and truncate the last partially written store. Either way, all the data that was guaranteed to be written will be consistently available after the next .start(). As a consequence, this safety mechanism makes an explicit .shutdown() call pretty much unnecessary. It doesn’t hurt, but it is effectively more-less the same as just calling System.exit(0);. The only time when an explicit shutdown is really needed is, if the database managing threads shall be stopped but the application itself keeps running. For example, it is perfectly valid to start the StorageManager, work with the database, then stop it, maybe change some configuration or copy files or something like that and then start it up again to continue working. In any other case, the shutdown method can be ignored and the live database can happily just be \"killed\" while running. It is specifically designed to withstand such a treatment. Any live MicroStream database basically consists of three major parts: A place where the persisted data is located. Usually a file system directory. The managing threads accessing (read and write) the persisted data. The EmbeddedStorageManager instance to use and control the database in the application. Apart from a lot of internal components (configuration, processing logic, housekeeping state, etc.), that’s all there is. There is nothing special or \"magic\" about it, no static state, no global registration in the JVM process or something like that. The consequence of this is: If two EmbeddedStorageManager instances are started, each one with a different location for its persistend data, then the application has two live databases! If three or ten or 100 are started, then that’s the number of live databases the application has. There is no limit and no conflict between different databases inside the same application process. The only important thing is that no two running StorageManagers can access the same data location.","title":"Application Life-Cycle","component":"manual","version":"6.0","name":"application-life-cycle","url":"/manual/6.0/storage/application-life-cycle.html","titles":[{"text":"Stopping or Crashing a Live Database","hash":"_stopping_or_crashing_a_live_database","id":1},{"text":"Multiple Databases","hash":"_multiple_databases","id":2}]},"91":{"id":91,"text":"Deleting data does not require performing explicit deleting actions like DELETE FROM table WHERE…​. Instead you just need to clear any references to the object in your object-graph and store those changes. If a stored object is not reachable anymore its data will be deleted from the storage later. This behavior is comparable to Java’s garbage collector. root.MyArrayList.remove(0); storage.store(root.MyArrayList); Deleted data is not erased immediately from the storage files. The erasing from the storage files is done by the housekeeping process.","title":"Deleting Data","component":"manual","version":"6.0","name":"deleting-data","url":"/manual/6.0/storage/deleting-data.html","titles":[]},"92":{"id":92,"text":"pom.xml one.microstream microstream-storage-embedded 06.01.00-MS-GA one.microstream microstream-storage-embedded-configuration 06.01.00-MS-GA // Initialize a storage manager (\"the database\") with purely defaults. final EmbeddedStorageManager storageManager = EmbeddedStorage.start(); // print the last loaded root instance, // replace it with a current version and store it System.out.println(storageManager.root()); storageManager.setRoot(\"Hello World! @ \" + new Date()); storageManager.storeRoot(); // shutdown storage storageManager.shutdown(); This simplest example will create a new storage if no existing storage is found, if a existing storage is found it will be loaded (this is all done at line 2 in the example above). In line 6 the current storage’s content is printed. Line 7 assigns some data to the storage, replacing existing data if there is some. In line 8 everything gets stored. When using MicroStream, your entire database is accessed starting at a root instance. This instance is the root object of an object graph that gets persisted by the MicroStream storage logic. While the root instance can be of any type (for example just a collection or an array), it is a good idea to define an explicit root type specific for the application. In this simple example, it is a class called DataRoot, which wraps a single String. public class DataRoot { private String content; public DataRoot() { super(); } public String getContent() { return this.content; } public void setContent(final String content) { this.content = content; } @Override public String toString() { return \"Root: \" + this.content; } } For further information, see root instances. The following code is all that is required to setup a an application backed by a MicroStream database. The application’s convenience root instance is defined and an EmbeddedStorageManager instance, linked to the root, is created (and its database managing threads are started). This is a fully operational Java database application. // Application-specific root instance final DataRoot root = new DataRoot(); // Initialize a storage manager (\"the database\") with the given directory. final EmbeddedStorageManager storageManager = EmbeddedStorage.start( root, // root object Paths.get(\"data\") // storage directory ); // Set content data to the root element, including the time to visualize // changes on the next execution. root.setContent(\"Hello World! @ \" + new Date()); // Store the modified root and its content. storageManager.storeRoot(); This call is all that is necessary to store data in the simplest case. Best practice is to safely shutdown the storage manager by simply calling: storageManager.shutdown(); storageManager.storeRoot() is a special case method that always stores the root object. If you want to store any other object than the root itself, just call storageManager.store(modifiedObject) The full code for the Hello World example is on GitHub.","title":"Getting Started","component":"manual","version":"6.0","name":"getting-started","url":"/manual/6.0/storage/getting-started.html","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"Hello World","hash":"_hello_world","id":2},{"text":"The Root Instance","hash":"_the_root_instance","id":3},{"text":"Creating a Database","hash":"creating-a-database","id":4},{"text":"Storing Data","hash":"_storing_data","id":5},{"text":"Stopping a Live Database","hash":"_stopping_a_live_database","id":6}]},"93":{"id":93,"text":"Housekeeping is an internal background logic to optimize the database’s usage of memory and persistent storage space (typically disc space). It is comprised of mechanisms for cleaning up storage files, clearing unneeded cached data and recognizing deleted entities via garbage collection. Housekeeping is performed with a configurable time budget in configurable intervals to make sure it never interferes with the application’s work load too much (see housekeeping configuration). If new versions of an entity are stored or if entities become no longer reachable (meaning the become effectively deleted or \"garbage\" data), their older data is no longer needed. However, the byte sequences representing that old data still exist in the storage files. But since they will never be needed again, they become logical \"gaps\" in the storage files. Space that is occupied, but will never be read again. It might as well be all zeroes or not exist at all. Sadly, unwanted areas cannot simple by \"cut\" from files. Above all because that would ruin all file offsets coming after them. So with every newly stored version of an entity and every entity that is recognized as unreachable \"garbage\", a storage file consists more and more of useless \"gaps\" and less and less of actually used data. This makes the storage space less and less efficient. To prevent eventually ending up with a drive that is filled with useless bytes despite an actually not that big database, the files need to be \"cleaned up\" from time to time. To do this, the Housekeeping occasionally scans the storage files. If their \"payload\" ratio goes below the configured limit, the affected files will be retired: all data that belongs to still live entities is copied to a new file. Then the old file consists of 100% unneeded gap data and can safely be deleted. Which ratio value to set in the configuration is a matter of taste or, more precisely, depends on each individual application’s demands. A value of 1.0 (100%) means: only files with 100% payload, so no gaps at all, are acceptable. This means that for every store that contains at least one new version of an already existing entity, the corresponding storage file will contain the slightest gap, thus dropping below the demanded ratio of 100% and as a consequence, will be retired on the next occasion. This very aggressive cleanup strategy will keep the disc space usage at a perfect minimum, but at the cost of enormous amounts of copied data, since virtually every store will cause one or more storage files to be retired and their content be shifted into a new file. Respectively, a value of 0.0 (0%) means something like: \"Never care about gaps, just fill up the disc until it bursts.\" This keeps the disc write loads for the file cleanup at 0, but at the cost of rapidly eating up disc space. The best strategy most probably lies somewhere in between. Somewhere between 0.1 and 0.9 (10% and 90%). The default value is 0.75 (75%). So a storage file containing up to 25% of unused gap data is okay. Containing more gaps that 25% will cause a storage file to be retired. In addition to the payload ratio check, the file cleanup also retired files tha are too small or too big. For example: The application logic might commit a single store that is 100 MB in size. But the storage files are configured to be no larger than 10 MB (for example to keep a single file cleanup nice and fast). A single store is always written as a whole in the currently last storage file. The reason for this is to process the store as fast as possible and quickly return control to the application logic. When the housekeeping file cleanup scan encounters such an oversized file, it will retire it immediately by splitting it up across 10 smaller files and then deleting the oversized file. A similar logic applies to files that are too small. Upper and lower size bounds can be freely configured to arbitrary values. The defaults are 1 MB and 8 MB. To avoid repeated reads to storage files (which are incredibly expensive compared to just reading memory), data of once loaded entities is cached in memory. If an entity’s cached data is not requested again for a certain amount of time in relation to how much data is already cached, it is cleared from the cache to avoid unnecessarily consuming memory. The mechanism to constantly evaluate and clear cached data where applicable, is part of the housekeeping. The aggressiveness of this mechanism can be configured via the housekeeping configuration. In a reference-based (or graph-like) data paradigm, instances never have to be deleted explicitly. For example, there is no \"delete\" in the java language. There are only references. If those references are utilized correctly, deleting can be done fully automatically without any need for the developer to care about it. This is called \"garbage collection\". The concept is basically very simple: when the last reference to an instance is cut, that instance can never be accessed again. It becomes \"garbage\" that occupies memory with it data that is not needed any longer. To identify those garbage instances, all an algorithm (the \"garbage collector\") has to do is to follow every reference, starting at some defined root instance (or several) of a graph and mark every instance it encounters as \"reachable\". When it has no more unvisited instances in its queue, the marking is completed. Every instance that is not marked as reachable by then must be unreachable garbage and will be deleted from memory. Similar to the JVM’s garbage collection to optimize its memory consumption, MicroStream has a garbage collection of its own, but for the level of persistent storage space instead of memory space. However, MicroStreams multi-threaded garbage collector is currently still in development and not activated, yet. Housekeeping can also be triggered manually from the StorageConnection . Related methods are: issueCacheCheck(nanoTimeBudgetBound) issueCacheCheck(nanoTimeBudgetBound, entityEvaluator) issueFileCheck(nanoTimeBudgetBound) issueFileCheck(nanoTimeBudgetBound, fileDissolvingEvaluator) issueFullCacheCheck() issueFullCacheCheck(entityEvaluator) issueFullFileCheck() issueFullFileCheck(fileDissolvingEvaluator) issueFullGarbageCollection() issueGarbageCollection(nanoTimeBudget) All Housekeeping methods can be given a defined time budget or can be run until full completion.","title":"Housekeeping","component":"manual","version":"6.0","name":"housekeeping","url":"/manual/6.0/storage/housekeeping.html","titles":[{"text":"File cleanup:","hash":"_file_cleanup","id":1},{"text":"Cache cleanup","hash":"_cache_cleanup","id":2},{"text":"Garbage collection","hash":"_garbage_collection","id":3},{"text":"Explicit Housekeeping","hash":"_explicit_housekeeping","id":4}]},"94":{"id":94,"text":"MicroStream provides an API to import and export persisted data of the storage. It is pretty much the same as writing and reading a backup. The records in the storage are distributed in lots of files and folders, depending on channel count and other settings. To get order in the chaos the export produces one file per type. This files are used again by the import to read the data into the storage. The created binary type data files contain only records of the according type, nevertheless they have the same format as the channel storage files. Export NioFileSystem fileSystem = NioFileSystem.New(); EmbeddedStorageManager storage = EmbeddedStorage.start( fileSystem.ensureDirectoryPath(\"storage\") ); String fileSuffix = \"bin\"; StorageConnection connection = storage.createConnection(); StorageEntityTypeExportStatistics exportResult = connection.exportTypes( new StorageEntityTypeExportFileProvider.Default( fileSystem.ensureDirectoryPath(\"export-dir\"), fileSuffix ), typeHandler -> true // export all, customize if necessary ); XSequence exportFiles = CQL .from(exportResult.typeStatistics().values()) .project(s -> Paths.get(s.file().identifier())) .execute() ; Import NioFileSystem fileSystem = NioFileSystem.New(); EmbeddedStorageManager storage = EmbeddedStorage.start( fileSystem.ensureDirectoryPath(\"storage\") ); StorageConnection connection = storage.createConnection(); connection.importFiles(X.Enum( fileSystem.ensureFilePath(\"type1.bin\"), fileSystem.ensureFilePath(\"type2.bin\") )); It is also possible to convert the exported binary files to a human readable format, namely CSV. Why CSV? Contrary to XML or JSON, CSV is perfectly suited to represent records with the least possible overhead. There are a lot of tools, like spreadsheet editors, which can read and modify CSV files. The file’s size is at the possible minimum and the performance of the converter is significantly better than with the other formats. Binary to CSV NioFileSystem fileSystem = NioFileSystem.New(); EmbeddedStorageManager storage = EmbeddedStorage.start( fileSystem.ensureDirectoryPath(\"storage\") ); StorageDataConverterTypeBinaryToCsv converter = new StorageDataConverterTypeBinaryToCsv.UTF8( StorageDataConverterCsvConfiguration.defaultConfiguration(), new StorageEntityTypeConversionFileProvider.Default( fileSystem.ensureDirectoryPath(\"csv-dir\"), \"csv\" ), storage.typeDictionary(), null, // no type name mapping 4096, // read buffer size 4096 // write buffer size ); AReadableFile dataFile = fileSystem.ensureFilePath(\"type1.bin\").useReading(); try { converter.convertDataFile(dataFile); } finally { dataFile.close(); } CSV to Binary NioFileSystem fileSystem = NioFileSystem.New(); EmbeddedStorageManager storage = EmbeddedStorage.start( fileSystem.ensureDirectoryPath(\"storage\") ); StorageDataConverterTypeCsvToBinary converter = StorageDataConverterTypeCsvToBinary.New( StorageDataConverterCsvConfiguration.defaultConfiguration(), storage.typeDictionary(), new StorageEntityTypeConversionFileProvider.Default( fileSystem.ensureDirectoryPath(\"bin-dir\"), \"dat\" ) ); converter.convertCsv(fileSystem.ensureFilePath(\"type1.csv\"));","title":"Import / Export","component":"manual","version":"6.0","name":"import-export","url":"/manual/6.0/storage/import-export.html","titles":[{"text":"Data Conversion","hash":"_data_conversion","id":1}]},"95":{"id":95,"text":"MicroStream Data-Store is a native Java object graph storage engine. From a technical point of view it serves one purpose only: To fully or partially persist and restore a Java object graph in the simplest way possible for the user. MicroStream Data-Store is a storage engine, but no database management system (DBMS). Many features that typical DBMS provide have been left out on purpose. The reason is that those features exist to make a DBMS something of a server application platform of an \"old kind\" on top of its data store functionality: A standalone process with user management, connection management, session handling, often even with a programming language of its own, a querying interface (SQL), etc. Today, all of those server application features are already and much better handled by dedicated server applications (the \"new kind\"), implemented in a modern language like Java. They have their built-in user, connection and session management, the querying interface to the outside world are typically web services instead of SQL, etc. But those modern server applications still lack one important thing: an easy to use and technically efficient way to store and restore their application’s data. So a \"new kind\" server often uses an \"old kind\" server just to do the data storing. This comes at the price of catching all the overhead and problems of redundant user, connection and session management AND the outdated concepts and limitations of the old querying interface (SQL). Isn’t that very weird and frustratingly complicated? Why not simply include a modern data storing library in the modern server and be done with it? A storing library that perfectly fits the modern technology and brings in no redundant overhead or complication of a secondary outdated wannabe server process. This is exactly what MicroStream Data-Store is and the reason why it is intentionally not a DBMS but \"only\" a storage engine. One might think the easiest way to store and load data in Java would be Java’s built-in serialization. However, it turned out long ago to be very limited, making it hard, if not impossible, to be used as a replacement for a DBMS: Only complete object graphs can be stored and restored, which is unacceptable for all but very small databases. It is very inefficient in terms of storage size and performance. It does not handle changing class structures very well, basically forbidding classes of persisted entities to ever change or introducing massive manual effort to compensate. It cannot handle third-party classes that do not implement Serializable but cannot be changed. In short: The Java Serialization is not an acceptable data store solution and hence no valid replacement for those outdated DBMS. MicroStream Data-store is such a solution: It can persist, load or update object graphs partially and on-demand. It is very efficient both size- and performance-wise. It handles changing class structures by mapping data in the old structure to the current structure during loading; implicitly via internal heuristics or explicitly via a user-defined mapping strategy. It can automatically handle any Java constructs, only excluding those that are technically or reasonably not persistable (e.g. lambdas, proxies or instances with ties to JVM-internals like threads, etc.). MicroStream is what the Java Serialization should have been and it is the first and only really fitting data storing solution for modern applications, completely removing the need to attach a wannabe secondary server DBMS just to store data.","title":"Storage","component":"manual","version":"6.0","name":"index","url":"/manual/6.0/storage/index.html","titles":[]},"96":{"id":96,"text":"The MicroStream engine takes care of persisting your object graph. When you do queries, they are not run on the data stored by MicroStream, queries run on your data in the local system memory. There is no need to use special query languages like SQL. All operations can be done with plain Java. MicroStream does not restrict you in the way you query your object graph. You are totally free to choose the best method fitting to your application. One possibility may be Streams if you use the standard Java collections. public List getUnAvailableArticles() { return shop.getArticles().stream() .filter(a -> !a.available()) .collect(Collectors.toList()) ; } Of course you must care about lazy loading if you use that feature.","title":"Queries","component":"manual","version":"6.0","name":"queries","url":"/manual/6.0/storage/queries.html","titles":[]},"97":{"id":97,"text":"Object instances can be stored as simple records. One value after another as a trivial byte stream. References between objects are mapped with unique numbers, called ObjectId, or short OID. + With both combined, byte streams and OIDs, an object graph can be stored in a simple and quick way, as well as loaded, as a whole or partially. But there is a small catch. Where does it start? What is the first instance or reference at startup? + Strictly speaking \"nothing\". That’s why at least one instance or a reference to an instance must be registered in a special way, so that the application has a starting point from where the object graph can be loaded. This is a \"Root Instance\". Same difference, another problem are instances which are references by constant fields in Java classes. These aren’t created when the records are loaded from the database, but by the JVM while loading the classes. Without special treatment, this would be a problem: The application, meaning the JVM or the JVM process, starts, the constant instances are created by the JVM, one or more of them are stored, then the application shuts down. The stored data of the constants are now stored with a certain OID in the database. The application starts again. The Constant instances are created again by the JVM. The data records are read by MicroStream. The problem is: How should the application know what values, which are stored with a certain OID, belong to which constant? The JVM created everything from scratch at startup and doesn’t know anything about OIDs. To resolve this, the constant instances must be registered, just like the entity graph’s root instance. Then MicroStream can associate the constant instances with the stored data via the OIDs. Constant instances can be thought of as JVM-created implicit root instances for the object graph. In both cases, root and constant instances, it is about registering special starting points for the object graph in order to load it correctly. For MicroStream, from a plain technical view, both cases don’t make a difference. In the most common cases, nothing at all. The default behavior is enough to get things going. By default, a single instance can be registered as the entity graph’s root, accessible via EmbeddedStorage.root(). + Therefore, this is already a fully fledged (although tiny) database application: // Start the database manager EmbeddedStorageManager storageManager = EmbeddedStorage.start(); // Set the entity (graph) as root storageManager.setRoot(\"Hello World\"); // Store root storageManager.storeRoot(); If you are working with Microstream technology in a multi-threaded environment, there are a few things you need to pay extra attention to. When using standard frameworks, you often work in a multi-threaded environment. If you are using the older JDBC approach, you create a copy of your data that you work with within a single thread, modify the data, and then save it back in a database trace. Microstream works with data directly, allowing it to achieve significantly better performance parameters. However, for developers, this means that any reading and writing to this shared object graph must be synchronized. To make it easier to use within your application, we have prepared a simple way for you to do so. XThreads.executeSynchronized(() -> { root.changeData(); storageManager.store(root); }); This approach will immediately provide you with several benefits: Any changes to your object graph will be synchronized, every other thread will see the current value. Avoid Deadlocks In principle, you prevent the object graph from being modified at the same time it is saved. The simple default approach has its limits when the application defines an explicit root instance that must be updated/filled from the database directly during database initialization. Something like this: // Empty application-specific root, to be filled during start() MyApplicationRoot root = new MyApplicationRoot(); // Start the database manager EmbeddedStorageManager storage = EmbeddedStorage.start(); // root must be filled at this point... but how? root.printAllMyEntities(); To solve this, a custom root instance can be directly registered at the database setup. In the simplest case, is just has to be passed to .start();: // Empty application-specific root, to be filled during start() MyApplicationRoot root = new MyApplicationRoot(); // Start the database manager with a reference to the application's root. EmbeddedStorageManager storageManager = EmbeddedStorage.start(root); // root is \"magically\" filled at this point. (Yay!) root.printAllMyEntities(); Internally, the two concepts (default root and custom root) and handled by different mechanisms. This can be seen from the two different methods storageManager.defaultRoot(); storageManager.customRoot(); The simplified method storageManager.root(); automatically chooses the variant that is used. Since neither of those three methods can know the concrete type of the root instance (and adding a type parameter just for that would have been a complication overkill), they all can only be typed to return Object. So, to avoid annoying and dangerous casts, it is best to keep a direct reference to a custom root instance as shown in the code snippet above. Likewise, storageManager.storeRoot(); works for both variants, so there is no need to worry about how to store which one.","title":"Root Instances","component":"manual","version":"6.0","name":"root-instances","url":"/manual/6.0/storage/root-instances.html","titles":[{"text":"What Must Be Done in the Application?","hash":"_what_must_be_done_in_the_application","id":1},{"text":"Shared Mutable Data","hash":"_shared_mutable_data","id":2},{"text":"Synchronize access to shared mutable data","hash":"_synchronize_access_to_shared_mutable_data","id":3},{"text":"Custom Root Instances","hash":"_custom_root_instances","id":4}]},"98":{"id":98,"text":"The default way to configure a JCache provider is to use the class javax.cache.configuration.MutableConfiguration. This is mostly used to avoid provider specific code. If you want to use all of MicroStream’s Cache features, you can use our configuration implementation: one.microstream.cache.types.CacheConfiguration CachingProvider provider = Caching.getCachingProvider(); CacheManager cacheManager = provider.getCacheManager(); CacheConfiguration configuration = CacheConfiguration .Builder(Integer.class, String.class) .storeByValue() .expiryPolicyFactory(CreatedExpiryPolicy.factoryOf(Duration.ONE_MINUTE)) .build(); Cache cache = cacheManager.createCache(\"jCache\", configuration); cache.put(1, \"Hello World\"); String value = cache.get(1); To read an external configuration use CacheConfigurationLoader and CacheConfigurationParser or the Load*() methods of CacheConfiguration. CacheConfiguration configuration = CacheConfiguration .Load(\"cache-config.properties\", Integer.class, String.class); If you just use CacheConfiguration.Load() the default configuration file is used, which is either a file in the classpath root named microstream-cache.properties, or the path configured via the system property microstream.cache.configuration.path.","title":"Configuration","component":"manual","version":"6.0","name":"index","url":"/manual/6.0/cache/configuration/index.html","titles":[]},"99":{"id":99,"text":"These are the available properties of the CacheConfiguration type. The names are used accordingly in the external configuration files. They can be found as constants in CacheConfigurationPropertyNames. Property Description keyType Determines the required type of keys for the Cache. valueType Determines the required type of values for the Cache. storageConfigurationResourceName Path for the storage configuration for the backing store. cacheLoaderFactory A CacheLoader should be configured for \"Read Through\" caches to load values when a cache miss occurs. cacheWriterFactory A CacheWriter is used for write-through to an external resource. expiryPolicyFactory Determines when cache entries will expire based on creation, access and modification operations. evictionManagerFactory Clears cache entries using a policy. Works interval-based or on entry creation. readThrough When in \"read-through\" mode, cache misses that occur due to cache entries not existing as a result of performing a \"get\" will appropriately cause the configured CacheLoader to be invoked. writeThrough When in \"write-through\" mode, cache updates that occur as a result of performing \"put\" operations will appropriately cause the configured CacheWriter to be invoked. storeByValue When a cache is storeByValue, any mutation to the key or value does not affect the key of value stored in the cache. statisticsEnabled Checks whether statistics collection is enabled in this cache. managementEnabled Checks whether management is enabled on this cache.","title":"Properties","component":"manual","version":"6.0","name":"properties","url":"/manual/6.0/cache/configuration/properties.html","titles":[]},"100":{"id":100,"text":"MicroStream’s storage can be used as a backing store for the cache. It functions as a CacheWriter as well as a CacheReader, depending on the writeThrough and readThrough configuration. Per default it is used for both. EmbeddedStorageManager storageManager = EmbeddedStorage.start(); CachingProvider provider = Caching.getCachingProvider(); CacheManager cacheManager = provider.getCacheManager(); CacheConfiguration configuration = CacheConfiguration .Builder(Integer.class, String.class, \"my-cache\", storageManager) .build(); Cache cache = cacheManager.createCache(\"jCache\", configuration); If you prefer an external configuration, you can link the storage configuration: cache-config.properties keyType = java.lang.Integer valueType = java.lang.String readThrough = true writeThrough = true storageConfigurationResourceName = microstream-storage.properties microstream-storage.properties baseDirectory = ~/cache-data channelCount = 4 Or you can embed the storage configuration using the storage. prefix: cache-config.properties keyType = java.lang.Integer valueType = java.lang.String readThrough = true writeThrough = true storage.baseDirectory = ~/cache-data storage.channelCount = 4 application.properties spring.jpa.properties.hibernate.cache.microstream.missing_cache_strategy = create spring.jpa.properties.hibernate.cache.microstream.readThrough = true spring.jpa.properties.hibernate.cache.microstreamwriteThrough = true spring.jpa.properties.hibernate.cache.microstream.storage.baseDirectory = ~/cache-data spring.jpa.properties.hibernate.cache.microstream.storage.channelCount = 4 spring.jpa.properties.hibernate.cache.region.factory_class = one.microstream.cache.hibernate.types.CacheRegionFactory spring.jpa.properties.hibernate.cache.use_query_cache = true spring.jpa.properties.hibernate.cache.use_second_level_cache = true application.yml spring: jpa: properties: hibernate: cache: microstream: missing_cache_strategy: create readThrough: true writeThrough: true storage: baseDirectory: ~/cache-data channelCount: 4 region: factory_class: one.microstream.cache.hibernate.types.CacheRegionFactory use_query_cache: true use_second_level_cache: true","title":"Storage","component":"manual","version":"6.0","name":"storage","url":"/manual/6.0/cache/configuration/storage.html","titles":[{"text":"Spring example","hash":"_spring_example","id":1}]},"101":{"id":101,"text":"The Helidon integration for MicroStream ships with the official Helidon releases, and is hosted at Oracle’s Github repository. For more information see the Helidon Github Repository. Official Helidon site: https://helidon.io","title":"Helidon Integration","component":"manual","version":"6.0","name":"helidon","url":"/manual/6.0/misc/integrations/helidon.html","titles":[]},"102":{"id":102,"text":"Various MicroStream integrations are currently in the making. Integrations for Helidon and Spring Boot are already available.","title":"Integrations","component":"manual","version":"6.0","name":"index","url":"/manual/6.0/misc/integrations/index.html","titles":[]},"103":{"id":103,"text":"MicroStream comes with a Spring Boot integration. It is available within this artifact: pom.xml one.microstream microstream-integrations-spring-boot 06.01.00-MS-GA For more information consult the readme file. Official Spring Boot site: https://spring.io/projects/spring-boot","title":"Spring Boot Integration","component":"manual","version":"6.0","name":"spring-boot","url":"/manual/6.0/misc/integrations/spring-boot.html","titles":[]},"104":{"id":104,"text":"In certain environments or setups it is necessary to provide specific ClassLoader instances. This can be done by customizing the connection foundation. If a single ClassLoader is sufficient, just create a new provider by handing over the instance: EmbeddedStorageManager storage = EmbeddedStorage.Foundation(Paths.get(\"mydb\")) .onConnectionFoundation(cf -> cf.setClassLoaderProvider(ClassLoaderProvider.New(myClassLoader)) ) .start(); Or return a ClassLoader depending on the requested type: EmbeddedStorageManager storage = EmbeddedStorage.Foundation(Paths.get(\"mydb\")) .onConnectionFoundation(cf -> cf.setClassLoaderProvider(typeName -> { if(typeName.startsWith(\"com.company.module1.\")) { return module1ClassLoader; } if(typeName.startsWith(\"com.company.module2.\")) { return module2ClassLoader; } return ClassLoader.getSystemClassLoader(); }) ) .start(); Most application servers load the session’s classes with the context class loader. Just use the one of the current thread: EmbeddedStorageManager storage = EmbeddedStorage.Foundation(Paths.get(\"mydb\")) .onConnectionFoundation(cf -> cf.setClassLoaderProvider(ClassLoaderProvider.New( Thread.currentThread().getContextClassLoader() )) ) .start();","title":"Custom Class Loader","component":"manual","version":"6.0","name":"custom-class-loader","url":"/manual/6.0/storage/customizing/custom-class-loader.html","titles":[{"text":"Class Loader in Application Server","hash":"_class_loader_in_application_server","id":1}]},"105":{"id":105,"text":"In addition to the methods for legacy type mapping described in chapter Legacy Type Mapping there is also the possibility to implement custom legacy type handlers. Those handlers are the most flexible way to do the mapping from old to new types. The basic interface that has to be implemented is one.microstream.persistence.types.PersistenceLegacyTypeHandler. Fortunately the standard persistence implementation provides the abstract class one.microstream.persistence.binary.types.BinaryLegacyTypeHandler.AbstractCustom that should be sufficient to start with a custom implementation in most cases. See the example customLegacyTypeHandler on GitHub Please note the this example requires manual code modifications as described in it’s main class.","title":"Custom Legacy Type Handler","component":"manual","version":"6.0","name":"custom-legacy-type-handler","url":"/manual/6.0/storage/customizing/custom-legacy-type-handler.html","titles":[]},"106":{"id":106,"text":"Implementing the PersistenceEagerStoringFieldEvaluator interface allows you to handle the eager/lazy storing behavior of any known member. The default implementation of the MicroStream engine threads all fields as lazy storing. See Lazy and Eager Storing for details on lazy and eager storing. The PersistenceEagerStoringFieldEvaluator has only one method to be implemented: public boolean isEagerStoring(Class t, Field u) return true if the field has to be eager, otherwise return false. public class CustomEagerStoringFieldEvaluator implements PersistenceEagerStoringFieldEvaluator { @Override public boolean isEagerStoring(Class clazz, Field field) { if(clazz == MyClass.class && field.getName().equals(\"eagerField\") { return true; } return false; } } To register the customized PersistenceEagerStoringFieldEvaluator add it using the one.microstream.persistence.types.PersistenceFoundation.setReferenceFieldEagerEvaluator(PersistenceEagerStoringFieldEvaluator) method during the storage initialization. NioFileSystem fileSystem = NioFileSystem.New(); EmbeddedStorageManager storage = EmbeddedStorage .Foundation(fileSystem.ensureDirectoryPath(WORKINGDIR)) .onConnectionFoundation(f -> { f.setReferenceFieldEagerEvaluator(new CustomEagerStoringFieldEvaluator()); }) .start(ROOT) ; The full code for the example is on GitHub.","title":"Custom Storing Behavior","component":"manual","version":"6.0","name":"custom-storing-behavior","url":"/manual/6.0/storage/customizing/custom-storing-behavior.html","titles":[]},"107":{"id":107,"text":"Custom type handlers allow taking control over the storing and loading procedure of specific java types. This is useful to optimize the performance for storing complex objects or in the rare case that it is not possible to store a type with the default type handlers. There are two strategies for a simplified type handler implementation. Implementing a class that extends CustomBinaryHandler and defines a sequence of BinaryFields via the #Field~ static pseudo-constructor methods. Everything else like setting the name, calculating the binary offsets, etc. is then done implicitly via reflection. Example on GitHub This example implements a custom type handler for the java.awt.image.BufferedImage class. Instead of storing the rather complex object structure of that class the image is serialized as PNG image format using javax.imageio.ImageIO into a byte array. This byte array is then stored by MicroStream. The custom type handler must be registered in the CustomTypeHandlerRegistry to enable it: EmbeddedStorageManager storage = EmbeddedStorage .Foundation(WORKINGDIR) .onConnectionFoundation(f -> f.registerCustomTypeHandlers(new CustomBufferedImageHandler()) ) .start(ROOT); Implementing a class can be skipped altogether by using the method Binary#TypeHandler and passing the BinaryFields directly. Registering such a generically created TypeHandler is not required, either, since Version 3 of MicroStream brought a solution to just define a static method in the entity class that will be recognized and used by MicroStream. The following is a simple technical example on how a custom binary handler can be easily defined and technically leveraged to optimize storage behavior. E.g. imagine having millions of such objects that now only create 1 database record with a fraction of the required storage space instead of 4 records but hold the same information. public class Employee { /* * Fields with primitive data are (for whatever reason, e.g. project * design rules) all object types, but records should be stored as * efficient as possible, i.e. without overhead of references and value objects. * * MicroStream's generic type analysis does not know of this and hence cannot * do it. But defining a custom type handler can */ String id ; Double salary ; Date dateOfBirth; // constructor, getters, setters, etc /* * The entity class must just contain \"any\" method returning a suitable type * handler and MicroStream will recognize it and use the returned handler * automatically. * * Type type handler just needs to specify the entity class and define a list * of fields comprised of (name, getter, setter) in arbitrary order. */ static BinaryTypeHandler provideTypeHandler() { return Binary.TypeHandler( Employee.class, Binary.Field_long(\"id\", e -> Long.parseLong(e.id), (e, value) -> e.id = String.valueOf(value) ), Binary.Field_long(\"dateOfBirth\", e -> e.dateOfBirth.getTime(), (e, value) -> e.dateOfBirth = new Date(value) ), Binary.Field_double(\"salary\", e -> e.salary.longValue(), (e, value) -> e.salary = Double.valueOf(value) ) ); } } Full example is available on GitHub.","title":"Custom Type Handler","component":"manual","version":"6.0","name":"custom-type-handler","url":"/manual/6.0/storage/customizing/custom-type-handler.html","titles":[{"text":"Implementation","hash":"_implementation","id":1},{"text":"A Custom Binary Handler","hash":"_a_custom_binary_handler","id":2},{"text":"A Static Provider Method","hash":"_a_static_provider_method","id":3}]},"108":{"id":108,"text":"When a reference to the loading storage is needed in entities, e.g. usage of different tenants or to store its internal state in a tailored fashion, this can be done by this little trick. If an entity type contains one or more transient fields with field type compatible to Persister, the updating processing during loading will set the Persister instance (e.g. an EmbeddedStorageManager instance) used to load the entity instance to those fields. The fields must be transient to exclude them from the persistent form of the entity. Checking for transient fields is only the default implementation. The checking logic can be customized via PersistenceFoundation#setFieldEvaluatorPersistable. A more precise check for Persister fields can be customized via PersistenceFoundation#setFieldEvaluatorPersister. Note, however, that the check for compatibility with the Persister type is done in any case to avoid inconsistencies/crashes. If no applicable field is found, nothing happens and no additional meta data is kept in memory. This feature is completely optional. class MyEntity { String name ; int value; transient EmbeddedStorageManager storage; } Upon loading an instance of class MyEntity, a reference to the EmbeddedStorageManager used to load it is set to its field storage.","title":"Optional Storage Manager Reference in Entities","component":"manual","version":"6.0","name":"optional-storage-manager-reference-in-entities","url":"/manual/6.0/storage/customizing/optional-storage-manager-reference-in-entities.html","titles":[]},"109":{"id":109,"text":"Based on the REST API we provide a client, which serves a convenient web user interface to browse through the storage data. It is a runnable jar which starts a simple web server which then can be accessed by a browser of your choice. To download it use maven pom.xml one.microstream microstream-storage-restclient-app 06.01.00-MS-GA or this direct link: https://repo1.maven.org/maven2/one/microstream/microstream-storage-restclient-app/06.01.00-MS-GA/microstream-storage-restclient-app-06.01.00-MS-GA.jar Start the client. The port parameter is optional, default port is 8080. java -jar storage.restclient.app-06.01.00-MS-GA.jar --port=80 Then just open http://localhost in your browser, select the base URL of the REST service and click connect. Now you can browse through the data of the storage: Or view the statistics:","title":"Client GUI","component":"manual","version":"6.0","name":"client-gui","url":"/manual/6.0/storage/rest-interface/client-gui.html","titles":[]},"110":{"id":110,"text":"The MicroStream Storage isn’t a typical database server with administrative tooling and stuff like that. It is just a Java library which runs embedded in your application. The storage data layer, per default the file system, contains the serialized and persisted data. But it is not really accessible, or more precise, human-readable. Nor do we provide a query language to access the storage data. The Java objects, which reside in memory, are easy to inspect and traverse, e.g. with a debugger. But for various purposes, like monitoring, the requirement to read the actual stored data has come up. Since version 3.0 a REST interface for the storage data is included. It enables you to access the data via REST calls or a convenient user interface. It is made up of the following modules: ArtifactId Description microstream-storage-restadapter Adapter for low-level storage data externalization. Used by the REST service to adapt to a MicroStream Storage. microstream-storage-restservice Abstract REST service interface, which uses the REST adapter to access low level storage data. microstream-storage-restservice-sparkjava REST service implementation which utilizes SparkJava and provides REST endpoints. microstream-storage-restclient Abstract REST client interface, which serves as a Java wrapper for the REST API. microstream-storage-restclient-jersey REST client implementation which utilizes Jersey as a webservice framework. microstream-storage-restclient-app microstream-Executable client app with web user interface, which connects to a REST service.","title":"REST Interface","component":"manual","version":"6.0","name":"index","url":"/manual/6.0/storage/rest-interface/index.html","titles":[]},"111":{"id":111,"text":"[instance-name]/root Returns the name and object id of the current storage root element. Response { name: \"ROOT\", objectId: \"1000000000000000028\" } [instance-name]/object/:objectid Returns description and values of a distinct object. Path parameters Parameter Type Description objectId integer The requested object’s id Query parameters Parameter Type Description Default valueLength integer Limit size of returned value elements, e.g. String values. unlimited fixedOffset integer Fixed size members start offset. 0 fixedLength integer Amount of returned fixed size members. unlimited variableOffset integer Variable size members start offset. 0 variableLength integer Amount of returned variable size members. unlimited references boolean Determines if top-level references of the object should be returned as well. false Response { \"objectId\": \"1000000000000000028\", \"typeId\": \"110\", \"length\": \"0\", \"variableLength\": [ \"3\" ], \"simplified\": false, \"data\": [ [ \"1000000000000000029\", \"1000000000000000030\", \"1000000000000000031\" ] ], \"references\": null } [instance-name]/dictionary Returns the type dictionary as plain text. Response [Type dictionary contents] [instance-name]/maintenance/filesStatistics Returns statistics of the used storage files and channels. Response { \"creationTime\": \"2020-04-15T13:32:26.003Z\", \"channelStatistics\": { \"0\": { \"channelIndex\": 0, \"files\": [ { \"fileNumber\": \"1\", \"file\": \"storage\\\\channel_0\\\\channel_0_1.dat\", \"fileCount\": \"1\", \"liveDataLength\": \"2898\", \"totalDataLength\": \"2930\" } ], \"fileCount\": \"1\", \"liveDataLength\": \"2898\", \"totalDataLength\": \"2930\" } }, \"fileCount\": \"1\", \"liveDataLength\": \"2898\", \"totalDataLength\": \"2930\" }","title":"REST API","component":"manual","version":"6.0","name":"rest-api","url":"/manual/6.0/storage/rest-interface/rest-api.html","titles":[{"text":"GET Root","hash":"_get_root","id":1},{"text":"GET Object","hash":"_get_object","id":2},{"text":"GET Type Dictionary","hash":"_get_type_dictionary","id":3},{"text":"GET Statistics","hash":"_get_statistics","id":4}]},"112":{"id":112,"text":"First of all we have to connect a storage to a REST service. Just add the REST service implementation to your dependencies, the logger is optional. pom.xml one.microstream microstream-storage-restservice-sparkjava 06.01.00-MS-GA org.slf4j slf4j-simple 1.7.30 Now use the resolver to connect the service to a storage, start it, and you’re good to go. EmbeddedStorageManager storage = EmbeddedStorage.start(); if(storage.root() == null) { storage.setRoot(new Object[] { LocalDate.now(), X.List(\"a\", \"b\", \"c\"), 1337 }); storage.storeRoot(); } // create the REST service StorageRestService service = StorageRestServiceResolver.resolve(storage); // and start it service.start(); That’s all you have to do to open the REST endpoints to access the storage data. The base URL of the opened endpoints is per default: http://localhost:4567/microstream/ Internally, there is a REST adapter which opens access to the low-level storage data. This is used by the REST service layer, which is an abstract service interface. The default implementation of it, which uses Sparkjava, is used to open the REST endpoints. We just have to use this one to get started. If you want to change the default port (4567) or instance name (microstream) it can be done by using the rest service implementation directly. The spark service can then be customized by your liking. StorageRestServiceSparkJava service = StorageRestServiceSparkJava.New(storage); service.setSparkService( Service.ignite().port(80) ); service.setInstanceName(\"my-name\"); This will change the base URL to http://localhost/my-name/","title":"Setup","component":"manual","version":"6.0","name":"setup","url":"/manual/6.0/storage/rest-interface/setup.html","titles":[{"text":"REST Service","hash":"_rest_service","id":1},{"text":"Configuration","hash":"_configuration","id":2}]},"113":{"id":113,"text":"MicroStream supports a variety of storage targets. Through an abstracted file system (AFS), it is possible to connect to a lot of different back ends. The AFS allows to use folders and files, like in all common file systems, but with different connectors it is possible to use different solutions as the actual storage. To connect to the local file system use the Java Non-Blocking IO (NIO) connector, which is part of the base module, so no additional dependency is needed. EmbeddedStorage.start(Paths.get(\"path\", \"to\", \"storage\")); Internally this creates and uses a NioFileSystem and is a shortcut for: NioFileSystem fileSystem = NioFileSystem.New(); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"path\", \"to\", \"storage\")); The file system API is the same for all connectors, like for MySQL. This is part of another module. one.microstream microstream-enterprise-filesystem-sql 06.01.00-MS-GA mysql mysql-connector-java 8.0.21 // create JDBC data source MysqlDataSource dataSource = new MysqlDataSource(); dataSource.setUrl(\"jdbc:mysql://host:3306/mydb\"); dataSource.setUser(\"user\"); dataSource.setPassword(\"secret\"); // create sql file system SqlFileSystem fileSystem = SqlFileSystem.New( // use caching connector SqlConnector.Caching( SqlProviderMySql.New(dataSource) ) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"path\", \"to\", \"storage\"));","title":"Storage Targets","component":"manual","version":"6.0","name":"index","url":"/manual/6.0/storage/storage-targets/index.html","titles":[]},"114":{"id":114,"text":"The NIO connector can access the local or mounted file systems, as well as different in-memory file systems. This is probably the easiest way to start, especially for prototyping and testing purposes. For productive use, the other file systems are preferred. NioFileSystem fileSystem = NioFileSystem.New(); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"path\", \"to\", \"storage\")); The local file system is the default setting. If you want to use external configuration, no further action is required.","title":"Local File System","component":"manual","version":"6.0","name":"local-file-system","url":"/manual/6.0/storage/storage-targets/local-file-system.html","titles":[{"text":"Configuration","hash":"_configuration","id":1}]},"115":{"id":115,"text":"In some cases, it can be necessary to store modified encapsulated objects that cannot be a accessed from your code. public class ForeignObject { ... private HiddenObject hidden; ... } In the upper code snippet the \"hidden\" object cannot be accessed by store(myForeignObject.hidden) if no getter is available. To allow such hidden objects to be stored after they have been modified you have to options: Set the global storing strategy of the MicroStream instance to eager storing or Implement and set a custom PersistenceEagerStoringFieldEvaluator for this field. EmbeddedStorageManager storage = EmbeddedStorage.Foundation() .onConnectionFoundation( f -> f.setReferenceFieldEagerEvaluator( new CustomEagerStoringFieldEvaluator() ) ) .start(); To increase performance use immutable sub-graphs as often as possible. Storing those with the provided convenience storing methods or using a thread local storer to insert those sub-graphs concurrently can give a great performance boost.","title":"Best Practice","component":"manual","version":"6.0","name":"best-practice","url":"/manual/6.0/storage/storing-data/best-practice.html","titles":[{"text":"Storing Hidden Encapsulated Objects","hash":"_storing_hidden_encapsulated_objects","id":1},{"text":"Use Immutable data models","hash":"_use_immutable_data_models","id":2}]},"116":{"id":116,"text":"If the application works in MVC frameworks, the work is often done by getting some data from a data source, modifying it, and then store it back in a data store. This style of work application always works with a copy of the data. Which allows it to use mutable data only within a single thread. The developer doesn’t have to worry about data synchronization and then store this data in a database transaction. This way of working is very practical, it does not require developers to have knowledge of multithreaded programming and thanks to this it is very widespread. Can similar technical work be used when working with MicroStream? Of course, elegantly, very simply and safely we can use the ObjectCopier utility to create a deep copy of our data, change it, and save it back. Very simple idea, just create a purchase of actual data to work within the application and at the end save that data back. Unfortunately, it’s not that simple. If the standard copy function is called over an object in Java, it creates a copy of that object, but the other object’s references remain the same. This doesn’t help so much. Because usually, an application contains a more complex data structure than a single object. This approach is called shallow copy. More here: https://en.wikipedia.org/wiki/Object_copying What is actually needed at this point is a deep copy. You need to create a complete copy of the complete subgraph from this object. MicroStream provides the full support for a deep copy. However, the following conditions must be met: Data must be already saved and manage by MicroStream. There are no circular references. The Object Graph is a Tree. (From graph theory, object graph contains no circles.) If these two above conditions are met, ObjectCopier can be relatively easily called and a deep copy of the data will be created. ObjectCopier objectCopier = ObjectCopier.New(); Customer customer = root.getCustomer(id); Customer customerCopy = objectCopier.copy(customer); customerCopy.addPurchase(purchase); XThreads.executeSynchronized(() -> { root.setCustomer(id, customerCopy); storage.store(root.getcusomers()); } What are the parts of this code? Just create an instance of ObjectCopier class due to factory method New(); Get customer Make a deep copy of the customer object Modify this object graph In synchronized mode save this customer instead of the original customer and save it into a datastore This simple example written in pseudocode aims to demonstrate one of the many ways to solve working over a shared object graph in a multi-threaded environment.","title":"Use Data Copy","component":"manual","version":"6.0","name":"deep-copy","url":"/manual/6.0/storage/storing-data/deep-copy.html","titles":[{"text":"Deep Copy vs Shallow Copy","hash":"_deep_copy_vs_shallow_copy","id":1},{"text":"Deep Copy Utility (ObjectCopier)","hash":"_deep_copy_utility_objectcopier","id":2}]},"117":{"id":117,"text":"MicroStream is designed to work with object graphs. Thus, storing data means to store an object graph. This includes the object’s value fields and references to other objects. Storing an object will also store all instances referenced by this objects that have not been stored before. While storing your data most of the work MicroStream performs for you. You only need to call the store method on the correct object. The rule is: \"The Object that has been modified has to be stored!\". Storing objects that are not part of an object graph is most likely pointless. See Getting Started how to create a database with a root instance. To store the registered root instance just call the storeRoot() method of a EmbeddedStorageManager instance. // Init storage manager final EmbeddedStorageManager storageManager = EmbeddedStorage.start(root); // Store the root object storageManager.storeRoot(); To store a newly created object, store the \"owner\" of the object. In the example below a new object is created and added to the myObjects list of the root object. Then the modified list gets stored. This will also store the new object. // Add a new data object to the list in root MyData dataItem = new MyData(\"Alice\"); root.myObjects.add(dataItem); // Store the modified list storageManager.store(root.myObjects); Before storing a modified object keep in your mind that the modified object needs to be stored. In case of a value types, like int, it is the object that has the int field as a member: // Modify a value type memeber and store it dataItem.setIntValue(100); storageManager.store(dataItem); Don’t forget immutable objects Immutable objects like String cannot be modified. Assigning a new value to a String does not modify the String object. Instead a new String instance is created and the reference is changed! // Change a string object and store it dataItem.setName(\"Bob\"); storageManager.store(dataItem); The full code for the example is on GitHub.","title":"Storing Data","component":"manual","version":"6.0","name":"index","url":"/manual/6.0/storage/storing-data/index.html","titles":[{"text":"Storing Root Instances","hash":"_storing_root_instances","id":1},{"text":"Storing New Objects","hash":"_storing_new_objects","id":2},{"text":"Storing Modified Objects","hash":"_storing_modified_objects","id":3}]},"118":{"id":118,"text":"The MicroStream engine supports two general storing strategies: lazy and eager storing. By default, MicroStream uses the lazy storing strategy. These storing strategies differ in the way how objects, referenced by the object to be stored are handled if those referenced objects had already been stored. Lazy storing is the default storing mode of the MicroStream engine. Referenced instances are stored only if they have not been stored yet. If a referenced instance has been stored previously it is not stored again even if it has been modified. That’s why modified objects must be stored explicitly. In eager storing mode referenced instances are stored even if they had been stored before. Contrary to Lazy storing this will also store modified child objects at the cost of performance. To use lazy or eager storing explicitly, get an instance of the required Storer and use it’s store methods: Storer storer = storage.createEagerStorer(); storer.store(myData); storer.commit(); Available Storers are: storage.createLazyStorer() storage.createEagerStorer() Standard storing: storage.createStorer() will provide corresponding Storer instances. Beside the 'global' lazy or eager storing strategies MicroStream allows to implement an individual handling for the storing behavior. See PersistenceEagerStoringFieldEvaluator for details.","title":"Lazy and Eager Storing","component":"manual","version":"6.0","name":"lazy-eager-full","url":"/manual/6.0/storage/storing-data/lazy-eager-full.html","titles":[{"text":"Lazy Storing","hash":"_lazy_storing","id":1},{"text":"Eager Storing","hash":"eager-storing","id":2},{"text":"Usage","hash":"_usage","id":3},{"text":"Custom Handling","hash":"_custom_handling","id":4}]},"119":{"id":119,"text":"Beside long store(Object instance) MicroStream provides some convenience methods to store several objects at once: void storeAll(Iterable instances) Stores the passed instance in any case and all referenced instances of persistable references recursively, but stores referenced instances only if they are newly encountered (e.g. don’t have an id associated with them in the object registry, yet and are therefore required to be handled). This is useful for the common case of just storing an updated instance and potentially newly created instances along with it while skipping all existing (and normally unchanged) referenced instances. List subset = myCollection.getSubset(); subset.foreach(item -> item.modify()); storage.storeAll(subset); long[] storeAll(Object... instances) Convenience method to store multiple instances. The passed array (maybe implicitly created by the compiler) itself is NOT stored. storage.storeAll(itemA, iteamB, iteamC); MicroStream does not provide explicit transactions, every call to a store method is automatically a transaction. A store operation is an atomic all or nothing operation If the store call is successful all data is written to the storage. Otherwise no data is persisted. Partially persisted data will be reverted.","title":"Convenience Methods and Explicit Storing (Transactions)","component":"manual","version":"6.0","name":"transactions","url":"/manual/6.0/storage/storing-data/transactions.html","titles":[{"text":"Convenience Methods","hash":"_convenience_methods","id":1},{"text":"Transactions","hash":"_transactions","id":2}]},"120":{"id":120,"text":"The default MicroStream implementation fully supports the Java transient field modifier. Class members marked transient will not be persisted. public class User { private String username; //do not persist the users password private transient String password; } It is possible to override the default behavior by implementing a custom PersistenceFieldEvaluator. PersistenceFieldEvaluator fieldEvaluator = (clazz, field) -> !field.getName().startsWith(\"_\"); EmbeddedStorageManager storage = EmbeddedStorage.Foundation() .onConnectionFoundation( c -> c.setFieldEvaluatorPersistable(fieldEvaluator) ) .createEmbeddedStorageManager() .start();","title":"Transient Fields","component":"manual","version":"6.0","name":"transient-fields","url":"/manual/6.0/storage/storing-data/transient-fields.html","titles":[]},"121":{"id":121,"text":"MicroStream offers a Hibernate cache region factory, which can be found in the cache.hibernate module. pom.xml one.microstream microstream-cache-hibernate 06.01.00-MS-GA The region factory’s class name is one.microstream.cache.hibernate.types.CacheRegionFactory. It is configured via the property hibernate.cache.region.factory_class. Depending on your environment it can be configured in different ways. If you use a good old persistence.xml, set the property there: persistence.xml org.hibernate.jpa.HibernatePersistenceProvider ... ... ... application.properties spring.jpa.properties.hibernate.cache.microstream.missing_cache_strategy=create spring.jpa.properties.hibernate.cache.region.factory_class=one.microstream.cache.hibernate.types.CacheRegionFactory spring.jpa.properties.hibernate.cache.use_query_cache=true spring.jpa.properties.hibernate.cache.use_second_level_cache=true spring.jpa.properties.javax.persistence.sharedCache.mode=ALL application.yml spring: jpa: properties: hibernate: cache: microstream: missing_cache_strategy: create region: factory_class: one.microstream.cache.hibernate.types.CacheRegionFactory use_query_cache: true use_second_level_cache: true javax: persistence: sharedCache: mode: ALL","title":"Hibernate Second Level Cache","component":"manual","version":"6.0","name":"hibernate-second-level-cache","url":"/manual/6.0/cache/use-cases/hibernate-second-level-cache.html","titles":[{"text":"Spring Example","hash":"_spring_example","id":1}]},"122":{"id":122,"text":"First of all add the MicroStream Cache dependency: pom.xml one.microstream microstream-cache 06.01.00-MS-GA The core caching abstraction provided by Spring comes in the spring-context module. org.springframework spring-context ... If you use Spring Boot, then add the spring-boot-starter-cache package to add the caching dependencies: org.springframework.boot spring-boot-starter-cache To enable caching, Spring makes good use of annotations, much like enabling any other configuration level feature in the framework. The caching feature can be enabled by simply providing a cache setup component. @SpringBootApplication @EnableCaching public class MyApplication @Component public class CachingSetup implements JCacheManagerCustomizer { @Override public void customize(CacheManager cacheManager) { cacheManager.createCache(\"my_cache\", new MutableConfiguration<>() .setExpiryPolicyFactory(CreatedExpiryPolicy.factoryOf(new Duration(SECONDS, 10000))) .setStoreByValue(true) .setStatisticsEnabled(true)); } } More information about the Spring Cache Abstraction: https://docs.spring.io/spring/docs/current/spring-framework-reference/integration.html#cache","title":"Spring Cache","component":"manual","version":"6.0","name":"spring-cache","url":"/manual/6.0/cache/use-cases/spring-cache.html","titles":[]},"123":{"id":123,"text":"The layered entities code generator is an annotation processor, provided by the microstream-base module. The maven configuration looks like this: pom.xml one.microstream microstream-base 06.01.00-MS-GA org.apache.maven.plugins maven-compiler-plugin 3.8.1 1.8 1.8 UTF-8 one.microstream.entity.codegen.EntityProcessor -Amicrostream.entity.hashequalator=true -Amicrostream.entity.appendable=true If you don’t want the HashEqualator to be generated, just set the microstream.entity.hashequalator argument to false. You can leave it out otherwise, the default value is true. The same applies to the Appendable.","title":"Configuration","component":"manual","version":"6.0","name":"configuration","url":"/manual/6.0/misc/layered-entities/configuration.html","titles":[]},"124":{"id":124,"text":"Given is the following entity: public interface Person extends Entity { public String firstName(); public String lastName(); } So how is it done? Since the code generator provides a creator, we can use it to create a new Person. Person john = PersonCreator.New() .firstName(\"John\") .lastName(\"Doe\") .create(); Let’s see what the debugger displays if we run this code: There’s always an entity chain, with The identity (PersonEntity) as outer layer Then the logic layers, none here in our example And the inner most layer is always the data (PersonData), which holds the properties. The properties can be accessed like defined in the entity’s interface: String firstName = john.firstName(); // -> John String lastName = john.lastName(); // -> Doe The creator can also be used to create copies. Just hand over the existing one as template: Person mike = PersonCreator.New(john) // use John as template .firstName(\"Mike\") .create(); This will create a \"Mike Doe\".","title":"Creating Entities","component":"manual","version":"6.0","name":"creating-entities","url":"/manual/6.0/misc/layered-entities/creating-entities.html","titles":[]},"125":{"id":125,"text":"The entity types are just simple interfaces with value methods, which have following requirements: A return type, no void No parameters No type parameters No declared checked exceptions You are not limited otherwise. Use any types you want. Inheritance and generics are supported as well. Beeing.java public interface Beeing { public B partner(); } Named.java public interface Named { public String name(); } Animal.java public interface Animal extends Beeing, Entity { public String species(); } Pet.java public interface Pet extends Animal, Named { } Human.java public interface Human extends Beeing, Named, Entity { } There is one base type (Beeing), one feature interface (Named) and three entities (Animal, Pet, Human). The code generator takes care of the three entities, and its output looks like this: AnimalEntity.java public class AnimalEntity extends EntityLayerIdentity implements Animal { protected AnimalEntity() { super(); } @Override protected Animal entityData() { return (Animal)super.entityData(); } @Override public final String species() { return this.entityData().species(); } @Override public final Animal partner() { return this.entityData().partner(); } } AnimalData.java public class AnimalData extends EntityData implements Animal { private final String species; private final Animal partner; protected AnimalData(final Animal entity, final String species, final Animal partner) { super(entity); this.species = species; this.partner = partner; } @Override public String species() { return this.species; } @Override public Animal partner() { return this.partner; } } AnimalCreator.java public interface AnimalCreator extends Entity.Creator { public AnimalCreator species(String species); public AnimalCreator partner(Animal partner); public static AnimalCreator New() { return new Default(); } public static AnimalCreator New(final Animal other) { return new Default().copy(other); } public class Default extends Entity.Creator.Abstract implements AnimalCreator { private String species; private Animal partner; protected Default() { super(); } @Override public AnimalCreator species(final String species) { this.species = species; return this; } @Override public AnimalCreator partner(final Animal partner) { this.partner = partner; return this; } @Override protected EntityLayerIdentity createEntityInstance() { return new AnimalEntity(); } @Override public Animal createData(final Animal entityInstance) { return new AnimalData(entityInstance, this.species, this.partner); } @Override public AnimalCreator copy(final Animal other) { final Animal data = Entity.data(other); this.species = data.species(); this.partner = data.partner(); return this; } } } AnimalUpdater.java public interface AnimalUpdater extends Entity.Updater { public static boolean setSpecies(final Animal animal, final String species) { return New(animal).species(species).update(); } public static boolean setPartner(final Animal animal, final Animal partner) { return New(animal).partner(partner).update(); } public AnimalUpdater species(String species); public AnimalUpdater partner(Animal partner); public static AnimalUpdater New(final Animal animal) { return new Default(animal); } public class Default extends Entity.Updater.Abstract implements AnimalUpdater { private String species; private Animal partner; protected Default(final Animal animal) { super(animal); } @Override public AnimalUpdater species(final String species) { this.species = species; return this; } @Override public AnimalUpdater partner(final Animal partner) { this.partner = partner; return this; } @Override public Animal createData(final Animal entityInstance) { return new AnimalData(entityInstance, this.species, this.partner); } @Override public AnimalUpdater copy(final Animal other) { final Animal data = Entity.data(other); this.species = data.species(); this.partner = data.partner(); return this; } } } PetEntity.java public class PetEntity extends EntityLayerIdentity implements Pet { protected PetEntity() { super(); } @Override protected Pet entityData() { return (Pet)super.entityData(); } @Override public final String species() { return this.entityData().species(); } @Override public final Animal partner() { return this.entityData().partner(); } @Override public final String name() { return this.entityData().name(); } } PetData.java public class PetData extends EntityData implements Pet { private final String species; private final Animal partner; private final String name ; protected PetData(final Pet entity, final String species, final Animal partner, final String name ) { super(entity); this.species = species; this.partner = partner; this.name = name ; } @Override public String species() { return this.species; } @Override public Animal partner() { return this.partner; } @Override public String name() { return this.name; } } PetCreator.java public interface PetCreator extends Entity.Creator { public PetCreator species(String species); public PetCreator partner(Animal partner); public PetCreator name(String name); public static PetCreator New() { return new Default(); } public static PetCreator New(final Pet other) { return new Default().copy(other); } public class Default extends Entity.Creator.Abstract implements PetCreator { private String species; private Animal partner; private String name ; protected Default() { super(); } @Override public PetCreator species(final String species) { this.species = species; return this; } @Override public PetCreator partner(final Animal partner) { this.partner = partner; return this; } @Override public PetCreator name(final String name) { this.name = name; return this; } @Override protected EntityLayerIdentity createEntityInstance() { return new PetEntity(); } @Override public Pet createData(final Pet entityInstance) { return new PetData(entityInstance, this.species, this.partner, this.name ); } @Override public PetCreator copy(final Pet other) { final Pet data = Entity.data(other); this.species = data.species(); this.partner = data.partner(); this.name = data.name (); return this; } } } PetUpdater.java public interface PetUpdater extends Entity.Updater { public static boolean setSpecies(final Pet pet, final String species) { return New(pet).species(species).update(); } public static boolean setPartner(final Pet pet, final Animal partner) { return New(pet).partner(partner).update(); } public static boolean setName(final Pet pet, final String name) { return New(pet).name(name).update(); } public PetUpdater species(String species); public PetUpdater partner(Animal partner); public PetUpdater name(String name); public static PetUpdater New(final Pet pet) { return new Default(pet); } public class Default extends Entity.Updater.Abstract implements PetUpdater { private String species; private Animal partner; private String name ; protected Default(final Pet pet) { super(pet); } @Override public PetUpdater species(final String species) { this.species = species; return this; } @Override public PetUpdater partner(final Animal partner) { this.partner = partner; return this; } @Override public PetUpdater name(final String name) { this.name = name; return this; } @Override public Pet createData(final Pet entityInstance) { return new PetData(entityInstance, this.species, this.partner, this.name ); } @Override public PetUpdater copy(final Pet other) { final Pet data = Entity.data(other); this.species = data.species(); this.partner = data.partner(); this.name = data.name (); return this; } } } HumanEntity.java public class HumanEntity extends EntityLayerIdentity implements Human { protected HumanEntity() { super(); } @Override protected Human entityData() { return (Human)super.entityData(); } @Override public final Human partner() { return this.entityData().partner(); } @Override public final String name() { return this.entityData().name(); } }","title":"Defining Entities","component":"manual","version":"6.0","name":"defining-entities","url":"/manual/6.0/misc/layered-entities/defining-entities.html","titles":[{"text":"Entities","hash":"_entities","id":1},{"text":"Generated Code","hash":"_generated_code","id":2}]},"126":{"id":126,"text":"Concept to separate the basic aspects of what defines an entity into separate instances of different layers: Identity, a never to be replaced instance representing an entity in terms of references to it Logic, nestable in an arbitrary number of dynamically created logic layers, e.g. logging, locking, versioning, etc. Data, always immutable Entity graphs are constructed by strictly only referencing identity instances (the \"outer shell\" of an entity), while every inner layer instance is unshared. This also allows the actual data instance to be immutable, while at the same time leaving referential integrity of an entity graph intact. MicroStream provides ready-to-use logic layers for: Logging Versioning While the layers admittedly introduce considerable technical complexity and runtime overhead, this concept is a production ready solution for nearly all requirements regarding cross cutting concerns and aspects. To use this concept in your code, there need to be at least implementations for the entity’s identity and data. Let’s say the entity looks like this: public interface Person extends Entity { public String firstName(); public String lastName(); } There needs to be a identity class: public class PersonEntity extends EntityLayerIdentity implements Person { protected PersonEntity() { super(); } @Override protected Person entityData() { return (Person)super.entityData(); } @Override public final String firstName() { return this.entityData().firstName(); } @Override public final String lastName() { return this.entityData().lastName(); } } And a data class: public class PersonData extends EntityData implements Person { private final String firstName; private final String lastName ; protected PersonData(final Person entity, final String firstName, final String lastName ) { super(entity); this.firstName = firstName; this.lastName = lastName ; } @Override public String firstName() { return this.firstName; } @Override public String lastName() { return this.lastName; } } A lot of code to write to get an entity with two properties! But don’t worry, there is a code generator for that. An annotation processor to be precise. The only code you have to provide are the entity interfaces, all the other stuff will be generated. Just add the annotation processor type one.microstream.entity.codegen.EntityProcessor to your compiler configuration. That’s it. The generator also builds a creator: public interface PersonCreator extends Entity.Creator { public PersonCreator firstName(String firstName); public PersonCreator lastName(String lastName); public static PersonCreator New() { return new Default(); } public static PersonCreator New(final Person other) { return new Default().copy(other); } public class Default extends Entity.Creator.Abstract implements PersonCreator { private String firstName; private String lastName ; protected Default() { super(); } @Override public PersonCreator firstName(final String firstName) { this.firstName = firstName; return this; } @Override public PersonCreator lastName(final String lastName) { this.lastName = lastName; return this; } @Override protected EntityLayerIdentity createEntityInstance() { return new PersonEntity(); } @Override public Person createData(final Person entityInstance) { return new PersonData(entityInstance, this.firstName, this.lastName ); } @Override public PersonCreator copy(final Person other) { final Person data = Entity.data(other); this.firstName = data.firstName(); this.lastName = data.lastName (); return this; } } } An Updater: public interface PersonUpdater extends Entity.Updater { public static boolean setFirstName(final Person person, final String firstName) { return New(person).firstName(firstName).update(); } public static boolean setLastName(final Person person, final String lastName) { return New(person).lastName(lastName).update(); } public PersonUpdater firstName(String firstName); public PersonUpdater lastName(String lastName); public static PersonUpdater New(final Person person) { return new Default(person); } public class Default extends Entity.Updater.Abstract implements PersonUpdater { private String firstName; private String lastName ; protected Default(final Person person) { super(person); } @Override public PersonUpdater firstName(final String firstName) { this.firstName = firstName; return this; } @Override public PersonUpdater lastName(final String lastName) { this.lastName = lastName; return this; } @Override public Person createData(final Person entityInstance) { return new PersonData(entityInstance, this.firstName, this.lastName ); } @Override public PersonUpdater copy(final Person other) { final Person data = Entity.data(other); this.firstName = data.firstName(); this.lastName = data.lastName (); return this; } } } An optional equalator, with equals and hashCode methods: public interface PersonHashEqualator extends HashEqualator { public static PersonHashEqualator New() { return new Default(); } public final class Default implements PersonHashEqualator, Stateless { public static boolean equals(final Person person1, final Person person2) { return X.equal(person1.firstName(), person2.firstName()) && X.equal(person1.lastName (), person2.lastName ()) ; } public static int hashCode(final Person person) { return Objects.hash( person.firstName(), person.lastName () ); } Default() { super(); } @Override public boolean equal(final Person person1, final Person person2) { return equals(person1, person2); } @Override public int hash(final Person person) { return hashCode(person); } } } And an optional Appendable: public interface PersonAppendable extends VarString.Appendable { public static String toString(final Person person) { return New(person).appendTo(VarString.New()).toString(); } public static PersonAppendable New(final Person person) { return new Default(person); } public static class Default implements PersonAppendable { private final Person person; Default(final Person person) { super(); this.person = person; } @Override public VarString appendTo(final VarString vs) { return vs.append(this.person.getClass().getSimpleName()) .append(\" [lastName = \") .append(this.person.lastName()) .append(\", firstName = \") .append(this.person.firstName()) .append(']'); } } }","title":"Layered Entities","component":"manual","version":"6.0","name":"index","url":"/manual/6.0/misc/layered-entities/index.html","titles":[]},"127":{"id":127,"text":"Another predefined logic layer is for logging purposes. Since there is a myriad of loggers out there, MicroStream doesn’t provide any special adapter, but a generic type which can be used to adapt to the logging framework of your choice. Just create a class and implement EntityLogger, and you are good to go. public class JulLogger implements EntityLogger { @Override public void afterUpdate( final Entity identity, final Entity data, final boolean successful) { Logger.getLogger(identity.getClass().getName()) .info(\"Entity updated\"); } } Additional to afterUpdate there are further hooks: entityCreated afterRead beforeUpdate Now just add the logger when creating entities: JulLogger logger = new JulLogger(); Person john = PersonCreator.New() .addLayer(logger) .firstName(\"John\") .lastName(\"Doe\") .create(); When you call PersonUpdater.setLastName(john, \"Smith\"); the logger’s output is Oct 15, 2019 11:17:53 AM JulLogger afterUpdate INFO: Entity updated","title":"Logging","component":"manual","version":"6.0","name":"logging","url":"/manual/6.0/misc/layered-entities/logging.html","titles":[]},"128":{"id":128,"text":"Entities can be created with an arbitrary amount of layers, so feel free to combine them as you like: EntityVersionContext versionContext = EntityVersionContext.AutoIncrementingLong(); JulLogger logger = new JulLogger(); Person john = PersonCreator.New() .addLayer(versionContext) .addLayer(logger) .firstName(\"John\") .lastName(\"Doe\") .create(); The example on GitHub makes use of all the described features.","title":"Multiple Layers","component":"manual","version":"6.0","name":"multiple-layers","url":"/manual/6.0/misc/layered-entities/multiple-layers.html","titles":[]},"129":{"id":129,"text":"The data layer is always immutable. In order to update the values we have to replace the data layer completely. This is done with the updater. The property setter methods can be chained, so it is easy to update multiple properties, for example: PersonUpdater.New(mike) .firstName(\"Jim\") .lastName(\"Hope\") .update(); If only one property needs to be updated, the updater class offers static convenience methods for that: PersonUpdater.setFirstName(mike, \"Jim\");","title":"Updating Entities","component":"manual","version":"6.0","name":"updating-entities","url":"/manual/6.0/misc/layered-entities/updating-entities.html","titles":[]},"130":{"id":130,"text":"An arbitrary amount of logic layers can be added to entities. Let’s use the predefined versioning layer. It will keep track of all changes. Technically every new data layer which is added by the updater, will create a new version entry. EntityVersionContext versionContext = EntityVersionContext.AutoIncrementingLong(); Person john = PersonCreator.New() .addLayer(versionContext) .firstName(\"John\") .lastName(\"Doe\") .create(); Let’s have a look at the debugger: Now the versioning layer is chained between the identity layer and the data layer. If we update the entity a few times, we will see how the versioning layer works. In this case we use an auto-incrementing Long as key. PersonUpdater.setLastName(john, \"Smith\"); PersonUpdater.setLastName(john, \"Archer\"); PersonUpdater.setLastName(john, \"Bennett\"); john.lastName() // now returns \"Bennett\" If you want to access older versions use the context: versionContext.versions(john).get(1L); // -> \"John Smith\" To limit the amount of preserved versions, a cleaner can be utilized: EntityVersionCleaner versionCleaner = EntityVersionCleaner.AmountPreserving(10); EntityVersionContext versionContext = EntityVersionContext.AutoIncrementingLong(cleaner); This will keep only the last ten versions of the person. Additionally to number keys, timestamps can be used as well. EntityVersionContext systemTimeContext = EntityVersionContext.AutoIncrementingSystemTimeMillis(); EntityVersionContext nanoTimeContext = EntityVersionContext.AutoIncrementingSystemNanoTime(); EntityVersionContext instantContext = EntityVersionContext.AutoIncrementingInstant(); They can be preserved for a specific time range: EntityVersionCleaner cleaner = EntityVersionCleaner.AgePreservingInstant(Duration.of(1, ChronoUnit.YEARS)); EntityVersionContext context = EntityVersionContext.AutoIncrementingInstant(cleaner); The version context can be used as a shared state object. So you can control versioning for multiple entities at once, or even for the hole entity graph. The auto-incrementing contexts take care of the key creation. If you need to control it by yourself, use the mutable context. But be aware that you have to set the version before updating any data, otherwise the current one will be overwritten. EntityVersionContext.Mutable versionContext = EntityVersionContext.Mutable(); versionContext.currentVersion(\"rev-1\"); Person john = PersonCreator.New() .addLayer(versionContext) .firstName(\"John\") .lastName(\"Doe\") .create(); versionContext.currentVersion(\"rev-2\"); PersonUpdater.setLastName(john, \"Smith\"); versionContext.currentVersion(\"rev-3\"); PersonUpdater.setLastName(john, \"Archer\"); versionContext.currentVersion(\"rev-4\"); PersonUpdater.setLastName(john, \"Bennett\");","title":"Versioning","component":"manual","version":"6.0","name":"versioning","url":"/manual/6.0/misc/layered-entities/versioning.html","titles":[]},"131":{"id":131,"text":"The wrapper code generator is an annotation processor, provided by the base module. The maven configuration looks like this: pom.xml one.microstream microstream-base 06.01.00-MS-GA org.apache.maven.plugins maven-compiler-plugin 3.8.1 1.8 1.8 UTF-8 one.microstream.wrapping.codegen.WrapperProcessor -Amicrostream.wrapper.types=one.microstream.persistence.types.PersistenceStoring There are following ways to get the base wrapper types generated. If you want it for your own types, the best way is to use the GenerateWrapper annotation. @GenerateWrapper public interface MyInterface { public void doStuff(); public String getStuff(); } Or, if you want it for interfaces in libraries, like PersistenceStoring, you cannot add an annotation. That’s what the microstream.wrapper.types parameter is for. This is just a comma separated list of types. Alternatively you can use the GenerateWrapperFor annotation: @GenerateWrapperFor(\"one.microstream.persistence.types.PersistenceStoring\") public class WrapperGenerationDummy { } It accepts a list of type names. Plain strings have to be used instead of class literals, because it is read inside the compilation cycle which prohibits access to class elements.","title":"Configuration","component":"manual","version":"6.0","name":"configuration","url":"/manual/6.0/misc/wrapping/configuration.html","titles":[]},"132":{"id":132,"text":"MicroStream uses a strictly interface-based architecture. All types in the public API are, whenever possible, interfaces. This offers the best possibilities to extend or exchange parts of the engine. A good ways to enrich a type with features, is the wrapper (decorator) pattern. For example, let’s say we want to add logging to the PersistenceStoring's store(object) method. PersistenceStoring.java public interface PersistenceStoring { public long store(Object instance); public long[] storeAll(Object... instances); public void storeAll(Iterable instances); public void storeSelfStoring(SelfStoring storing); } Conventionally it would be done that way: A new type, implementing the original interface, would be handed over the wrapped instance, all interface methods have to be implemented and delegated. And in the single method, we wanted to add functionality; the actual implementation of the logging is done. public class PersistenceStoringWithLogging implements PersistenceStoring { private final PersistenceStoring wrapped; public PersistenceStoringWithLogging(final PersistenceStoring wrapped) { super(); this.wrapped = wrapped; } @Override public long store(final Object instance) { Logger.getLogger(PersistenceStoring.class.getName()) .info(\"Object stored: \" + instance); return this.wrapped.store(instance); } @Override public long[] storeAll(final Object... instances) { return this.wrapped.storeAll(instances); } @Override public void storeAll(final Iterable instances) { this.wrapped.storeAll(instances); } @Override public void storeSelfStoring(final SelfStoring storing) { this.wrapped.storeSelfStoring(storing); } } This produces a lot of overhead. In this case, three methods are just boilerplate code to delegate the calls to the wrapped instance. A common solution for that is to create an abstract base wrapper type for the designated interface, and to reuse it whenever needed. public abstract class BaseWrapperPersistenceStoring implements PersistenceStoring { private final PersistenceStoring wrapped; public BaseWrapperPersistenceStoring(final PersistenceStoring wrapped) { super(); this.wrapped = wrapped; } @Override public long store(final Object instance) { return this.wrapped.store(instance); } @Override public long[] storeAll(final Object... instances) { return this.wrapped.storeAll(instances); } @Override public void storeAll(final Iterable instances) { this.wrapped.storeAll(instances); } @Override public void storeSelfStoring(final SelfStoring storing) { this.wrapped.storeSelfStoring(storing); } } And then, based on that, the implementation of the logger type would look like this: public class PersistenceStoringWithLogging extends BaseWrapperPersistenceStoring { public PersistenceStoringWithLogging(PersistenceStoring wrapped) { super(wrapped); } @Override public long store(Object instance) { Logger.getLogger(PersistenceStoring.class.getName()) .info(\"Object stored: \" + instance); return super.store(instance); } } That’s better. No more boilerplate code. Just overwrite the methods you want to extend. The only work left is, to generate the base wrapper types. One way is to let your IDE generate the wrapper or delegation code. Disadvantage of that is, it has to be redone every time your interfaces change. A code generator, which does it automatically would be nice. And that’s what the base module brings along. Like the layered entity code generator, it is an annotation processor.","title":"Wrapping","component":"manual","version":"6.0","name":"index","url":"/manual/6.0/misc/wrapping/index.html","titles":[]},"133":{"id":133,"text":"MicroStream’s wrapper code generator generates following wrapper type for PersistenceStoring: public interface WrapperPersistenceStoring extends Wrapper, PersistenceStoring { @Override public default long store(final Object instance) { return this.wrapped().store(instance); } @Override public default long[] storeAll(final Object... instances) { return this.wrapped().storeAll(instances); } @Override public default void storeAll(final Iterable instances) { this.wrapped().storeAll(instances); } @Override public default void storeSelfStoring(final SelfStoring storing) { this.wrapped().storeSelfStoring(storing); } } It is not an abstract class, but an interface, which extends the Wrapper interface of the microstream-base module, and the wrapped type itself. This offers you the most flexible way to use it in your application. The Wrapper type is just a typed interface and an abstract implementation of itself. Wrapper.java public interface Wrapper { public W wrapped(); public abstract class Abstract implements Wrapper { private final W wrapped; protected Abstract(final W wrapped) { super(); this.wrapped = wrapped; } @Override public final W wrapped() { return this.wrapped; } } } You can either implement the Wrapper interface and provide the wrapped instance via the wrapped() method, or you can extend the abstract class and hand over the wrapped instance to the super constructor. Version with the abstract type: public class PersistenceStoringWithLogging extends Wrapper.Abstract implements WrapperPersistenceStoring { public PersistenceStoringWithLogging(final PersistenceStoring wrapped) { super(wrapped); } @Override public long store(Object instance) { Logger.getLogger(PersistenceStoring.class.getName()) .info(\"Object stored: \" + instance); return WrapperPersistenceStoring.super.store(instance); } } Or only the interface, then you have to provide the wrapped instance via wrapped(): public class PersistenceStoringWithLogging implements WrapperPersistenceStoring { private final PersistenceStoring wrapped; public PersistenceStoringWithLogging(final PersistenceStoring wrapped) { super(); this.wrapped = wrapped; } @Override public PersistenceStoring wrapped() { return this.wrapped; } @Override public long store(Object instance) { Logger.getLogger(PersistenceStoring.class.getName()) .info(\"Object stored: \" + instance); return WrapperPersistenceStoring.super.store(instance); } }","title":"Usage","component":"manual","version":"6.0","name":"usage","url":"/manual/6.0/misc/wrapping/usage.html","titles":[]},"134":{"id":134,"text":"A collection of examples with different topics: https://github.com/microstream-one/microstream/tree/master/examples The BookStore Demo is a fully fledged sample application. It shows how to design an application with MicroStream from the ground up. https://github.com/microstream-one/bookstore-demo If you want to compare MicroStream with a database of your choice, it can be done with following project, which is based on the BookStore Demo. https://github.com/microstream-one/bookstore-demo-performance Combination of two great frameworks. https://github.com/microstream-one/example-spring-crud Further reading: https://medium.com/@microstream/microstream-with-spring-8265525fb3fc This example shows how to effectively use MicroStream storage with Android RecyclerView. https://github.com/microstream-one/example-android-recyclerview Further reading: https://medium.com/@microstream/android-recyclerview-with-microstream-da91641c0015","title":"Examples and Demo Projects","component":"manual","version":"6.0","name":"examples-and-demo-projects","url":"/manual/6.0/storage/addendum/examples-and-demo-projects.html","titles":[{"text":"Examples Collection","hash":"_examples_collection","id":1},{"text":"BookStore Demo","hash":"_bookstore_demo","id":2},{"text":"Spring Crud","hash":"_spring_crud","id":3},{"text":"Android RecyclerView","hash":"_android_recyclerview","id":4}]},"135":{"id":135,"text":"Although most types in the JDK or any other Java library will work with MicroStream, there is a bunch of specialized type handlers for the most commonly used types. They are optimized to reduce memory overhead and increase performance. The following list describes all types for which special type handlers are implemented. All other types are analyzed generically. Primitive Types All primitive Types and arrays thereof java.lang Byte Boolean Short Character Integer Float Long Double Void Object String StringBuffer StringBuilder java.math BigDecimal BigInteger java.util Date Currency Locale OptionalInt OptionalLong OptionalDouble java.util.regex Pattern java.io File java.nio.file Path java.net InetAddress Inet4Address Inet6Address InetSocketAddress URI URL java.util Vector Stack Hashtable Properties ArrayList HashSet HashMap LinkedHashSet LinkedHashMap WeakHashMap LinkedList TreeMap TreeSet IdentityHashMap PriorityQueue ArrayDeque java.util.concurrent ConcurrentHashMap ConcurrentSkipListMap ConcurrentSkipListSet ConcurrentLinkedQueue ConcurrentLinkedDeque CopyOnWriteArrayList Most collections above are handled in a generic way. If you want a more optimized version of JDK collection handlers, you can utilize the provided module microstream-persistence-binary-jdk8. pom.xml one.microstream microstream-persistence-binary-jdk8 06.01.00-MS-GA final EmbeddedStorageFoundation foundation = EmbeddedStorage.Foundation(); foundation.onConnectionFoundation(BinaryHandlersJDK8::registerJDK8TypeHandlers); pom.xml one.microstream microstream-persistence-binary-jdk17 06.01.00-MS-GA final EmbeddedStorageFoundation foundation = EmbeddedStorage.Foundation(); foundation.onConnectionFoundation(BinaryHandlersJDK17::registerJDK17TypeHandlers);","title":"Specialized Type Handlers","component":"manual","version":"6.0","name":"specialized-type-handlers","url":"/manual/6.0/storage/addendum/specialized-type-handlers.html","titles":[{"text":"Value Types","hash":"_value_types","id":1},{"text":"Collections","hash":"_collections","id":2},{"text":"Java 17 Immutable Set and List","hash":"jdk17","id":3}]},"136":{"id":136,"text":"Feature Supported Note Classes Classes without default constructor Abstract classes / Interfaces Perfectly handleable as types, but there can never be instances to be persisted in the first place. Inner classes Anonymous inner classes Primitives References Final fields Static fields Not supported since they are outside of an entity graph / a database, i.e. potentially shared by multiple graphs. Constant primitives No sense in persisting those. These are just plain trivial values outside of an entity graph / a database. Constant instances Must be registered for loading to update them instead of creating independent new instances. Primitive arrays Object arrays Multi dimensional arrays Technically the same as object arrays as every array is an object itself. JDK value types (String, Number types, Date, File, Locale, Optional, …​) Optimized handling via custom TypeHandlers. Collections Via generic handling logic (List, Set, Map, etc.). Optimal handling required tailored TypeHandler (e.g. correctly handling loadFactor in java.util.HashMap) Nested Collections JVM system-tied classes (Thread, ClassLoader, WeakReference, …​) Technically handleable, but handling system-instances could cause fatal problems (e.g. start a Thread just from loading data), so it is intentionally disabled. JVM external-tied classes (IO-Streams, FileChannel, …​) Technically handleable, but external dependencies could cause fatal problems (e.g. existence of a referenced file), so it is intentionally disabled. Feature Supported Note Enums Automatically handled as constant instances to maintain referential integrity / identity. Enums with mutable state Enums anonymous subclasses Feature Supported Note Lambdas Type-handleable in theory. But JVM is not able to resolve its own type definitions for lambdas. Feature Supported Note Records Records are mere syntax sugar for classes, see FAQ. Feature Supported Note Immutable Set Automatically handled until Java 14, for Java 15 and later use the microstream-persistence-binary-jdk17 module, see microstream-persistence-binary-jdk17 Immutable List Automatically handled until Java 14, for Java 15 and later use the microstream-persistence-binary-jdk17 module, see microstream-persistence-binary-jdk17","title":"Supported Java Features","component":"manual","version":"6.0","name":"supported-java-features","url":"/manual/6.0/storage/addendum/supported-java-features.html","titles":[{"text":"Java 5","hash":"_java_5","id":1},{"text":"Java 8","hash":"_java_8","id":2},{"text":"Java 14","hash":"_java_14","id":3},{"text":"Java 17","hash":"_java_17","id":4}]},"137":{"id":137,"text":"Housekeeping interval and time budget is configured by setting up a StorageHousekeepingController. Available properties are: Property Description housekeeping-interval Interval the housekeeping is triggered in milliseconds, default once per every second housekeeping-time-budget Time budget for housekeeping in nanoseconds, default is 0.01 seconds EmbeddedStorageManager storage = EmbeddedStorage.Foundation( Storage.ConfigurationBuilder() .setHousekeepingController(Storage.HousekeepingController(1000, 10_000_000)) .createConfiguration()) .start(); The desired file min and max sizes and payload ratio is configured by the StorageDataFileEvaluator: available properties are: Property Description data-file-minimum-size Files smaller then minimum file size will be merged with other files if possible, default is 1 MB. data-file-maximum-size Files larger then maximum file size will be split in smaller ones, default is 8 MB. data-file-minimum-use-ratio Ratio of non-gap data contained in a storage file to prevent the file from being dissolved, default is 0.75 (75%). EmbeddedStorageManager storage = EmbeddedStorage.Foundation( Storage.ConfigurationBuilder() .setDataFileEvaluator(Storage.DataFileEvaluator(1024*1024, 1024*1024*8, 0.75)) .createConfiguration()) .start(); The lifetime of objects in the internal entity cache can be configured by the StorageEntityCacheEvaluator: Available properties are: Property Description entity-cache-threshold Abstract threshold value, roughly comparable to size in bytes with a time component, at which a cache must be cleared of some entities. Default is 1000000000. entity-cache-timeout Time in milliseconds after that an entity is considered to be old if not read meanwhile. Must be greater zero, default is 86400000ms (1 day). EmbeddedStorageManager storage = EmbeddedStorage.Foundation( Storage.ConfigurationBuilder() .setEntityCacheEvaluator(Storage.EntityCacheEvaluator( 86_400_000, 1_000_000_000)) .createConfiguration()) .start(); For external configuration see: Properties","title":"Housekeeping","component":"manual","version":"6.0","name":"housekeeping","url":"/manual/6.0/storage/configuration/housekeeping.html","titles":[{"text":"Intervall and Time Budget","hash":"_intervall_and_time_budget","id":1},{"text":"File Sizes and Payload","hash":"storage-data-file-evaluator","id":2},{"text":"Cache","hash":"_cache","id":3}]},"138":{"id":138,"text":"The EmbeddedStorageManager is mostly created with factory methods of EmbeddedStorage, where the most common settings, like database directory or the root instance, can be configured. EmbeddedStorageManager storageManager = EmbeddedStorage.start( myRoot, // root object of entity graph Paths.get(\"data-dir\") // storage data directory ); To achieve a more detailed customization, you can utilize the EmbeddedStorageFoundation factory type. It holds and creates on demand all the parts that form an EmbeddedStorageManager. NioFileSystem fileSystem = NioFileSystem.New(); EmbeddedStorageManager storageManager = EmbeddedStorageFoundation.New() .setConfiguration( StorageConfiguration.Builder() .setStorageFileProvider( Storage.FileProviderBuilder(fileSystem) .setDirectory(fileSystem.ensureDirectoryPath(\"storageDir\")) .createFileProvider() ) .setChannelCountProvider(StorageChannelCountProvider.New(4)) .setBackupSetup(StorageBackupSetup.New( fileSystem.ensureDirectoryPath(\"backupDir\") )) .createConfiguration() ) .createEmbeddedStorageManager(); The artifact microstream-storage-embedded-configuration provides a convenience layer for configuration purposes, as well as facilities to read external configuration. pom.xml one.microstream microstream-storage-embedded-configuration 06.01.00-MS-GA The EmbeddedStorageConfigurationBuilder type consolidates the most widely used parameters from the storage foundations in one place. It’s output is an EmbeddedStorageFoundation from which a EmbeddedStorageManager can be created. EmbeddedStorageManager storageManager = EmbeddedStorageConfiguration.Builder() .setStorageDirectoryInUserHome(\"data-dir\") .setBackupDirectory(\"backup-dir\") .setChannelCount(4) .createEmbeddedStorageFoundation() .createEmbeddedStorageManager(); To read an external configuration use ConfigurationLoader and ConfigurationParser or the load*() methods of EmbeddedStorageConfiguration. Out of the box, XML and INI files are supported. Java (XML) EmbeddedStorageManager storageManager = EmbeddedStorageConfiguration.load( \"/META-INF/microstream/storage.xml\" ) .createEmbeddedStorageFoundation() .createEmbeddedStorageManager(); XML Java (INI) EmbeddedStorageManager storageManager = EmbeddedStorageConfiguration.load( \"/META-INF/microstream/storage.ini\" ) .createEmbeddedStorageFoundation() .createEmbeddedStorageManager(); INI storage-directory = data channel-count = 4 If you just use EmbeddedStorageConfiguration.load() the default configuration file is used, which is either a file in the classpath root named microstream-storage.properties, or the path configured via the system property microstream.storage.configuration.path. The full example can be found on GitHub. The EmbeddedStorageConfigurationBuilder is based on the common configuration layer, newly introduced in MicroStream 5.0. The artifact configuration, which is a dependency of storage.embedded.configuration, contains support for XML and INI files. Other formats are available in different artifacts. Artifact Formats microstream-configuration-hocon hocon, json microstream-configuration-yaml yaml Java (Yaml) EmbeddedStorageManager storageManager = EmbeddedStorageConfiguration.load( ConfigurationLoader.New(\"/META-INF/microstream/storage.yaml\"), ConfigurationParserYaml.New() ) .createEmbeddedStorageFoundation() .createEmbeddedStorageManager(); Yaml storage-directory: \"data\" channel-count: 4 Java (Json) EmbeddedStorageManager storageManager = EmbeddedStorageConfiguration.load( ConfigurationLoader.New(\"/META-INF/microstream/storage.json\"), ConfigurationParserHocon.New() ) .createEmbeddedStorageFoundation() .createEmbeddedStorageManager(); Json { \"storage-directory\": \"data\", \"channel-count\": 4 }","title":"Configuration","component":"manual","version":"6.0","name":"index","url":"/manual/6.0/storage/configuration/index.html","titles":[{"text":"Foundations","hash":"_foundations","id":1},{"text":"External Configuration","hash":"external-configuration","id":2},{"text":"Additional Formats","hash":"_additional_formats","id":3}]},"139":{"id":139,"text":"By default, MicroStream uses the operation system’s standard file locking mechanism to prevent simultaneous access to the storage files. In the rare case that this is not sufficient to control the file access MicroStream provides a proprietary file lock implementation to ensure exclusive access to the storage files from different applications using MicroStream. Using this file lock may only be necessary if, while a MicroStream application is running, a second MicroStream application may try to access the same storage and the default file locks are not reliable. You don’t need to activate this feature if: Only one MicroStream application will access the storage, MicroStream applications that may access the same storage run on the same system, other applications that may access the storage files don’t use MicroStream to access them. To activate the internal file lock you need to setup StorageLockFileSetup: EmbeddedStorageManager storageManager = EmbeddedStorage .Foundation() .setLockFileSetupProvider(Storage.LockFileSetupProvider()) .start(); The default interval the locks are updated is 10 seconds, you can set a custom value in milliseconds with: Storage.LockFileSetupProvider( final long updateInterval ) To specify the charset used by the lock files use: Storage.LockFileSetupProvider( final Charset charset ) or, to customize both: LockFileSetupProvider( final Charset charset , final long updateInterval )","title":"Lock File","component":"manual","version":"6.0","name":"lock-file","url":"/manual/6.0/storage/configuration/lock-file.html","titles":[]},"140":{"id":140,"text":"These are the available properties of the EmbeddedStorageConfigurationBuilder type. The names are used accordingly in the external configuration files. They can be found as constants in EmbeddedStorageConfigurationPropertyNames. Property Short Description storage-directory The base directory of the storage in the file system. Default is \"storage\" in the working directory. storage-filesystem The live file system configuration. See storage targets configuration. deletion-directory If configured, the storage will not delete files. Instead of deleting a file it will be moved to this directory. truncation-directory If configured, files that will get truncated are copied into this directory. backup-directory The backup directory. backup-filesystem The backup file system configuration. See storage targets configuration. channel-count The number of threads and number of directories used by the storage engine. Every thread has exclusive access to its directory. Default is 1. channel-directory-prefix Name prefix of the subdirectories used by the channel threads. Default is \"channel_\". data-file-prefix Name prefix of the storage files. Default is \"channel_\". data-file-suffix Name suffix of the storage files. Default is \".dat\". transaction-file-prefix Name prefix of the storage transaction file. Default is \"transactions_\". transaction-file-suffix Name suffix of the storage transaction file. Default is \".sft\". type-dictionary-file-name The name of the dictionary file. Default is \"PersistenceTypeDictionary.ptd\". rescued-file-suffix Name suffix of the storage rescue files. Default is \".bak\". lock-file-name Name of the lock file. Default is \"used.lock\". housekeeping-interval Interval for the housekeeping. This is work like garbage collection or cache checking. In combination with houseKeepingNanoTimeBudget the maximum processor time for housekeeping work can be set. Default is 1 second. housekeeping-time-budget Number of nanoseconds used for each housekeeping cycle. Default is 10 milliseconds = 0.01 seconds. entity-cache-threshold Abstract threshold value for the lifetime of entities in the cache. Default is 1000000000. entity-cache-timeout Timeout in milliseconds for the entity cache evaluator. If an entity wasn’t accessed in this timespan it will be removed from the cache. Default is 1 day. data-file-minimum-size Minimum file size for a data file to avoid cleaning it up. Default is 1024^2 = 1 MiB. data-file-maximum-size Maximum file size for a data file to avoid cleaning it up. Default is 1024^2*8 = 8 MiB. data-file-minimum-use-ratio The ratio (value in ]0.0;1.0]) of non-gap data contained in a storage file to prevent the file from being dissolved. Default is 0.75 (75%). data-file-cleanup-head-file A flag defining whether the current head file (the only file actively written to) shall be subjected to file cleanups as well. Number of threads used by the storage engine. It depicts the numbers of subdirectories as well. Each thread manages one directory in which it writes to and reads from exclusively. The unity of thread, directory and the cached data therefore is called a \"Channel\". __________________________________________________ [RAM ]{ Code } | ( Filesystem ) ,- \"Channel 0\": [Data]{Thread} (Storage Subdirectory 0) /-- \"Channel 1\": [Data]{Thread} (Storage Subdirectory 1) StorageManager | \\-- \"Channel 2\": [Data]{Thread} (Storage Subdirectory 2) '- \"Channel 3\": [Data]{Thread} (Storage Subdirectory 3) _________________________________________________| For further information see Using Channels. Time for the house keeping interval. House keeping tasks are, among others: Garbage Collection Cache Check File Cleanup Check In combination with housekeeping-time-budget, it can be specified how many CPU time should be used for house keeping. E.g. interval=1000ms and budget=10000000ns means every second there’s 0.01 seconds time for house keeping, so max 1% CPU time used for house keeping. This CPU time window is only used if house keeping work is pending. If nothing has to be done, no time is wasted. Time used for each housekeeping cycle. However, no matter how low the number is, one item of work will always be completed. But if there is nothing to clean up, no processor time will be wasted. Default is 10000000 (10 million nanoseconds = 10 milliseconds = 0.01 seconds). + However, no matter how small the time is, one item is done at least. This is to avoid no-ops, if a too small time window is configured. + This time budget is a \"best effort\" threshold, meaning when at 1ns left, a huge file has to be cleaned or the references of a huge collection have to be marked for GC, then this budget can be exceeded considerably. For further information see Housekeeping. Minimum file size in bytes of a storage file to avoid merging with other files during housekeeping. + Must be greater than 1, maximum is 2GB. Maximum file size in bytes of a storage file to avoid splitting in more files during housekeeping. + Must be greater than 1, maximum is 2GB. Due to internal implementation details files larger than 2GB are not supported! The ratio (value in ]0.0;1.0]) of non-gap data contained in a storage file to prevent the file from being dissolved. \"Gap\" data is anything that is not the latest version of an entity’s data, including older versions of an entity and \"comment\" bytes (a sequence of bytes beginning with its length as a negative value length header). The closer this value is to 1.0 (100%), the less disk space is occupied by storage files, but the more file dissolving (data transfers to new files) is required and vice versa. This list shows which property configures which type, used by the foundation types, to create the storage manager. Property Used by storage-directory StorageLiveFileProvider storage-filesystem StorageLiveFileProvider deletion-directory StorageLiveFileProvider truncation-directory StorageLiveFileProvider backup-directory StorageBackupSetup backup-filesystem StorageBackupSetup channel-count StorageChannelCountProvider channel-directory-prefix StorageFileNameProvider data-file-prefix StorageFileNameProvider data-file-suffix StorageFileNameProvider transaction-file-prefix StorageFileNameProvider transaction-file-suffix StorageFileNameProvider type-dictionary-filename StorageFileNameProvider rescued-file-suffix StorageFileNameProvider lock-filename StorageFileNameProvider housekeeping-interval StorageHousekeepingController housekeeping-time-budget StorageHousekeepingController entity-cache-threshold StorageEntityCacheEvaluator entity-cache-timeout StorageEntityCacheEvaluator data-file-minimum-size StorageDataFileEvaluator data-file-maximum-size StorageDataFileEvaluator data-file-minimum-use-ratio StorageDataFileEvaluator data-file-cleanup-head-file StorageDataFileEvaluator","title":"Properties","component":"manual","version":"6.0","name":"properties","url":"/manual/6.0/storage/configuration/properties.html","titles":[{"text":"Detailed Description","hash":"_detailed_description","id":1},{"text":"channel-count","hash":"channel-count","id":2},{"text":"housekeeping-interval","hash":"housekeeping-interval","id":3},{"text":"housekeeping-time-budget","hash":"housekeeping-time-budget","id":4},{"text":"data-file-minimum-size","hash":"data-file-minimum-size","id":5},{"text":"data-file-maximum-size","hash":"data-file-maximum-size","id":6},{"text":"data-file-minimum-use-ratio","hash":"data-file-minimum-use-ratio","id":7},{"text":"Involved Types","hash":"_involved_types","id":8}]},"141":{"id":141,"text":"Using a Storage Live File Provider (one.microstream.storage.types.StorageLiveFileProvider) allows to specify the location and naming rules for all storage related files. Available properties are: Property Description storage-directory The Microstream storages location base directory. Contains channel directories and type dictionary file. deletion-directory If configured, the storage will not delete files. Instead of deleting a file it will be moved to this directory. truncation-directory If configured, files that will get truncated are copied into this directory. channel-directory-prefix Channel directory prefix string storage-file-prefix Storage file prefix string storage-file-suffix storage file extension transactions-file-prefix transactions file prefix transactions-file-suffix transaction file extension type-dictionary-file-name filename of the type dictionary StorageFileNameProvider fileNameProvider = StorageFileNameProvider.Builder() .setChannelDirectoryPrefix(\"canal_\") .setDataFilePrefix (\"canal_\") .setDataFileSuffix (\".bin\") .setTransactionsFilePrefix(\"events_\") .setTransactionsFileSuffix(\".bin\") .setTypeDictionaryFileName(\"typeDictionary.txt\") .createFileNameProvider () ; NioFileSystem fileSystem = NioFileSystem.New(); StorageLiveFileProvider fileProvider = Storage .FileProviderBuilder (fileSystem) .setDirectory (fileSystem.ensureDirectoryPath(WORKINGDIR)) .setDeletionDirectory (fileSystem.ensureDirectoryPath(DELETIONDIR)) .setTruncationDirectory(fileSystem.ensureDirectoryPath(TRUNCATIONDIR)) .setFileNameProvider (fileNameProvider) .createFileProvider () ;","title":"Storage Files and Directories","component":"manual","version":"6.0","name":"storage-files-and-directories","url":"/manual/6.0/storage/configuration/storage-files-and-directories.html","titles":[]},"142":{"id":142,"text":"Channels are the IO threads used by the MicroStream storage engine. A single channel represents the unity of a thread, a storage directory and cached data. Increasing the number of channels means to run more IO threads. The channel count is an important configuration value that impacts to IO performance. For the channel configuration the following configuration properties are available: Property Description channel-count The number of channels that MicroStream will use. Must be 2^n channel-directory-prefix The channel directory will be prefix+channelNumber e.g. \"ch_0\" if prefix is \"ch_\" data-file-prefix Default is \"channel_\" data-file-suffix Default is \".dat\" Channel file size configuration is done by the the Storage Data File Evaluator. They can be set by microstream-storage-embedded-configuration API: Java EmbeddedStorageManager storageManager = EmbeddedStorageConfigurationBuilder.New() .setChannelCount(4) .setChannelDirectoryPrefix(\"channel_\") .setDataFilePrefix(\"channel_\") .setDataFileSuffix(\".bin\") .createEmbeddedStorageFoundation() .createEmbeddedStorageManager(); XML INI channel-count = 4 channel-directory-prefix = prefix data-file-prefix = channel_ data-file-suffix = .dat Or by setting a StorageFileProvider using the EmbeddedStorageFoundation factory NioFileSystem fileSystem = NioFileSystem.New(); EmbeddedStorageManager storage = EmbeddedStorage.Foundation( Storage.ConfigurationBuilder() .setChannelCountProvider(Storage.ChannelCountProvider(4)) .setStorageFileProvider( StorageLiveFileProvider.Builder() .setDirectory(fileSystem.ensureDirectoryPath(\"storage\")) .createFileProvider() ) .createConfiguration() ) .start(); See also: Configuration","title":"Using Channels","component":"manual","version":"6.0","name":"using-channels","url":"/manual/6.0/storage/configuration/using-channels.html","titles":[{"text":"Channel Usage","hash":"_channel_usage","id":1},{"text":"Channel Configuration","hash":"_channel_configuration","id":2}]},"143":{"id":143,"text":"If one or more fields in a class have changed, the data structure of this class doesn’t match anymore with the records in the database. This renders the application and the database incompatible. It’s like in an IDE. You change the structure of a class and the tooling takes care of the rest. Problem is, in a database, the \"rest\" can be, in some circumstances, several gigabytes or even more, that have to be refactored and written again. It’s one way to do it, but there are better alternatives. At best, the data is transformed when it’s accessed only. The old (legacy) type data is being mapped to the new type when it’s being loaded, hence: Legacy Type Mapping. Nothing needs to be rewritten. All records are, as they were saved, compatible with all other versions of their type. Simply by mapping while loading. What has to be done to achieve this? In the most common cases, nothing! The heuristic attempts to automatically detect which fields are new, have been removed, reordered or altered. Contact.java (old) public class Contact { String name ; String firstname; int age ; String email ; String note ; Object link ; } Contact.java (new) public class Contact { String firstname ; // moved String lastname ; // renamed String emailAddress ; // renamed String supportNode ; // renamed PostalAddress postalAddress; // new int age ; // moved } Console Output ---------- Legacy type mapping required for legacy type 1000055:Contact to current type 1000056:Contact Fields: java.lang.String Contact#firstname -1.000 ----> java.lang.String Contact#firstname java.lang.String Contact#name -0.750 ----> java.lang.String Contact#lastname java.lang.String Contact#email -0.708 ----> java.lang.String Contact#emailAddress java.lang.String Contact#note -0.636 ----> java.lang.String Contact#supportNode [***new***] PostalAddress Contact#postalAddress int Contact#age -1.000 ----> int Contact#age java.lang.Object Contact#link [discarded] --- Write 'y' to accept the mapping. The fields in the Contact entity class have been renamed, reordered, one was removed, one is new. What the heuristic is doing now is something like this: String firstname is equal in both classes, so it has to be the same, pretty much as int age. name and lastname is pretty similar, type is the same too. If there is nothing better for the two, they probably belong together. Same with the other two fields. In the end, the ominous link and postalAddress remain. The heuristic can not make sense of that, so it assumes that one thing falls away and the other one is added. In this particular example, that worked perfectly. Well done, heuristic. But: Just as people can make mistakes in estimating similarities (\"I would have thought …​\"), even programs can make mistakes as soon as they logically go on thin ice. There is nothing more with absolute correctness that you actually know from (bug-free) software. Such a similarity matching will be correct in the most cases, but sometimes it will also fall by the wayside. Example: perhaps only PostalAddress instances were referenced in the application under link and the two fields would actually be the same, only now properly typed and named. How should heuristics know that? Nobody could know that either, if he is not privy to the details of the concrete application. That’s why Legacy Type Mapping has two mechanisms that prevent things from going wrong: A callback interface is used to create the desired mapping result: PersistenceLegacyTypeMappingResultor Optionally, an explicit mapping can be specified, which is then preferred to the heuristic approach. If you do not want that, you can simply set another resultor. Like in this example each suspected mapping is submitted once to the user for control in the console. This is done with the InquiringLegacyTypeMappingResultor. Maybe even one, where the user can \"rewire\" the mapping itself, write out the mapping, and then return an appropriate result. EmbeddedStorageFoundation foundation = EmbeddedStorage.Foundation(myDataDir); foundation.getConnectionFoundation().setLegacyTypeMappingResultor( InquiringLegacyTypeMappingResultor.New( PersistenceLegacyTypeMappingResultor.New() ) ); EmbeddedStorageManager storageManager = foundation.createEmbeddedStorageManager(myRoot).start(); All you need is two columns of strings: from old to new. By default MicroStream uses a CSV file, but you can also write something else. In the end, a lot of string pairs for \"old → new\" mappings have to come into the program somewhere. The concept is simple: If there are two strings, this is interpreted as a mapping from an old thing to a new thing. If the second value is missing, it is interpreted as an old thing to be deleted. Missing the first value, then it’s as a new thing. Why call it \"thing\"? Because this applies to several structural elements: Constant identifier Class names Field names Example: count; articleCount means: the field named earlier count is called articleCount in the current version of the class. count; means: the early field count should be ignored during the mapping. More specifically, the values ​​of this field per record. ;articleCount means, this is a newly added field, DO NOT try to match it with anything else heuristically. You can also mix explicit mapping and heuristics. Only explicitly specify so many changes until the analysis gets the rest right by itself. That means you never have to specify the annoying trivial cases explicitly. Only the tricky ones. Usually, nothing should be necessary at all, or maybe a view indications at most to avoid mishaps. However, those who strictly prefer to make any change explicitly, instead of trusting a \"guessing\" software, can also do that. No problem. For class names, the three variants map, add and remove are somewhat tricky in meaning: Map is just old → new, same as with fields. To make an entry for a new class doesn’t make sense. It’s covered by the new class itself. You can do it, but it has no effect. Marking a removed class as deleted makes no sense either, except one special case. It is not required to specify the fields mapping of mapped classes if the mapping heuristic can do a correct field mapping. Especially if classes have been renamed only. Classes are simply referred to by their full qualified class name: com.my.app.entities.Order In some cases you need to specify the exact Version of the class, then the TypeId has to be prepended: 1012345:com.my.app.entities.Order Mapping from old to new: com.my.app.entities.Order;com.my.app.entities.OrderImplementation For fields it’s a bit more complex. To unambiguously refer a field, the full qualified name of its defining class has to be used. com.my.app.entities.Order#count;com.my.app.entities.Order#articleCount The # is based on official Java syntax, like e.g. in JavaDoc. If inheritance is involved, which must be uniquely resolved (each class in the hierarchy can have a field named \"count\"), you must also specify the declaring class. Like this: com.my.app.entities.Order#com.my.app.entities.ArticleHolder#count; ⤦ com.my.App.entities.Order#com.my.app.entities.ArticleHolder#articleCount A simple example: OldContact.java package com.my.app.entities; public class OldContact { String name ; String firstname; int age ; String email ; String note ; Object link ; // to be discarded } NewContact.java package com.my.app.entities; public class NewContact { String firstname ; // moved String lastname ; // renamed String emailAddress ; // renamed String supportNote ; // renamed PostalAddress postalAddress; // new int age ; // moved } refactorings.csv old current com.my.app.entities.OldContact com.my.app.entities.NewContact com.my.app.entities.OldContact#firstname com.my.app.entities.NewContact#firstname com.my.app.entities.OldContact#name com.my.app.entities.NewContact#lastname com.my.app.entities.OldContact#email com.my.app.entities.NewContact#emailAddress com.my.app.entities.OldContact#note com.my.app.entities.NewContact#supportNote com.my.app.entities.NewContact#postalAddress com.my.app.entities.OldContact#age com.my.app.entities.NewContact#age com.my.app.entities.OldContact#link EmbeddedStorageFoundation foundation = EmbeddedStorage.Foundation(dataDir); foundation.setRefactoringMappingProvider( Persistence.RefactoringMapping(Paths.get(\"refactorings.csv\")) ); EmbeddedStorageManager storageManager = foundation.createEmbeddedStorageManager(root).start(); So far so good, all classes and fields are getting mapped, automatically or manually. But what about the data? How are the values getting transformed from old to new? Technically speaking it’s done fully automatic. But there are some interesting questions: What if the primitive types changes? What if primitives change to references and vice versa? How fast is it? Let’s say int to float. Just to copy the four bytes would yield wrong results. It has to be converted, like float floatValue = (float)intValue; Can it be done? Yes, fully automatic. The class BinaryValueTranslators does the job for you, it has a converter function from each primitive to another. Currently MicroStream supports conversion between primitives and their wrapper types, and vice versa. When converting a wrapper to a primitive, null is converted to 0. If you need special conversions between object types, you can add custom BinaryValueSetter for that, see customizing. How fast is that? The type analysis happens only once during initialization. If no exception occurs, the Legacy Type Mapping is ready-configured for each necessary type and will then only be called if required. For normal entity classes that are parsed by reflection, legacy type mapping loading is just as fast as a normal load. An array of such value translator functions is put together once and they are run through each time they are loaded. With legacy mapping, only the order and the target offsets are different, but the principle is the same as with normal loading. For custom handlers an intermediate step is necessary: ​​First put all the old values ​​together in an order that the custom handler expects and then read the binary data normally, as if loading a record in the current format. That’s necessary because MicroStream can’t know what such a custom handler does internally. If someone ever uses such a custom handler, the small detour is not likely to be noticeable in terms of performance. And if it should be the case and it has a negative effect on the productive operation: No problem, because: Of course you can also write a custom legacy type handler. It would run at full speed even with tricky special cases. Of course there is the possibility, as always, of intervening in the machinery massively with customizing. If you need the highest possible performance for some cases, or for logging / debugging, or anyway: Register any value translator implementations. In the simplest case this is 1 line of code, so do not worry. Being able to specify refactoring mapping in a different way than a CSV file is another example. You can even customize (extend or replace) the strategy that is looked up in refactoring mapping. Furthermore, you can also replace the heuristic logic with your own. This is easier than it sounds. This is just a primitive little interface (PersistenceMemberSimilator) and the default implementation thereof calls e.g. just a Levenshtein algorithm for names. You can certainly do that 10 times more clever. Or \"more appropriate\" for a particular application or programming style. E.g. utilize annotations. The basic statement is: If there is a problem somewhere, whether with the heuristic or a special case request or performance problem loading a gazillion entities all at once, or if there is a need for debugging in depth or something like that: do not panic. Most likely, this is easily possible with a few lines of code. Customizing examples You can not just mark classes as deleted. As long as there are records of a certain type in the database, the corresponding class must also exist so that the instances from the database can be loaded into the application. If there are no more records, then that means that there are only a few bytes of orphaned description in the type dictionary, but nobody cares. Is it possible to delete it by hand (or rather not, there are good reasons against it) or you can just ignore it and leave it there forever. In both cases, you must not mark a class as deleted. Now the special case: In the entity graph (root instances and all recursively reachable instances from there) all references to instances of a certain type are filled in. It’s done by the application logic or possibly by a specially written script. That is, all instances of this type are unreachable. No instance is available, no instance can ever be reloaded. This means that the type is \"deleted\" from the database at the logical level. One does not have to register anywhere, that is implicitly just like that. You can actually delete the corresponding Java class from the application project because it will never be needed again during the loading process at runtime. So far so good. There is only one problem: even if the instances are never logically accessible again: the data records are still around in the database files. The initialization scans over all database files, registers all entities, collects all occurring TypeIds and ensures for every TypeId that there is a TypeHandler for it. If necessary, a LegacyTypeHandler with mapping, but still: there must be a TypeHandler for each TypeId. And a TypeHandler needs a runtime type. That is, ass-backwards, over records that are logically already deleted, but only physically still lying around, now it is again enforced that the erasable entity class must be present. Bummer. One can prevent this: there is a \"cleanup\" function in the database management logic, which cleans up all logical gaps in the database files (actually copies all non-gaps into a new file and thus deletes the old file altogether). You would have to call it, then all physical occurrences of the unreachable records disappear and you could easily delete the associated class. But that is annoying. That is why it makes sense for these cases - and only for them - to do the following: If you as a developer are absolutely sure that no single instance of a given class is ever reachable again, i.e. must be loaded, then you can mark a type as \"deleted\" (rather \"unreachable\") in the refactoring mapping. Then the Type Handling will create a dummy TypeHandler that does not need a runtime class. See PersistenceUnreachableTypeHandler. But be careful: if you are mistaken and an instance of such a type is still referenced somewhere and eventually loaded later at runtime, then the Unreachable handler will throw an exception. At some point during the runtime of the application, not even during initialization. The cleanup provides real security: remove all logical gaps and if then with a deleted class no more error in the initialization occurs, it is really superfluous. Any ideas, such as simply returning null in the dummy type handler instead of an instance, are a fire hazard: it may dissolve some annoying situations pleasantly, but it would also mean that existing datasets, potentially entire subgraphs, become hidden from the application. Nevertheless, the database would continue to drag them along, perhaps becoming inexplicably large, and any search for the reason would yield nothing, because the dummy type handler keeps the data records secret. Shortsighted great, but catastrophic in the long run. That’s not good. The only clean solution is: you have to know what to do with your data model. As long as there are still available instances, they must also be loadable. The annoying special case above can be defused without side effects. But it can not be more than that, otherwise it will get rid of the chaos, problems and lost confidence in the correctness of the database solution.","title":"Legacy Type Mapping","component":"manual","version":"6.0","name":"index","url":"/manual/6.0/storage/legacy-type-mapping/index.html","titles":[{"text":"Automatic Mapping","hash":"_automatic_mapping","id":1},{"text":"Explicit Mapping","hash":"_explicit_mapping","id":2},{"text":"Explicit Mapping of Classes","hash":"_explicit_mapping_of_classes","id":3},{"text":"Explicit Mapping Syntax","hash":"_explicit_mapping_syntax","id":4},{"text":"Value Conversion","hash":"_value_conversion","id":5},{"text":"Value Conversion of Primitives","hash":"value-conversion-of-primitives","id":6},{"text":"Value Conversion of References / Objects","hash":"value-conversion-of-references","id":7},{"text":"Performance","hash":"performance","id":8},{"text":"Customizing","hash":"customizing","id":9},{"text":"Special Case: Deleted Class","hash":"special-case-deleted-class","id":10}]},"144":{"id":144,"text":"Here is an overview of how to enable and configure different levels of user interaction for the Legacy Type Mapping. Somewhere you have a foundation instance, a foundation in where everything is configured, from which the StorageManager is created. EmbeddedStorageFoundation foundation = EmbeddedStorage.Foundation(); // or from somewhere else It itself contains a foundation for connections. To access the inner thing needs a little detour. Incidentally, that’s not a JDBC connection, but this is just one thing that creates helper instances like Storer and Loader. Because Legacy Type Mapping affects loading, it has to go in there. Either you access it directly, like this: EmbeddedStorageConnectionFoundation f = foundation.getConnectionFoundation(); Or like this, that’s better for method chaining. foundation.onConnectionFoundation(f -> { ... }); If you have that, the configuration for the Legacy Type Mapping callback logic is just a one liner: f.setLegacyTypeMappingResultor(...); Default PersistenceLegacyTypeMappingResultor.New() That’s just the necessary logic, without anything further. If you do not change anything, this is done by default. With Console Output PrintingLegacyTypeMappingResultor.New(PersistenceLegacyTypeMappingResultor.New()) That wraps a printer around the necessary logic. All these storage and persistence classes are nothing sacred or super-duper intertwined or anything. These are just interfaces and if you plug in another implementation then it will be used. Inquiry InquiringLegacyTypeMappingResultor.New(PersistenceLegacyTypeMappingResultor.New()) Resultor which asks the user to apply. More customization is possible, see below. And so on With the implementation of just one single interface method, you can build anything else you can imagine. For example, logging to a file instead of the console. Or in the personally preferred logging framework. Or write confirmed mappings into the refactorings file. Everything is possible. For the inquiring implementation (InquiringLegacyTypeMappingResultor) there are a few settings: When should he ask? Always or only if something is unclear. Never does not make any sense of course, then you shouldn’t use it, or alternatively the printing resultor. When is a mapping unclear? If at least one field mapping is not completely clear. A field mapping is clear if: If two fields are exactly the same (similarity 1.0 or 100%) Or if two fields are specified by the explicit mapping. So if all fields are clear according to the above rule, then there is no need to ask. And there is another special case: If a field is discarded that is not explicitly marked as discardable, then as a precaution an inquiry is always done. Although no data is lost, but the data would not be available in the application, so better ask. There are options to control this a bit finer. You can optionally specify a double as a threshold (from 0.0 to 1.0, otherwise Exception): The value determines how similar two matching fields automatically have to be so that they are not inquired. Example: The value is 0.9 (90%), but a match found is only 0.8 (80%) similar. This is according to the specification too little, there must be an inquiry as a precaution. If you specify 1.0, that means: always ask, everything is really perfectly clear. If you enter 0.0, this means: never ask or only for implicitly dropping fields. Looks like this: InquiringLegacyTypeMappingResultor.New( PersistenceLegacyTypeMappingResultor.New()) // implicitely 1.0 InquiringLegacyTypeMappingResultor.New( PersistenceLegacyTypeMappingResultor.New(), 0.7) // 0.7 threshold Here a small example with a Person class. int customerid ; // -> pin String firstname ; // -> firstName String surname ; // -> lastName String comment ; // discarded, NOT new commerceId It should be changed to: Integer pin ; // firstName surname -0,688----> lastName comment -0,750----> commerceId [***new***] address customerid [discarded] customerid and pin are too different to be automatically assigned to each other. Therefore, it is wrongly assumed that customerid is omitted and pin is new. comment and commerceId are surprisingly similar (75%) and are therefore assigned. But that’s not what we want. Incidentally, it would not matter here what is defined as a threshold: customerid would be eliminated by the implicit decision. This is too delicate not to inquire, so it is always necessary to ask. To get the mapping right, you have to specify two entries: customerid is now called pin and comment should be omitted Then the inquiry looks like this: customerid -[mapped]-> pin firstname -0,944----> firstName surname -0,688----> lastName [***new***] commerceId [***new***] address comment [discarded] Due to the explicit mapping from customerid to pin, the similarity does not matter, it is the mapping that matters. To indicate this, it says \"[mapped]\" instead of the similarity. The rest is as usual. Only comment is now \"[discarded]\", according to the mapping. The difference to the above is namely: This is an explicitly predetermined absence. That does not force inquiry. This clears the way for the threshold: If you enter 0.7 or more then you will be asked. As far as everything would be clear, but the mapping of surname to lastName is below the required \"minimum similarity\", so rather ask. If you enter 0.6 or less, you will no longer be asked. Because all assignments are either explicitly specified or they are according to \"minimum similarity\" similar enough to rely on it. A recommendation for a good value for the \"minimum similarity\" is difficult. As soon as one softens rules, there is always the danger of a mistake. See comment example above: is 75% similar to commerceId. Still wrong. Then prefer 80%? Or 90%? Of course it is better, but the danger is still there. If you want to be sure, just make 1.0 or omit the parameter, then by default 1.0 is taken. The most important is the explicit mapping anyway : if \"enough\" is given by the user, there is no need to ask.","title":"User Interaction","component":"manual","version":"6.0","name":"user-interaction","url":"/manual/6.0/storage/legacy-type-mapping/user-interaction.html","titles":[]},"145":{"id":145,"text":"Loading data can be done in two ways, eager and Lazy. The basic, default way of loading is eager loading. This means that all objects of a stored object graph are loaded immediately. This is done during startup of the MicroStream database instance automatically if an already existing database is found. Contrary to lazy loading, eager loading has no requirements to your entity model. To load your data you just need to create an EmbeddedStorageManager instance: EmbeddedStorageManager storage = EmbeddedStorage.start(); After that just get the root instance of your object graph from the StorageManager by calling EmbeddedStorageManager.root() and check for null as this indicates a non-existing database final EmbeddedStorageManager storage = EmbeddedStorage.start(); if(storage.root() == null) { //No existing Database found } else { MyRoot root = (MyRoot) storage.root(); } The full code for the eager loading example is on GitHub.","title":"Loading Data","component":"manual","version":"6.0","name":"index","url":"/manual/6.0/storage/loading-data/index.html","titles":[]},"146":{"id":146,"text":"MicroStream connects your application’s entity graph residing in memory to a physical form of data (i.e. persistent data) to/from which entity data is stored/loaded as required. MicroStream uses the common concept of Lazy Loading, allowing you to define which parts of your data (entity sub-graphs) are loaded only when required instead of eagerly at startup. A few well-placed lazy references in your entity model make your application load only a tiny bit of \"head\" entities at startup time and load everything else later on demand. This allows the handling of arbitrarily big databases with relatively small memory requirements.","title":"Data Management","component":"manual","version":"6.0","name":"data-management","url":"/manual/6.0/storage/faq/data-management.html","titles":[{"text":"Where is the data of my database located","hash":"_where_is_the_data_of_my_database_located","id":1},{"text":"What if my database is really big?","hash":"_what_if_my_database_is_really_big","id":2}]},"147":{"id":147,"text":"No. MicroStream allows you to store any Java object. Instances of any and all types can be handled, there are no special restrictions like having to implement an interface, using annotations or having a default constructor (see POJO). Only types bound to JVM-internals like Thread, IO-streams and the like are deliberately excluded from being persistable since they could not be properly recreated upon loading, but such instances should not be part of entity data models, anyway. During initialization, MicroStream automatically checks if your runtime entity classes are still matching the persistent data. Mismatches are automatically mapped when loading data based on predefined rules that you can extend and overwrite on a per-case basis if needed. For more information, see Legacy Type Mapping","title":"Data Model","component":"manual","version":"6.0","name":"data-model","url":"/manual/6.0/storage/faq/data-model.html","titles":[{"text":"Do I have to adapt my object-model to MicroStream?","hash":"_do_i_have_to_adapt_my_object_model_to_microstream","id":1},{"text":"What if I have to change my entity classes?","hash":"_what_if_i_have_to_change_my_entity_classes","id":2}]},"148":{"id":148,"text":"MicroStream stores persistent data in a physical form, typically in native file-system files. Yes, as many as you like. Each MicroStream instance represents one coherent entity graph of persistent data. Yes. This is already done automatically. The minimum and maximum size of every partial file can be configured, although this is a very technical detail that should not be relevant in most cases. At any given time, only one JVM process may directly access the files representing a unique set of data. Such a restriction is crucial for the correct execution of any application: changes to an application’s persistent data have to be guarded by the rules of the application’s business logic, i.e. the process that currently runs the application. Allowing another process to bypass these rules would eventually result in catastrophic consistency errors. The requirement to distribute an application over multiple processes must be solved by a clustering approach (e.g. by distributing logic AND persistent data over multiple processes or by having one process to serve as the data master for multiple worker processes).","title":"File Storage","component":"manual","version":"6.0","name":"file-storage","url":"/manual/6.0/storage/faq/file-storage.html","titles":[{"text":"Where does MicroStream store persistent data?","hash":"_where_does_microstream_store_persistent_data","id":1},{"text":"Can my application use more than one MicroStream instance?","hash":"_can_my_application_use_more_than_one_microstream_instance","id":2},{"text":"Is it possible to split the file-storage into many single files?","hash":"_is_it_possible_to_split_the_file_storage_into_many_single_files","id":3},{"text":"May multiple JVM processes access the same MicroStream database?","hash":"_may_multiple_jvm_processes_access_the_same_microstream_database","id":4}]},"149":{"id":149,"text":"Yes, all jars bring the necessary module-info class, in the multi-version sub-directory in the META-INF folder. Meaning, despite MicroStream is compiled with Java 8, it is fully compatible with the JMS. Yes, but due to reflection restrictions of records introduced in Java 15 an export has to be added to the VM parameters: --add-exports java.base/jdk.internal.misc=ALL-UNNAMED","title":"Java Features","component":"manual","version":"6.0","name":"java-features","url":"/manual/6.0/storage/faq/java-features.html","titles":[{"text":"Does MicroStream work with the Java Module System (Jigsaw)?","hash":"_does_microstream_work_with_the_java_module_system_jigsaw","id":1},{"text":"Can MicroStream handle Records?","hash":"records","id":2}]},"150":{"id":150,"text":"Yes. In fact, every storing of data is executed as a transaction, an atomic all-or-nothing action. When one or more entities are stored, their data is collected into a continuous block of bytes and that block is written to the physical form (the \"files\") in one fell swoop. Any problem during the IO-operation causes the whole block to be deleted (rolled back). Yes. The storing and loading process can be parallelized by using multiple threads and thus be strongly accelerated. There is no limitation on how many threads can be used, apart from the mathematical constraint that the thread count must be a power of 2 (1, 2, 4, 8, 16, etc.). Yes. There are currently two options available to create backups: An on-the-fly backup that copies and validates stored entity data after it has been written and the possibility to export all database files to a target location (which is in fact just a low-level file copying, but executed in a concurrency-safe way). Yes. MicroStream provides a per-type export of binary data and a utility to convert its binary data into the CSV format. The other way around (convert CSV to binary an import binary files) is also possible. No, because it doesn’t need to. Such concerns are long covered by the application itself, with the DBMS usually being degraded to only being the application’s exclusive database. Thus, all that is needed for a modern business application is just an application-exclusive data storage solution, which is exactly what MicroStream is. Yes, if the data is structured in a format conforming to the entity classes and with references being represented in globally unique and bijective numbers. How hard that is for a given database depends on its specifics, but it can be as easy as executing one generically created SELECT per table. Yes, since Version 4.1 the released jar files contain the necessary OSGi Headers. Also a P2 Update Site distribution is available at: https://repo.microstream.one/repository/update-site/06.01.00-MS-GA","title":"Miscellaneous","component":"manual","version":"6.0","name":"miscellaneous","url":"/manual/6.0/storage/faq/miscellaneous.html","titles":[{"text":"Are transactions possible in MicroStream?","hash":"_are_transactions_possible_in_microstream","id":1},{"text":"Is MicroStream multi-threaded?","hash":"_is_microstream_multi_threaded","id":2},{"text":"Does MicroStream support a backup strategy?","hash":"_does_microstream_support_a_backup_strategy","id":3},{"text":"Does MicroStream provide data export/import functionality?","hash":"_does_microstream_provide_data_exportimport_functionality","id":4},{"text":"Does MicroStream provide a user management, authentication and authorization etc., like conventional DBMS ?","hash":"_does_microstream_provide_a_user_management_authentication_and_authorization_etc_like_conventional_dbms","id":5},{"text":"Is it possible to migrate an existing database to MicroStream?","hash":"_is_it_possible_to_migrate_an_existing_database_to_microstream","id":6},{"text":"Is MicroStream usable in an OSGi Environment?","hash":"_is_microstream_usable_in_an_osgi_environment","id":7}]},"151":{"id":151,"text":"This is an enterprise feature. one.microstream microstream-enterprise-afs-aws-dynamodb 06.01.00-MS-GA DynamoDbClient client = ...; BlobStoreFileSystem fileSystem = BlobStoreFileSystem.New( DynamoDbConnector.Caching(client) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration AWS DynamoDB can be set as follows. microstream-storage.properties storage-filesystem.aws.dynamodb.credentials.type=static storage-filesystem.aws.dynamodb.credentials.access-key-id=my-access-key-id storage-filesystem.aws.dynamodb.credentials.secret-acces-key=my-secret-access-key storage-filesystem.aws.dynamodb.credentials.region=us-east-1 Property Description endpoint-override The endpoint with which the SDK should communicate. region Configure the region with which the SDK should communicate. If this is not specified, the SDK will attempt to identify the endpoint automatically using the following logic: Check the 'aws.region' system property for the region. Check the 'AWS_REGION' environment variable for the region. Check the {user.home}/.aws/credentials and {user.home}/.aws/config files for the region. If running in EC2, check the EC2 metadata service for the region. credentials.type The type of the credentials provider. Supported values are: \"environment-variables\" Credentials will be loaded from the AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY and AWS_SESSION_TOKEN environment variables. \"system-properties\" Credentials will be loaded from the aws.accessKeyId, aws.secretAccessKey and aws.sessionToken system properties. \"static\" Credentials will be loaded from the credentials.access-key-id and credentials.secret-access-key properties. \"default\" Credentials provider chain that looks for credentials in this order: Java System Properties - aws.accessKeyId and aws.secretKey Environment Variables - AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY Credential profiles file at the default location (~/.aws/credentials) shared by all AWS SDKs and the AWS CLI Credentials delivered through the Amazon EC2 container service if AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\" environment variable is set and security manager has permission to access the variable, Instance profile credentials delivered through the Amazon EC2 metadata service credentials.access-key-id The access key id, used when \"credentials.type\" is \"static\". credentials.secret-access-key The secret access key, used when \"credentials.type\" is \"static\".","title":"AWS DynamoDB","component":"manual","version":"6.0","name":"aws-dynamodb","url":"/manual/6.0/storage/storage-targets/blob-stores/aws-dynamodb.html","titles":[{"text":"Configuration","hash":"_configuration","id":1},{"text":"Supported properties","hash":"_supported_properties","id":2}]},"152":{"id":152,"text":"This is an enterprise feature. one.microstream microstream-enterprise-afs-aws-s3 06.01.00-MS-GA S3Client client = ...; BlobStoreFileSystem fileSystem = BlobStoreFileSystem.New( S3Connector.Caching(client) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration AWS S3 can be set as follows. microstream-storage.properties storage-filesystem.aws.s3.credentials.type=static storage-filesystem.aws.s3.credentials.access-key-id=my-access-key-id storage-filesystem.aws.s3.credentials.secret-acces-key=my-secret-access-key storage-filesystem.aws.s3.credentials.region=us-east-1 Property Description endpoint-override The endpoint with which the SDK should communicate. region Configure the region with which the SDK should communicate. If this is not specified, the SDK will attempt to identify the endpoint automatically using the following logic: Check the 'aws.region' system property for the region. Check the 'AWS_REGION' environment variable for the region. Check the {user.home}/.aws/credentials and {user.home}/.aws/config files for the region. If running in EC2, check the EC2 metadata service for the region. credentials.type The type of the credentials provider. Supported values are: \"environment-variables\" Credentials will be loaded from the AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY and AWS_SESSION_TOKEN environment variables. \"system-properties\" Credentials will be loaded from the aws.accessKeyId, aws.secretAccessKey and aws.sessionToken system properties. \"static\" Credentials will be loaded from the credentials.access-key-id and credentials.secret-access-key properties. \"default\" Credentials provider chain that looks for credentials in this order: Java System Properties - aws.accessKeyId and aws.secretKey Environment Variables - AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY Credential profiles file at the default location (~/.aws/credentials) shared by all AWS SDKs and the AWS CLI Credentials delivered through the Amazon EC2 container service if AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\" environment variable is set and security manager has permission to access the variable, Instance profile credentials delivered through the Amazon EC2 metadata service credentials.access-key-id The access key id, used when \"credentials.type\" is \"static\". credentials.secret-access-key The secret access key, used when \"credentials.type\" is \"static\".","title":"AWS S3","component":"manual","version":"6.0","name":"aws-s3","url":"/manual/6.0/storage/storage-targets/blob-stores/aws-s3.html","titles":[{"text":"Configuration","hash":"_configuration","id":1},{"text":"Supported properties","hash":"_supported_properties","id":2}]},"153":{"id":153,"text":"This is an enterprise feature. one.microstream microstream-enterprise-afs-azure-storage 06.01.00-MS-GA BlobServiceClient client = ...; BlobStoreFileSystem fileSystem = BlobStoreFileSystem.New( AzureStorageConnector.Caching(client) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration Azure Storage can be set as follows. microstream-storage.properties storage-filesystem.azure.storage.credentials.type=basic storage-filesystem.azure.storage.credentials.username=user storage-filesystem.azure.storage.credentials.password=secret Property Description endpoint Sets the blob service endpoint, additionally parses it for information (SAS token). connection-string Sets the connection string to connect to the service. encryption-scope Sets the encryption scope that is used to encrypt blob contents on the server. credentials.type The type of the credentials provider. Supported values are: \"basic\" Credentials will be loaded from the credentials.username and credentials.password properties. \"shared-key\" Credentials will be loaded from the credentials.account-name and credentials.account-key properties. credentials.username The username, used when \"credentials.type\" is \"basic\". credentials.password The password, used when \"credentials.type\" is \"basic\". credentials.account-name The account name, used when \"credentials.type\" is \"shared-key\". credentials.account-key The account key, used when \"credentials.type\" is \"shared-key\".","title":"Azure Storage","component":"manual","version":"6.0","name":"azure-storage","url":"/manual/6.0/storage/storage-targets/blob-stores/azure-storage.html","titles":[{"text":"Configuration","hash":"_configuration","id":1},{"text":"Supported properties","hash":"_supported_properties","id":2}]},"154":{"id":154,"text":"This is an enterprise feature. one.microstream microstream-enterprise-afs-hazelcast 06.01.00-MS-GA HazelcastInstance hazelcast = ...; BlobStoreFileSystem fileSystem = BlobStoreFileSystem.New( HazelcastConnector.Caching(cache) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration Hazelcast can be set as follows. microstream-storage.properties storage-filesystem.hazelcast.configuration=path-to-hazelcast-configuration-file Property Description hazelcast.configuration Supported values: \"default\" It tries to load Hazelcast configuration from a list of well-known locations, and then applies overrides found in environment variables/system properties. When no location contains Hazelcast configuration then it returns default. \"classpath:path-to-hazelcast-configuration-file\" When the \"classpath:\" prefix is used, the file is loaded from a classpath resource. a valid URL Creates new Config which is loaded from the given URL and uses the System.properties to replace variables. a file path Creates a Config based on a Hazelcast file and uses the System.properties to resolve variables.","title":"Hazelcast","component":"manual","version":"6.0","name":"hazelcast","url":"/manual/6.0/storage/storage-targets/blob-stores/hazelcast.html","titles":[{"text":"Configuration","hash":"_configuration","id":1},{"text":"Supported properties","hash":"_supported_properties","id":2}]},"155":{"id":155,"text":"This is an enterprise feature. one.microstream microstream-enterprise-afs-kafka 06.01.00-MS-GA Properties properties = new Properties(); properties.setProperty( CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9093\" ); BlobStoreFileSystem fileSystem = BlobStoreFileSystem.New( KafkaConnector.Caching(properties) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration Kafka can be set as follows. microstream-storage.properties storage-filesystem.kafka-properties.bootstrap.servers=localhost:9093 All supported properties of Kafka, see https://kafka.apache.org/documentation/","title":"Kafka","component":"manual","version":"6.0","name":"kafka","url":"/manual/6.0/storage/storage-targets/blob-stores/kafka.html","titles":[{"text":"Configuration","hash":"_configuration","id":1},{"text":"Supported properties","hash":"_supported_properties","id":2}]},"156":{"id":156,"text":"This is an enterprise feature. one.microstream microstream-enterprise-afs-mongodb 06.01.00-MS-GA MongoClient mongoClient = MongoClients.create(); MongoDatabase database = mongoClient.getDatabase(\"db\"); BlobStoreFileSystem fileSystem = BlobStoreFileSystem.New( MongoDbConnector.Caching(database) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration MongoDB can be set as follows. microstream-storage.properties storage-filesystem.mongodb.database=mydatabase storage-filesystem.mongodb.auth-mechanism=mongo-cr storage-filesystem.mongodb.username=username storage-filesystem.mongodb.password=secret Property Description database The database name for the storage target. application-name Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. connection-string Sets the connection string to connect to the service. read-concern The read concern level. read-preference The preferred replica set members to which a query or command can be sent. write-concern Controls the acknowledgment of write operations with various options. w 0: Don’t wait for acknowledgement from the server 1: Wait for acknowledgement, but don’t wait for secondaries to replicate >=2: Wait for one or more secondaries to also acknowledge \"majority\": Wait for a majority of data bearing nodes to acknowledge \"\": Wait for one or more secondaries to also acknowledge based on a tag set name wtimeout - how long to wait for secondaries to acknowledge before failing 0: indefinite >0: time to wait in milliseconds Other options: journal: If true block until write operations have been committed to the journal. Cannot be used in combination with fsync. Write operations will fail with an exception if this option is used when the server is running without journaling. retry-reads Sets whether reads should be retried if they fail due to a network error. retry-writes Sets whether writes should be retried if they fail due to a network error. uuid-representation The representation to use when converting a UUID to a BSON binary value.This class is necessary because the different drivers used to have different ways of encoding UUID, with the BSON subtype: \\x03 UUID old. credentials.auth-mechanism The type of the authentication mechanism. Supported values are: \"gssapi\" Creates a MongoCredential instance for the GSSAPI SASL mechanism with the supplied \"configuration.username\" property. To override the default service name of \"mongodb\", add a mechanism property with the name \"SERVICE_NAME\". To force canonicalization of the host name prior to authentication, add a mechanism property with the name \"CANONICALIZE_HOST_NAME\" with the value true. To override the javax.security.auth.Subject with which the authentication executes, add a mechanism property with the name \"JAVA_SUBJECT\" with the value of a Subject instance. To override the properties of the javax.security.sasl.SaslClient with which the authentication executes, add a mechanism property with the name \"JAVA_SASL_CLIENT_PROPERTIES\" with the value of a Map instance containing the necessary properties. This can be useful if the application is customizing the default javax.security.sasl.SaslClientFactory. \"plain\" Creates a MongoCredential instance for the PLAIN SASL mechanism. Credentials will be loaded from the credentials.username, credentials.source and credentials.password properties. \"mongodb-x509\" Creates a MongoCredential instance for the MongoDB X.509 protocol with the supplied \"configuration.username\" property. \"mongo-cr\" Creates a MongoCredential instance with an unspecified mechanism. The client will negotiate the best mechanism based on the version of the server that the client is authenticating to. Credentials will be loaded from the credentials.username and credentials.password properties. credentials.username The username, used for various auth mechanisms. credentials.password The password, used for various auth mechanisms. credentials.source The source where the user is defined. This can be either \"$external\" or the name of a database. Used when credentials.auth-mechanism=plain. auth-mechanism-properties Further properties for the authentication mechanism.","title":"MongoDB","component":"manual","version":"6.0","name":"mongodb","url":"/manual/6.0/storage/storage-targets/blob-stores/mongodb.html","titles":[{"text":"Configuration","hash":"_configuration","id":1},{"text":"Supported properties","hash":"_supported_properties","id":2}]},"157":{"id":157,"text":"This is an enterprise feature. one.microstream microstream-enterprise-afs-oraclecloud-objectstorage 06.01.00-MS-GA ObjectStorageClient client = ...; BlobStoreFileSystem fileSystem = BlobStoreFileSystem.New( OracleCloudObjectStorageConnector.Caching(client) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration Oracle Cloud Object Storage can be set as follows. microstream-storage.properties storage-filesystem.oraclecloud.object-storage.config-file.profile=production storage-filesystem.oraclecloud.object-storage.region=us-phoenix-1 Property Description config-file.path The path of the config file, if not set the default is used: \"~/.oci/config\" config-file.profile The configuration profile to use, if not set \"DEFAULT\" is used. config-file.charset The encoding of the config file. client.connection-timeout-millis The max time to wait for a connection, in millis. Default is 10000. client.read-timeout-millis The max time to wait for data, in millis. Default is 60000. client.max-async-threads The max number of async threads to use. Default is 50. region Sets the region to call (ex, 'us-phoenix-1'). endpoint Sets the endpoint to call (ex, https://www.example.com).","title":"Oracle Cloud Object Storage","component":"manual","version":"6.0","name":"oracle-cloud-object-storage","url":"/manual/6.0/storage/storage-targets/blob-stores/oracle-cloud-object-storage.html","titles":[{"text":"Configuration","hash":"_configuration","id":1}]},"158":{"id":158,"text":"This is an enterprise feature. one.microstream microstream-enterprise-afs-oracle-coherence 06.01.00-MS-GA NamedCache cache = CacheFactory.getCache(\"cache-name\"); BlobStoreFileSystem fileSystem = BlobStoreFileSystem.New( CoherenceConnector.Caching(cache) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration Coherence can be set as follows. microstream-storage.properties storage-filesystem.oracle.coherence.cache-name=my-cache Property Description cache-name The name of the cache which is used to retrieve the named cache from the cache factory. cache-config It is used to specify a custom cache configuration deployment descriptor to be used instead of the configured default cache configuration deployment descriptor.","title":"Oracle Coherence","component":"manual","version":"6.0","name":"oracle-coherence","url":"/manual/6.0/storage/storage-targets/blob-stores/oracle-coherence.html","titles":[{"text":"Configuration","hash":"_configuration","id":1}]},"159":{"id":159,"text":"This is an enterprise feature. one.microstream microstream-enterprise-afs-oracle-nosql 06.01.00-MS-GA KVStore kvstore = KVStoreFactory.getStore( new KVStoreConfig(\"kvstore\", \"kvlite:5000\") ); BlobStoreFileSystem fileSystem = BlobStoreFileSystem.New( OracleNoSqlConnector.Caching(kvstore) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration Oracle NoSQL can be set as follows. microstream-storage.properties storage-filesystem.oracle.nosql.store-name=kvstore storage-filesystem.oracle.nosql.helper-hosts=kvlite:5000 storage-filesystem.oracle.nosql.username=user storage-filesystem.oracle.nosql.password=secret Property Description store-name The name of the KVStore. The store name is used toguard against accidental use of the wrong host or port. The store name must consist entirely of upper or lower-case, letters and digits. helper-hosts Comma separated list containing the host and port of an active node in the KVStore. Each string has the format hostname:port. It is good practice to pass multiple hosts so that if one host is down, the system will attempt to open the next one, and so on. username Username used for authentication. password Password used for authentication. check-interval Configures the default interval for checking on data definition operation progress. consistency Configures the default read Consistency to be used when a Consistency is not specified for a particular read operation. Supported values: NONE_REQUIRED A consistency policy that lets a transaction on a replica using this policy proceed regardless of the state of the Replica relative to the Master. ABSOLUTE A consistency policy that requires that a transaction be serviced on the Master so that consistency is absolute. durability Configures the default write Durability to be used when a Durability is not specified for a particular write operation. Supported values: COMMIT_SYNC A convenience constant that defines a durability policy with COMMIT_SYNC for Master commit synchronization. The policies default to COMMIT_NO_SYNC for commits of replicated transactions that need acknowledgment and SIMPLE_MAJORITY for the acknowledgment policy. COMMIT_NO_SYNC A convenience constant that defines a durability policy with COMMIT_NO_SYNC for Master commit synchronization. The policies default to COMMIT_NO_SYNC for commits of replicated transactions that need acknowledgment and SIMPLE_MAJORITY for the acknowledgment policy. COMMIT_WRITE_NO_SYNC A convenience constant that defines a durability policy with COMMIT_WRITE_NO_SYNC for Master commit synchronization. The policies default to COMMIT_NO_SYNC for commits of replicated transactions that need acknowledgment and SIMPLE_MAJORITY for the acknowledgment policy. lob-chunk-size Configures the chunk size associated with the chunks used to store a LOB. lob-chunks-per-partition Configures the number of contiguous chunks that can be stored in the same partition for a given LOB. lob-timeout Configures default timeout value associated with chunk access during operations on LOBs. lob-verification-bytes Configures the number of trailing bytes of a partial LOB that must be verified against the user supplied LOB stream when resuming a putLOB operation. A value⇐0 disables verification. max-check-retries Set the number of times the client will attempt to check status for the execution of an asynchronous data definition or administrative statement execution in the face of network connection problems. network-roundtrip-timeout Configures the amount of time to allow for a single round-trip network communication with the server. This value is added to the request timeout to determine the total amount of time that the client should wait for a request to complete before timing out. read-zones Comma separated lists of zones in which nodes must be located to be used for read operations. If the argument is null, or this method has not been called, then read operations can be performed on nodes in any zone. registry-open-timeout Configures the connect/open timeout used when making RMI registry lookup requests. registry-read-timeout Configures the read timeout associated with sockets used to make RMI registry requests. Shorter timeouts result in more rapid failure detection and recovery. However, this timeout should be sufficiently long so as to allow for the longest timeout associated with a request. request-timeout Configures the default request timeout. sg-attrs-cache-timeout Sets the timeout of cached sequence generator attributes in milliseconds. socket-open-timeout Configures the open timeout used when establishing sockets used to make client requests. Shorter timeouts result in more rapid failure detection and recovery. The default open timeout (3000 milliseconds) should be adequate for most applications. socket-read-timeout Configures the read timeout associated with the underlying sockets used to make client requests. Shorter timeouts result in more rapid failure detection and recovery. However, this timeout should be sufficiently long so as to allow for the longest timeout associated with a request. use-async Specifies whether calls to the store should use the async network protocol. security-properties Configures security properties for the client. The supported properties include both authentication properties and transport properties. See oracle.kv.KVSecurityConstants for details.","title":"Oracle NoSQL","component":"manual","version":"6.0","name":"oracle-nosql","url":"/manual/6.0/storage/storage-targets/blob-stores/oracle-nosql.html","titles":[{"text":"Configuration","hash":"_configuration","id":1}]},"160":{"id":160,"text":"This is an enterprise feature. one.microstream microstream-enterprise-afs-redis 06.01.00-MS-GA String redisUri = \"redis://localhost:6379/0\"; BlobStoreFileSystem fileSystem = BlobStoreFileSystem.New( RedisConnector.Caching(redisUri) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration Redis can be set as follows. microstream-storage.properties storage-filesystem.redis.uri=redis://localhost:6379/0 Property Description redis.uri The RedisURI contains the host/port and can carry authentication/database details. On a successful connect you get authenticated, and the database is selected afterward. This applies also after re-establishing a connection after a connection loss.","title":"Redis","component":"manual","version":"6.0","name":"redis","url":"/manual/6.0/storage/storage-targets/blob-stores/redis.html","titles":[{"text":"Configuration","hash":"_configuration","id":1}]},"161":{"id":161,"text":"one.microstream microstream-afs-sql 06.01.00-MS-GA org.mariadb.jdbc mariadb-java-client 2.7.1 MariaDbDataSource dataSource = new MariaDbDataSource(); dataSource.setUrl(\"jdbc:mysql://host:3306/mydb\"); dataSource.setUser(\"user\"); dataSource.setPassword(\"secret\"); SqlFileSystem fileSystem = SqlFileSystem.New( SqlConnector.Caching( SqlProviderMariaDb.New(dataSource) ) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration MariaDB can be set as follows. Please note that you have to define a data source provider. microstream-storage.properties storage-filesystem.sql.mariadb.data-source-provider=com.sample.MyDataSourceProvider storage-filesystem.sql.mariadb.catalog=mycatalog storage-filesystem.sql.mariadb.schema=myschema storage-filesystem.sql.mariadb.url=jdbc:mysql://host:3306/mydb storage-filesystem.sql.mariadb.user=username storage-filesystem.sql.mariadb.password=secret MyDataSourceProvider.java package com.sample; import one.microstream.afs.sql.types.SqlDataSourceProvider public class MyDataSourceProvider implements SqlDataSourceProvider { public DataSource provideDataSource(Configuration configuration) { String url = configuration.get(\"url\"); String user = configuration.get(\"user\"); String password = configuration.get(\"password\"); // TODO: return data source of your choice, e.g. from a connection pool } }","title":"MariaDB","component":"manual","version":"6.0","name":"mariadb","url":"/manual/6.0/storage/storage-targets/sql-databases/mariadb.html","titles":[{"text":"Configuration","hash":"_configuration","id":1}]},"162":{"id":162,"text":"This is an enterprise feature. one.microstream microstream-enterprise-afs-sql 06.01.00-MS-GA mysql mysql-connector-java 8.0.21 MysqlDataSource dataSource = new MysqlDataSource(); dataSource.setUrl(\"jdbc:mysql://host:3306/mydb\"); dataSource.setUser(\"user\"); dataSource.setPassword(\"secret\"); SqlFileSystem fileSystem = SqlFileSystem.New( SqlConnector.Caching( SqlProviderMySql.New(dataSource) ) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration MySQL can be set as follows. Please note that you have to define a data source provider. microstream-storage.properties storage-filesystem.sql.mysql.data-source-provider=com.sample.MyDataSourceProvider storage-filesystem.sql.mysql.catalog=mycatalog storage-filesystem.sql.mysql.schema=myschema storage-filesystem.sql.mysql.url=jdbc:mysql://host:3306/mydb storage-filesystem.sql.mysql.user=username storage-filesystem.sql.mysql.password=secret MyDataSourceProvider.java package com.sample; import one.microstream.afs.sql.types.SqlDataSourceProvider public class MyDataSourceProvider implements SqlDataSourceProvider { public DataSource provideDataSource(Configuration configuration) { String url = configuration.get(\"url\"); String user = configuration.get(\"user\"); String password = configuration.get(\"password\"); // TODO: return data source of your choice, e.g. from a connection pool } }","title":"MySQL","component":"manual","version":"6.0","name":"mysql","url":"/manual/6.0/storage/storage-targets/sql-databases/mysql.html","titles":[{"text":"Configuration","hash":"_configuration","id":1}]},"163":{"id":163,"text":"This is an enterprise feature. one.microstream microstream-enterprise-afs-sql 06.01.00-MS-GA com.oracle.database.jdbc ojdbc8 19.7.0.0 OracleDataSource dataSource = new OracleDataSource(); dataSource.setURL(\"jdbc:oracle:thin:@localhost:1521/db\"); dataSource.setUser(\"user\"); dataSource.setPassword(\"secret\"); SqlFileSystem fileSystem = SqlFileSystem.New( SqlConnector.Caching( SqlProviderOracle.New(dataSource) ) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration Oracle can be set as follows. Please note that you have to define a data source provider. microstream-storage.properties storage-filesystem.sql.oracle.data-source-provider=com.sample.MyDataSourceProvider storage-filesystem.sql.oracle.catalog=mycatalog storage-filesystem.sql.oracle.schema=myschema storage-filesystem.sql.oracle.url=jdbc:oracle:thin:@localhost:1521/db storage-filesystem.sql.oracle.user=username storage-filesystem.sql.oracle.password=secret MyDataSourceProvider.java package com.sample; import one.microstream.afs.sql.types.SqlDataSourceProvider public class MyDataSourceProvider implements SqlDataSourceProvider { public DataSource provideDataSource(Configuration configuration) { String url = configuration.get(\"url\"); String user = configuration.get(\"user\"); String password = configuration.get(\"password\"); // TODO: return data source of your choice, e.g. from a connection pool } }","title":"Oracle","component":"manual","version":"6.0","name":"oracle","url":"/manual/6.0/storage/storage-targets/sql-databases/oracle.html","titles":[{"text":"Configuration","hash":"_configuration","id":1}]},"164":{"id":164,"text":"one.microstream microstream-afs-sql 06.01.00-MS-GA org.postgresql postgresql 42.2.14 PGSimpleDataSource dataSource = new PGSimpleDataSource(); dataSource.setUrl(\"jdbc:postgresql://localhost:5432/mydb\"); dataSource.setUser(\"postgres\"); dataSource.setPassword(\"secret\"); SqlFileSystem fileSystem = SqlFileSystem.New( SqlConnector.Caching( SqlProviderPostgres.New(dataSource) ) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration PostgreSQL can be set as follows. Please note that you have to define a data source provider. microstream-storage.properties storage-filesystem.sql.postgres.data-source-provider=com.sample.MyDataSourceProvider storage-filesystem.sql.postgres.catalog=mycatalog storage-filesystem.sql.postgres.schema=myschema storage-filesystem.sql.postgres.url=jdbc:postgresql://localhost:5432/mydb storage-filesystem.sql.postgres.user=username storage-filesystem.sql.postgres.password=secret MyDataSourceProvider.java package com.sample; import one.microstream.afs.sql.types.SqlDataSourceProvider public class MyDataSourceProvider implements SqlDataSourceProvider { public DataSource provideDataSource(Configuration configuration) { String url = configuration.get(\"url\"); String user = configuration.get(\"user\"); String password = configuration.get(\"password\"); // TODO: return data source of your choice, e.g. from a connection pool } }","title":"PostgreSQL","component":"manual","version":"6.0","name":"postgresql","url":"/manual/6.0/storage/storage-targets/sql-databases/postgresql.html","titles":[{"text":"Configuration","hash":"_configuration","id":1}]},"165":{"id":165,"text":"one.microstream microstream-afs-sql 06.01.00-MS-GA org.xerial sqlite-jdbc 3.32.3 SQLiteDataSource dataSource = new SQLiteDataSource(); dataSource.setUrl(\"jdbc:sqlite:microstreamdb\"); SqlFileSystem fileSystem = SqlFileSystem.New( SqlConnector.Caching( SqlProviderSqlite.New(dataSource) ) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration SQLite can be set as follows. Please note that you have to define a data source provider. microstream-storage.properties storage-filesystem.sql.sqlite.data-source-provider=com.sample.MyDataSourceProvider storage-filesystem.sql.sqlite.catalog=mycatalog storage-filesystem.sql.sqlite.schema=myschema storage-filesystem.sql.sqlite.url=jdbc:sqlite:microstreamdb MyDataSourceProvider.java package com.sample; import one.microstream.afs.sql.types.SqlDataSourceProvider public class MyDataSourceProvider implements SqlDataSourceProvider { public DataSource provideDataSource(Configuration configuration) { String url = configuration.get(\"url\"); // TODO: return data source of your choice, e.g. from a connection pool } }","title":"SQLite","component":"manual","version":"6.0","name":"sqlite","url":"/manual/6.0/storage/storage-targets/sql-databases/sqlite.html","titles":[{"text":"Configuration","hash":"_configuration","id":1}]},"166":{"id":166,"text":"By default, the continuous backup is disabled. If enabled the MicroStream instance will clone all changes to another directory. The backup is identical to the primary MicroStream storage. To enable the continuous backup just set the backup directory: With microstream-storage-embedded-configuration API: Java EmbeddedStorageManager storageManager = EmbeddedStorageConfigurationBuilder.New() .setBackupDirectory(\"A safe place\") .createEmbeddedStorageFoundation() .createEmbeddedStorageManager(); XML ... INI backupDirectory = backupDir With MicroStream foundation classes: Java NioFileSystem fileSystem = NioFileSystem.New(); StorageBackupSetup backupSetup = StorageBackupSetup.New( Sorage.BackupFileProviderBuilder(fileSystem) .setDirectory(fileSystem.ensureDirectoryPath(BACKUPDIR)) .setTruncationDirectory(fileSystem.ensureDirectoryPath(TRUNCATIONDIR)) .setDeletionDirectory(fileSystem.ensureDirectoryPath(DELETIONDIR)) .createFileProvider() ); StorageConfiguration configuration = StorageConfiguration.Builder() .setBackupSetup(backupSetup) .setStorageFileProvider(StorageLiveFileProvider.New( fileSystem.ensureDirectoryPath(WORKINGDIR) )) .createConfiguration() ;","title":"Continuous Backup","component":"manual","version":"6.0","name":"continuous-backup","url":"/manual/6.0/storage/configuration/backup/continuous-backup.html","titles":[]},"167":{"id":167,"text":"To issue a full backup of the whole storage to be executed, the EmbeddedStorageManager provides two methods named issueFullBackup. Keep in mind that this could result in a very long running operation, depending on the storage size. Although the full backup may be a valid solution in some circumstances, the continuous backup should be preferred, since it is by far more efficient. EmbeddedStorageManager storage = ...; storage.issueFullBackup( NioFileSystem.New().ensureDirectoryPath(\"full\", \"backup\", \"dir\") ); The backup can be written to any available storage target, not just the local file system.","title":"Full Backup","component":"manual","version":"6.0","name":"full-backup","url":"/manual/6.0/storage/configuration/backup/full-backup.html","titles":[]},"168":{"id":168,"text":"The Lazy class has a .clear() method. When called, the reference held in the Lazy Reference is removed and only the ID is kept so that the instance can be reloaded when needed. Important background knowledge: However, such a clear does not mean that the referenced instance immediately disappears from memory. That’s the job of the garbage collector of the JVM. The reference is even registered in another place, namely in a global directory (Swizzle Registry), in which each known instance is registered with its ObjectId in a bijective manner. This means: if you clear such a reference, but shortly thereafter the Lazy Reference is queried again, probably nothing has to be loaded from the database, but simply the reference from the Swizzle Registry is restored. Nevertheless, the Swizzle Registry is not a memory leak, because it references the instances only via WeakReference. In short, if an instance is only referenced as \"weak,\" the JVM GC will still clean it up. So that the Lazy References do not have to be managed manually, but the whole goes automatically, there is the following mechanism: Each Lazy instance has a lastTouched timestamp. Each .get() call sets it to the current time. This will tell you how long a Lazy Reference has not been used, i.e. if it is needed at all. The LazyReferenceManager audits this. It is enabled by default, with a timeout of 1,000,000 milliseconds, which is about 15 minutes. A custom manager can be set easily, which should happen before a storage is started. LazyReferenceManager.set(LazyReferenceManager.New( Lazy.Checker( Duration.ofMinutes(30).toMillis(), // timeout of lazy access 0.75 // memory quota ) ); The timeout of lazy references is set to 30 minutes, meaning references which haven’t been touched for this time are cleared. In combination with a memory quota of 0.75.","title":"Clearing Lazy References","component":"manual","version":"6.0","name":"clearing-lazy-references","url":"/manual/6.0/storage/loading-data/lazy-loading/clearing-lazy-references.html","titles":[{"text":"Manually","hash":"_manually","id":1},{"text":"Automatically","hash":"automatically","id":2}]},"169":{"id":169,"text":"In this chapter it is explained how Lazy Loading is done with MicroStream. Of course, it’s not really about the technical implementation of procrastination, but about efficiency: why bloat the limited RAM with stuff before you even need it? Classic example: The application has self-contained data areas that contain a large amount of data. The data for an area is not loaded if the area is not worked at all. Instead, you only load a tiny amount of \"head data\" for each area (name or other for displaying purposes) and the actual data only when the application really needs it. E.g. fiscal years with hundreds of thousands or millions of sales. One million revenue records for 2010, one million for 2011, for 2012, etc. In 2019, most of the time only 2019 and 2018 will be needed. The previous few, and the year 2000 sales are not of great interest anymore. Therefore: load data only when needed. Super efficient. For example let’s say the app \"MyBusinessApp\" has a root instance class, looking like this: public class MyBusinessApp { // ... private HashMap businessYears = new HashMap<>(); // ... } The business year hold the turnovers: public class BusinessYear { // ... private ArrayList turnovers = new ArrayList<>(); // ... } This approach would be a problem: During initialization, the root instance would be loaded, from there its HashMap with all BusinessYear instances, each with its ArrayList and thus all conversions. For all years. 20 years of approximately 1 million sales makes 20 million entities, which are pumped directly into the RAM at the start. It does not matter if someone needs it or not. We don’t want it that way. It would be nice if you could simply add a \"lazy\" to the turnover list. And that’s exactly how it works: public class BusinessYear { // ... private Lazy> turnovers = ...; // we will get to that // ... } And bingo, the turnovers are now loaded lazily. Of course, this is no longer an ArrayList field, which is now magically loaded lazy, but this is now a Lazy field and the instances of this type are typed generically to ArrayList . Lazy is just a simple class whose instances internally hold an ID and a reference to the actual thing (here the ArrayList instance). If the internal reference is zero, the reserved ID is used to reload it. If it is not null, it is simply returned. So just a reference intermediate instance. Similar to the JDK’s WeakReference, just not JVM-weak, but storage-lazy. What do you have to do now to get the actual ArrayList instance? ArrayList turnovers = this.turnovers.get(); Just as with WeakReference, or simply as one would expect from a reference intermediate type in general: a simple get method. The .get() call reloads the data as needed. But you do not want to mess around with that yourself. No \"SELECT bla FROM turnovers WHERE ID =\" + this.turnovers.getId(). Since you want to program your application you don' t have to mess around with low-level database ID-loading stuff. That’s what the MicroStream Code does internally. You do not even need to access the ID, you just have to say \"get!\". That’s it. There are different strategies, what you write here. Analogous to the code example before it would be simply: private Lazy> turnovers = Lazy.Reference(new ArrayList<>()); So always a new ArrayList instance, wrapped in a Lazy instance. If the actual ArrayList reference should be null at first, it works the same way: private Lazy> turnovers = Lazy.Reference(null); The this.turnovers.get() also just always returns null. Completely transparent. But you could also do this: private Lazy> turnovers = null; If there is no list, then you do not make any intermediate reference instance for any list. A separate instance for null is indeed a bit …​ meh. But that has a nasty problem elsewhere: this.turnovers.get() does not work then. Because NullPointerException. Anytime you need to write this here, the readability of code is not exactly conducive: return this.turnovers == null ? null : this.turnovers.get(); But there is a simple solution: Just move this check into a static utility method. Just like that: return Lazy.get(this.turnovers); This is the same .get(), just with a static null-check around it. This always puts you on the safe side. For Lazy Loading, simply wrap Lazy<> around the actual field and then call .get() or maybe better Lazy.get(...). It’s as simple as that. The full example can be found on GitHub. Why do you have to replace your actual instance with a lazy loading intermediate instance and fiddle around with generics? Why is not something like this: @Lazy private ArrayList turnovers = new ArrayList<>(); Put simply: If it were just that it would be bare Java bytecode for accessing an ArrayList. There would be no way for a middleware library to get access and look it up and perhaps reload it. What’s written there is an ArrayList reference. There is no lazy anymore. Either, the instance is null, or it is not null. If you wanted to reach in there, you would have to start with bytecode manipulation. Technically possible, but something you really don’t want in your application. So there must always be some form of intermediary. Hibernate solves this through its own collection implementations that do lazy loading internally. Although the lazy loading is nicely hidden in some way (or not, if you need an annotation for that), it also comes with all sorts of limitations. You can only use interfaces instead of concrete classes for collections. At first, the instance is not the one you dictate, the code becomes non-transparent and difficult to debug, you have to use a collection, even if it’s just a single instance, and so on. You want to be able to write anything you want and you want full insight and control (debugability, etc.) over the code. All this can be done with the tiny Lazy Interim Reference class. No restrictions, no incomprehensible \"magic\" under the hood (proxy instances and stuff) and also usable for individual instances.","title":"Lazy Loading","component":"manual","version":"6.0","name":"index","url":"/manual/6.0/storage/loading-data/lazy-loading/index.html","titles":[{"text":"What about the \"…​\" ?","hash":"_what_about_the","id":1},{"text":"In Short","hash":"_in_short","id":2},{"text":"Side Note","hash":"_side_note","id":3}]},"170":{"id":170,"text":"For convenience MicroStream provides Null-safe static access methods for lazy references. Method Description Lazy.get(Lazy) Gets the lazy referenced object, loads it if required. return value: null if the lazy reference itself is null otherwise the referenced object Lazy.peek(Lazy) Get the lazy referenced object if it is loaded, no lazy loading is done. If the object has been unloaded before peek will return null. return value: null if the lazy reference itself is null otherwise the current reference without on-demand loading Lazy.clear(Lazy) Clears the lazy reference if it is not null. All lazy references track the time of their last access (creation or querying) as a timestamp in milliseconds. If an instance is deemed timed out by a LazyReferenzManager its subject gets cleared. The timestamp is currently not public accessible.","title":"Touched Timestamp, Null-Safe Variant","component":"manual","version":"6.0","name":"touched-timestamp-null-safe-variant","url":"/manual/6.0/storage/loading-data/lazy-loading/touched-timestamp-null-safe-variant.html","titles":[{"text":"Null-safe Lazy Reference Access","hash":"_null_safe_lazy_reference_access","id":1},{"text":"Touched Timestamp","hash":"_touched_timestamp","id":2}]},"171":{"id":171,"text":"Actually, a database is a passive collection of persisted data that can never be live on its own. But the managing thread accessing it can. When an EmbeddedStorageManager is \"started\" it is actually just setup with all kinds of default and user-defined settings and definitions. What is actually \"started\" are the database managing threads that process storing and loading requests. // Setup the database manager and start the managing threads EmbeddedStorageManager storageManager = EmbeddedStorage.start(); Of course, for every start() method, there needs to be something like a shutdown() method. So there is in MicroStream: // Stop accessing the database storageManager.shutdown(); But is it really necessary to call shutdown? Should it be? What if there’s an error and the process stops without calling shutdown()? Will that cause the database to become inconsistent, corrupted, maybe even destroyed? The answer is: It wouldn’t be much of a database solution if a crash could cause any problem in the persisted data. MicroStream data-store is carefully designed in such a fashion that the process it runs in can simply vanish at any point in time and the persisted data will never be corrupted. This is surprisingly simple and reliable to solve: Whenever a .store() call returns, it is guaranteed that the data stored by it has been physically written to the underlying storage layer, usually a file system. Before that, there is no guarantee regarding written data at all. In fact, should the process die before the last byte has been written and secured, the next StorageManager initialization will recognize that and truncate the last partially written store. Either way, all the data that was guaranteed to be written will be consistently available after the next .start(). As a consequence, this safety mechanism makes an explicit .shutdown() call pretty much unnecessary. It doesn’t hurt, but it is effectively more-less the same as just calling System.exit(0);. The only time when an explicit shutdown is really needed is, if the database managing threads shall be stopped but the application itself keeps running. For example, it is perfectly valid to start the StorageManager, work with the database, then stop it, maybe change some configuration or copy files or something like that and then start it up again to continue working. In any other case, the shutdown method can be ignored and the live database can happily just be \"killed\" while running. It is specifically designed to withstand such a treatment. Any live MicroStream database basically consists of three major parts: A place where the persisted data is located. Usually a file system directory. The managing threads accessing (read and write) the persisted data. The EmbeddedStorageManager instance to use and control the database in the application. Apart from a lot of internal components (configuration, processing logic, housekeeping state, etc.), that’s all there is. There is nothing special or \"magic\" about it, no static state, no global registration in the JVM process or something like that. The consequence of this is: If two EmbeddedStorageManager instances are started, each one with a different location for its persistend data, then the application has two live databases! If three or ten or 100 are started, then that’s the number of live databases the application has. There is no limit and no conflict between different databases inside the same application process. The only important thing is that no two running StorageManagers can access the same data location.","title":"Application Life-Cycle","component":"manual","version":"7.0","name":"application-life-cycle","url":"/manual/7.0/storage/application-life-cycle.html","titles":[{"text":"Stopping or Crashing a Live Database","hash":"_stopping_or_crashing_a_live_database","id":1},{"text":"Multiple Databases","hash":"_multiple_databases","id":2}]},"172":{"id":172,"text":"Deleting data does not require performing explicit deleting actions like DELETE FROM table WHERE…​. Instead you just need to clear any references to the object in your object-graph and store those changes. If a stored object is not reachable anymore its data will be deleted from the storage later. This behavior is comparable to Java’s garbage collector. root.MyArrayList.remove(0); storage.store(root.MyArrayList); Deleted data is not erased immediately from the storage files. The erasing from the storage files is done by the housekeeping process.","title":"Deleting Data","component":"manual","version":"7.0","name":"deleting-data","url":"/manual/7.0/storage/deleting-data.html","titles":[]},"173":{"id":173,"text":"pom.xml one.microstream microstream-storage-embedded 07.01.00-MS-GA // Initialize a storage manager (\"the database\") with purely defaults. final EmbeddedStorageManager storageManager = EmbeddedStorage.start(); // print the last loaded root instance, // replace it with a current version and store it System.out.println(storageManager.root()); storageManager.setRoot(\"Hello World! @ \" + new Date()); storageManager.storeRoot(); // shutdown storage storageManager.shutdown(); This simplest example will create a new storage if no existing storage is found, if a existing storage is found it will be loaded (this is all done at line 2 in the example above). In line 6 the current storage’s content is printed. Line 7 assigns some data to the storage, replacing existing data if there is some. In line 8 everything gets stored. When using MicroStream, your entire database is accessed starting at a root instance. This instance is the root object of an object graph that gets persisted by the MicroStream storage logic. While the root instance can be of any type (for example just a collection or an array), it is a good idea to define an explicit root type specific for the application. In this simple example, it is a class called DataRoot, which wraps a single String. public class DataRoot { private String content; public DataRoot() { super(); } public String getContent() { return this.content; } public void setContent(final String content) { this.content = content; } @Override public String toString() { return \"Root: \" + this.content; } } For further information, see root instances. The following code is all that is required to setup a an application backed by a MicroStream database. The application’s convenience root instance is defined and an EmbeddedStorageManager instance, linked to the root, is created (and its database managing threads are started). This is a fully operational Java database application. // Application-specific root instance final DataRoot root = new DataRoot(); // Initialize a storage manager (\"the database\") with the given directory. final EmbeddedStorageManager storageManager = EmbeddedStorage.start( root, // root object Paths.get(\"data\") // storage directory ); // Set content data to the root element, including the time to visualize // changes on the next execution. root.setContent(\"Hello World! @ \" + new Date()); // Store the modified root and its content. storageManager.storeRoot(); This call is all that is necessary to store data in the simplest case. Best practice is to safely shutdown the storage manager by simply calling: storageManager.shutdown(); storageManager.storeRoot() is a special case method that always stores the root object. If you want to store any other object than the root itself, just call storageManager.store(modifiedObject) The full code for the Hello World example is on GitHub.","title":"Getting Started","component":"manual","version":"7.0","name":"getting-started","url":"/manual/7.0/storage/getting-started.html","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"Hello World","hash":"_hello_world","id":2},{"text":"The Root Instance","hash":"_the_root_instance","id":3},{"text":"Creating a Database","hash":"creating-a-database","id":4},{"text":"Storing Data","hash":"_storing_data","id":5},{"text":"Stopping a Live Database","hash":"_stopping_a_live_database","id":6}]},"174":{"id":174,"text":"Housekeeping is an internal background logic to optimize the database’s usage of memory and persistent storage space (typically disc space). It is comprised of mechanisms for cleaning up storage files, clearing unneeded cached data and recognizing deleted entities via garbage collection. Housekeeping is performed with a configurable time budget in configurable intervals to make sure it never interferes with the application’s work load too much (see housekeeping configuration). If new versions of an entity are stored or if entities become no longer reachable (meaning the become effectively deleted or \"garbage\" data), their older data is no longer needed. However, the byte sequences representing that old data still exist in the storage files. But since they will never be needed again, they become logical \"gaps\" in the storage files. Space that is occupied, but will never be read again. It might as well be all zeroes or not exist at all. Sadly, unwanted areas cannot simple by \"cut\" from files. Above all because that would ruin all file offsets coming after them. So with every newly stored version of an entity and every entity that is recognized as unreachable \"garbage\", a storage file consists more and more of useless \"gaps\" and less and less of actually used data. This makes the storage space less and less efficient. To prevent eventually ending up with a drive that is filled with useless bytes despite an actually not that big database, the files need to be \"cleaned up\" from time to time. To do this, the Housekeeping occasionally scans the storage files. If their \"payload\" ratio goes below the configured limit, the affected files will be retired: all data that belongs to still live entities is copied to a new file. Then the old file consists of 100% unneeded gap data and can safely be deleted. Which ratio value to set in the configuration is a matter of taste or, more precisely, depends on each individual application’s demands. A value of 1.0 (100%) means: only files with 100% payload, so no gaps at all, are acceptable. This means that for every store that contains at least one new version of an already existing entity, the corresponding storage file will contain the slightest gap, thus dropping below the demanded ratio of 100% and as a consequence, will be retired on the next occasion. This very aggressive cleanup strategy will keep the disc space usage at a perfect minimum, but at the cost of enormous amounts of copied data, since virtually every store will cause one or more storage files to be retired and their content be shifted into a new file. Respectively, a value of 0.0 (0%) means something like: \"Never care about gaps, just fill up the disc until it bursts.\" This keeps the disc write loads for the file cleanup at 0, but at the cost of rapidly eating up disc space. The best strategy most probably lies somewhere in between. Somewhere between 0.1 and 0.9 (10% and 90%). The default value is 0.75 (75%). So a storage file containing up to 25% of unused gap data is okay. Containing more gaps that 25% will cause a storage file to be retired. In addition to the payload ratio check, the file cleanup also retired files tha are too small or too big. For example: The application logic might commit a single store that is 100 MB in size. But the storage files are configured to be no larger than 10 MB (for example to keep a single file cleanup nice and fast). A single store is always written as a whole in the currently last storage file. The reason for this is to process the store as fast as possible and quickly return control to the application logic. When the housekeeping file cleanup scan encounters such an oversized file, it will retire it immediately by splitting it up across 10 smaller files and then deleting the oversized file. A similar logic applies to files that are too small. Upper and lower size bounds can be freely configured to arbitrary values. The defaults are 1 MB and 8 MB. To avoid repeated reads to storage files (which are incredibly expensive compared to just reading memory), data of once loaded entities is cached in memory. If an entity’s cached data is not requested again for a certain amount of time in relation to how much data is already cached, it is cleared from the cache to avoid unnecessarily consuming memory. The mechanism to constantly evaluate and clear cached data where applicable, is part of the housekeeping. The aggressiveness of this mechanism can be configured via the housekeeping configuration. In a reference-based (or graph-like) data paradigm, instances never have to be deleted explicitly. For example, there is no \"delete\" in the java language. There are only references. If those references are utilized correctly, deleting can be done fully automatically without any need for the developer to care about it. This is called \"garbage collection\". The concept is basically very simple: when the last reference to an instance is cut, that instance can never be accessed again. It becomes \"garbage\" that occupies memory with it data that is not needed any longer. To identify those garbage instances, all an algorithm (the \"garbage collector\") has to do is to follow every reference, starting at some defined root instance (or several) of a graph and mark every instance it encounters as \"reachable\". When it has no more unvisited instances in its queue, the marking is completed. Every instance that is not marked as reachable by then must be unreachable garbage and will be deleted from memory. Similar to the JVM’s garbage collection to optimize its memory consumption, MicroStream has a garbage collection of its own, but for the level of persistent storage space instead of memory space. Housekeeping can also be triggered manually from the StorageConnection . Related methods are: issueCacheCheck(nanoTimeBudgetBound) issueCacheCheck(nanoTimeBudgetBound, entityEvaluator) issueFileCheck(nanoTimeBudgetBound) issueFileCheck(nanoTimeBudgetBound, fileDissolvingEvaluator) issueFullCacheCheck() issueFullCacheCheck(entityEvaluator) issueFullFileCheck() issueFullFileCheck(fileDissolvingEvaluator) issueFullGarbageCollection() issueGarbageCollection(nanoTimeBudget) All Housekeeping methods can be given a defined time budget or can be run until full completion.","title":"Housekeeping","component":"manual","version":"7.0","name":"housekeeping","url":"/manual/7.0/storage/housekeeping.html","titles":[{"text":"File cleanup:","hash":"_file_cleanup","id":1},{"text":"Cache cleanup","hash":"_cache_cleanup","id":2},{"text":"Garbage collection","hash":"_garbage_collection","id":3},{"text":"Explicit Housekeeping","hash":"_explicit_housekeeping","id":4}]},"175":{"id":175,"text":"MicroStream provides an API to import and export persisted data of the storage. It is pretty much the same as writing and reading a backup. The records in the storage are distributed in lots of files and folders, depending on channel count and other settings. To get order in the chaos the export produces one file per type. This files are used again by the import to read the data into the storage. The created binary type data files contain only records of the according type, nevertheless they have the same format as the channel storage files. Export NioFileSystem fileSystem = NioFileSystem.New(); EmbeddedStorageManager storage = EmbeddedStorage.start( fileSystem.ensureDirectoryPath(\"storage\") ); String fileSuffix = \"bin\"; StorageConnection connection = storage.createConnection(); StorageEntityTypeExportStatistics exportResult = connection.exportTypes( new StorageEntityTypeExportFileProvider.Default( fileSystem.ensureDirectoryPath(\"export-dir\"), fileSuffix ), typeHandler -> true // export all, customize if necessary ); XSequence exportFiles = CQL .from(exportResult.typeStatistics().values()) .project(s -> Paths.get(s.file().identifier())) .execute() ; Import NioFileSystem fileSystem = NioFileSystem.New(); EmbeddedStorageManager storage = EmbeddedStorage.start( fileSystem.ensureDirectoryPath(\"storage\") ); StorageConnection connection = storage.createConnection(); connection.importFiles(X.Enum( fileSystem.ensureFilePath(\"type1.bin\"), fileSystem.ensureFilePath(\"type2.bin\") )); It is also possible to convert the exported binary files to a human readable format, namely CSV. Why CSV? Contrary to XML or JSON, CSV is perfectly suited to represent records with the least possible overhead. There are a lot of tools, like spreadsheet editors, which can read and modify CSV files. The file’s size is at the possible minimum and the performance of the converter is significantly better than with the other formats. Binary to CSV NioFileSystem fileSystem = NioFileSystem.New(); EmbeddedStorageManager storage = EmbeddedStorage.start( fileSystem.ensureDirectoryPath(\"storage\") ); StorageDataConverterTypeBinaryToCsv converter = new StorageDataConverterTypeBinaryToCsv.UTF8( StorageDataConverterCsvConfiguration.defaultConfiguration(), new StorageEntityTypeConversionFileProvider.Default( fileSystem.ensureDirectoryPath(\"csv-dir\"), \"csv\" ), storage.typeDictionary(), null, // no type name mapping 4096, // read buffer size 4096 // write buffer size ); AReadableFile dataFile = fileSystem.ensureFilePath(\"type1.bin\").useReading(); try { converter.convertDataFile(dataFile); } finally { dataFile.close(); } CSV to Binary NioFileSystem fileSystem = NioFileSystem.New(); EmbeddedStorageManager storage = EmbeddedStorage.start( fileSystem.ensureDirectoryPath(\"storage\") ); StorageDataConverterTypeCsvToBinary converter = StorageDataConverterTypeCsvToBinary.New( StorageDataConverterCsvConfiguration.defaultConfiguration(), storage.typeDictionary(), new StorageEntityTypeConversionFileProvider.Default( fileSystem.ensureDirectoryPath(\"bin-dir\"), \"dat\" ) ); converter.convertCsv(fileSystem.ensureFilePath(\"type1.csv\"));","title":"Import / Export","component":"manual","version":"7.0","name":"import-export","url":"/manual/7.0/storage/import-export.html","titles":[{"text":"Data Conversion","hash":"_data_conversion","id":1}]},"176":{"id":176,"text":"MicroStream Data-Store is a native Java object graph storage engine. From a technical point of view it serves one purpose only: To fully or partially persist and restore a Java object graph in the simplest way possible for the user. MicroStream Data-Store is a storage engine, but no database management system (DBMS). Many features that typical DBMS provide have been left out on purpose. The reason is that those features exist to make a DBMS something of a server application platform of an \"old kind\" on top of its data store functionality: A standalone process with user management, connection management, session handling, often even with a programming language of its own, a querying interface (SQL), etc. Today, all of those server application features are already and much better handled by dedicated server applications (the \"new kind\"), implemented in a modern language like Java. They have their built-in user, connection and session management, the querying interface to the outside world are typically web services instead of SQL, etc. But those modern server applications still lack one important thing: an easy to use and technically efficient way to store and restore their application’s data. So a \"new kind\" server often uses an \"old kind\" server just to do the data storing. This comes at the price of catching all the overhead and problems of redundant user, connection and session management AND the outdated concepts and limitations of the old querying interface (SQL). Isn’t that very weird and frustratingly complicated? Why not simply include a modern data storing library in the modern server and be done with it? A storing library that perfectly fits the modern technology and brings in no redundant overhead or complication of a secondary outdated wannabe server process. This is exactly what MicroStream Data-Store is and the reason why it is intentionally not a DBMS but \"only\" a storage engine. One might think the easiest way to store and load data in Java would be Java’s built-in serialization. However, it turned out long ago to be very limited, making it hard, if not impossible, to be used as a replacement for a DBMS: Only complete object graphs can be stored and restored, which is unacceptable for all but very small databases. It is very inefficient in terms of storage size and performance. It does not handle changing class structures very well, basically forbidding classes of persisted entities to ever change or introducing massive manual effort to compensate. It cannot handle third-party classes that do not implement Serializable but cannot be changed. In short: The Java Serialization is not an acceptable data store solution and hence no valid replacement for those outdated DBMS. MicroStream Data-store is such a solution: It can persist, load or update object graphs partially and on-demand. It is very efficient both size- and performance-wise. It handles changing class structures by mapping data in the old structure to the current structure during loading; implicitly via internal heuristics or explicitly via a user-defined mapping strategy. It can automatically handle any Java constructs, only excluding those that are technically or reasonably not persistable (e.g. lambdas, proxies or instances with ties to JVM-internals like threads, etc.). MicroStream is what the Java Serialization should have been and it is the first and only really fitting data storing solution for modern applications, completely removing the need to attach a wannabe secondary server DBMS just to store data.","title":"Storage","component":"manual","version":"7.0","name":"index","url":"/manual/7.0/storage/index.html","titles":[]},"177":{"id":177,"text":"The MicroStream engine takes care of persisting your object graph. When you do queries, they are not run on the data stored by MicroStream, queries run on your data in the local system memory. There is no need to use special query languages like SQL. All operations can be done with plain Java. MicroStream does not restrict you in the way you query your object graph. You are totally free to choose the best method fitting to your application. One possibility may be Streams if you use the standard Java collections. public List getUnAvailableArticles() { return shop.getArticles().stream() .filter(a -> !a.available()) .collect(Collectors.toList()) ; } Of course you must care about lazy loading if you use that feature.","title":"Queries","component":"manual","version":"7.0","name":"queries","url":"/manual/7.0/storage/queries.html","titles":[]},"178":{"id":178,"text":"Object instances can be stored as simple records. One value after another as a trivial byte stream. References between objects are mapped with unique numbers, called ObjectId, or short OID. + With both combined, byte streams and OIDs, an object graph can be stored in a simple and quick way, as well as loaded, as a whole or partially. But there is a small catch. Where does it start? What is the first instance or reference at startup? + Strictly speaking \"nothing\". That’s why at least one instance or a reference to an instance must be registered in a special way, so that the application has a starting point from where the object graph can be loaded. This is a \"Root Instance\". Same difference, another problem are instances which are references by constant fields in Java classes. These aren’t created when the records are loaded from the database, but by the JVM while loading the classes. Without special treatment, this would be a problem: The application, meaning the JVM or the JVM process, starts, the constant instances are created by the JVM, one or more of them are stored, then the application shuts down. The stored data of the constants are now stored with a certain OID in the database. The application starts again. The Constant instances are created again by the JVM. The data records are read by MicroStream. The problem is: How should the application know what values, which are stored with a certain OID, belong to which constant? The JVM created everything from scratch at startup and doesn’t know anything about OIDs. To resolve this, the constant instances must be registered, just like the entity graph’s root instance. Then MicroStream can associate the constant instances with the stored data via the OIDs. Constant instances can be thought of as JVM-created implicit root instances for the object graph. In both cases, root and constant instances, it is about registering special starting points for the object graph in order to load it correctly. For MicroStream, from a plain technical view, both cases don’t make a difference. In the most common cases, nothing at all. The default behavior is enough to get things going. By default, a single instance can be registered as the entity graph’s root, accessible via EmbeddedStorage.root(). + Therefore, this is already a fully fledged (although tiny) database application: // Start the database manager EmbeddedStorageManager storageManager = EmbeddedStorage.start(); // Set the entity (graph) as root storageManager.setRoot(\"Hello World\"); // Store root storageManager.storeRoot(); If you are working with Microstream technology in a multi-threaded environment, there are a few things you need to pay extra attention to. When using standard frameworks, you often work in a multi-threaded environment. If you are using the older JDBC approach, you create a copy of your data that you work with within a single thread, modify the data, and then save it back in a database trace. Microstream works with data directly, allowing it to achieve significantly better performance parameters. However, for developers, this means that any reading and writing to this shared object graph must be synchronized. To make it easier to use within your application, we have prepared a simple way for you to do so. XThreads.executeSynchronized(() -> { root.changeData(); storageManager.store(root); }); This approach will immediately provide you with several benefits: Any changes to your object graph will be synchronized, every other thread will see the current value. Avoid Deadlocks In principle, you prevent the object graph from being modified at the same time it is saved. The simple default approach has its limits when the application defines an explicit root instance that must be updated/filled from the database directly during database initialization. Something like this: // Empty application-specific root, to be filled during start() MyApplicationRoot root = new MyApplicationRoot(); // Start the database manager EmbeddedStorageManager storage = EmbeddedStorage.start(); // root must be filled at this point... but how? root.printAllMyEntities(); To solve this, a custom root instance can be directly registered at the database setup. In the simplest case, is just has to be passed to .start();: // Empty application-specific root, to be filled during start() MyApplicationRoot root = new MyApplicationRoot(); // Start the database manager with a reference to the application's root. EmbeddedStorageManager storageManager = EmbeddedStorage.start(root); // root is \"magically\" filled at this point. (Yay!) root.printAllMyEntities(); Internally, the two concepts (default root and custom root) and handled by different mechanisms. This can be seen from the two different methods storageManager.defaultRoot(); storageManager.customRoot(); The simplified method storageManager.root(); automatically chooses the variant that is used. Since neither of those three methods can know the concrete type of the root instance (and adding a type parameter just for that would have been a complication overkill), they all can only be typed to return Object. So, to avoid annoying and dangerous casts, it is best to keep a direct reference to a custom root instance as shown in the code snippet above. Likewise, storageManager.storeRoot(); works for both variants, so there is no need to worry about how to store which one.","title":"Root Instances","component":"manual","version":"7.0","name":"root-instances","url":"/manual/7.0/storage/root-instances.html","titles":[{"text":"What Must Be Done in the Application?","hash":"_what_must_be_done_in_the_application","id":1},{"text":"Shared Mutable Data","hash":"_shared_mutable_data","id":2},{"text":"Synchronize access to shared mutable data","hash":"_synchronize_access_to_shared_mutable_data","id":3},{"text":"Custom Root Instances","hash":"_custom_root_instances","id":4}]},"179":{"id":179,"text":"Based on the REST API we provide a client, which serves a convenient web user interface to browse through the storage data. It is a runnable jar which starts a simple web server which then can be accessed by a browser of your choice. To download it use the following Maven command to download it into the current directory. CLI mvn dependency:get -Dartifact=one.microstream:microstream-storage-restclient-app:{maven-version}:jar -Dtransitive=false -Ddest=storage.restclient.app-{maven-version}.jar or this direct link: https://repo1.maven.org/maven2/one/microstream/microstream-storage-restclient-app/07.01.00-MS-GA/microstream-storage-restclient-app-07.01.00-MS-GA.jar Start the client. The port parameter is optional, default port is 8080. java -jar microstream-storage-restclient-app-07.01.00-MS-GA.jar --server.port=8888 Then just open http://localhost:8888 in your browser, select the base URL of the REST service and click connect. Now you can browse through the data of the storage: Or view the statistics:","title":"Client GUI","component":"manual","version":"7.0","name":"client-gui","url":"/manual/7.0/storage/rest-interface/client-gui.html","titles":[]},"180":{"id":180,"text":"The MicroStream Storage isn’t a typical database server with administrative tooling and stuff like that. It is just a Java library which runs embedded in your application. The storage data layer, per default the file system, contains the serialized and persisted data. But it is not really accessible, or more precise, human-readable. Nor do we provide a query language to access the storage data. The Java objects, which reside in memory, are easy to inspect and traverse, e.g. with a debugger. But for various purposes, like monitoring, the requirement to read the actual stored data has come up. Since version 3.0 a REST interface for the storage data is included. It enables you to access the data via REST calls or a convenient user interface. It is made up of the following modules: ArtifactId Description microstream-storage-restadapter Adapter for low-level storage data externalization. Used by the REST service to adapt to a MicroStream Storage. microstream-storage-restservice Abstract REST service interface, which uses the REST adapter to access low level storage data. microstream-storage-restclient Abstract REST client interface, which serves as a Java wrapper for the REST API. microstream-storage-restservice-sparkjava REST service implementation which utilizes SparkJava and provides REST endpoints. microstream-storage-restclient-jersey REST client implementation which utilizes Jersey as a webservice framework. microstream-storage-restclient-app microstream-Executable client app with web user interface, which connects to a REST service and provides a simple UI to navigate through the Object Graph from the root.","title":"REST Interface","component":"manual","version":"7.0","name":"index","url":"/manual/7.0/storage/rest-interface/index.html","titles":[]},"181":{"id":181,"text":"[instance-name]/root Returns the name and object id of the current storage root element. Response { name: \"ROOT\", objectId: \"1000000000000000028\" } [instance-name]/object/:objectid Returns description and values of a distinct object. Path parameters Parameter Type Description objectId integer The requested object’s id Query parameters Parameter Type Description Default valueLength integer Limit size of returned value elements, e.g. String values. unlimited fixedOffset integer Fixed size members start offset. 0 fixedLength integer Amount of returned fixed size members. unlimited variableOffset integer Variable size members start offset. 0 variableLength integer Amount of returned variable size members. unlimited references boolean Determines if top-level references of the object should be returned as well. false Response { \"objectId\": \"1000000000000000028\", \"typeId\": \"110\", \"length\": \"0\", \"variableLength\": [ \"3\" ], \"simplified\": false, \"data\": [ [ \"1000000000000000029\", \"1000000000000000030\", \"1000000000000000031\" ] ], \"references\": null } [instance-name]/dictionary Returns the type dictionary as plain text. Response [Type dictionary contents] [instance-name]/maintenance/filesStatistics Returns statistics of the used storage files and channels. Response { \"creationTime\": \"2020-04-15T13:32:26.003Z\", \"channelStatistics\": { \"0\": { \"channelIndex\": 0, \"files\": [ { \"fileNumber\": \"1\", \"file\": \"storage\\\\channel_0\\\\channel_0_1.dat\", \"fileCount\": \"1\", \"liveDataLength\": \"2898\", \"totalDataLength\": \"2930\" } ], \"fileCount\": \"1\", \"liveDataLength\": \"2898\", \"totalDataLength\": \"2930\" } }, \"fileCount\": \"1\", \"liveDataLength\": \"2898\", \"totalDataLength\": \"2930\" }","title":"REST API","component":"manual","version":"7.0","name":"rest-api","url":"/manual/7.0/storage/rest-interface/rest-api.html","titles":[{"text":"GET Root","hash":"_get_root","id":1},{"text":"GET Object","hash":"_get_object","id":2},{"text":"GET Type Dictionary","hash":"_get_type_dictionary","id":3},{"text":"GET Statistics","hash":"_get_statistics","id":4}]},"182":{"id":182,"text":"An application that will expose the REST endpoints needs one of the provided implementations by MicroStream or you need to implement the provided interfaces. In this example, we will use the Spark implementation that MicroStream provides. Just add the dependency to your project, the logger is optional. pom.xml one.microstream microstream-storage-restservice-sparkjava 07.01.00-MS-GA org.slf4j slf4j-simple 1.7.32 Now use the resolver to connect the REST service to the storage, start it, and you’re good to go. EmbeddedStorageManager storage = EmbeddedStorage.start(); if (storage.root() == null) { storage.setRoot(new Object[] { LocalDate.now(), X.List(\"a\", \"b\", \"c\"), 1337 }); storage.storeRoot(); } // create the REST service StorageRestService service = StorageRestServiceResolver.resolve(storage); // and start it service.start(); That’s all you have to do to open the REST endpoints to access the stored data. The base URL of the provided endpoints is per default: http://localhost:4567/microstream/ and you can find out all available endpoints on the root http://localhost:4567 If you want to change the default port (4567) or instance name (microstream) it can be done by using the rest service implementation directly, and not go through the _Resolver` as in the previous snippet. The Spark service can then be customized to your liking. StorageRestServiceSparkJava service = StorageRestServiceSparkJava.New(storage); service.setSparkService( Service.ignite().port(8888) ); service.setInstanceName(\"my-name\"); This will change the base URL to http://localhost/my-name/","title":"Setup","component":"manual","version":"7.0","name":"setup","url":"/manual/7.0/storage/rest-interface/setup.html","titles":[{"text":"REST Service","hash":"_rest_service","id":1},{"text":"Configuration","hash":"_configuration","id":2}]},"183":{"id":183,"text":"A collection of examples with different topics: https://github.com/microstream-one/microstream/tree/master/examples The BookStore Demo is a fully fledged sample application. It shows how to design an application with MicroStream from the ground up. https://github.com/microstream-one/bookstore-demo If you want to compare MicroStream with a database of your choice, it can be done with following project, which is based on the BookStore Demo. https://github.com/microstream-one/bookstore-demo-performance Combination of two great frameworks. https://github.com/microstream-one/example-spring-crud Further reading: https://medium.com/@microstream/microstream-with-spring-8265525fb3fc This example shows how to effectively use MicroStream storage with Android RecyclerView. https://github.com/microstream-one/example-android-recyclerview Further reading: https://medium.com/@microstream/android-recyclerview-with-microstream-da91641c0015","title":"Examples and Demo Projects","component":"manual","version":"7.0","name":"examples-and-demo-projects","url":"/manual/7.0/storage/addendum/examples-and-demo-projects.html","titles":[{"text":"Examples Collection","hash":"_examples_collection","id":1},{"text":"BookStore Demo","hash":"_bookstore_demo","id":2},{"text":"Spring Crud","hash":"_spring_crud","id":3},{"text":"Android RecyclerView","hash":"_android_recyclerview","id":4}]},"184":{"id":184,"text":"Although most types in the JDK or any other Java library will work with MicroStream, there is a bunch of specialized type handlers for the most commonly used types. They are optimized to reduce memory overhead and increase performance. The following list describes all types for which special type handlers are implemented. All other types are analyzed generically. Primitive Types All primitive Types and arrays thereof java.lang Byte Boolean Short Character Integer Float Long Double Void Object String StringBuffer StringBuilder java.math BigDecimal BigInteger java.util Date Currency Locale OptionalInt OptionalLong OptionalDouble java.util.regex Pattern java.io File java.nio.file Path java.net InetAddress Inet4Address Inet6Address InetSocketAddress URI URL java.util Vector Stack Hashtable Properties ArrayList HashSet HashMap LinkedHashSet LinkedHashMap WeakHashMap LinkedList TreeMap TreeSet IdentityHashMap PriorityQueue ArrayDeque java.util.concurrent ConcurrentHashMap ConcurrentSkipListMap ConcurrentSkipListSet ConcurrentLinkedQueue ConcurrentLinkedDeque CopyOnWriteArrayList Most collections above are handled in a generic way. If you want a more optimized version of JDK collection handlers, you can utilize the provided module microstream-persistence-binary-jdk8. pom.xml one.microstream microstream-persistence-binary-jdk8 07.01.00-MS-GA final EmbeddedStorageFoundation foundation = EmbeddedStorage.Foundation(); foundation.onConnectionFoundation(BinaryHandlersJDK8::registerJDK8TypeHandlers); pom.xml one.microstream microstream-persistence-binary-jdk17 07.01.00-MS-GA final EmbeddedStorageFoundation foundation = EmbeddedStorage.Foundation(); foundation.onConnectionFoundation(BinaryHandlersJDK17::registerJDK17TypeHandlers);","title":"Specialized Type Handlers","component":"manual","version":"7.0","name":"specialized-type-handlers","url":"/manual/7.0/storage/addendum/specialized-type-handlers.html","titles":[{"text":"Value Types","hash":"_value_types","id":1},{"text":"Collections","hash":"_collections","id":2},{"text":"Java 17 Immutable Set and List","hash":"jdk17","id":3}]},"185":{"id":185,"text":"Feature Supported Note Classes Classes without default constructor Abstract classes / Interfaces Perfectly handleable as types, but there can never be instances to be persisted in the first place. Inner classes Anonymous inner classes Primitives References Final fields Static fields Not supported since they are outside of an entity graph / a database, i.e. potentially shared by multiple graphs. Constant primitives No sense in persisting those. These are just plain trivial values outside of an entity graph / a database. Constant instances Must be registered for loading to update them instead of creating independent new instances. Primitive arrays Object arrays Multi dimensional arrays Technically the same as object arrays as every array is an object itself. JDK value types (String, Number types, Date, File, Locale, Optional, …​) Optimized handling via custom TypeHandlers. Collections Via generic handling logic (List, Set, Map, etc.). Optimal handling required tailored TypeHandler (e.g. correctly handling loadFactor in java.util.HashMap) Nested Collections JVM system-tied classes (Thread, ClassLoader, WeakReference, …​) Technically handleable, but handling system-instances could cause fatal problems (e.g. start a Thread just from loading data), so it is intentionally disabled. JVM external-tied classes (IO-Streams, FileChannel, …​) Technically handleable, but external dependencies could cause fatal problems (e.g. existence of a referenced file), so it is intentionally disabled. Feature Supported Note Enums Automatically handled as constant instances to maintain referential integrity / identity. Enums with mutable state Enums anonymous subclasses Feature Supported Note Lambdas Type-handleable in theory. But JVM is not able to resolve its own type definitions for lambdas. Feature Supported Note Records Records are mere syntax sugar for classes, see FAQ. Feature Supported Note Immutable Set Automatically handled until Java 14, for Java 15 and later use the microstream-persistence-binary-jdk17 module, see microstream-persistence-binary-jdk17 Immutable List Automatically handled until Java 14, for Java 15 and later use the microstream-persistence-binary-jdk17 module, see microstream-persistence-binary-jdk17","title":"Supported Java Features","component":"manual","version":"7.0","name":"supported-java-features","url":"/manual/7.0/storage/addendum/supported-java-features.html","titles":[{"text":"Java 5","hash":"_java_5","id":1},{"text":"Java 8","hash":"_java_8","id":2},{"text":"Java 14","hash":"_java_14","id":3},{"text":"Java 17","hash":"_java_17","id":4}]},"186":{"id":186,"text":"Housekeeping interval and time budget is configured by setting up a StorageHousekeepingController. Available properties are: Property Description housekeeping-interval Interval the housekeeping is triggered in milliseconds, default once per every second housekeeping-time-budget Time budget for housekeeping in nanoseconds, default is 0.01 seconds EmbeddedStorageManager storage = EmbeddedStorage.Foundation( Storage.ConfigurationBuilder() .setHousekeepingController(Storage.HousekeepingController(1000, 10_000_000)) .createConfiguration()) .start(); The desired file min and max sizes and payload ratio is configured by the StorageDataFileEvaluator: available properties are: Property Description data-file-minimum-size Files smaller then minimum file size will be merged with other files if possible, default is 1 MB. data-file-maximum-size Files larger then maximum file size will be split in smaller ones, default is 8 MB. data-file-minimum-use-ratio Ratio of non-gap data contained in a storage file to prevent the file from being dissolved, default is 0.75 (75%). EmbeddedStorageManager storage = EmbeddedStorage.Foundation( Storage.ConfigurationBuilder() .setDataFileEvaluator(Storage.DataFileEvaluator(1024*1024, 1024*1024*8, 0.75)) .createConfiguration()) .start(); The lifetime of objects in the internal entity cache can be configured by the StorageEntityCacheEvaluator: Available properties are: Property Description entity-cache-threshold Abstract threshold value, roughly comparable to size in bytes with a time component, at which a cache must be cleared of some entities. Default is 1000000000. entity-cache-timeout Time in milliseconds after that an entity is considered to be old if not read meanwhile. Must be greater zero, default is 86400000ms (1 day). EmbeddedStorageManager storage = EmbeddedStorage.Foundation( Storage.ConfigurationBuilder() .setEntityCacheEvaluator(Storage.EntityCacheEvaluator( 86_400_000, 1_000_000_000)) .createConfiguration()) .start(); For external configuration see: Properties","title":"Housekeeping","component":"manual","version":"7.0","name":"housekeeping","url":"/manual/7.0/storage/configuration/housekeeping.html","titles":[{"text":"Intervall and Time Budget","hash":"_intervall_and_time_budget","id":1},{"text":"File Sizes and Payload","hash":"storage-data-file-evaluator","id":2},{"text":"Cache","hash":"_cache","id":3}]},"187":{"id":187,"text":"The EmbeddedStorageManager is mostly created with factory methods of EmbeddedStorage, where the most common settings, like database directory or the root instance, can be configured. EmbeddedStorageManager storageManager = EmbeddedStorage.start( myRoot, // root object of entity graph Paths.get(\"data-dir\") // storage data directory ); To achieve a more detailed customization, you can utilize the EmbeddedStorageFoundation factory type. It holds and creates on demand all the parts that form an EmbeddedStorageManager. NioFileSystem fileSystem = NioFileSystem.New(); EmbeddedStorageManager storageManager = EmbeddedStorageFoundation.New() .setConfiguration( StorageConfiguration.Builder() .setStorageFileProvider( Storage.FileProviderBuilder(fileSystem) .setDirectory(fileSystem.ensureDirectoryPath(\"storageDir\")) .createFileProvider() ) .setChannelCountProvider(StorageChannelCountProvider.New(4)) .setBackupSetup(StorageBackupSetup.New( fileSystem.ensureDirectoryPath(\"backupDir\") )) .createConfiguration() ) .createEmbeddedStorageManager(); The artifact microstream-storage-embedded-configuration provides a convenience layer for configuration purposes, as well as facilities to read external configuration. pom.xml one.microstream microstream-storage-embedded-configuration 07.01.00-MS-GA The EmbeddedStorageConfigurationBuilder type consolidates the most widely used parameters from the storage foundations in one place. It’s output is an EmbeddedStorageFoundation from which a EmbeddedStorageManager can be created. EmbeddedStorageManager storageManager = EmbeddedStorageConfiguration.Builder() .setStorageDirectoryInUserHome(\"data-dir\") .setBackupDirectory(\"backup-dir\") .setChannelCount(4) .createEmbeddedStorageFoundation() .createEmbeddedStorageManager(); To read an external configuration use ConfigurationLoader and ConfigurationParser or the load*() methods of EmbeddedStorageConfiguration. Out of the box, XML and INI files are supported. Java (XML) EmbeddedStorageManager storageManager = EmbeddedStorageConfiguration.load( \"/META-INF/microstream/storage.xml\" ) .createEmbeddedStorageFoundation() .createEmbeddedStorageManager(); XML Java (INI) EmbeddedStorageManager storageManager = EmbeddedStorageConfiguration.load( \"/META-INF/microstream/storage.ini\" ) .createEmbeddedStorageFoundation() .createEmbeddedStorageManager(); INI storage-directory = data channel-count = 4 If you just use EmbeddedStorageConfiguration.load() the default configuration file is used, which is either a file in the classpath root named microstream-storage.properties, or the path configured via the system property microstream.storage.configuration.path. The full example can be found on GitHub. The EmbeddedStorageConfigurationBuilder is based on the common configuration layer, newly introduced in MicroStream 5.0. The artifact configuration, which is a dependency of storage.embedded.configuration, contains support for XML and INI files. Other formats are available in different artifacts. Artifact Formats microstream-configuration-hocon hocon, json microstream-configuration-yaml yaml Java (Yaml) EmbeddedStorageManager storageManager = EmbeddedStorageConfiguration.load( ConfigurationLoader.New(\"/META-INF/microstream/storage.yaml\"), ConfigurationParserYaml.New() ) .createEmbeddedStorageFoundation() .createEmbeddedStorageManager(); Yaml storage-directory: \"data\" channel-count: 4 Java (Json) EmbeddedStorageManager storageManager = EmbeddedStorageConfiguration.load( ConfigurationLoader.New(\"/META-INF/microstream/storage.json\"), ConfigurationParserHocon.New() ) .createEmbeddedStorageFoundation() .createEmbeddedStorageManager(); Json { \"storage-directory\": \"data\", \"channel-count\": 4 }","title":"Configuration","component":"manual","version":"7.0","name":"index","url":"/manual/7.0/storage/configuration/index.html","titles":[{"text":"Foundations","hash":"_foundations","id":1},{"text":"External Configuration","hash":"external-configuration","id":2},{"text":"Additional Formats","hash":"_additional_formats","id":3}]},"188":{"id":188,"text":"By default, MicroStream uses the operation system’s standard file locking mechanism to prevent simultaneous access to the storage files. In the rare case that this is not sufficient to control the file access MicroStream provides a proprietary file lock implementation to ensure exclusive access to the storage files from different applications using MicroStream. Using this file lock may only be necessary if, while a MicroStream application is running, a second MicroStream application may try to access the same storage and the default file locks are not reliable. You don’t need to activate this feature if: Only one MicroStream application will access the storage, MicroStream applications that may access the same storage run on the same system, other applications that may access the storage files don’t use MicroStream to access them. To activate the internal file lock you need to setup StorageLockFileSetup: EmbeddedStorageManager storageManager = EmbeddedStorage .Foundation() .setLockFileSetupProvider(Storage.LockFileSetupProvider()) .start(); The default interval the locks are updated is 10 seconds, you can set a custom value in milliseconds with: Storage.LockFileSetupProvider( final long updateInterval ) To specify the charset used by the lock files use: Storage.LockFileSetupProvider( final Charset charset ) or, to customize both: LockFileSetupProvider( final Charset charset , final long updateInterval )","title":"Lock File","component":"manual","version":"7.0","name":"lock-file","url":"/manual/7.0/storage/configuration/lock-file.html","titles":[]},"189":{"id":189,"text":"These are the available properties of the EmbeddedStorageConfigurationBuilder type. The names are used accordingly in the external configuration files. They can be found as constants in EmbeddedStorageConfigurationPropertyNames. Property Short Description storage-directory The base directory of the storage in the file system. Default is \"storage\" in the working directory. storage-filesystem The live file system configuration. See storage targets configuration. deletion-directory If configured, the storage will not delete files. Instead of deleting a file it will be moved to this directory. truncation-directory If configured, files that will get truncated are copied into this directory. backup-directory The backup directory. backup-filesystem The backup file system configuration. See storage targets configuration. channel-count The number of threads and number of directories used by the storage engine. Every thread has exclusive access to its directory. Default is 1. channel-directory-prefix Name prefix of the subdirectories used by the channel threads. Default is \"channel_\". data-file-prefix Name prefix of the storage files. Default is \"channel_\". data-file-suffix Name suffix of the storage files. Default is \".dat\". transaction-file-prefix Name prefix of the storage transaction file. Default is \"transactions_\". transaction-file-suffix Name suffix of the storage transaction file. Default is \".sft\". type-dictionary-file-name The name of the dictionary file. Default is \"PersistenceTypeDictionary.ptd\". rescued-file-suffix Name suffix of the storage rescue files. Default is \".bak\". lock-file-name Name of the lock file. Default is \"used.lock\". housekeeping-interval Interval for the housekeeping. This is work like garbage collection or cache checking. In combination with houseKeepingNanoTimeBudget the maximum processor time for housekeeping work can be set. Default is 1 second. housekeeping-time-budget Number of nanoseconds used for each housekeeping cycle. Default is 10 milliseconds = 0.01 seconds. entity-cache-threshold Abstract threshold value for the lifetime of entities in the cache. Default is 1000000000. entity-cache-timeout Timeout in milliseconds for the entity cache evaluator. If an entity wasn’t accessed in this timespan it will be removed from the cache. Default is 1 day. data-file-minimum-size Minimum file size for a data file to avoid cleaning it up. Default is 1024^2 = 1 MiB. data-file-maximum-size Maximum file size for a data file to avoid cleaning it up. Default is 1024^2*8 = 8 MiB. data-file-minimum-use-ratio The ratio (value in ]0.0;1.0]) of non-gap data contained in a storage file to prevent the file from being dissolved. Default is 0.75 (75%). data-file-cleanup-head-file A flag defining whether the current head file (the only file actively written to) shall be subjected to file cleanups as well. Number of threads used by the storage engine. It depicts the numbers of subdirectories as well. Each thread manages one directory in which it writes to and reads from exclusively. The unity of thread, directory and the cached data therefore is called a \"Channel\". __________________________________________________ [RAM ]{ Code } | ( Filesystem ) ,- \"Channel 0\": [Data]{Thread} (Storage Subdirectory 0) /-- \"Channel 1\": [Data]{Thread} (Storage Subdirectory 1) StorageManager | \\-- \"Channel 2\": [Data]{Thread} (Storage Subdirectory 2) '- \"Channel 3\": [Data]{Thread} (Storage Subdirectory 3) _________________________________________________| For further information see Using Channels. Time for the house keeping interval. House keeping tasks are, among others: Garbage Collection Cache Check File Cleanup Check In combination with housekeeping-time-budget, it can be specified how many CPU time should be used for house keeping. E.g. interval=1000ms and budget=10000000ns means every second there’s 0.01 seconds time for house keeping, so max 1% CPU time used for house keeping. This CPU time window is only used if house keeping work is pending. If nothing has to be done, no time is wasted. Time used for each housekeeping cycle. However, no matter how low the number is, one item of work will always be completed. But if there is nothing to clean up, no processor time will be wasted. Default is 10000000 (10 million nanoseconds = 10 milliseconds = 0.01 seconds). + However, no matter how small the time is, one item is done at least. This is to avoid no-ops, if a too small time window is configured. + This time budget is a \"best effort\" threshold, meaning when at 1ns left, a huge file has to be cleaned or the references of a huge collection have to be marked for GC, then this budget can be exceeded considerably. For further information see Housekeeping. Minimum file size in bytes of a storage file to avoid merging with other files during housekeeping. + Must be greater than 1, maximum is 2GB. Maximum file size in bytes of a storage file to avoid splitting in more files during housekeeping. + Must be greater than 1, maximum is 2GB. Due to internal implementation details files larger than 2GB are not supported! The ratio (value in ]0.0;1.0]) of non-gap data contained in a storage file to prevent the file from being dissolved. \"Gap\" data is anything that is not the latest version of an entity’s data, including older versions of an entity and \"comment\" bytes (a sequence of bytes beginning with its length as a negative value length header). The closer this value is to 1.0 (100%), the less disk space is occupied by storage files, but the more file dissolving (data transfers to new files) is required and vice versa. This list shows which property configures which type, used by the foundation types, to create the storage manager. Property Used by storage-directory StorageLiveFileProvider storage-filesystem StorageLiveFileProvider deletion-directory StorageLiveFileProvider truncation-directory StorageLiveFileProvider backup-directory StorageBackupSetup backup-filesystem StorageBackupSetup channel-count StorageChannelCountProvider channel-directory-prefix StorageFileNameProvider data-file-prefix StorageFileNameProvider data-file-suffix StorageFileNameProvider transaction-file-prefix StorageFileNameProvider transaction-file-suffix StorageFileNameProvider type-dictionary-filename StorageFileNameProvider rescued-file-suffix StorageFileNameProvider lock-filename StorageFileNameProvider housekeeping-interval StorageHousekeepingController housekeeping-time-budget StorageHousekeepingController entity-cache-threshold StorageEntityCacheEvaluator entity-cache-timeout StorageEntityCacheEvaluator data-file-minimum-size StorageDataFileEvaluator data-file-maximum-size StorageDataFileEvaluator data-file-minimum-use-ratio StorageDataFileEvaluator data-file-cleanup-head-file StorageDataFileEvaluator","title":"Properties","component":"manual","version":"7.0","name":"properties","url":"/manual/7.0/storage/configuration/properties.html","titles":[{"text":"Detailed Description","hash":"_detailed_description","id":1},{"text":"channel-count","hash":"channel-count","id":2},{"text":"housekeeping-interval","hash":"housekeeping-interval","id":3},{"text":"housekeeping-time-budget","hash":"housekeeping-time-budget","id":4},{"text":"data-file-minimum-size","hash":"data-file-minimum-size","id":5},{"text":"data-file-maximum-size","hash":"data-file-maximum-size","id":6},{"text":"data-file-minimum-use-ratio","hash":"data-file-minimum-use-ratio","id":7},{"text":"Involved Types","hash":"_involved_types","id":8}]},"190":{"id":190,"text":"Using a Storage Live File Provider (one.microstream.storage.types.StorageLiveFileProvider) allows to specify the location and naming rules for all storage related files. Available properties are: Property Description storage-directory The Microstream storages location base directory. Contains channel directories and type dictionary file. deletion-directory If configured, the storage will not delete files. Instead of deleting a file it will be moved to this directory. truncation-directory If configured, files that will get truncated are copied into this directory. channel-directory-prefix Channel directory prefix string storage-file-prefix Storage file prefix string storage-file-suffix storage file extension transactions-file-prefix transactions file prefix transactions-file-suffix transaction file extension type-dictionary-file-name filename of the type dictionary StorageFileNameProvider fileNameProvider = StorageFileNameProvider.Builder() .setChannelDirectoryPrefix(\"canal_\") .setDataFilePrefix (\"canal_\") .setDataFileSuffix (\".bin\") .setTransactionsFilePrefix(\"events_\") .setTransactionsFileSuffix(\".bin\") .setTypeDictionaryFileName(\"typeDictionary.txt\") .createFileNameProvider () ; NioFileSystem fileSystem = NioFileSystem.New(); StorageLiveFileProvider fileProvider = Storage .FileProviderBuilder (fileSystem) .setDirectory (fileSystem.ensureDirectoryPath(WORKINGDIR)) .setDeletionDirectory (fileSystem.ensureDirectoryPath(DELETIONDIR)) .setTruncationDirectory(fileSystem.ensureDirectoryPath(TRUNCATIONDIR)) .setFileNameProvider (fileNameProvider) .createFileProvider () ;","title":"Storage Files and Directories","component":"manual","version":"7.0","name":"storage-files-and-directories","url":"/manual/7.0/storage/configuration/storage-files-and-directories.html","titles":[]},"191":{"id":191,"text":"Channels are the IO threads used by the MicroStream storage engine. A single channel represents the unity of a thread, a storage directory and cached data. Increasing the number of channels means to run more IO threads. The channel count is an important configuration value that impacts to IO performance. For the channel configuration the following configuration properties are available: Property Description channel-count The number of channels that MicroStream will use. Must be 2^n channel-directory-prefix The channel directory will be prefix+channelNumber e.g. \"ch_0\" if prefix is \"ch_\" data-file-prefix Default is \"channel_\" data-file-suffix Default is \".dat\" Channel file size configuration is done by the the Storage Data File Evaluator. They can be set by microstream-storage-embedded-configuration API: Java EmbeddedStorageManager storageManager = EmbeddedStorageConfigurationBuilder.New() .setChannelCount(4) .setChannelDirectoryPrefix(\"channel_\") .setDataFilePrefix(\"channel_\") .setDataFileSuffix(\".bin\") .createEmbeddedStorageFoundation() .createEmbeddedStorageManager(); XML INI channel-count = 4 channel-directory-prefix = prefix data-file-prefix = channel_ data-file-suffix = .dat Or by setting a StorageFileProvider using the EmbeddedStorageFoundation factory NioFileSystem fileSystem = NioFileSystem.New(); EmbeddedStorageManager storage = EmbeddedStorage.Foundation( Storage.ConfigurationBuilder() .setChannelCountProvider(Storage.ChannelCountProvider(4)) .setStorageFileProvider( StorageLiveFileProvider.Builder() .setDirectory(fileSystem.ensureDirectoryPath(\"storage\")) .createFileProvider() ) .createConfiguration() ) .start(); See also: Configuration","title":"Using Channels","component":"manual","version":"7.0","name":"using-channels","url":"/manual/7.0/storage/configuration/using-channels.html","titles":[{"text":"Channel Usage","hash":"_channel_usage","id":1},{"text":"Channel Configuration","hash":"_channel_configuration","id":2}]},"192":{"id":192,"text":"In certain environments or setups it is necessary to provide specific ClassLoader instances. This can be done by customizing the connection foundation. If a single ClassLoader is sufficient, just create a new provider by handing over the instance: EmbeddedStorageManager storage = EmbeddedStorage.Foundation(Paths.get(\"mydb\")) .onConnectionFoundation(cf -> cf.setClassLoaderProvider(ClassLoaderProvider.New(myClassLoader)) ) .start(); Or return a ClassLoader depending on the requested type: EmbeddedStorageManager storage = EmbeddedStorage.Foundation(Paths.get(\"mydb\")) .onConnectionFoundation(cf -> cf.setClassLoaderProvider(typeName -> { if(typeName.startsWith(\"com.company.module1.\")) { return module1ClassLoader; } if(typeName.startsWith(\"com.company.module2.\")) { return module2ClassLoader; } return ClassLoader.getSystemClassLoader(); }) ) .start(); Most application servers load the session’s classes with the context class loader. Just use the one of the current thread: EmbeddedStorageManager storage = EmbeddedStorage.Foundation(Paths.get(\"mydb\")) .onConnectionFoundation(cf -> cf.setClassLoaderProvider(ClassLoaderProvider.New( Thread.currentThread().getContextClassLoader() )) ) .start();","title":"Custom Class Loader","component":"manual","version":"7.0","name":"custom-class-loader","url":"/manual/7.0/storage/customizing/custom-class-loader.html","titles":[{"text":"Class Loader in Application Server","hash":"_class_loader_in_application_server","id":1}]},"193":{"id":193,"text":"In addition to the methods for legacy type mapping described in chapter Legacy Type Mapping there is also the possibility to implement custom legacy type handlers. Those handlers are the most flexible way to do the mapping from old to new types. The basic interface that has to be implemented is one.microstream.persistence.types.PersistenceLegacyTypeHandler. Fortunately the standard persistence implementation provides the abstract class one.microstream.persistence.binary.types.BinaryLegacyTypeHandler.AbstractCustom that should be sufficient to start with a custom implementation in most cases. See the example customLegacyTypeHandler on GitHub Please note the this example requires manual code modifications as described in it’s main class.","title":"Custom Legacy Type Handler","component":"manual","version":"7.0","name":"custom-legacy-type-handler","url":"/manual/7.0/storage/customizing/custom-legacy-type-handler.html","titles":[]},"194":{"id":194,"text":"Implementing the PersistenceEagerStoringFieldEvaluator interface allows you to handle the eager/lazy storing behavior of any known member. The default implementation of the MicroStream engine threads all fields as lazy storing. See Lazy and Eager Storing for details on lazy and eager storing. The PersistenceEagerStoringFieldEvaluator has only one method to be implemented: public boolean isEagerStoring(Class t, Field u) return true if the field has to be eager, otherwise return false. public class CustomEagerStoringFieldEvaluator implements PersistenceEagerStoringFieldEvaluator { @Override public boolean isEagerStoring(Class clazz, Field field) { if(clazz == MyClass.class && field.getName().equals(\"eagerField\") { return true; } return false; } } To register the customized PersistenceEagerStoringFieldEvaluator add it using the one.microstream.persistence.types.PersistenceFoundation.setReferenceFieldEagerEvaluator(PersistenceEagerStoringFieldEvaluator) method during the storage initialization. NioFileSystem fileSystem = NioFileSystem.New(); EmbeddedStorageManager storage = EmbeddedStorage .Foundation(fileSystem.ensureDirectoryPath(WORKINGDIR)) .onConnectionFoundation(f -> { f.setReferenceFieldEagerEvaluator(new CustomEagerStoringFieldEvaluator()); }) .start(ROOT) ; The full code for the example is on GitHub.","title":"Custom Storing Behavior","component":"manual","version":"7.0","name":"custom-storing-behavior","url":"/manual/7.0/storage/customizing/custom-storing-behavior.html","titles":[]},"195":{"id":195,"text":"Custom type handlers allow taking control over the storing and loading procedure of specific java types. This is useful to optimize the performance for storing complex objects or in the rare case that it is not possible to store a type with the default type handlers. There are two strategies for a simplified type handler implementation. Implementing a class that extends CustomBinaryHandler and defines a sequence of BinaryFields via the #Field~ static pseudo-constructor methods. Everything else like setting the name, calculating the binary offsets, etc. is then done implicitly via reflection. Example on GitHub This example implements a custom type handler for the java.awt.image.BufferedImage class. Instead of storing the rather complex object structure of that class the image is serialized as PNG image format using javax.imageio.ImageIO into a byte array. This byte array is then stored by MicroStream. The custom type handler must be registered in the CustomTypeHandlerRegistry to enable it: EmbeddedStorageManager storage = EmbeddedStorage .Foundation(WORKINGDIR) .onConnectionFoundation(f -> f.registerCustomTypeHandlers(new CustomBufferedImageHandler()) ) .start(ROOT); Implementing a class can be skipped altogether by using the method Binary#TypeHandler and passing the BinaryFields directly. Registering such a generically created TypeHandler is not required, either, since Version 3 of MicroStream brought a solution to just define a static method in the entity class that will be recognized and used by MicroStream. The following is a simple technical example on how a custom binary handler can be easily defined and technically leveraged to optimize storage behavior. E.g. imagine having millions of such objects that now only create 1 database record with a fraction of the required storage space instead of 4 records but hold the same information. public class Employee { /* * Fields with primitive data are (for whatever reason, e.g. project * design rules) all object types, but records should be stored as * efficient as possible, i.e. without overhead of references and value objects. * * MicroStream's generic type analysis does not know of this and hence cannot * do it. But defining a custom type handler can */ String id ; Double salary ; Date dateOfBirth; // constructor, getters, setters, etc /* * The entity class must just contain \"any\" method returning a suitable type * handler and MicroStream will recognize it and use the returned handler * automatically. * * Type type handler just needs to specify the entity class and define a list * of fields comprised of (name, getter, setter) in arbitrary order. */ static BinaryTypeHandler provideTypeHandler() { return Binary.TypeHandler( Employee.class, Binary.Field_long(\"id\", e -> Long.parseLong(e.id), (e, value) -> e.id = String.valueOf(value) ), Binary.Field_long(\"dateOfBirth\", e -> e.dateOfBirth.getTime(), (e, value) -> e.dateOfBirth = new Date(value) ), Binary.Field_double(\"salary\", e -> e.salary.longValue(), (e, value) -> e.salary = Double.valueOf(value) ) ); } } Full example is available on GitHub.","title":"Custom Type Handler","component":"manual","version":"7.0","name":"custom-type-handler","url":"/manual/7.0/storage/customizing/custom-type-handler.html","titles":[{"text":"Implementation","hash":"_implementation","id":1},{"text":"A Custom Binary Handler","hash":"_a_custom_binary_handler","id":2},{"text":"A Static Provider Method","hash":"_a_static_provider_method","id":3}]},"196":{"id":196,"text":"When a reference to the loading storage is needed in entities, e.g. usage of different tenants or to store its internal state in a tailored fashion, this can be done by this little trick. If an entity type contains one or more transient fields with field type compatible to Persister, the updating processing during loading will set the Persister instance (e.g. an EmbeddedStorageManager instance) used to load the entity instance to those fields. The fields must be transient to exclude them from the persistent form of the entity. Checking for transient fields is only the default implementation. The checking logic can be customized via PersistenceFoundation#setFieldEvaluatorPersistable. A more precise check for Persister fields can be customized via PersistenceFoundation#setFieldEvaluatorPersister. Note, however, that the check for compatibility with the Persister type is done in any case to avoid inconsistencies/crashes. If no applicable field is found, nothing happens and no additional meta data is kept in memory. This feature is completely optional. class MyEntity { String name ; int value; transient Persister persister; } Upon loading an instance of class MyEntity, a reference to the Persister used to load it is set to its field persister.","title":"Optional Storage Manager Reference in Entities","component":"manual","version":"7.0","name":"optional-storage-manager-reference-in-entities","url":"/manual/7.0/storage/customizing/optional-storage-manager-reference-in-entities.html","titles":[]},"197":{"id":197,"text":"If one or more fields in a class have changed, the data structure of this class doesn’t match anymore with the records in the database. This renders the application and the database incompatible. It’s like in an IDE. You change the structure of a class and the tooling takes care of the rest. Problem is, in a database, the \"rest\" can be, in some circumstances, several gigabytes or even more, that have to be refactored and written again. It’s one way to do it, but there are better alternatives. At best, the data is transformed when it’s accessed only. The old (legacy) type data is being mapped to the new type when it’s being loaded, hence: Legacy Type Mapping. Nothing needs to be rewritten. All records are, as they were saved, compatible with all other versions of their type. Simply by mapping while loading. What has to be done to achieve this? In the most common cases, nothing! The heuristic attempts to automatically detect which fields are new, have been removed, reordered or altered. Contact.java (old) public class Contact { String name ; String firstname; int age ; String email ; String note ; Object link ; } Contact.java (new) public class Contact { String firstname ; // moved String lastname ; // renamed String emailAddress ; // renamed String supportNode ; // renamed PostalAddress postalAddress; // new int age ; // moved } Console Output ---------- Legacy type mapping required for legacy type 1000055:Contact to current type 1000056:Contact Fields: java.lang.String Contact#firstname -1.000 ----> java.lang.String Contact#firstname java.lang.String Contact#name -0.750 ----> java.lang.String Contact#lastname java.lang.String Contact#email -0.708 ----> java.lang.String Contact#emailAddress java.lang.String Contact#note -0.636 ----> java.lang.String Contact#supportNode [***new***] PostalAddress Contact#postalAddress int Contact#age -1.000 ----> int Contact#age java.lang.Object Contact#link [discarded] --- Write 'y' to accept the mapping. The fields in the Contact entity class have been renamed, reordered, one was removed, one is new. What the heuristic is doing now is something like this: String firstname is equal in both classes, so it has to be the same, pretty much as int age. name and lastname is pretty similar, type is the same too. If there is nothing better for the two, they probably belong together. Same with the other two fields. In the end, the ominous link and postalAddress remain. The heuristic can not make sense of that, so it assumes that one thing falls away and the other one is added. In this particular example, that worked perfectly. Well done, heuristic. But: Just as people can make mistakes in estimating similarities (\"I would have thought …​\"), even programs can make mistakes as soon as they logically go on thin ice. There is nothing more with absolute correctness that you actually know from (bug-free) software. Such a similarity matching will be correct in the most cases, but sometimes it will also fall by the wayside. Example: perhaps only PostalAddress instances were referenced in the application under link and the two fields would actually be the same, only now properly typed and named. How should heuristics know that? Nobody could know that either, if he is not privy to the details of the concrete application. That’s why Legacy Type Mapping has two mechanisms that prevent things from going wrong: A callback interface is used to create the desired mapping result: PersistenceLegacyTypeMappingResultor Optionally, an explicit mapping can be specified, which is then preferred to the heuristic approach. If you do not want that, you can simply set another resultor. Like in this example each suspected mapping is submitted once to the user for control in the console. This is done with the InquiringLegacyTypeMappingResultor. Maybe even one, where the user can \"rewire\" the mapping itself, write out the mapping, and then return an appropriate result. EmbeddedStorageFoundation foundation = EmbeddedStorage.Foundation(myDataDir); foundation.getConnectionFoundation().setLegacyTypeMappingResultor( InquiringLegacyTypeMappingResultor.New( PersistenceLegacyTypeMappingResultor.New() ) ); EmbeddedStorageManager storageManager = foundation.createEmbeddedStorageManager(myRoot).start(); All you need is two columns of strings: from old to new. By default MicroStream uses a CSV file, but you can also write something else. In the end, a lot of string pairs for \"old → new\" mappings have to come into the program somewhere. The concept is simple: If there are two strings, this is interpreted as a mapping from an old thing to a new thing. If the second value is missing, it is interpreted as an old thing to be deleted. Missing the first value, then it’s as a new thing. Why call it \"thing\"? Because this applies to several structural elements: Constant identifier Class names Field names Example: count; articleCount means: the field named earlier count is called articleCount in the current version of the class. count; means: the early field count should be ignored during the mapping. More specifically, the values ​​of this field per record. ;articleCount means, this is a newly added field, DO NOT try to match it with anything else heuristically. You can also mix explicit mapping and heuristics. Only explicitly specify so many changes until the analysis gets the rest right by itself. That means you never have to specify the annoying trivial cases explicitly. Only the tricky ones. Usually, nothing should be necessary at all, or maybe a view indications at most to avoid mishaps. However, those who strictly prefer to make any change explicitly, instead of trusting a \"guessing\" software, can also do that. No problem. For class names, the three variants map, add and remove are somewhat tricky in meaning: Map is just old → new, same as with fields. To make an entry for a new class doesn’t make sense. It’s covered by the new class itself. You can do it, but it has no effect. Marking a removed class as deleted makes no sense either, except one special case. It is not required to specify the fields mapping of mapped classes if the mapping heuristic can do a correct field mapping. Especially if classes have been renamed only. Classes are simply referred to by their full qualified class name: com.my.app.entities.Order In some cases you need to specify the exact Version of the class, then the TypeId has to be prepended: 1012345:com.my.app.entities.Order Mapping from old to new: com.my.app.entities.Order;com.my.app.entities.OrderImplementation For fields it’s a bit more complex. To unambiguously refer a field, the full qualified name of its defining class has to be used. com.my.app.entities.Order#count;com.my.app.entities.Order#articleCount The # is based on official Java syntax, like e.g. in JavaDoc. If inheritance is involved, which must be uniquely resolved (each class in the hierarchy can have a field named \"count\"), you must also specify the declaring class. Like this: com.my.app.entities.Order#com.my.app.entities.ArticleHolder#count; ⤦ com.my.App.entities.Order#com.my.app.entities.ArticleHolder#articleCount A simple example: OldContact.java package com.my.app.entities; public class OldContact { String name ; String firstname; int age ; String email ; String note ; Object link ; // to be discarded } NewContact.java package com.my.app.entities; public class NewContact { String firstname ; // moved String lastname ; // renamed String emailAddress ; // renamed String supportNote ; // renamed PostalAddress postalAddress; // new int age ; // moved } refactorings.csv old current com.my.app.entities.OldContact com.my.app.entities.NewContact com.my.app.entities.OldContact#firstname com.my.app.entities.NewContact#firstname com.my.app.entities.OldContact#name com.my.app.entities.NewContact#lastname com.my.app.entities.OldContact#email com.my.app.entities.NewContact#emailAddress com.my.app.entities.OldContact#note com.my.app.entities.NewContact#supportNote com.my.app.entities.NewContact#postalAddress com.my.app.entities.OldContact#age com.my.app.entities.NewContact#age com.my.app.entities.OldContact#link EmbeddedStorageFoundation foundation = EmbeddedStorage.Foundation(dataDir); foundation.setRefactoringMappingProvider( Persistence.RefactoringMapping(Paths.get(\"refactorings.csv\")) ); EmbeddedStorageManager storageManager = foundation.createEmbeddedStorageManager(root).start(); So far so good, all classes and fields are getting mapped, automatically or manually. But what about the data? How are the values getting transformed from old to new? Technically speaking it’s done fully automatic. But there are some interesting questions: What if the primitive types changes? What if primitives change to references and vice versa? How fast is it? Let’s say int to float. Just to copy the four bytes would yield wrong results. It has to be converted, like float floatValue = (float)intValue; Can it be done? Yes, fully automatic. The class BinaryValueTranslators does the job for you, it has a converter function from each primitive to another. Currently MicroStream supports conversion between primitives and their wrapper types, and vice versa. When converting a wrapper to a primitive, null is converted to 0. If you need special conversions between object types, you can add custom BinaryValueSetter for that, see customizing. How fast is that? The type analysis happens only once during initialization. If no exception occurs, the Legacy Type Mapping is ready-configured for each necessary type and will then only be called if required. For normal entity classes that are parsed by reflection, legacy type mapping loading is just as fast as a normal load. An array of such value translator functions is put together once and they are run through each time they are loaded. With legacy mapping, only the order and the target offsets are different, but the principle is the same as with normal loading. For custom handlers an intermediate step is necessary: ​​First put all the old values ​​together in an order that the custom handler expects and then read the binary data normally, as if loading a record in the current format. That’s necessary because MicroStream can’t know what such a custom handler does internally. If someone ever uses such a custom handler, the small detour is not likely to be noticeable in terms of performance. And if it should be the case and it has a negative effect on the productive operation: No problem, because: Of course you can also write a custom legacy type handler. It would run at full speed even with tricky special cases. Of course there is the possibility, as always, of intervening in the machinery massively with customizing. If you need the highest possible performance for some cases, or for logging / debugging, or anyway: Register any value translator implementations. In the simplest case this is 1 line of code, so do not worry. Being able to specify refactoring mapping in a different way than a CSV file is another example. You can even customize (extend or replace) the strategy that is looked up in refactoring mapping. Furthermore, you can also replace the heuristic logic with your own. This is easier than it sounds. This is just a primitive little interface (PersistenceMemberSimilator) and the default implementation thereof calls e.g. just a Levenshtein algorithm for names. You can certainly do that 10 times more clever. Or \"more appropriate\" for a particular application or programming style. E.g. utilize annotations. The basic statement is: If there is a problem somewhere, whether with the heuristic or a special case request or performance problem loading a gazillion entities all at once, or if there is a need for debugging in depth or something like that: do not panic. Most likely, this is easily possible with a few lines of code. Customizing examples You can not just mark classes as deleted. As long as there are records of a certain type in the database, the corresponding class must also exist so that the instances from the database can be loaded into the application. If there are no more records, then that means that there are only a few bytes of orphaned description in the type dictionary, but nobody cares. Is it possible to delete it by hand (or rather not, there are good reasons against it) or you can just ignore it and leave it there forever. In both cases, you must not mark a class as deleted. Now the special case: In the entity graph (root instances and all recursively reachable instances from there) all references to instances of a certain type are filled in. It’s done by the application logic or possibly by a specially written script. That is, all instances of this type are unreachable. No instance is available, no instance can ever be reloaded. This means that the type is \"deleted\" from the database at the logical level. One does not have to register anywhere, that is implicitly just like that. You can actually delete the corresponding Java class from the application project because it will never be needed again during the loading process at runtime. So far so good. There is only one problem: even if the instances are never logically accessible again: the data records are still around in the database files. The initialization scans over all database files, registers all entities, collects all occurring TypeIds and ensures for every TypeId that there is a TypeHandler for it. If necessary, a LegacyTypeHandler with mapping, but still: there must be a TypeHandler for each TypeId. And a TypeHandler needs a runtime type. That is, ass-backwards, over records that are logically already deleted, but only physically still lying around, now it is again enforced that the erasable entity class must be present. Bummer. One can prevent this: there is a \"cleanup\" function in the database management logic, which cleans up all logical gaps in the database files (actually copies all non-gaps into a new file and thus deletes the old file altogether). You would have to call it, then all physical occurrences of the unreachable records disappear and you could easily delete the associated class. But that is annoying. That is why it makes sense for these cases - and only for them - to do the following: If you as a developer are absolutely sure that no single instance of a given class is ever reachable again, i.e. must be loaded, then you can mark a type as \"deleted\" (rather \"unreachable\") in the refactoring mapping. Then the Type Handling will create a dummy TypeHandler that does not need a runtime class. See PersistenceUnreachableTypeHandler. But be careful: if you are mistaken and an instance of such a type is still referenced somewhere and eventually loaded later at runtime, then the Unreachable handler will throw an exception. At some point during the runtime of the application, not even during initialization. The cleanup provides real security: remove all logical gaps and if then with a deleted class no more error in the initialization occurs, it is really superfluous. Any ideas, such as simply returning null in the dummy type handler instead of an instance, are a fire hazard: it may dissolve some annoying situations pleasantly, but it would also mean that existing datasets, potentially entire subgraphs, become hidden from the application. Nevertheless, the database would continue to drag them along, perhaps becoming inexplicably large, and any search for the reason would yield nothing, because the dummy type handler keeps the data records secret. Shortsighted great, but catastrophic in the long run. That’s not good. The only clean solution is: you have to know what to do with your data model. As long as there are still available instances, they must also be loadable. The annoying special case above can be defused without side effects. But it can not be more than that, otherwise it will get rid of the chaos, problems and lost confidence in the correctness of the database solution.","title":"Legacy Type Mapping","component":"manual","version":"7.0","name":"index","url":"/manual/7.0/storage/legacy-type-mapping/index.html","titles":[{"text":"Automatic Mapping","hash":"_automatic_mapping","id":1},{"text":"Explicit Mapping","hash":"_explicit_mapping","id":2},{"text":"Explicit Mapping of Classes","hash":"_explicit_mapping_of_classes","id":3},{"text":"Explicit Mapping Syntax","hash":"_explicit_mapping_syntax","id":4},{"text":"Value Conversion","hash":"_value_conversion","id":5},{"text":"Value Conversion of Primitives","hash":"value-conversion-of-primitives","id":6},{"text":"Value Conversion of References / Objects","hash":"value-conversion-of-references","id":7},{"text":"Performance","hash":"performance","id":8},{"text":"Customizing","hash":"customizing","id":9},{"text":"Special Case: Deleted Class","hash":"special-case-deleted-class","id":10}]},"198":{"id":198,"text":"Here is an overview of how to enable and configure different levels of user interaction for the Legacy Type Mapping. Somewhere you have a foundation instance, a foundation in where everything is configured, from which the StorageManager is created. EmbeddedStorageFoundation foundation = EmbeddedStorage.Foundation(); // or from somewhere else It itself contains a foundation for connections. To access the inner thing needs a little detour. Incidentally, that’s not a JDBC connection, but this is just one thing that creates helper instances like Storer and Loader. Because Legacy Type Mapping affects loading, it has to go in there. Either you access it directly, like this: EmbeddedStorageConnectionFoundation f = foundation.getConnectionFoundation(); Or like this, that’s better for method chaining. foundation.onConnectionFoundation(f -> { ... }); If you have that, the configuration for the Legacy Type Mapping callback logic is just a one liner: f.setLegacyTypeMappingResultor(...); Default PersistenceLegacyTypeMappingResultor.New() That’s just the necessary logic, without anything further. If you do not change anything, this is done by default. With Console Output PrintingLegacyTypeMappingResultor.New(PersistenceLegacyTypeMappingResultor.New()) That wraps a printer around the necessary logic. All these storage and persistence classes are nothing sacred or super-duper intertwined or anything. These are just interfaces and if you plug in another implementation then it will be used. Inquiry InquiringLegacyTypeMappingResultor.New(PersistenceLegacyTypeMappingResultor.New()) Resultor which asks the user to apply. More customization is possible, see below. And so on With the implementation of just one single interface method, you can build anything else you can imagine. For example, logging to a file instead of the console. Or in the personally preferred logging framework. Or write confirmed mappings into the refactorings file. Everything is possible. For the inquiring implementation (InquiringLegacyTypeMappingResultor) there are a few settings: When should he ask? Always or only if something is unclear. Never does not make any sense of course, then you shouldn’t use it, or alternatively the printing resultor. When is a mapping unclear? If at least one field mapping is not completely clear. A field mapping is clear if: If two fields are exactly the same (similarity 1.0 or 100%) Or if two fields are specified by the explicit mapping. So if all fields are clear according to the above rule, then there is no need to ask. And there is another special case: If a field is discarded that is not explicitly marked as discardable, then as a precaution an inquiry is always done. Although no data is lost, but the data would not be available in the application, so better ask. There are options to control this a bit finer. You can optionally specify a double as a threshold (from 0.0 to 1.0, otherwise Exception): The value determines how similar two matching fields automatically have to be so that they are not inquired. Example: The value is 0.9 (90%), but a match found is only 0.8 (80%) similar. This is according to the specification too little, there must be an inquiry as a precaution. If you specify 1.0, that means: always ask, everything is really perfectly clear. If you enter 0.0, this means: never ask or only for implicitly dropping fields. Looks like this: InquiringLegacyTypeMappingResultor.New( PersistenceLegacyTypeMappingResultor.New()) // implicitely 1.0 InquiringLegacyTypeMappingResultor.New( PersistenceLegacyTypeMappingResultor.New(), 0.7) // 0.7 threshold Here a small example with a Person class. int customerid ; // -> pin String firstname ; // -> firstName String surname ; // -> lastName String comment ; // discarded, NOT new commerceId It should be changed to: Integer pin ; // firstName surname -0,688----> lastName comment -0,750----> commerceId [***new***] address customerid [discarded] customerid and pin are too different to be automatically assigned to each other. Therefore, it is wrongly assumed that customerid is omitted and pin is new. comment and commerceId are surprisingly similar (75%) and are therefore assigned. But that’s not what we want. Incidentally, it would not matter here what is defined as a threshold: customerid would be eliminated by the implicit decision. This is too delicate not to inquire, so it is always necessary to ask. To get the mapping right, you have to specify two entries: customerid is now called pin and comment should be omitted Then the inquiry looks like this: customerid -[mapped]-> pin firstname -0,944----> firstName surname -0,688----> lastName [***new***] commerceId [***new***] address comment [discarded] Due to the explicit mapping from customerid to pin, the similarity does not matter, it is the mapping that matters. To indicate this, it says \"[mapped]\" instead of the similarity. The rest is as usual. Only comment is now \"[discarded]\", according to the mapping. The difference to the above is namely: This is an explicitly predetermined absence. That does not force inquiry. This clears the way for the threshold: If you enter 0.7 or more then you will be asked. As far as everything would be clear, but the mapping of surname to lastName is below the required \"minimum similarity\", so rather ask. If you enter 0.6 or less, you will no longer be asked. Because all assignments are either explicitly specified or they are according to \"minimum similarity\" similar enough to rely on it. A recommendation for a good value for the \"minimum similarity\" is difficult. As soon as one softens rules, there is always the danger of a mistake. See comment example above: is 75% similar to commerceId. Still wrong. Then prefer 80%? Or 90%? Of course it is better, but the danger is still there. If you want to be sure, just make 1.0 or omit the parameter, then by default 1.0 is taken. The most important is the explicit mapping anyway : if \"enough\" is given by the user, there is no need to ask.","title":"User Interaction","component":"manual","version":"7.0","name":"user-interaction","url":"/manual/7.0/storage/legacy-type-mapping/user-interaction.html","titles":[]},"199":{"id":199,"text":"Loading data can be done in two ways, eager and Lazy. The basic, default way of loading is eager loading. This means that all objects of a stored object graph are loaded immediately. This is done during startup of the MicroStream database instance automatically if an already existing database is found. Contrary to lazy loading, eager loading has no requirements to your entity model. To load your data you just need to create an EmbeddedStorageManager instance: EmbeddedStorageManager storage = EmbeddedStorage.start(); After that just get the root instance of your object graph from the StorageManager by calling EmbeddedStorageManager.root() and check for null as this indicates a non-existing database final EmbeddedStorageManager storage = EmbeddedStorage.start(); if(storage.root() == null) { //No existing Database found } else { MyRoot root = (MyRoot) storage.root(); } The full code for the eager loading example is on GitHub.","title":"Loading Data","component":"manual","version":"7.0","name":"index","url":"/manual/7.0/storage/loading-data/index.html","titles":[]},"200":{"id":200,"text":"MicroStream supports a variety of storage targets. Through an abstracted file system (AFS), it is possible to connect to a lot of different back ends. The AFS allows to use folders and files, like in all common file systems, but with different connectors it is possible to use different solutions as the actual storage. To connect to the local file system use the Java Non-Blocking IO (NIO) connector, which is part of the base module, so no additional dependency is needed. EmbeddedStorage.start(Paths.get(\"path\", \"to\", \"storage\")); Internally this creates and uses a NioFileSystem and is a shortcut for: NioFileSystem fileSystem = NioFileSystem.New(); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"path\", \"to\", \"storage\")); The file system API is the same for all connectors, like for S3. This is part of another module. one.microstream microstream-afs-aws-s3 07.01.00-MS-GA // create S3 client S3Client client = ...; BlobStoreFileSystem fileSystem = BlobStoreFileSystem.New( // use caching connector S3Connector.Caching(client) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"path\", \"to\", \"storage\");","title":"Storage Targets","component":"manual","version":"7.0","name":"index","url":"/manual/7.0/storage/storage-targets/index.html","titles":[]},"201":{"id":201,"text":"The NIO connector can access the local or mounted file systems, as well as different in-memory file systems. This is probably the easiest way to start, especially for prototyping and testing purposes. For productive use, the other file systems are preferred. NioFileSystem fileSystem = NioFileSystem.New(); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"path\", \"to\", \"storage\")); The local file system is the default setting. If you want to use external configuration, no further action is required.","title":"Local File System","component":"manual","version":"7.0","name":"local-file-system","url":"/manual/7.0/storage/storage-targets/local-file-system.html","titles":[{"text":"Configuration","hash":"_configuration","id":1}]},"202":{"id":202,"text":"In some cases, it can be necessary to store modified encapsulated objects that cannot be a accessed from your code. public class ForeignObject { ... private HiddenObject hidden; ... } In the upper code snippet the \"hidden\" object cannot be accessed by store(myForeignObject.hidden) if no getter is available. To allow such hidden objects to be stored after they have been modified you have to options: Set the global storing strategy of the MicroStream instance to eager storing or Implement and set a custom PersistenceEagerStoringFieldEvaluator for this field. EmbeddedStorageManager storage = EmbeddedStorage.Foundation() .onConnectionFoundation( f -> f.setReferenceFieldEagerEvaluator( new CustomEagerStoringFieldEvaluator() ) ) .start(); To increase performance use immutable sub-graphs as often as possible. Storing those with the provided convenience storing methods or using a thread local storer to insert those sub-graphs concurrently can give a great performance boost.","title":"Best Practice","component":"manual","version":"7.0","name":"best-practice","url":"/manual/7.0/storage/storing-data/best-practice.html","titles":[{"text":"Storing Hidden Encapsulated Objects","hash":"_storing_hidden_encapsulated_objects","id":1},{"text":"Use Immutable data models","hash":"_use_immutable_data_models","id":2}]},"203":{"id":203,"text":"If the application works in MVC frameworks, the work is often done by getting some data from a data source, modifying it, and then store it back in a data store. This style of work application always works with a copy of the data. Which allows it to use mutable data only within a single thread. The developer doesn’t have to worry about data synchronization and then store this data in a database transaction. This way of working is very practical, it does not require developers to have knowledge of multi-threaded programming and thanks to this it is very widespread. Can similar technical work be used when working with MicroStream? Of course, elegantly, very simply and safely we can use the ObjectCopier utility to create a deep copy of our data, change it, and save it back. Very simple idea, just create a purchase of actual data to work within the application and at the end save that data back. Unfortunately, it’s not that simple. If the standard copy function is called over an object in Java, it creates a copy of that object, but the other object’s references remain the same. This doesn’t help so much. Because usually, an application contains a more complex data structure than a single object. This approach is called shallow copy. More here: https://en.wikipedia.org/wiki/Object_copying What is actually needed at this point is a deep copy. You need to create a complete copy of the complete subgraph from this object. MicroStream provides full support for a deep copy. It can be relatively easily called and a deep copy of the data will be created. ObjectCopier objectCopier = ObjectCopier.New(); Customer customer = root.getCustomer(id); Customer customerCopy = objectCopier.copy(customer); customerCopy.addPurchase(purchase); XThreads.executeSynchronized(() -> { root.setCustomer(id, customerCopy); storage.store(root.getcusomers()); } What are the parts of this code? Just create an instance of ObjectCopier class with factory method New(); Get the customer Make a deep copy of the customer object Modify this object graph In synchronized mode save this customer instead of the original customer and store it into a datastore This simple example written in pseudocode aims to demonstrate one of the many ways to solve working over a shared object graph in a multi-threaded environment. Make sure you close the copier after you have used it to clean up all the resources.","title":"Use Data Copy","component":"manual","version":"7.0","name":"deep-copy","url":"/manual/7.0/storage/storing-data/deep-copy.html","titles":[{"text":"Deep Copy vs Shallow Copy","hash":"_deep_copy_vs_shallow_copy","id":1},{"text":"Deep Copy Utility (ObjectCopier)","hash":"_deep_copy_utility_objectcopier","id":2}]},"204":{"id":204,"text":"MicroStream is designed to work with object graphs. Thus, storing data means to store an object graph. This includes the object’s value fields and references to other objects. Storing an object will also store all instances referenced by this objects that have not been stored before. While storing your data most of the work MicroStream performs for you. You only need to call the store method on the correct object. The rule is: \"The Object that has been modified has to be stored!\". Storing objects that are not part of an object graph is most likely pointless. See Getting Started how to create a database with a root instance. To store the registered root instance just call the storeRoot() method of a EmbeddedStorageManager instance. // Init storage manager final EmbeddedStorageManager storageManager = EmbeddedStorage.start(root); // Store the root object storageManager.storeRoot(); To store a newly created object, store the \"owner\" of the object. In the example below a new object is created and added to the myObjects list of the root object. Then the modified list gets stored. This will also store the new object. // Add a new data object to the list in root MyData dataItem = new MyData(\"Alice\"); root.myObjects.add(dataItem); // Store the modified list storageManager.store(root.myObjects); Before storing a modified object keep in your mind that the modified object needs to be stored. In case of a value types, like int, it is the object that has the int field as a member: // Modify a value type memeber and store it dataItem.setIntValue(100); storageManager.store(dataItem); Don’t forget immutable objects Immutable objects like String cannot be modified. Assigning a new value to a String does not modify the String object. Instead a new String instance is created and the reference is changed! // Change a string object and store it dataItem.setName(\"Bob\"); storageManager.store(dataItem); The full code for the example is on GitHub.","title":"Storing Data","component":"manual","version":"7.0","name":"index","url":"/manual/7.0/storage/storing-data/index.html","titles":[{"text":"Storing Root Instances","hash":"_storing_root_instances","id":1},{"text":"Storing New Objects","hash":"_storing_new_objects","id":2},{"text":"Storing Modified Objects","hash":"_storing_modified_objects","id":3}]},"205":{"id":205,"text":"The MicroStream engine supports two general storing strategies: lazy and eager storing. By default, MicroStream uses the lazy storing strategy. These storing strategies differ in the way how objects, referenced by the object to be stored are handled if those referenced objects had already been stored. Lazy storing is the default storing mode of the MicroStream engine. Referenced instances are stored only if they have not been stored yet. If a referenced instance has been stored previously it is not stored again even if it has been modified. That’s why modified objects must be stored explicitly. In eager storing mode referenced instances are stored even if they had been stored before. Contrary to Lazy storing this will also store modified child objects at the cost of performance. To use lazy or eager storing explicitly, get an instance of the required Storer and use it’s store methods: Storer storer = storage.createEagerStorer(); storer.store(myData); storer.commit(); Available Storers are: storage.createLazyStorer() storage.createEagerStorer() Standard storing: storage.createStorer() will provide corresponding Storer instances. Beside the 'global' lazy or eager storing strategies MicroStream allows to implement an individual handling for the storing behavior. See PersistenceEagerStoringFieldEvaluator for details.","title":"Lazy and Eager Storing","component":"manual","version":"7.0","name":"lazy-eager-full","url":"/manual/7.0/storage/storing-data/lazy-eager-full.html","titles":[{"text":"Lazy Storing","hash":"_lazy_storing","id":1},{"text":"Eager Storing","hash":"eager-storing","id":2},{"text":"Usage","hash":"_usage","id":3},{"text":"Custom Handling","hash":"_custom_handling","id":4}]},"206":{"id":206,"text":"Beside long store(Object instance) MicroStream provides some convenience methods to store several objects at once: void storeAll(Iterable instances) Stores the passed instance in any case and all referenced instances of persistable references recursively, but stores referenced instances only if they are newly encountered (e.g. don’t have an id associated with them in the object registry, yet and are therefore required to be handled). This is useful for the common case of just storing an updated instance and potentially newly created instances along with it while skipping all existing (and normally unchanged) referenced instances. List subset = myCollection.getSubset(); subset.foreach(item -> item.modify()); storage.storeAll(subset); long[] storeAll(Object... instances) Convenience method to store multiple instances. The passed array (maybe implicitly created by the compiler) itself is NOT stored. storage.storeAll(itemA, iteamB, iteamC); MicroStream does not provide explicit transactions, every call to a store method is automatically a transaction. A store operation is an atomic all or nothing operation If the store call is successful all data is written to the storage. Otherwise no data is persisted. Partially persisted data will be reverted.","title":"Convenience Methods and Explicit Storing (Transactions)","component":"manual","version":"7.0","name":"transactions","url":"/manual/7.0/storage/storing-data/transactions.html","titles":[{"text":"Convenience Methods","hash":"_convenience_methods","id":1},{"text":"Transactions","hash":"_transactions","id":2}]},"207":{"id":207,"text":"The default MicroStream implementation fully supports the Java transient field modifier. Class members marked transient will not be persisted. public class User { private String username; //do not persist the users password private transient String password; } It is possible to override the default behavior by implementing a custom PersistenceFieldEvaluator. PersistenceFieldEvaluator fieldEvaluator = (clazz, field) -> !field.getName().startsWith(\"_\"); EmbeddedStorageManager storage = EmbeddedStorage.Foundation() .onConnectionFoundation( c -> c.setFieldEvaluatorPersistable(fieldEvaluator) ) .createEmbeddedStorageManager() .start();","title":"Transient Fields","component":"manual","version":"7.0","name":"transient-fields","url":"/manual/7.0/storage/storing-data/transient-fields.html","titles":[]},"208":{"id":208,"text":"MicroStream connects your application’s entity graph residing in memory to a physical form of data (i.e. persistent data) to/from which entity data is stored/loaded as required. MicroStream uses the common concept of Lazy Loading, allowing you to define which parts of your data (entity sub-graphs) are loaded only when required instead of eagerly at startup. A few well-placed lazy references in your entity model make your application load only a tiny bit of \"head\" entities at startup time and load everything else later on demand. This allows the handling of arbitrarily big databases with relatively small memory requirements.","title":"Data Management","component":"manual","version":"7.0","name":"data-management","url":"/manual/7.0/storage/faq/data-management.html","titles":[{"text":"Where is the data of my database located","hash":"_where_is_the_data_of_my_database_located","id":1},{"text":"What if my database is really big?","hash":"_what_if_my_database_is_really_big","id":2}]},"209":{"id":209,"text":"No. MicroStream allows you to store any Java object. Instances of any and all types can be handled, there are no special restrictions like having to implement an interface, using annotations or having a default constructor (see POJO). Only types bound to JVM-internals like Thread, IO-streams and the like are deliberately excluded from being persistable since they could not be properly recreated upon loading, but such instances should not be part of entity data models, anyway. During initialization, MicroStream automatically checks if your runtime entity classes are still matching the persistent data. Mismatches are automatically mapped when loading data based on predefined rules that you can extend and overwrite on a per-case basis if needed. For more information, see Legacy Type Mapping","title":"Data Model","component":"manual","version":"7.0","name":"data-model","url":"/manual/7.0/storage/faq/data-model.html","titles":[{"text":"Do I have to adapt my object-model to MicroStream?","hash":"_do_i_have_to_adapt_my_object_model_to_microstream","id":1},{"text":"What if I have to change my entity classes?","hash":"_what_if_i_have_to_change_my_entity_classes","id":2}]},"210":{"id":210,"text":"MicroStream stores persistent data in a physical form, typically in native file-system files. Yes, as many as you like. Each MicroStream instance represents one coherent entity graph of persistent data. Yes. This is already done automatically. The minimum and maximum size of every partial file can be configured, although this is a very technical detail that should not be relevant in most cases. At any given time, only one JVM process may directly access the files representing a unique set of data. Such a restriction is crucial for the correct execution of any application: changes to an application’s persistent data have to be guarded by the rules of the application’s business logic, i.e. the process that currently runs the application. Allowing another process to bypass these rules would eventually result in catastrophic consistency errors. The requirement to distribute an application over multiple processes must be solved by a clustering approach (e.g. by distributing logic AND persistent data over multiple processes or by having one process to serve as the data master for multiple worker processes).","title":"File Storage","component":"manual","version":"7.0","name":"file-storage","url":"/manual/7.0/storage/faq/file-storage.html","titles":[{"text":"Where does MicroStream store persistent data?","hash":"_where_does_microstream_store_persistent_data","id":1},{"text":"Can my application use more than one MicroStream instance?","hash":"_can_my_application_use_more_than_one_microstream_instance","id":2},{"text":"Is it possible to split the file-storage into many single files?","hash":"_is_it_possible_to_split_the_file_storage_into_many_single_files","id":3},{"text":"May multiple JVM processes access the same MicroStream database?","hash":"_may_multiple_jvm_processes_access_the_same_microstream_database","id":4}]},"211":{"id":211,"text":"Yes, all jars bring the necessary module-info class, in the multi-version sub-directory in the META-INF folder. Meaning, despite MicroStream is compiled with Java 8, it is fully compatible with the JMS. Yes, but due to reflection restrictions of records introduced in Java 15 an export has to be added to the VM parameters: --add-exports java.base/jdk.internal.misc=ALL-UNNAMED","title":"Java Features","component":"manual","version":"7.0","name":"java-features","url":"/manual/7.0/storage/faq/java-features.html","titles":[{"text":"Does MicroStream work with the Java Module System (Jigsaw)?","hash":"_does_microstream_work_with_the_java_module_system_jigsaw","id":1},{"text":"Can MicroStream handle Records?","hash":"records","id":2}]},"212":{"id":212,"text":"Yes. In fact, every storing of data is executed as a transaction, an atomic all-or-nothing action. When one or more entities are stored, their data is collected into a continuous block of bytes and that block is written to the physical form (the \"files\") in one fell swoop. Any problem during the IO-operation causes the whole block to be deleted (rolled back). Yes. The storing and loading process can be parallelized by using multiple threads and thus be strongly accelerated. There is no limitation on how many threads can be used, apart from the mathematical constraint that the thread count must be a power of 2 (1, 2, 4, 8, 16, etc.). Yes. There are currently two options available to create backups: An on-the-fly backup that copies and validates stored entity data after it has been written and the possibility to export all database files to a target location (which is in fact just a low-level file copying, but executed in a concurrency-safe way). Yes. MicroStream provides a per-type export of binary data and a utility to convert its binary data into the CSV format. The other way around (convert CSV to binary an import binary files) is also possible. No, because it doesn’t need to. Such concerns are long covered by the application itself, with the DBMS usually being degraded to only being the application’s exclusive database. Thus, all that is needed for a modern business application is just an application-exclusive data storage solution, which is exactly what MicroStream is. Yes, if the data is structured in a format conforming to the entity classes and with references being represented in globally unique and bijective numbers. How hard that is for a given database depends on its specifics, but it can be as easy as executing one generically created SELECT per table. Yes, since Version 4.1 the released jar files contain the necessary OSGi Headers. Also a P2 Update Site distribution is available at: https://repo.microstream.one/repository/update-site/07.01.00-MS-GA","title":"Miscellaneous","component":"manual","version":"7.0","name":"miscellaneous","url":"/manual/7.0/storage/faq/miscellaneous.html","titles":[{"text":"Are transactions possible in MicroStream?","hash":"_are_transactions_possible_in_microstream","id":1},{"text":"Is MicroStream multi-threaded?","hash":"_is_microstream_multi_threaded","id":2},{"text":"Does MicroStream support a backup strategy?","hash":"_does_microstream_support_a_backup_strategy","id":3},{"text":"Does MicroStream provide data export/import functionality?","hash":"_does_microstream_provide_data_exportimport_functionality","id":4},{"text":"Does MicroStream provide a user management, authentication and authorization etc., like conventional DBMS ?","hash":"_does_microstream_provide_a_user_management_authentication_and_authorization_etc_like_conventional_dbms","id":5},{"text":"Is it possible to migrate an existing database to MicroStream?","hash":"_is_it_possible_to_migrate_an_existing_database_to_microstream","id":6},{"text":"Is MicroStream usable in an OSGi Environment?","hash":"_is_microstream_usable_in_an_osgi_environment","id":7}]},"213":{"id":213,"text":"pom.xml one.microstream microstream-cache 07.01.00-MS-GA The above dependency adds the JCache API and MicroStream Embedded storage as transient dependencies to your project. CachingProvider provider = Caching.getCachingProvider(); CacheManager cacheManager = provider.getCacheManager(); MutableConfiguration configuration = new MutableConfiguration() .setStoreByValue(false) .setExpiryPolicyFactory(CreatedExpiryPolicy.factoryOf(Duration.ONE_MINUTE)); Cache cache = cacheManager.createCache(\"jCache\", configuration); cache.put(1, \"Hello World\"); String value = cache.get(1); Get the default CachingProvider implementation from the application’s classpath. This method will work if and only if there is only one JCache implementation available in the classpath. If there are multiple providers then use the fully qualified name + Caching.getCachingProvider(\"one.microstream.cache.types.CachingProvider\") instead. Get the default CacheManager instance using the provider. Create a cache configuration using MutableConfiguration with key type and value type as Integer and String respectively configured to store the cache entries by reference (not by value) and with an expiry time of one minute defined for entries from the moment they are created. Using the cache manager, create a cache named jCache with the configuration created in step 3. Put some data into the cache And retrieve it. The same can be done using MicroSteam’s CacheConfiguration API. This time we use a EmbeddedStorageManager as a backing store for the cache. EmbeddedStorageManager storageManager = EmbeddedStorage.start(); CachingProvider provider = Caching.getCachingProvider(); CacheManager cacheManager = provider.getCacheManager(); CacheConfiguration configuration = CacheConfiguration .Builder(Integer.class, String.class, \"jCache\", storageManager) .expiryPolicyFactory(CreatedExpiryPolicy.factoryOf(Duration.ONE_HOUR)) .build(); Cache cache = cacheManager.createCache(\"jCache\", configuration); cache.put(1, \"one\"); String value = cache.get(1);","title":"Getting Started","component":"manual","version":"7.0","name":"getting-started","url":"/manual/7.0/cache/getting-started.html","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"Hello World","hash":"_hello_world","id":2}]},"214":{"id":214,"text":"Since version 3 MicroStream provides a JCache (JSR-107) implementation, which is optionally backed by a MicroStream Storage. JCache standardizes caching for the Java platform. It provides a common mechanism to cache values in a map-like structure. It expedites the mainstream adoption of in-memory computing by giving all Java developers an easy way to access memory from within Java. Businesses can change providers without rewriting their applications or maintaining a proprietary cache abstraction layer. This caching standard is used in a wide variety of environments. The most common use cases are: Second-level cache in JPA (e.g. Hibernate) Spring Cache Abstraction and many more Why another JCache implementation, you may wonder. There is already a myriad of providers out there. MicroStream’s very own serialization and storage can be utilized to get the best out of caches. For example, you are not limited to java.io.Serializable types, when storing a value. That means every key-value pair gets copied every time you put and get entries in and out of a cache. And if a cache is used with a backing store, MicroStream’s storage can be used to get the best possible performance. And now, MicroStream being a JCache provider, you can use it as a drop-in replacement in your existing application. The caching provider represents the implementation of JCache that you are using. You can use more than one JCache implementation in your project if you wish, and CachingProvider is how you access the different providers that are in use. It is responsible for managing and providing access to many named caches. The cache holds the different values being cached. You can have several caches, each of which may be holding data for a different purpose. Each one can have a different configuration; for example, different caches may evict old data using different techniques. Each item of data in a cache is an entry, which is a key-value pair. The key is a unique value used to store and look up the data. The value is the actual data you wish to cache. Caches have some different properties than Maps, but the calls that you would use to store and lookup data is very similar.","title":"Cache","component":"manual","version":"7.0","name":"index","url":"/manual/7.0/cache/index.html","titles":[{"text":"Motivation","hash":"_motivation","id":1},{"text":"Basic Concepts of JCache","hash":"_basic_concepts_of_jcache","id":2},{"text":"CachingProvider","hash":"_cachingprovider","id":3},{"text":"CacheManager","hash":"_cachemanager","id":4},{"text":"Cache","hash":"_cache","id":5},{"text":"Entry","hash":"_entry","id":6}]},"215":{"id":215,"text":"Since version 7 Microstream provides a module for simple object based network communication over TCP connections. This module utilizes the Microstream engine to serialize and deserialize java objects and provides additional APIs to setup the required TCP connections. If using Maven just add module microstream-communication-binary into your pom.xml dependencies. pom.xml one.microstream microstream-communication-binary 07.01.00-MS-GA The Hello World example consists out of two applications. The Host and the Client application. The Host will open a network port and listen for incoming connections of the client. If a client connects successfully it awaits data from the client that will be send back to the client. The basic example won’t do any configuration so the connection is not secured and the client and host use the local system address at port 1099. public class EchoServer { public static void main(final String[] args) { final ComHost host = ComBinaryDynamic.Foundation() .setHostChannelAcceptor(channel -> { final Object received = channel.receive(); System.out.println(\"received: \" + received); channel.send(received); }) .createHost(); // run the host, making it constantly listen for new connections and relaying them to the logic host.run(); } } public class EchoClient { public static void main(final String[] args) { //create the client final ComClient client = ComBinaryDynamic.Foundation() .createClient(); //connect to the host and communicate try(final ComChannel channel = client.connect()) { channel.send(\"Hello Host\"); final Object received = channel.receive(); System.out.println(\"received: \" + received); } } } Configuration of host and client is done using the ComFoundation.Default implementation of the ComFoundation interface. To get a preconfigured foundation instance the classes ComBinaryDynamic and ComBinary provide the convenient method Foundation(). The Object communication of Microstream is available in two flavors: Dynamic and non dynamic. They differ in the way classes that should be serialized and transfered are handled: The non dynamic version requires all classes that should be transfered to be registered at initialization time. This can be done with the registerEntityType methods of the ComFoundation. If a transfered object graph references any unregistered class an exception will occur! The dynamic implementation automatically registers all classes that are part of the communication at runtime. It will also do a type-mapping if classes with the same name have different implementations on client and host. host binding address The host’s IP address is configured with ComFoundation.setHostBindingAddress(InetSocketAddress). client target address The address the client connects to is configured by ComFoundation.setClientTargetAddress(InetSocketAddress). port only If no host or client target address is configured it is possible to use ComFoundation.setPort(int) to set a port that is used together with the default ip addresses for host and client. registering entity types to register entity types at startup use ComFoundation.registerEntityTypes(Class…​) for example. In order to use TLS encrypted communication you need to setup a ComTLSConnectionHandler and supply it using ComFoundation.setConnectionHandler(ComConnectionHandler). The default implementation of the ComTLSConnectionHandler uses the java SSLEngine . The required configuration elements have to be provided using either the provided implementations of the TLSKeyManagerProvider , TLSTrustManagerProvider , TLSParametersProvider and SecureRandomProvider interfaces or by custom implementations. public class EchoServerTLS { public static void main(final String[] args) { Path serverKeyStore = Paths.get(args[0]); Path serverTrustStore = Paths.get(args[1]); char[] serverKeyStorePassword = args[2].toCharArray(); char[] serverTrustStorePassword = args[2].toCharArray(); final ComHost host = ComBinaryDynamic.Foundation() .setConnectionHandler(ComTLSConnectionHandler.New( new TLSKeyManagerProvider.PKCS12( serverKeyStore, serverKeyStorePassword), new TLSTrustManagerProvider.PKCS12( serverTrustStore, serverTrustStorePassword), new TLSParametersProvider.Default(), new SecureRandomProvider.Default() )) .setHostChannelAcceptor(channel -> { final Object received = channel.receive(); System.out.println(\"received: \" + received); channel.send(received); }) .createHost(); // run the host, making it constantly listen for new connections and relaying them to the logic host.run(); } } The provided implementations are: one.microstream.communication.tls.TLSKeyManagerProvider.Default provides no javax.net.ssl.KeyManagers, so the SSLEngine uses the systems’s default KeyManager. one.microstream.communication.tls.TLSKeyManagerProvider.PKCS12 Creates a SunX509 javax.net.ssl.KeyManagers by loading a PKCS12 key store from the file system. one.microstream.communication.tls.TLSTrustManagerProvider.Default provides no javax.net.ssl.TrustManager, so the SSLEngine uses the systems’s default TrustManager. one.microstream.communication.tls.TLSTrustManagerProvider.PKCS12 Creates a SunX509 javax.net.ssl.TrustManager by loading a PKCS12 key store from the file system. one.microstream.communication.tls.TLSParametersProvider.Default - provides javax.net.ssl.SSLParameters with client authentication enabled - protocol string is TLSv1.2 - timeout of 1000ms for the TLS handshake one.microstream.communication.tls.SecureRandomProvider.Default provides a null java.security.SecureRandom to let the SLLengine use the system default SecureRandom","title":"Communication","component":"manual","version":"7.0","name":"index","url":"/manual/7.0/communication/index.html","titles":[{"text":"Getting Started","hash":"_getting_started","id":1},{"text":"Prerequisites","hash":"_prerequisites","id":2},{"text":"Hello World","hash":"_hello_world","id":3},{"text":"Host","hash":"_host","id":4},{"text":"Client","hash":"_client","id":5},{"text":"Configuration","hash":"_configuration","id":6},{"text":"ComBinaryDynamic and ComBinary","hash":"_combinarydynamic_and_combinary","id":7},{"text":"Common configuration values","hash":"_common_configuration_values","id":8},{"text":"TLS","hash":"_tls","id":9}]},"216":{"id":216,"text":"New public AFS connectors AWS S3 and DynamoDB Azure Storage Google Cloud Firestore Hazelcast Kafka Oracle Coherence, DB and Cloud Object Store Redis Hana DB Finalized storage garbage collector, activated by default [402] Improve CDI integration [377] CDI Integration: Allow customization of the EmbeddedStorageFoundation before StorageManager is created [388][398] Spring Boot integration: Add interceptor logic to store marked objects at end of method [384] Clarification around cache expiry when using StorageManager [387] Store reference inside Lazy when Lazy is marked (CDI integration) [386] Enable microstream cache [351] Validate Channel Folders to Channel Count [192] Remove @Store from CDI integration [397][394] Fix CDI integration cache configuration keys [395] Active the test in the CDI extension [354] CDI Extension Logging Serializer API Android Type Handlers Stop LazyrefenceManager automatically [343] Check for cache clear after loading storage entities [326] Reduce memory usage [323] Fixed storage stalls in case of errors during the housekeeping phase [303] Eliminate null in StorageConfiguration.toString() [205] Fixed exclusive file access conflicts when restarting storage [282] From version 6 no actions are necessary, for older versions see below. Bugfix release. Fixed various bugs in backup [194][272][273][278][280] Fixed storage restart error with same configuration instance [279] Fixed Javadoc warnings [281] Spring Boot Integration Specialized type handlers for Java 17 collection Deep-copy utility Examples included in reactor build Fixed swallowed exceptions in storage channels [265] Fixed failing import with multiple channels [254] Fixed zero byte blocks in storage [255] Fixed faulty loading behaviour in persisted cache [226] Fixed possible deadlock in persistence manager [240] Fixed bug in type handler for PriorityQueue [234] From version 5 no actions are necessary, for older versions see below. Bugfix release. Fixed buffer flush regression [225] Bugfix release. Fixed broken build for microstream-storage-restclient-app This release introduces some breaking changes. To fully support the Java Module System (Jigsaw) and to meet Maven’s naming standards, we had to rename some packages and our artifact’s IDs. But don’t worry. Just change the dependency configuration and organize some imports, and you are good to go. Existing storages are not affected and are fully compatible with this version. For detailed information, see the migration guide below. General purpose configuration layer on which the storage and cache configuration are now based on, with following key features: Tree like structure to support sub-configurations Input from various sources (ini, xml, yaml, …​) Typed getters for properties Extendable: custom property parsers and configuration loaders Adaptable: easy adaption to other framework’s configurations, like e.g. Spring Boot Storage configuration now supports different file systems for live storage and backup GraalVM support: MicroStream’s optimized memory adapter is now used automatically when running on GraalVM Restructured MicroStream’s module and package structure to fully support the Java Module System and adopt Maven naming standards, see Migration Guide Fixed sporadic index out of bounds exception when storage and backup had different storage targets with a channel count greater than one In order to fully support the Java Module System and adopt Maven naming standards we had to introduce some changes: These are the changed artifacts and their packages. Old (= 5) base microstream-base AFS and AFS/NIO were extracted from base module: base microstream-afs one.microstream.afs one.microstream.afs.types, one.microstream.afs.exceptions base microstream-afs-nio one.microstream.afs.nio one.microstream.afs.nio.types cache microstream-cache one.microstream.cache one.microstream.cache.types, one.microstream.cache.exceptions cache.hibernate microstream-cache-hibernate one.microstream.cache.hibernate one.microstream.cache.hibernate.types communication microstream-communication one.microstream.com one.microstream.communication.types communication.binary microstream-communication-binary one.microstream.com.binary one.microstream.communication.binary.types AWS was split into AWS-DynamoDB and AWS-S3: filesystem.aws microstream-enterprise-afs-aws-dynamodb one.microstream.afs.aws.dynamodb one.microstream.enterprise.afs.aws.dynamodb.types filesystem.aws microstream-enterprise-afs-aws-s3 one.microstream.afs.aws.s3 one.microstream.enterprise.afs.aws.s3.types filesystem.azure microstream-enterprise-afs-azure-storage one.microstream.afs.azure.storage one.microstream.enterprise.afs.azure.storage.types filesystem.blobstore microstream-enterprise-afs-blobstore one.microstream.afs.blobstore one.microstream.enterprise.afs.blobstore.types filesystem.coherence microstream-enterprise-afs-oracle-coherence one.microstream.afs.coherence one.microstream.enterprise.afs.oracle.coherence.types filesystem.hazelcast microstream-enterprise-afs-hazelcast one.microstream.afs.hazelcast one.microstream.enterprise.afs.hazelcast.types filesystem.jpa.hibernate microstream-enterprise-afs-hibernate one.microstream.afs.jpa.hibernate one.microstream.afs.hibernate.types filesystem.kafka microstream-enterprise-afs-kafka one.microstream.afs.kafka one.microstream.enterprise.afs.kafka.types filesystem.mongodb microstream-enterprise-afs-mongodb one.microstream.afs.mongodb one.microstream.enterprise.afs.mongodb.types filesystem.oraclecloud microstream-enterprise-afs-oraclecloud-objectstorage one.microstream.afs.oracle.cloud.objectstorage one.microstream.enterprise.afs.oraclecloud.objectstorage.types filesystem.oraclenosql microstream-enterprise-afs-oracle-nosql one.microstream.afs.oracle.nosql one.microstream.enterprise.afs.oracle.nosql.types filesystem.redis microstream-enterprise-afs-redis one.microstream.afs.redis one.microstream.enterprise.afs.redis.types SQL was split into SQL and Enterprise-SQL: filesystem.sql microstream-afs-sql on.microstream.afs.sql one.microstream.afs.sql.types filesystem.sql microstream-enterprise-afs-sql on.microstream.afs.sql one.microstream.enterprise.afs.sql.types persistence microstream-persistence persistence.binary microstream-persistence-binary one.microstream.collections one.microstream.persistence.binary.one.microstream.collections one.microstream.entity one.microstream.persistence.binary.one.microstream.entity one.microstream.persistence.types one.microstream.persistence.binary.one.microstream.persistence.types one.microstream.reference one.microstream.persistence.binary.one.microstream.reference one.microstream.util one.microstream.persistence.binary.one.microstream.util one.microstream.java.* one.microstream.persistence.binary.java.* persistence.binary.jdk8 microstream-persistence-binary-jdk8 one.microstream.jdk8.java.util one.microstream.persistence.binary.jdk8.java.util one.microstream.memory.sun one.microstream.persistence.binary.jdk8.types storage microstream-storage storage.embedded microstream-storage-embedded one.microstream.storage.types one.microstream.storage.embedded.types storage.embedded.configuration microstream-storage-embedded-configuration one.microstream.storage.configuration one.microstream.storage.embedded.configuration.types storage.restadapter microstream-storage-restadapter one.microstream.storage.restadapter one.microstream.storage.restadapter.types, one.microstream.storage.restadapter.exceptions storage.restclient microstream-storage-restclient one.microstream.storage.restclient one.microstream.storage.restclient.types, one.microstream.storage.restclient.exceptions storage.restclient.app microstream-storage-restclient-app one.microstream.storage.restclient.app one.microstream.storage.restclient.app.types storage.restclient.jersey microstream-storage-restclient-jersey one.microstream.storage.restclient.jersey one.microstream.storage.restclient.jersey.types storage.restservice microstream-storage-restservice one.microstream.storage.restservice one.microstream.storage.restservice.types, one.microstream.storage.restservice.exceptions storage.restservice.sparkjava microstream-storage-restservice-sparkjava one.microstream.storage.restservice.sparkjava one.microstream.storage.restservice.sparkjava.types, one.microstream.storage.restservice.sparkjava.exceptions The storage and cache configuration layers are now utilizing the newly introduced general purpose configuration layer. The configuration property names have changed from camelCase to the dash-notation. Old (= 5) keyType key-type valueType value-type storageConfigurationResourceName storage-configuration-resource-name cacheLoaderFactory cache-loader-factory cacheWriterFactory cache-writer-factory expiryPolicyFactory expiry-policy-factory evictionManagerFactory eviction-manager-factory readThrough read-through writeThrough write-through storeByValue store-by-value statisticsEnabled statistics-enabled managementEnabled management-enabled The old storage configuration API is deprecated and should be migrated to the new one. The configuration property names have changed from camelCase to the dash-notation. Old (= 5) baseDirectory storage-directory deletionDirectory deletion-directory truncationDirectory truncation-directory backupDirectory backup-directory channelCount channel-count channelDirectoryPrefix channel-directory-prefix dataFilePrefix data-file-prefix dataFileSuffix data-file-suffix transactionFilePrefix transaction-file-prefix transactionFileSuffix transaction-file-suffix typeDictionaryFilename type-dictionary-file-name rescuedFileSuffix rescued-file-suffix lockFileName lock-file-name houseKeepingIntervalMs housekeeping-interval housekeepingTimeBudgetNs housekeeping-time-budget entityCacheThreshold entity-cache-threshold entityCacheTimeoutMs entity-cache-timeout dataFileMinimumSize data-file-minimum-size dataFileMaximumSize data-file-maximum-size dataFileMinimumUseRatio data-file-minimum-use-ratio dataFileCleanupHeadFile data-file-cleanup-head-file API to create full backup additional to continuous backup Simplified usage of other NIO based file systems, e.g. in-memory file systems for unit testing OSGi Headers are added in released jar files and a p2 update site is available next to the maven repository Additional storage targets AWS S3 and DynamoDB Azure Storage Hazelcast Kafka MongoDB Redis Plain JDBC: SAP HANA, PostgreSQL, MariaDB Fixed type handler incompatibilities with JDK 11 Removed wrongfully initial values in configuration for deletion and truncation directories From 4.1 no actions are necessary, for older versions see below. File System Abstraction to support a variety of storage targets. Exporter API for storage configuration. Better error handling in housekeeping, to avoid storage channel thread interruptions. Fixed XML loading bug under Android. All configuration code, which includes file paths, may be rewritten to use the new Abstract File System. For example see Storage Files or Backup. Bugfix release for projects using an old non public version. Fixed bug in type dictionary parser for old legacy type handlers Added a convenience layer for defining custom type handlers Fully automatic lazy reference managing for clearing older Lazy references as free memory gets lower. Completed optimized persistence handling for remaining types in JDK that are reasonable to appear in entity graphs. E.g. Currency, Locale, URI, URL, Path Compatibility with projects using java modules (\"jigsaw\") Added JavaDoc for common types like StorageConnection, StorageManager, StorageController, etc. Auto-recognition for CSV separator character in configuration files (e.g. legacy type mapping) JSR-107 compatible JCache provider with additional Hibernate cache region factory Storage REST Service and Client are available to access the storage data via REST, a Java-Wrapper thereof and a Web-UI Fixed a potential race condition during loading Fixed a potential race condition and robustness issue during storing StorageConnectionFoundation instance is now properly created on demand. Removed unnecessary memory consumption exponential to channel count. Improved exception messages on invalid configuration values (file sizes etc.) Workarounded a JDK bug regarding file locking when importing files (JDK exception says another process is locking the file which is outright wrong) Fixed type resolving problems when different ClassLoaders are involved. Fixed a bug that caused loading of zero-length arrays to throw an exception despite everything being fine. Various smaller bugfixes for unnecessary exceptions in special cases and state robustness after exceptions. From 2.2 no actions are necessary, for older versions see below. Removed SelfStoring without replacement since it could not be used recursively and has no advantages over just creating a static storing utility method for a certain entity. Added state validation of value type objects (e.g. String, Integer, BigDecimal, etc.) upon loading. This is hardly relevant in practice, but not having it can lead to confusing hello-world-like test applications. EmbeddedStorageManager now implements java.lang.AutoClosable. Replaced all provisional RuntimeExceptions with either PersistenceException or StorageException, depending on the architectural level the corresponding source code it located. The two technically different root handling concepts (\"default\" and \"custom\") have been consolidated in a way that they are the same thing on the API level and interchangeable, meaning no more confusion with those root exception messages. All entity fields of type transient EmbeddedStorageManager now get a reference to the used EmbeddedStorageManager instance set upon loading/updating. The interfaces around storage managing have been enhanced so that it is now equally valid to just write StorageManager instead of EmbeddedStorageManager. (An EmbeddedStorageManager \"is a\" StorageManager) Slight technical consolidation of Lazy reference handling caused the type Lazy to be moved from the package one.microstream.persistence.lazy to one.microstream.reference. The reason is that the lazy handling has actually no inherent connection to persistence or storage. It’s actually just a generic concept that can be used by those layers. See Migration Guide below on how to adjust existing projects. Fixed an off-heap memory leak when restarting the storage multiple times in the same process. Fixed a bug where changing the fields of an entity type caused an exception. This was a regression bug from fixing a similar problem for another case in version 2.1. Now, both cases work correctly. All occurrences in user code of one.microstream.persistence.lazy.Lazy have to be refactored to one.microstream.reference.Lazy. Modern IDEs provide a functionality to \"auto-import\" missing types or automatically \"organize imports\", so this should be resolved with a proverbial push of a button. Android support MicroStream is now Java-wise fully compatible with Android. Replaced all usages of java.util.File with java.nio.file.Path to allow using custom file implementations. Improved skipping functionality of Storers (see EmbeddedStorageManager#createStorer and Storer#skip). The class Lazy is now an interface to allow custom implementations. See Migration guide below. Fixed a few minor bugs in the skipping functionality of Storers. Fixed a bug where files remained locked after the storage was shut down. Fixed a bug where files remained locked after an exception in storage initialization. Enums defining an abstract method are now handled correctly. By default, all threads created by MicroStream now start with the prefix \"MicroStream-\". This can be customized by the new interface StorageThreadNameProvider. Fixed a NullPointerException in import. Fixed a bug that caused enums with a certain field layout to be loaded inconsistently. java.util.Locale is now persisted and created using Locale’s #toLanguageTag and #forLanguageTag. In the directory of an existing storage, in the TypeDictionary file (default name \"PersistenceTypeDictionary.ptd\"), all occurrences of \"one.microstream.persistence.lazy.Lazy\" must be replaced with \"one.microstream.persistence.lazy.Lazy$Default\".","title":"Changelog","component":"manual","version":"7.0","name":"changelog","url":"/manual/7.0/intro/changelog.html","titles":[{"text":"7.1","hash":"_7_1","id":1},{"text":"Features","hash":"_features","id":2},{"text":"Bugfixes","hash":"_bugfixes","id":3},{"text":"7.0","hash":"_7_0","id":4},{"text":"Features","hash":"_features_2","id":5},{"text":"Bugfixes","hash":"_bugfixes_2","id":6},{"text":"Migration guide","hash":"_migration_guide","id":7},{"text":"6.1","hash":"_6_1","id":8},{"text":"Bugfixes","hash":"_bugfixes_3","id":9},{"text":"6.0","hash":"_6_0","id":10},{"text":"Features","hash":"_features_3","id":11},{"text":"Bugfixes","hash":"_bugfixes_4","id":12},{"text":"Migration guide","hash":"_migration_guide_2","id":13},{"text":"5.0.2","hash":"_5_0_2","id":14},{"text":"Bugfixes","hash":"_bugfixes_5","id":15},{"text":"5.0.1","hash":"_5_0_1","id":16},{"text":"Bugfixes","hash":"_bugfixes_6","id":17},{"text":"5.0","hash":"_5_0","id":18},{"text":"Features","hash":"_features_4","id":19},{"text":"Bugfixes","hash":"_bugfixes_7","id":20},{"text":"Migration guide","hash":"5_0_migration-guide","id":21},{"text":"Artifacts and Packages","hash":"_artifacts_and_packages","id":22},{"text":"Configuration","hash":"_configuration","id":23},{"text":"Cache","hash":"_cache","id":24},{"text":"Storage","hash":"_storage","id":25},{"text":"4.1","hash":"_4_1","id":26},{"text":"Features","hash":"_features_5","id":27},{"text":"Bugfixes","hash":"_bugfixes_8","id":28},{"text":"Migration guide","hash":"4_1_migration-guide","id":29},{"text":"4.0","hash":"_4_0","id":30},{"text":"Features","hash":"_features_6","id":31},{"text":"Bugfixes","hash":"_bugfixes_9","id":32},{"text":"Migration guide","hash":"4_0_migration-guide","id":33},{"text":"3.0.1","hash":"_3_0_1","id":34},{"text":"Bugfixes","hash":"_bugfixes_10","id":35},{"text":"3.0","hash":"_3_0","id":36},{"text":"Features","hash":"_features_7","id":37},{"text":"Bugfixes","hash":"_bugfixes_11","id":38},{"text":"Migration guide","hash":"3_0_migration-guide","id":39},{"text":"2.2","hash":"_2_2","id":40},{"text":"Features","hash":"_features_8","id":41},{"text":"Bugfixes","hash":"_bugfixes_12","id":42},{"text":"Migration Guide","hash":"2_2_migration-guide","id":43},{"text":"2.1","hash":"_2_1","id":44},{"text":"Features","hash":"_features_9","id":45},{"text":"Bugfixes","hash":"_bugfixes_13","id":46},{"text":"Migration Guide","hash":"_migration_guide_3","id":47}]},"217":{"id":217,"text":"You can find the MicroStream libraries in the Maven Central repository. Maven [pom.xml] one.microstream microstream-storage-embedded 07.01.00-MS-GA Gradle (Groovy) [build.gradle] dependencies { implementation 'one.microstream:microstream-storage-embedded:07.01.00-MS-GA' } Gradle (Kotlin) [build.gradle.kts] dependencies { implementation(\"one.microstream:microstream-storage-embedded:07.01.00-MS-GA\") } Scala SBT [build.sbt] libraryDependencies += \"one.microstream\" % \"microstream-storage-embedded\" % \"07.01.00-MS-GA\" Apache Ivy [ivy.xml] Apache Buildr [Buildfile] define 'my-app' do compile.with 'one.microstream:microstream-storage-embedded:07.01.00-MS-GA' end Bazel [WORKSPACE] load(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\") RULES_JVM_EXTERNAL_TAG = \"2.8\" RULES_JVM_EXTERNAL_SHA = \"79c9850690d7614ecdb72d68394f994fef7534b292c4867ce5e7dec0aa7bdfad\" http_archive( name = \"rules_jvm_external\", strip_prefix = \"rules_jvm_external-%s\" % RULES_JVM_EXTERNAL_TAG, sha256 = RULES_JVM_EXTERNAL_SHA, url = \"https://github.com/bazelbuild/rules_jvm_external/archive/%s.zip\" % RULES_JVM_EXTERNAL_TAG, ) load(\"@rules_jvm_external//:defs.bzl\", \"maven_install\") maven_install( artifacts = [ \"one.microstream:microstream-storage-embedded:07.01.00-MS-GA\" ], ) Bazel [BUILD] maven_jar( name = \"microstream\", artifact = \"one.microstream:microstream-storage-embedded:07.01.00-MS-GA\" ) or in our P2 Update Site: https://repo.microstream.one/repository/update-site/07.01.00-MS-GA These are the different modules that make up MicroStream. ArtifactId Description microstream-base Collection of common utilities. Math, IO, Exceptions, Threads, String operations, and so on. microstream-cache JSR-107 JCache Provider microstream-cache-hibernate Hibernate region factory for jcache implementation microstream-communication Top-level framework for sending and receiving object graphs between Java applications. Only data is transferred, no program code (\"bytecode\"). The other application may be programmed in any language as long as it adheres to the transmitted communication protocol. Usable directly in the program code of a Java application to communicate with other applications or processes. The concrete form of persistence is left open and delivered via a specific implementation as a plugin. Examples of specific persistent forms are binary data, CSV, XML, Json. microstream-communication-binary Plugin framework for the top-level framework communication to convert the transferred object graphs to and from binary data. microstream-configuration General-purpose configuration layer. microstream-configuration-hocon Hocon extension for the configuration layer, which supports hocon, json and ini files. microstream-configuration-yaml Yaml extension for the configuration layer. microstream-afs Abstract file system (AFS) layer. microstream-afs-aws-dynamodb File system implementations for AWS DynamoDB. microstream-afs-aws-s3 File system implementations for AWS S3. microstream-afs-azure-storage File system implementations for Azure Cloud (Azure Storage). microstream-afs-blobstore Base for all blob store file system implementations. microstream-afs-hazelcast File system implementation for Hazelcast. microstream-afs-hibernate Generic file system implementation for JPA / Hibernate. microstream-afs-kafka File system implementation for Apache Kafka. microstream-afs-mongodb File system implementation for MongoDB. microstream-afs-nio File system implementation for the non-blocking IO implementation (java.nio.file) of the JDK. microstream-afs-oraclecloud-objectstorage File system implementation for Oracle Cloud Services (Object Storage). microstream-afs-oracle-coherence File system implementation for Oracle Coherence. microstream-afs-oracle-nosql File system implementation for Oracle NoSQL. microstream-afs-redis File system implementation for Redis. microstream-afs-sql File system implementation for SQL databases. microstream-persistence Base framework to convert a graph of java objects into a persistent form and back. Usable as a common, abstract base for all technologies implementing a specific persistent representation like binary data, CSV, XML or Json. From a technical point of view, storage as well as serialization is a process that puts a graph of Java instances into a persistent form. The only difference is that network communication serialization discards this persistent form while a database solution preserves it. microstream-persistence-binary Extension of the persistence base framework with a concrete implementation of the persistent form as binary data. This persistent form is superior to all text-based formats in storage and performance needs, making it the preferred method for storage and network serialization. microstream-persistence-binary-jdk8 Specialized type handlers for JDK 8 collection types. microstream-persistence-binary-jdk17 Specialized type handlers for immutable JDK 17 collection types. microstream-storage Basic framework to manage a graph of Java data persisted as binary data as a database. Can be used both to implement an embedded database solution (in the same process as the Java application) and a standalone or server-mode database solution (in a separate process). Other forms of persistence than binary data are deliberately not supported because they would not bring any noteworthy advantages but many disadvantages for the task. microstream-storage-embedded Top-level framework for use in a Java application that adds an embedded database solution to its object graphs. Can be used directly in the program code of a Java application to comfortably and efficiently persist its data. microstream-storage-embedded-configuration Layer with support for external configuration files (XML, INI) and convenience functionality to create foundations for the embedded storage. microstream-storage-restadapter Adapter for low-level storage data externalization. Used by the REST service to adapt to a MicroStream Storage. microstream-storage-restclient Abstract REST client interface, which serves as a Java wrapper for the REST API. microstream-storage-restclient-app Executable client app with web user interface, which connects to a REST service. microstream-storage-restclient-jersey REST client implementation which utilizes Jersey as a webservice framework. microstream-storage-restservice Abstract REST service interface, which uses the REST adapter to access low level storage data. microstream-storage-restservice-sparkjava REST service implementation which utilizes SparkJava and provides REST endpoints. microstream-integrations-cdi CDI Extension microstream-integrations-spring-boot Spring Boot Integration","title":"Installation","component":"manual","version":"7.0","name":"installation","url":"/manual/7.0/intro/installation.html","titles":[{"text":"Build Configuration","hash":"_build_configuration","id":1},{"text":"Modules","hash":"_modules","id":2}]},"218":{"id":218,"text":"Tested and officially supported JDKs: JDK Supported Versions Oracle JDK 8, 11, 17 OpenJDK Build by Oracle 8, 11, 17 Adoptium Temurin (HotSpot / OpenJ9) 8, 11, 17 Red Hat OpenJDK 8, 11 Amazon Corretto 8, 11, 17 Azul Zulu 8, 11, 17 Bellsoft Liberica 8, 11, 17 SapMachine 11, 17 ojdkbuild 8, 11 MicroSoft OpenJDK 11, 17 Alibaba Dragonwell 8, 11 GraalVM 20.0+ Android SDK API level 26+ In theory MicroStream is compatible with all JDK distributions from Version 8 on. Every desktop or server operating system which the supported JVMs are available for Android 8+ MicroStream’s core itself doesn’t have any dependencies to other libraries whatsoever. So you don’t have to worry about potential conflicts in your environment. This was a matter of choice of ours to keep the life of the developers using MicroStream as simple as possible. On the other hand feel free to include any dependencies you need, MicroStream will play along well, e.g. a logging framework of your choice.","title":"System Requirements","component":"manual","version":"7.0","name":"system-requirements","url":"/manual/7.0/intro/system-requirements.html","titles":[{"text":"Supported JDKs","hash":"_supported_jdks","id":1},{"text":"Supported Operating Systems","hash":"_supported_operating_systems","id":2},{"text":"Third Party Libraries","hash":"_third_party_libraries","id":3}]},"219":{"id":219,"text":"Welcome to the MicroStream Reference Manual. This manual includes concepts, instructions and examples to guide you on how to use MicroStream Storage and Cache, version 7.1. You should be familiar with the Java programming language and you should have installed your preferred Integrated Development Environment (IDE). But since you are here we guest you got that covered ;) See Changelog. The API documentation is available at https://docs.microstream.one/api/7.0/. For information on the commercial support for MicroStream see microstream.one. MicroStream is available under Eclipse Public License - v 2.0.","title":"Welcome","component":"manual","version":"7.0","name":"welcome","url":"/manual/7.0/intro/welcome.html","titles":[{"text":"What’s new in 7.1","hash":"_whats_new_in_7_1","id":1},{"text":"API Docs","hash":"_api_docs","id":2},{"text":"Support","hash":"_support","id":3},{"text":"License","hash":"_license","id":4}]},"220":{"id":220,"text":"MicroStream’s serialization engine, which is used by the storage and the cache, can be used standalone as well. It is usable as as replacement for the default Java serialization to convert objects to a binary format and vice versa. This API is part of the persistence-binary module: pom.xml one.microstream microstream-persistence-binary 07.01.00-MS-GA You can use any medium type, but for most purposes the byte array version should be sufficient, to transfer the serialized form over the transport layer of your choice. Simply create a serializer instance, optionally based on a foundation, and call the serialize and deserialize methods. final SerializerFoundation foundation = SerializerFoundation.New() .registerEntityTypes(Customer.class); final Serializer serializer = Serializer.Bytes(foundation); byte[] data = serializer.serialize(customer); Customer restored = serializer.deserialize(data);","title":"Serializer","component":"manual","version":"7.0","name":"index","url":"/manual/7.0/serializer/index.html","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"Usage","hash":"_usage","id":2}]},"221":{"id":221,"text":"By default, the continuous backup is disabled. If enabled the MicroStream instance will clone all changes to another directory. The backup is identical to the primary MicroStream storage. To enable the continuous backup just set the backup directory: With microstream-storage-embedded-configuration API: Java EmbeddedStorageManager storageManager = EmbeddedStorageConfigurationBuilder.New() .setBackupDirectory(\"A safe place\") .createEmbeddedStorageFoundation() .createEmbeddedStorageManager(); XML ... INI backupDirectory = backupDir With MicroStream foundation classes: Java NioFileSystem fileSystem = NioFileSystem.New(); StorageBackupSetup backupSetup = StorageBackupSetup.New( Sorage.BackupFileProviderBuilder(fileSystem) .setDirectory(fileSystem.ensureDirectoryPath(BACKUPDIR)) .setTruncationDirectory(fileSystem.ensureDirectoryPath(TRUNCATIONDIR)) .setDeletionDirectory(fileSystem.ensureDirectoryPath(DELETIONDIR)) .createFileProvider() ); StorageConfiguration configuration = StorageConfiguration.Builder() .setBackupSetup(backupSetup) .setStorageFileProvider(StorageLiveFileProvider.New( fileSystem.ensureDirectoryPath(WORKINGDIR) )) .createConfiguration() ;","title":"Continuous Backup","component":"manual","version":"7.0","name":"continuous-backup","url":"/manual/7.0/storage/configuration/backup/continuous-backup.html","titles":[]},"222":{"id":222,"text":"To issue a full backup of the whole storage to be executed, the EmbeddedStorageManager provides two methods named issueFullBackup. Keep in mind that this could result in a very long running operation, depending on the storage size. Although the full backup may be a valid solution in some circumstances, the continuous backup should be preferred, since it is by far more efficient. EmbeddedStorageManager storage = ...; storage.issueFullBackup( NioFileSystem.New().ensureDirectoryPath(\"full\", \"backup\", \"dir\") ); The backup can be written to any available storage target, not just the local file system.","title":"Full Backup","component":"manual","version":"7.0","name":"full-backup","url":"/manual/7.0/storage/configuration/backup/full-backup.html","titles":[]},"223":{"id":223,"text":"The Lazy class has a .clear() method. When called, the reference held in the Lazy Reference is removed and only the ID is kept so that the instance can be reloaded when needed. Important background knowledge: However, such a clear does not mean that the referenced instance immediately disappears from memory. That’s the job of the garbage collector of the JVM. The reference is even registered in another place, namely in a global directory (Swizzle Registry), in which each known instance is registered with its ObjectId in a bijective manner. This means: if you clear such a reference, but shortly thereafter the Lazy Reference is queried again, probably nothing has to be loaded from the database, but simply the reference from the Swizzle Registry is restored. Nevertheless, the Swizzle Registry is not a memory leak, because it references the instances only via WeakReference. In short, if an instance is only referenced as \"weak,\" the JVM GC will still clean it up. So that the Lazy References do not have to be managed manually, but the whole goes automatically, there is the following mechanism: Each Lazy instance has a lastTouched timestamp. Each .get() call sets it to the current time. This will tell you how long a Lazy Reference has not been used, i.e. if it is needed at all. The LazyReferenceManager audits this. It is enabled by default, with a timeout of 1,000,000 milliseconds, which is about 15 minutes. A custom manager can be set easily, which should happen before a storage is started. LazyReferenceManager.set(LazyReferenceManager.New( Lazy.Checker( Duration.ofMinutes(30).toMillis(), // timeout of lazy access 0.75 // memory quota ) ); The timeout of lazy references is set to 30 minutes, meaning references which haven’t been touched for this time are cleared. In combination with a memory quota of 0.75.","title":"Clearing Lazy References","component":"manual","version":"7.0","name":"clearing-lazy-references","url":"/manual/7.0/storage/loading-data/lazy-loading/clearing-lazy-references.html","titles":[{"text":"Manually","hash":"_manually","id":1},{"text":"Automatically","hash":"automatically","id":2}]},"224":{"id":224,"text":"In this chapter it is explained how Lazy Loading is done with MicroStream. Of course, it’s not really about the technical implementation of procrastination, but about efficiency: why bloat the limited RAM with stuff before you even need it? Classic example: The application has self-contained data areas that contain a large amount of data. The data for an area is not loaded if the area is not worked at all. Instead, you only load a tiny amount of \"head data\" for each area (name or other for displaying purposes) and the actual data only when the application really needs it. E.g. fiscal years with hundreds of thousands or millions of sales. One million revenue records for 2010, one million for 2011, for 2012, etc. In 2019, most of the time only 2019 and 2018 will be needed. The previous few, and the year 2000 sales are not of great interest anymore. Therefore: load data only when needed. Super efficient. For example let’s say the app \"MyBusinessApp\" has a root instance class, looking like this: public class MyBusinessApp { // ... private HashMap businessYears = new HashMap<>(); // ... } The business year hold the turnovers: public class BusinessYear { // ... private ArrayList turnovers = new ArrayList<>(); // ... } This approach would be a problem: During initialization, the root instance would be loaded, from there its HashMap with all BusinessYear instances, each with its ArrayList and thus all conversions. For all years. 20 years of approximately 1 million sales makes 20 million entities, which are pumped directly into the RAM at the start. It does not matter if someone needs it or not. We don’t want it that way. It would be nice if you could simply add a \"lazy\" to the turnover list. And that’s exactly how it works: public class BusinessYear { // ... private Lazy> turnovers = ...; // we will get to that // ... } And bingo, the turnovers are now loaded lazily. Of course, this is no longer an ArrayList field, which is now magically loaded lazy, but this is now a Lazy field and the instances of this type are typed generically to ArrayList . Lazy is just a simple class whose instances internally hold an ID and a reference to the actual thing (here the ArrayList instance). If the internal reference is zero, the reserved ID is used to reload it. If it is not null, it is simply returned. So just a reference intermediate instance. Similar to the JDK’s WeakReference, just not JVM-weak, but storage-lazy. What do you have to do now to get the actual ArrayList instance? ArrayList turnovers = this.turnovers.get(); Just as with WeakReference, or simply as one would expect from a reference intermediate type in general: a simple get method. The .get() call reloads the data as needed. But you do not want to mess around with that yourself. No \"SELECT bla FROM turnovers WHERE ID =\" + this.turnovers.getId(). Since you want to program your application you don' t have to mess around with low-level database ID-loading stuff. That’s what the MicroStream Code does internally. You do not even need to access the ID, you just have to say \"get!\". That’s it. There are different strategies, what you write here. Analogous to the code example before it would be simply: private Lazy> turnovers = Lazy.Reference(new ArrayList<>()); So always a new ArrayList instance, wrapped in a Lazy instance. If the actual ArrayList reference should be null at first, it works the same way: private Lazy> turnovers = Lazy.Reference(null); The this.turnovers.get() also just always returns null. Completely transparent. But you could also do this: private Lazy> turnovers = null; If there is no list, then you do not make any intermediate reference instance for any list. A separate instance for null is indeed a bit …​ meh. But that has a nasty problem elsewhere: this.turnovers.get() does not work then. Because NullPointerException. Anytime you need to write this here, the readability of code is not exactly conducive: return this.turnovers == null ? null : this.turnovers.get(); But there is a simple solution: Just move this check into a static utility method. Just like that: return Lazy.get(this.turnovers); This is the same .get(), just with a static null-check around it. This always puts you on the safe side. For Lazy Loading, simply wrap Lazy<> around the actual field and then call .get() or maybe better Lazy.get(...). It’s as simple as that. The full example can be found on GitHub. Why do you have to replace your actual instance with a lazy loading intermediate instance and fiddle around with generics? Why is not something like this: @Lazy private ArrayList turnovers = new ArrayList<>(); Put simply: If it were just that it would be bare Java bytecode for accessing an ArrayList. There would be no way for a middleware library to get access and look it up and perhaps reload it. What’s written there is an ArrayList reference. There is no lazy anymore. Either, the instance is null, or it is not null. If you wanted to reach in there, you would have to start with bytecode manipulation. Technically possible, but something you really don’t want in your application. So there must always be some form of intermediary. Hibernate solves this through its own collection implementations that do lazy loading internally. Although the lazy loading is nicely hidden in some way (or not, if you need an annotation for that), it also comes with all sorts of limitations. You can only use interfaces instead of concrete classes for collections. At first, the instance is not the one you dictate, the code becomes non-transparent and difficult to debug, you have to use a collection, even if it’s just a single instance, and so on. You want to be able to write anything you want and you want full insight and control (debugability, etc.) over the code. All this can be done with the tiny Lazy Interim Reference class. No restrictions, no incomprehensible \"magic\" under the hood (proxy instances and stuff) and also usable for individual instances.","title":"Lazy Loading","component":"manual","version":"7.0","name":"index","url":"/manual/7.0/storage/loading-data/lazy-loading/index.html","titles":[{"text":"What about the \"…​\" ?","hash":"_what_about_the","id":1},{"text":"In Short","hash":"_in_short","id":2},{"text":"Side Note","hash":"_side_note","id":3}]},"225":{"id":225,"text":"For convenience MicroStream provides Null-safe static access methods for lazy references. Method Description Lazy.get(Lazy) Gets the lazy referenced object, loads it if required. return value: null if the lazy reference itself is null otherwise the referenced object Lazy.peek(Lazy) Get the lazy referenced object if it is loaded, no lazy loading is done. If the object has been unloaded before peek will return null. return value: null if the lazy reference itself is null otherwise the current reference without on-demand loading Lazy.clear(Lazy) Clears the lazy reference if it is not null. All lazy references track the time of their last access (creation or querying) as a timestamp in milliseconds. If an instance is deemed timed out by a LazyReferenzManager its subject gets cleared. The timestamp is currently not public accessible.","title":"Touched Timestamp, Null-Safe Variant","component":"manual","version":"7.0","name":"touched-timestamp-null-safe-variant","url":"/manual/7.0/storage/loading-data/lazy-loading/touched-timestamp-null-safe-variant.html","titles":[{"text":"Null-safe Lazy Reference Access","hash":"_null_safe_lazy_reference_access","id":1},{"text":"Touched Timestamp","hash":"_touched_timestamp","id":2}]},"226":{"id":226,"text":"one.microstream microstream-afs-aws-dynamodb 07.01.00-MS-GA DynamoDbClient client = ...; BlobStoreFileSystem fileSystem = BlobStoreFileSystem.New( DynamoDbConnector.Caching(client) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration AWS DynamoDB can be set as follows. microstream-storage.properties storage-filesystem.aws.dynamodb.credentials.type=static storage-filesystem.aws.dynamodb.credentials.access-key-id=my-access-key-id storage-filesystem.aws.dynamodb.credentials.secret-acces-key=my-secret-access-key storage-filesystem.aws.dynamodb.credentials.region=us-east-1 Property Description endpoint-override The endpoint with which the SDK should communicate. region Configure the region with which the SDK should communicate. If this is not specified, the SDK will attempt to identify the endpoint automatically using the following logic: Check the 'aws.region' system property for the region. Check the 'AWS_REGION' environment variable for the region. Check the {user.home}/.aws/credentials and {user.home}/.aws/config files for the region. If running in EC2, check the EC2 metadata service for the region. credentials.type The type of the credentials provider. Supported values are: \"environment-variables\" Credentials will be loaded from the AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY and AWS_SESSION_TOKEN environment variables. \"system-properties\" Credentials will be loaded from the aws.accessKeyId, aws.secretAccessKey and aws.sessionToken system properties. \"static\" Credentials will be loaded from the credentials.access-key-id and credentials.secret-access-key properties. \"default\" Credentials provider chain that looks for credentials in this order: Java System Properties - aws.accessKeyId and aws.secretKey Environment Variables - AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY Credential profiles file at the default location (~/.aws/credentials) shared by all AWS SDKs and the AWS CLI Credentials delivered through the Amazon EC2 container service if AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\" environment variable is set and security manager has permission to access the variable, Instance profile credentials delivered through the Amazon EC2 metadata service credentials.access-key-id The access key id, used when \"credentials.type\" is \"static\". credentials.secret-access-key The secret access key, used when \"credentials.type\" is \"static\".","title":"AWS DynamoDB","component":"manual","version":"7.0","name":"aws-dynamodb","url":"/manual/7.0/storage/storage-targets/blob-stores/aws-dynamodb.html","titles":[{"text":"Configuration","hash":"_configuration","id":1},{"text":"Supported properties","hash":"_supported_properties","id":2}]},"227":{"id":227,"text":"one.microstream microstream-afs-aws-s3 07.01.00-MS-GA S3Client client = ...; BlobStoreFileSystem fileSystem = BlobStoreFileSystem.New( S3Connector.Caching(client) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration AWS S3 can be set as follows. microstream-storage.properties storage-filesystem.aws.s3.credentials.type=static storage-filesystem.aws.s3.credentials.access-key-id=my-access-key-id storage-filesystem.aws.s3.credentials.secret-acces-key=my-secret-access-key storage-filesystem.aws.s3.credentials.region=us-east-1 Property Description endpoint-override The endpoint with which the SDK should communicate. region Configure the region with which the SDK should communicate. If this is not specified, the SDK will attempt to identify the endpoint automatically using the following logic: Check the 'aws.region' system property for the region. Check the 'AWS_REGION' environment variable for the region. Check the {user.home}/.aws/credentials and {user.home}/.aws/config files for the region. If running in EC2, check the EC2 metadata service for the region. credentials.type The type of the credentials provider. Supported values are: \"environment-variables\" Credentials will be loaded from the AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY and AWS_SESSION_TOKEN environment variables. \"system-properties\" Credentials will be loaded from the aws.accessKeyId, aws.secretAccessKey and aws.sessionToken system properties. \"static\" Credentials will be loaded from the credentials.access-key-id and credentials.secret-access-key properties. \"default\" Credentials provider chain that looks for credentials in this order: Java System Properties - aws.accessKeyId and aws.secretKey Environment Variables - AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY Credential profiles file at the default location (~/.aws/credentials) shared by all AWS SDKs and the AWS CLI Credentials delivered through the Amazon EC2 container service if AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\" environment variable is set and security manager has permission to access the variable, Instance profile credentials delivered through the Amazon EC2 metadata service credentials.access-key-id The access key id, used when \"credentials.type\" is \"static\". credentials.secret-access-key The secret access key, used when \"credentials.type\" is \"static\".","title":"AWS S3","component":"manual","version":"7.0","name":"aws-s3","url":"/manual/7.0/storage/storage-targets/blob-stores/aws-s3.html","titles":[{"text":"Configuration","hash":"_configuration","id":1},{"text":"Supported properties","hash":"_supported_properties","id":2}]},"228":{"id":228,"text":"one.microstream microstream-afs-azure-storage 07.01.00-MS-GA BlobServiceClient client = ...; BlobStoreFileSystem fileSystem = BlobStoreFileSystem.New( AzureStorageConnector.Caching(client) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration Azure Storage can be set as follows. microstream-storage.properties storage-filesystem.azure.storage.credentials.type=basic storage-filesystem.azure.storage.credentials.username=user storage-filesystem.azure.storage.credentials.password=secret Property Description endpoint Sets the blob service endpoint, additionally parses it for information (SAS token). connection-string Sets the connection string to connect to the service. encryption-scope Sets the encryption scope that is used to encrypt blob contents on the server. credentials.type The type of the credentials provider. Supported values are: \"basic\" Credentials will be loaded from the credentials.username and credentials.password properties. \"shared-key\" Credentials will be loaded from the credentials.account-name and credentials.account-key properties. credentials.username The username, used when \"credentials.type\" is \"basic\". credentials.password The password, used when \"credentials.type\" is \"basic\". credentials.account-name The account name, used when \"credentials.type\" is \"shared-key\". credentials.account-key The account key, used when \"credentials.type\" is \"shared-key\".","title":"Azure Storage","component":"manual","version":"7.0","name":"azure-storage","url":"/manual/7.0/storage/storage-targets/blob-stores/azure-storage.html","titles":[{"text":"Configuration","hash":"_configuration","id":1},{"text":"Supported properties","hash":"_supported_properties","id":2}]},"229":{"id":229,"text":"one.microstream microstream-afs-hazelcast 07.01.00-MS-GA HazelcastInstance hazelcast = ...; BlobStoreFileSystem fileSystem = BlobStoreFileSystem.New( HazelcastConnector.Caching(cache) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration Hazelcast can be set as follows. microstream-storage.properties storage-filesystem.hazelcast.configuration=path-to-hazelcast-configuration-file Property Description hazelcast.configuration Supported values: \"default\" It tries to load Hazelcast configuration from a list of well-known locations, and then applies overrides found in environment variables/system properties. When no location contains Hazelcast configuration then it returns default. \"classpath:path-to-hazelcast-configuration-file\" When the \"classpath:\" prefix is used, the file is loaded from a classpath resource. a valid URL Creates new Config which is loaded from the given URL and uses the System.properties to replace variables. a file path Creates a Config based on a Hazelcast file and uses the System.properties to resolve variables.","title":"Hazelcast","component":"manual","version":"7.0","name":"hazelcast","url":"/manual/7.0/storage/storage-targets/blob-stores/hazelcast.html","titles":[{"text":"Configuration","hash":"_configuration","id":1},{"text":"Supported properties","hash":"_supported_properties","id":2}]},"230":{"id":230,"text":"one.microstream microstream-afs-kafka 07.01.00-MS-GA Properties properties = new Properties(); properties.setProperty( CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9093\" ); BlobStoreFileSystem fileSystem = BlobStoreFileSystem.New( KafkaConnector.Caching(properties) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration Kafka can be set as follows. microstream-storage.properties storage-filesystem.kafka-properties.bootstrap.servers=localhost:9093 All supported properties of Kafka, see https://kafka.apache.org/documentation/","title":"Kafka","component":"manual","version":"7.0","name":"kafka","url":"/manual/7.0/storage/storage-targets/blob-stores/kafka.html","titles":[{"text":"Configuration","hash":"_configuration","id":1},{"text":"Supported properties","hash":"_supported_properties","id":2}]},"231":{"id":231,"text":"one.microstream microstream-afs-oraclecloud-objectstorage 07.01.00-MS-GA ObjectStorageClient client = ...; BlobStoreFileSystem fileSystem = BlobStoreFileSystem.New( OracleCloudObjectStorageConnector.Caching(client) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration Oracle Cloud Object Storage can be set as follows. microstream-storage.properties storage-filesystem.oraclecloud.object-storage.config-file.profile=production storage-filesystem.oraclecloud.object-storage.region=us-phoenix-1 Property Description config-file.path The path of the config file, if not set the default is used: \"~/.oci/config\" config-file.profile The configuration profile to use, if not set \"DEFAULT\" is used. config-file.charset The encoding of the config file. client.connection-timeout-millis The max time to wait for a connection, in millis. Default is 10000. client.read-timeout-millis The max time to wait for data, in millis. Default is 60000. client.max-async-threads The max number of async threads to use. Default is 50. region Sets the region to call (ex, 'us-phoenix-1'). endpoint Sets the endpoint to call (ex, https://www.example.com).","title":"Oracle Cloud Object Storage","component":"manual","version":"7.0","name":"oracle-cloud-object-storage","url":"/manual/7.0/storage/storage-targets/blob-stores/oracle-cloud-object-storage.html","titles":[{"text":"Configuration","hash":"_configuration","id":1}]},"232":{"id":232,"text":"one.microstream microstream-afs-oracle-coherence 07.01.00-MS-GA NamedCache cache = CacheFactory.getCache(\"cache-name\"); BlobStoreFileSystem fileSystem = BlobStoreFileSystem.New( CoherenceConnector.Caching(cache) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration Coherence can be set as follows. microstream-storage.properties storage-filesystem.oracle.coherence.cache-name=my-cache Property Description cache-name The name of the cache which is used to retrieve the named cache from the cache factory. cache-config It is used to specify a custom cache configuration deployment descriptor to be used instead of the configured default cache configuration deployment descriptor.","title":"Oracle Coherence","component":"manual","version":"7.0","name":"oracle-coherence","url":"/manual/7.0/storage/storage-targets/blob-stores/oracle-coherence.html","titles":[{"text":"Configuration","hash":"_configuration","id":1}]},"233":{"id":233,"text":"one.microstream microstream-afs-redis 07.01.00-MS-GA String redisUri = \"redis://localhost:6379/0\"; BlobStoreFileSystem fileSystem = BlobStoreFileSystem.New( RedisConnector.Caching(redisUri) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration Redis can be set as follows. microstream-storage.properties storage-filesystem.redis.uri=redis://localhost:6379/0 Property Description redis.uri The RedisURI contains the host/port and can carry authentication/database details. On a successful connect you get authenticated, and the database is selected afterward. This applies also after re-establishing a connection after a connection loss.","title":"Redis","component":"manual","version":"7.0","name":"redis","url":"/manual/7.0/storage/storage-targets/blob-stores/redis.html","titles":[{"text":"Configuration","hash":"_configuration","id":1}]},"234":{"id":234,"text":"one.microstream microstream-afs-sql 07.01.00-MS-GA org.mariadb.jdbc mariadb-java-client 2.7.1 MariaDbDataSource dataSource = new MariaDbDataSource(); dataSource.setUrl(\"jdbc:mysql://host:3306/mydb\"); dataSource.setUser(\"user\"); dataSource.setPassword(\"secret\"); SqlFileSystem fileSystem = SqlFileSystem.New( SqlConnector.Caching( SqlProviderMariaDb.New(dataSource) ) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration MariaDB can be set as follows. Please note that you have to define a data source provider. microstream-storage.properties storage-filesystem.sql.mariadb.data-source-provider=com.sample.MyDataSourceProvider storage-filesystem.sql.mariadb.catalog=mycatalog storage-filesystem.sql.mariadb.schema=myschema storage-filesystem.sql.mariadb.url=jdbc:mysql://host:3306/mydb storage-filesystem.sql.mariadb.user=username storage-filesystem.sql.mariadb.password=secret MyDataSourceProvider.java package com.sample; import one.microstream.afs.sql.types.SqlDataSourceProvider public class MyDataSourceProvider implements SqlDataSourceProvider { public DataSource provideDataSource(Configuration configuration) { String url = configuration.get(\"url\"); String user = configuration.get(\"user\"); String password = configuration.get(\"password\"); // TODO: return data source of your choice, e.g. from a connection pool } }","title":"MariaDB","component":"manual","version":"7.0","name":"mariadb","url":"/manual/7.0/storage/storage-targets/sql-databases/mariadb.html","titles":[{"text":"Configuration","hash":"_configuration","id":1}]},"235":{"id":235,"text":"one.microstream microstream-afs-sql 07.01.00-MS-GA com.oracle.database.jdbc ojdbc8 19.7.0.0 OracleDataSource dataSource = new OracleDataSource(); dataSource.setURL(\"jdbc:oracle:thin:@localhost:1521/db\"); dataSource.setUser(\"user\"); dataSource.setPassword(\"secret\"); SqlFileSystem fileSystem = SqlFileSystem.New( SqlConnector.Caching( SqlProviderOracle.New(dataSource) ) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration Oracle can be set as follows. Please note that you have to define a data source provider. microstream-storage.properties storage-filesystem.sql.oracle.data-source-provider=com.sample.MyDataSourceProvider storage-filesystem.sql.oracle.catalog=mycatalog storage-filesystem.sql.oracle.schema=myschema storage-filesystem.sql.oracle.url=jdbc:oracle:thin:@localhost:1521/db storage-filesystem.sql.oracle.user=username storage-filesystem.sql.oracle.password=secret MyDataSourceProvider.java package com.sample; import one.microstream.afs.sql.types.SqlDataSourceProvider public class MyDataSourceProvider implements SqlDataSourceProvider { public DataSource provideDataSource(Configuration configuration) { String url = configuration.get(\"url\"); String user = configuration.get(\"user\"); String password = configuration.get(\"password\"); // TODO: return data source of your choice, e.g. from a connection pool } }","title":"Oracle","component":"manual","version":"7.0","name":"oracle","url":"/manual/7.0/storage/storage-targets/sql-databases/oracle.html","titles":[{"text":"Configuration","hash":"_configuration","id":1}]},"236":{"id":236,"text":"one.microstream microstream-afs-sql 07.01.00-MS-GA org.postgresql postgresql 42.2.14 PGSimpleDataSource dataSource = new PGSimpleDataSource(); dataSource.setUrl(\"jdbc:postgresql://localhost:5432/mydb\"); dataSource.setUser(\"postgres\"); dataSource.setPassword(\"secret\"); SqlFileSystem fileSystem = SqlFileSystem.New( SqlConnector.Caching( SqlProviderPostgres.New(dataSource) ) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration PostgreSQL can be set as follows. Please note that you have to define a data source provider. microstream-storage.properties storage-filesystem.sql.postgres.data-source-provider=com.sample.MyDataSourceProvider storage-filesystem.sql.postgres.catalog=mycatalog storage-filesystem.sql.postgres.schema=myschema storage-filesystem.sql.postgres.url=jdbc:postgresql://localhost:5432/mydb storage-filesystem.sql.postgres.user=username storage-filesystem.sql.postgres.password=secret MyDataSourceProvider.java package com.sample; import one.microstream.afs.sql.types.SqlDataSourceProvider public class MyDataSourceProvider implements SqlDataSourceProvider { public DataSource provideDataSource(Configuration configuration) { String url = configuration.get(\"url\"); String user = configuration.get(\"user\"); String password = configuration.get(\"password\"); // TODO: return data source of your choice, e.g. from a connection pool } }","title":"PostgreSQL","component":"manual","version":"7.0","name":"postgresql","url":"/manual/7.0/storage/storage-targets/sql-databases/postgresql.html","titles":[{"text":"Configuration","hash":"_configuration","id":1}]},"237":{"id":237,"text":"one.microstream microstream-afs-sql 07.01.00-MS-GA org.xerial sqlite-jdbc 3.32.3 SQLiteDataSource dataSource = new SQLiteDataSource(); dataSource.setUrl(\"jdbc:sqlite:microstreamdb\"); SqlFileSystem fileSystem = SqlFileSystem.New( SqlConnector.Caching( SqlProviderSqlite.New(dataSource) ) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration SQLite can be set as follows. Please note that you have to define a data source provider. microstream-storage.properties storage-filesystem.sql.sqlite.data-source-provider=com.sample.MyDataSourceProvider storage-filesystem.sql.sqlite.catalog=mycatalog storage-filesystem.sql.sqlite.schema=myschema storage-filesystem.sql.sqlite.url=jdbc:sqlite:microstreamdb MyDataSourceProvider.java package com.sample; import one.microstream.afs.sql.types.SqlDataSourceProvider public class MyDataSourceProvider implements SqlDataSourceProvider { public DataSource provideDataSource(Configuration configuration) { String url = configuration.get(\"url\"); // TODO: return data source of your choice, e.g. from a connection pool } }","title":"SQLite","component":"manual","version":"7.0","name":"sqlite","url":"/manual/7.0/storage/storage-targets/sql-databases/sqlite.html","titles":[{"text":"Configuration","hash":"_configuration","id":1}]},"238":{"id":238,"text":"The default way to configure a JCache provider is to use the class javax.cache.configuration.MutableConfiguration. This is mostly used to avoid provider specific code. If you want to use all of MicroStream’s Cache features, you can use our configuration implementation: one.microstream.cache.types.CacheConfiguration CachingProvider provider = Caching.getCachingProvider(); CacheManager cacheManager = provider.getCacheManager(); CacheConfiguration configuration = CacheConfiguration .Builder(Integer.class, String.class) .storeByValue() .expiryPolicyFactory(CreatedExpiryPolicy.factoryOf(Duration.ONE_MINUTE)) .build(); Cache cache = cacheManager.createCache(\"jCache\", configuration); cache.put(1, \"Hello World\"); String value = cache.get(1); To read an external configuration use CacheConfigurationLoader and CacheConfigurationParser or the load*() methods of CacheConfiguration. CacheConfiguration configuration = CacheConfiguration .load(\"cache-config.properties\", Integer.class, String.class); If you just use CacheConfiguration.load() the default configuration file is used, which is either a file in the classpath root named microstream-cache.properties, or the path configured via the system property microstream.cache.configuration.path.","title":"Configuration","component":"manual","version":"7.0","name":"index","url":"/manual/7.0/cache/configuration/index.html","titles":[]},"239":{"id":239,"text":"These are the available properties of the CacheConfiguration type. The property names are used in the external configuration files. They can be found as constants in CacheConfigurationPropertyNames. Property Type Description key-type Fully Qualified Class Name Determines the required type of keys for the Cache. value-type Fully Qualified Class Name Determines the required type of values for the Cache. storage-configuration-resource-name absolute or relative file name Path for the storage configuration for the backing store. cache-loader-factory Fully Qualified Class Name of JCache factory implementation for a javax.cache.integration.CacheLoader A CacheLoader should be configured for \"Read Through\" caches to load values when a cache miss occurs. cache-writer-factory Fully Qualified Class Name of JCache factory implementation for a javax.cache.integration.CacheWriter A CacheWriter is used for write-through to an external resource. expiry-policy-factory Fully Qualified Class Name of JCache factory implementation for a javax.cache.expiry.ExpiryPolicy Determines when cache entries will expire based on creation, access and modification operations. eviction-manager-factory Fully Qualified Class Name of JCache factory implementation for a one.microstream.cache.types.EvictionManager Clears cache entries using a policy. Works interval-based or on entry creation. read-through boolean parsed according to the java.lang.Boolean.parseBoolean() rules When in \"read-through\" mode, cache misses that occur due to cache entries not existing as a result of performing a \"get\" will appropriately cause the configured CacheLoader to be invoked. write-through boolean parsed according to the java.lang.Boolean.parseBoolean() rules When in \"write-through\" mode, cache updates that occur as a result of performing \"put\" operations will appropriately cause the configured CacheWriter to be invoked. store-by-value boolean parsed according to the java.lang.Boolean.parseBoolean() rules When a cache is storeByValue, any mutation to the key or value does not affect the key of value stored in the cache. statistics-enabled boolean parsed according to the java.lang.Boolean.parseBoolean() rules Checks whether statistics collection is enabled in this cache. management-enabled boolean parsed according to the java.lang.Boolean.parseBoolean() rules Checks whether management is enabled on this cache.","title":"Properties","component":"manual","version":"7.0","name":"properties","url":"/manual/7.0/cache/configuration/properties.html","titles":[]},"240":{"id":240,"text":"MicroStream’s storage can be used as a backing store for the cache. It functions as a CacheWriter as well as a CacheReader, depending on the writeThrough and readThrough configuration. Per default it is used for both. EmbeddedStorageManager storageManager = EmbeddedStorage.start(); CachingProvider provider = Caching.getCachingProvider(); CacheManager cacheManager = provider.getCacheManager(); CacheConfiguration configuration = CacheConfiguration .Builder(Integer.class, String.class, \"my-cache\", storageManager) .build(); Cache cache = cacheManager.createCache(\"jCache\", configuration); If you prefer an external configuration, you can link the storage configuration: cache-config.properties key-type = java.lang.Integer value-type = java.lang.String read-through = true write-through = true storage-configuration-resource-name = microstream-storage.properties microstream-storage.properties storage-directory = ~/cache-data channel-count = 4 Or you can embed the storage configuration within the cache configuration using the storage. prefix: cache-config.properties key-type = java.lang.Integer value-type = java.lang.String read-through = true write-through = true storage.storage-directory = ~/cache-data storage.channel-count = 4 Since the validity of a Cache entry is only determined when the value is retrieved, the expiry durations are not always respected when using the StorageManager when the application is restarted. An example makes this clear. Suppose we have defined a cache where the ExpiryPolicy is set to 1 Minute. When we create an entry in this cache and we did not request the cache entry after the 1-minute expiry before we do shut down the application. When we start up the application again, When we request the cache entry, it is loaded from the MicroStream Storage Manager and 'created' with a new expiry of 1 minute. This means that even if the entry was already created more than 1 minute ago (even when we only take into consideration the application uptime), the entry is still returned to the calling code. application.properties spring.jpa.properties.hibernate.cache.microstream.missing_cache_strategy = create spring.jpa.properties.hibernate.cache.microstream.readThrough = true spring.jpa.properties.hibernate.cache.microstreamwriteThrough = true spring.jpa.properties.hibernate.cache.microstream.storage.baseDirectory = ~/cache-data spring.jpa.properties.hibernate.cache.microstream.storage.channelCount = 4 spring.jpa.properties.hibernate.cache.region.factory_class = one.microstream.cache.hibernate.types.CacheRegionFactory spring.jpa.properties.hibernate.cache.use_query_cache = true spring.jpa.properties.hibernate.cache.use_second_level_cache = true application.yml spring: jpa: properties: hibernate: cache: microstream: missing_cache_strategy: create readThrough: true writeThrough: true storage: baseDirectory: ~/cache-data channelCount: 4 region: factory_class: one.microstream.cache.hibernate.types.CacheRegionFactory use_query_cache: true use_second_level_cache: true","title":"Storage","component":"manual","version":"7.0","name":"storage","url":"/manual/7.0/cache/configuration/storage.html","titles":[{"text":"Cache expiry and StorageManager","hash":"_cache_expiry_and_storagemanager","id":1},{"text":"Spring example","hash":"_spring_example","id":2}]},"241":{"id":241,"text":"MicroStream offers a Hibernate cache region factory, which can be found in the cache.hibernate module. pom.xml one.microstream microstream-cache-hibernate 07.01.00-MS-GA The region factory’s class name is one.microstream.cache.hibernate.types.CacheRegionFactory. It is configured via the property hibernate.cache.region.factory_class. Depending on your environment it can be configured in different ways. If you use a good old persistence.xml, set the property there: persistence.xml org.hibernate.jpa.HibernatePersistenceProvider ... ... ... application.properties spring.jpa.properties.hibernate.cache.microstream.missing_cache_strategy=create spring.jpa.properties.hibernate.cache.region.factory_class=one.microstream.cache.hibernate.types.CacheRegionFactory spring.jpa.properties.hibernate.cache.use_query_cache=true spring.jpa.properties.hibernate.cache.use_second_level_cache=true spring.jpa.properties.javax.persistence.sharedCache.mode=ALL application.yml spring: jpa: properties: hibernate: cache: microstream: missing_cache_strategy: create region: factory_class: one.microstream.cache.hibernate.types.CacheRegionFactory use_query_cache: true use_second_level_cache: true javax: persistence: sharedCache: mode: ALL","title":"Hibernate Second Level Cache","component":"manual","version":"7.0","name":"hibernate-second-level-cache","url":"/manual/7.0/cache/use-cases/hibernate-second-level-cache.html","titles":[{"text":"Spring Example","hash":"_spring_example","id":1}]},"242":{"id":242,"text":"First of all add the MicroStream Cache dependency: pom.xml one.microstream microstream-cache 07.01.00-MS-GA The core caching abstraction provided by Spring comes in the spring-context module. org.springframework spring-context ... If you use Spring Boot, then add the spring-boot-starter-cache package to add the caching dependencies: org.springframework.boot spring-boot-starter-cache To enable caching, Spring makes good use of annotations, much like enabling any other configuration level feature in the framework. The caching feature can be enabled by simply providing a cache setup component. @SpringBootApplication @EnableCaching public class MyApplication @Component public class CachingSetup implements JCacheManagerCustomizer { @Override public void customize(CacheManager cacheManager) { cacheManager.createCache(\"my_cache\", new MutableConfiguration<>() .setExpiryPolicyFactory(CreatedExpiryPolicy.factoryOf(new Duration(SECONDS, 10000))) .setStoreByValue(true) .setStatisticsEnabled(true)); } } More information about the Spring Cache Abstraction: https://docs.spring.io/spring/docs/current/spring-framework-reference/integration.html#cache","title":"Spring Cache","component":"manual","version":"7.0","name":"spring-cache","url":"/manual/7.0/cache/use-cases/spring-cache.html","titles":[]},"243":{"id":243,"text":"MicroStream comes with a CDI extension which allows accessing the functionality of MicroStream through the usage of a few annotations. It is available within this artifact: pom.xml one.microstream microstream-integrations-cdi 07.01.00-MS-GA The integration requires the javax namespace and requires a CDI 2.0 implementation or higher and an Eclipse MicroProfile Config 2.0 implementation or higher. The configuration of the StorageManager can be done using key/value pairs that are provided by MicroProfile Config. The configuration keys must be prefixed by one.microstream one.microstream.storage-directory=/opt/data/microstream one.microstream.channel-count=2 Since the - character is not supported in some sources (like the environment variables), you can also define the configuration keys using the . character. one.microstream.storage.directory=/opt/data/microstream one.microstream.channel.count=2 Besides that, the regular MicroProfile Config rules about keys are applied (since we are using MicroProfile Config directly, see specification). The configured and started StorageManager is a CDI bean and thus can be injected or retrieved programmatically. @Inject private StorageManager storageManager; public void someMethod() { StorageManager storageManager = CDI.current().select(StorageManager.class).get(); } The StorageManager configuration can be customized by CDI beans that implement the interface one.microstream.integrations.cdi.types.config.EmbeddedStorageFoundationCustomizer. The customize method is called with an EmbeddedStorageFoundation which allows you to fully customize the StorageManager that will be created. You can for example, add the specific Type Handlers for JDK 8 as described on the documentation. After the StorageManager is created, the CDI beans that implement one.microstream.integrations.cdi.types.config.StorageManagerInitializer are called. You have the opportunity to perform actions on the StorageManager or root object. Following rules apply to the StorageManager that is passed to the initialize method of the interface. The StorageManager is already started unless you specified the configuration value one.microstream.autoStart=false. If you have used the @Storage annotation on a class, the StorageManager is already associated with an instance of that class as the Root object. There is a second option to configure and retrieve the StorageManager, and it makes use of the MicroStream functionality to read the configuration from any file. @Inject @ConfigProperty(name = \"one.microstream.ini\") private StorageManager storageManager; The above construct makes use of the MicroProfile Config functionality that you convert the value of the key one.microstream.ini and convert it into a StorageManager. The value of the key is expected to point to an existing file. The formats XML, INI, and properties are supported. The StorageManager is also fully configured and started just as you would use it when using the first option of configuration. If you define it multiple times, within different beans for example, you always receive the same instance of the StorageManager when you specify the same value for the name member of the @ConfigProperty annotation. This way, you can define and use multiple _StorageManager_s within your application. The customizer and initializer features described earlier as CDI beans implementing a specific interface,are also available when you use the MicroProfile Config annotation (@ConfigProperty). Since you can define multiple StorageManager_s this way, you can distinguish between them based on the _database name. The database name can be set by using the following property within the configuration file (example makes use of the properties format, but it is also supported in the other formats) database-name=theName If this property is not specified, the value of the MicroProfile config key (used within the name member of @ConfigProperty) is used. Within the customizer and initializer you can use this to perform the required actions based on the instance you receive. EmbeddedStorageFoundation.getDataBaseName(); StorageManager.databaseName(); The root object can be indicated by using the @Storage annotation on the class. This annotation converts the POJO into a CDI bean (there is no need to use any scope-defining annotation) with Application Scope. This is only supported when you inject the StorageManager without making use of the MicroProfile Config @ConfigProperty annotation. Besides converting it into a CDI bean, any field injection within this class is also resolved. The integration also defines the instance of the class that is created as the root object (StorageManager.setRoot()) and stores the initial value (StorageManager.storeRoot()) when storageManager does not have a root object assigned yet (this happens only the very first time when you start up your application and the storage doesn’t contain any data yet) The POJO must have a (default) no-argument constructor so that the integration can create an instance of it. You can only annotate 1 class with the @Storage annotation, if you have marked multiple, the deployment of your application will fail at the CDI validation phase.","title":"CDI Extension","component":"manual","version":"7.0","name":"cdi","url":"/manual/7.0/misc/integrations/cdi.html","titles":[{"text":"Configuration","hash":"_configuration","id":1},{"text":"Root object","hash":"_root_object","id":2}]},"244":{"id":244,"text":"The Helidon integration for MicroStream ships with the official Helidon releases, and is hosted at Oracle’s Github repository. For more information see the Helidon Github Repository. Official Helidon site: https://helidon.io","title":"Helidon Integration","component":"manual","version":"7.0","name":"helidon","url":"/manual/7.0/misc/integrations/helidon.html","titles":[]},"245":{"id":245,"text":"Various MicroStream integrations are currently available. Integrations created by MicroStream are Spring Boot Jakarta EE CDI And MicroStream is also integrated by the following vendors Helidon Micronaut","title":"Integrations","component":"manual","version":"7.0","name":"index","url":"/manual/7.0/misc/integrations/index.html","titles":[]},"246":{"id":246,"text":"MicroStream comes with a Spring Boot integration. It is available within this artifact: pom.xml one.microstream microstream-integrations-spring-boot 07.01.00-MS-GA Official Spring Boot site: https://spring.io/projects/spring-boot The integration requires Spring Boot 2.x (with version 2.1.0.RELEASE being the minimal supported one). Since version 8.0.0, the StorageManager that is instantiated by the integration is also started where the previous version of the integration did not start the manager. You can have the old behaviour of a StorageManager that is not started by specifying the config value one.microstream.auto-start=false. The configuration of the StorageManager can be done using key/value pairs that are provided by Spring Boot external Configuration. The configuration keys must be prefixed by one.microstream one.microstream.storage-directory=/opt/data/microstream one.microstream.channel-count=2 The list of all MicroStream configuration properties and their meaning are listed on our documentation page. The configuration values are handled using the typesafe configuration approach, and you can read these values by accessing the MicrostreamConfigurationProperties Spring bean. You can either create a StorageManager yourself from an EmbeddedStorageFoundation Spring bean or access a fully configured one through the StorageManager Spring bean. Be aware that since both share the same configuration values, if you create and start a StorageManager from EmbeddedStorageFoundation, it will conflict with the one from the StorageManager Spring bean. When you use the EmbeddedStorageFoundation Spring bean, don’t access the StorageManager bean. The EmbeddedStorageFoundation one is ideal if your Spring application is performing one-of tasks like for example Batch processing. The other one is suited in most cases and the StorageManager can be customized and initialized before it is actually used. Also, note that when using the feature of having the Root object as Spring Bean already creates and initializes the StorageManager. The StorageManager configuration can be customized by Spring beans that implement the interface one.microstream.integrations.spring.boot.types.config.EmbeddedStorageFoundationCustomizer. The customize method is called with an EmbeddedStorageFoundation which allows you to fully customize the StorageManager that will be created. You can for example, add the specific Type Handlers for JDK 8 as described on the documentation. After the StorageManager is created, the Spring beans that implement one.microstream.integrations.spring.boot.types.config.StorageManagerInitializer are called. You have the opportunity to perform actions on the StorageManager or root object. Following rules apply to the StorageManager that is passed to the initialize method of the interface. The StorageManager is already started unless you specified the configuration value one.microstream.auto-start=false. If you have used the @Storage annotation on a class, the StorageManager is already associated with an instance of that class as the Root object. The root object can be indicated by using the @Storage annotation on the class. This annotation converts the POJO into a Spring bean (The annotation is a Spring Qualifier that makes the class also a Component). Besides converting it into a Spring bean, any field or setter injection within this class is also resolved. Please note that constructor injection is not supported and will result in an error indicating that the class has not a no-argument constructor. The integration also defines the instance of the class that is created as the root object (StorageManager.setRoot()) and stores the initial value (StorageManager.storeRoot()) when storageManager does not have a root object assigned yet (this happens only the very first time when you start up your application and the storage doesn’t contain any data yet) You can only annotate 1 class with the @Storage annotation, if you have marked multiple, the creation of the Storage Spring bean will fail with a BeansException. When using the @Storage functionality, you as a developer should not change the root object of the StorageManager yourself anymore as that will lead to conflicts and mismatches between the Spring bean created for the Root object and your newly set instance on the StorageManager. By default, Spring creates all singleton beans at the start of the application. The Spring beans defined by the MicroStream integration, like StorageManager and Storage root bean, are singletons. So they are created at startup which means that for example when you are using a database as a storage target, the database must be available and accessible when the application starts up. When this is not desired, because the database might be only available when the user request arrives and not at application startup, you can use the Provider option. Add the Jakarta Inject dependency to your project jakarta.inject jakarta.inject-api 1.0 And use injection based on the Provider and not the actual class itself. private final Provider storageManagerProvider; public UserRepository(Provider storageManagerProvider) { this.storageManagerProvider = storageManagerProvider; } When you need to access the StorageManager Spring bean, you perform storageManagerProvider.get() statement, and only at that point the StorageManager is created as a Spring bean. This allows you to delay the creation until the first user request. MicroStream Spring module supports standard Spring logging, so you can add this into your config: logging.level.one.microstream=debug to obtain all MicroStream configuration keys: 2021-08-23 15:16:02.979 DEBUG 18469 --- [ main] o.m.spring.MicrostreamConfiguration : Microstream configuration items: 2021-08-23 15:16:02.979 DEBUG 18469 --- [ main] o.m.spring.MicrostreamConfiguration : storage-filesystem.sql.postgres.password : xxxxx 2021-08-23 15:16:02.994 DEBUG 18469 --- [ main] o.m.spring.MicrostreamConfiguration : storage-filesystem.sql.postgres.data-source-provider : one.microstream.test.spring.MyDataSourceProvider 2021-08-23 15:16:02.994 DEBUG 18469 --- [ main] o.m.spring.MicrostreamConfiguration : storage-directory : microstream_storage 2021-08-23 15:16:02.994 DEBUG 18469 --- [ main] o.m.spring.MicrostreamConfiguration : storage-filesystem.sql.postgres.user : postgres Key values containing \"password\" are replaced by \"xxxxx\". If you use another class loader, such as hot replace, you may get an exception: one.microstream.exceptions.TypeCastException In this case, it is possible to force the use of the current thread’s class loader for MicroStream. one.microstream.use-current-thread-class-loader=false This value is not passed to the MicroStream framework but is set directly in this module. This configuration is only applied to the StorageManager Spring bean and not to the EmbeddedStorageFoundation Spring bean.","title":"Spring Boot Integration","component":"manual","version":"7.0","name":"spring-boot","url":"/manual/7.0/misc/integrations/spring-boot.html","titles":[{"text":"Breaking changes","hash":"_breaking_changes","id":1},{"text":"Configuration","hash":"_configuration","id":2},{"text":"Root object","hash":"_root_object","id":3},{"text":"Late initialization","hash":"_late_initialization","id":4},{"text":"Logging","hash":"_logging","id":5},{"text":"Classloader configuration","hash":"_classloader_configuration","id":6}]},"247":{"id":247,"text":"The layered entities code generator is an annotation processor, provided by the microstream-base module. The maven configuration looks like this: pom.xml one.microstream microstream-base 07.01.00-MS-GA org.apache.maven.plugins maven-compiler-plugin 3.8.1 1.8 1.8 UTF-8 one.microstream.entity.codegen.EntityProcessor -Amicrostream.entity.hashequalator=true -Amicrostream.entity.appendable=true If you don’t want the HashEqualator to be generated, just set the microstream.entity.hashequalator argument to false. You can leave it out otherwise, the default value is true. The same applies to the Appendable.","title":"Configuration","component":"manual","version":"7.0","name":"configuration","url":"/manual/7.0/misc/layered-entities/configuration.html","titles":[]},"248":{"id":248,"text":"Given is the following entity: public interface Person extends Entity { public String firstName(); public String lastName(); } So how is it done? Since the code generator provides a creator, we can use it to create a new Person. Person john = PersonCreator.New() .firstName(\"John\") .lastName(\"Doe\") .create(); Let’s see what the debugger displays if we run this code: There’s always an entity chain, with The identity (PersonEntity) as outer layer Then the logic layers, none here in our example And the inner most layer is always the data (PersonData), which holds the properties. The properties can be accessed like defined in the entity’s interface: String firstName = john.firstName(); // -> John String lastName = john.lastName(); // -> Doe The creator can also be used to create copies. Just hand over the existing one as template: Person mike = PersonCreator.New(john) // use John as template .firstName(\"Mike\") .create(); This will create a \"Mike Doe\".","title":"Creating Entities","component":"manual","version":"7.0","name":"creating-entities","url":"/manual/7.0/misc/layered-entities/creating-entities.html","titles":[]},"249":{"id":249,"text":"The entity types are just simple interfaces with value methods, which have following requirements: A return type, no void No parameters No type parameters No declared checked exceptions You are not limited otherwise. Use any types you want. Inheritance and generics are supported as well. Beeing.java public interface Beeing { public B partner(); } Named.java public interface Named { public String name(); } Animal.java public interface Animal extends Beeing, Entity { public String species(); } Pet.java public interface Pet extends Animal, Named { } Human.java public interface Human extends Beeing, Named, Entity { } There is one base type (Beeing), one feature interface (Named) and three entities (Animal, Pet, Human). The code generator takes care of the three entities, and its output looks like this: AnimalEntity.java public class AnimalEntity extends EntityLayerIdentity implements Animal { protected AnimalEntity() { super(); } @Override protected Animal entityData() { return (Animal)super.entityData(); } @Override public final String species() { return this.entityData().species(); } @Override public final Animal partner() { return this.entityData().partner(); } } AnimalData.java public class AnimalData extends EntityData implements Animal { private final String species; private final Animal partner; protected AnimalData(final Animal entity, final String species, final Animal partner) { super(entity); this.species = species; this.partner = partner; } @Override public String species() { return this.species; } @Override public Animal partner() { return this.partner; } } AnimalCreator.java public interface AnimalCreator extends Entity.Creator { public AnimalCreator species(String species); public AnimalCreator partner(Animal partner); public static AnimalCreator New() { return new Default(); } public static AnimalCreator New(final Animal other) { return new Default().copy(other); } public class Default extends Entity.Creator.Abstract implements AnimalCreator { private String species; private Animal partner; protected Default() { super(); } @Override public AnimalCreator species(final String species) { this.species = species; return this; } @Override public AnimalCreator partner(final Animal partner) { this.partner = partner; return this; } @Override protected EntityLayerIdentity createEntityInstance() { return new AnimalEntity(); } @Override public Animal createData(final Animal entityInstance) { return new AnimalData(entityInstance, this.species, this.partner); } @Override public AnimalCreator copy(final Animal other) { final Animal data = Entity.data(other); this.species = data.species(); this.partner = data.partner(); return this; } } } AnimalUpdater.java public interface AnimalUpdater extends Entity.Updater { public static boolean setSpecies(final Animal animal, final String species) { return New(animal).species(species).update(); } public static boolean setPartner(final Animal animal, final Animal partner) { return New(animal).partner(partner).update(); } public AnimalUpdater species(String species); public AnimalUpdater partner(Animal partner); public static AnimalUpdater New(final Animal animal) { return new Default(animal); } public class Default extends Entity.Updater.Abstract implements AnimalUpdater { private String species; private Animal partner; protected Default(final Animal animal) { super(animal); } @Override public AnimalUpdater species(final String species) { this.species = species; return this; } @Override public AnimalUpdater partner(final Animal partner) { this.partner = partner; return this; } @Override public Animal createData(final Animal entityInstance) { return new AnimalData(entityInstance, this.species, this.partner); } @Override public AnimalUpdater copy(final Animal other) { final Animal data = Entity.data(other); this.species = data.species(); this.partner = data.partner(); return this; } } } PetEntity.java public class PetEntity extends EntityLayerIdentity implements Pet { protected PetEntity() { super(); } @Override protected Pet entityData() { return (Pet)super.entityData(); } @Override public final String species() { return this.entityData().species(); } @Override public final Animal partner() { return this.entityData().partner(); } @Override public final String name() { return this.entityData().name(); } } PetData.java public class PetData extends EntityData implements Pet { private final String species; private final Animal partner; private final String name ; protected PetData(final Pet entity, final String species, final Animal partner, final String name ) { super(entity); this.species = species; this.partner = partner; this.name = name ; } @Override public String species() { return this.species; } @Override public Animal partner() { return this.partner; } @Override public String name() { return this.name; } } PetCreator.java public interface PetCreator extends Entity.Creator { public PetCreator species(String species); public PetCreator partner(Animal partner); public PetCreator name(String name); public static PetCreator New() { return new Default(); } public static PetCreator New(final Pet other) { return new Default().copy(other); } public class Default extends Entity.Creator.Abstract implements PetCreator { private String species; private Animal partner; private String name ; protected Default() { super(); } @Override public PetCreator species(final String species) { this.species = species; return this; } @Override public PetCreator partner(final Animal partner) { this.partner = partner; return this; } @Override public PetCreator name(final String name) { this.name = name; return this; } @Override protected EntityLayerIdentity createEntityInstance() { return new PetEntity(); } @Override public Pet createData(final Pet entityInstance) { return new PetData(entityInstance, this.species, this.partner, this.name ); } @Override public PetCreator copy(final Pet other) { final Pet data = Entity.data(other); this.species = data.species(); this.partner = data.partner(); this.name = data.name (); return this; } } } PetUpdater.java public interface PetUpdater extends Entity.Updater { public static boolean setSpecies(final Pet pet, final String species) { return New(pet).species(species).update(); } public static boolean setPartner(final Pet pet, final Animal partner) { return New(pet).partner(partner).update(); } public static boolean setName(final Pet pet, final String name) { return New(pet).name(name).update(); } public PetUpdater species(String species); public PetUpdater partner(Animal partner); public PetUpdater name(String name); public static PetUpdater New(final Pet pet) { return new Default(pet); } public class Default extends Entity.Updater.Abstract implements PetUpdater { private String species; private Animal partner; private String name ; protected Default(final Pet pet) { super(pet); } @Override public PetUpdater species(final String species) { this.species = species; return this; } @Override public PetUpdater partner(final Animal partner) { this.partner = partner; return this; } @Override public PetUpdater name(final String name) { this.name = name; return this; } @Override public Pet createData(final Pet entityInstance) { return new PetData(entityInstance, this.species, this.partner, this.name ); } @Override public PetUpdater copy(final Pet other) { final Pet data = Entity.data(other); this.species = data.species(); this.partner = data.partner(); this.name = data.name (); return this; } } } HumanEntity.java public class HumanEntity extends EntityLayerIdentity implements Human { protected HumanEntity() { super(); } @Override protected Human entityData() { return (Human)super.entityData(); } @Override public final Human partner() { return this.entityData().partner(); } @Override public final String name() { return this.entityData().name(); } }","title":"Defining Entities","component":"manual","version":"7.0","name":"defining-entities","url":"/manual/7.0/misc/layered-entities/defining-entities.html","titles":[{"text":"Entities","hash":"_entities","id":1},{"text":"Generated Code","hash":"_generated_code","id":2}]},"250":{"id":250,"text":"Concept to separate the basic aspects of what defines an entity into separate instances of different layers: Identity, a never to be replaced instance representing an entity in terms of references to it Logic, nestable in an arbitrary number of dynamically created logic layers, e.g. logging, locking, versioning, etc. Data, always immutable Entity graphs are constructed by strictly only referencing identity instances (the \"outer shell\" of an entity), while every inner layer instance is unshared. This also allows the actual data instance to be immutable, while at the same time leaving referential integrity of an entity graph intact. MicroStream provides ready-to-use logic layers for: Logging Versioning While the layers admittedly introduce considerable technical complexity and runtime overhead, this concept is a production ready solution for nearly all requirements regarding cross cutting concerns and aspects. To use this concept in your code, there need to be at least implementations for the entity’s identity and data. Let’s say the entity looks like this: public interface Person extends Entity { public String firstName(); public String lastName(); } There needs to be a identity class: public class PersonEntity extends EntityLayerIdentity implements Person { protected PersonEntity() { super(); } @Override protected Person entityData() { return (Person)super.entityData(); } @Override public final String firstName() { return this.entityData().firstName(); } @Override public final String lastName() { return this.entityData().lastName(); } } And a data class: public class PersonData extends EntityData implements Person { private final String firstName; private final String lastName ; protected PersonData(final Person entity, final String firstName, final String lastName ) { super(entity); this.firstName = firstName; this.lastName = lastName ; } @Override public String firstName() { return this.firstName; } @Override public String lastName() { return this.lastName; } } A lot of code to write to get an entity with two properties! But don’t worry, there is a code generator for that. An annotation processor to be precise. The only code you have to provide are the entity interfaces, all the other stuff will be generated. Just add the annotation processor type one.microstream.entity.codegen.EntityProcessor to your compiler configuration. That’s it. The generator also builds a creator: public interface PersonCreator extends Entity.Creator { public PersonCreator firstName(String firstName); public PersonCreator lastName(String lastName); public static PersonCreator New() { return new Default(); } public static PersonCreator New(final Person other) { return new Default().copy(other); } public class Default extends Entity.Creator.Abstract implements PersonCreator { private String firstName; private String lastName ; protected Default() { super(); } @Override public PersonCreator firstName(final String firstName) { this.firstName = firstName; return this; } @Override public PersonCreator lastName(final String lastName) { this.lastName = lastName; return this; } @Override protected EntityLayerIdentity createEntityInstance() { return new PersonEntity(); } @Override public Person createData(final Person entityInstance) { return new PersonData(entityInstance, this.firstName, this.lastName ); } @Override public PersonCreator copy(final Person other) { final Person data = Entity.data(other); this.firstName = data.firstName(); this.lastName = data.lastName (); return this; } } } An Updater: public interface PersonUpdater extends Entity.Updater { public static boolean setFirstName(final Person person, final String firstName) { return New(person).firstName(firstName).update(); } public static boolean setLastName(final Person person, final String lastName) { return New(person).lastName(lastName).update(); } public PersonUpdater firstName(String firstName); public PersonUpdater lastName(String lastName); public static PersonUpdater New(final Person person) { return new Default(person); } public class Default extends Entity.Updater.Abstract implements PersonUpdater { private String firstName; private String lastName ; protected Default(final Person person) { super(person); } @Override public PersonUpdater firstName(final String firstName) { this.firstName = firstName; return this; } @Override public PersonUpdater lastName(final String lastName) { this.lastName = lastName; return this; } @Override public Person createData(final Person entityInstance) { return new PersonData(entityInstance, this.firstName, this.lastName ); } @Override public PersonUpdater copy(final Person other) { final Person data = Entity.data(other); this.firstName = data.firstName(); this.lastName = data.lastName (); return this; } } } An optional equalator, with equals and hashCode methods: public interface PersonHashEqualator extends HashEqualator { public static PersonHashEqualator New() { return new Default(); } public final class Default implements PersonHashEqualator, Stateless { public static boolean equals(final Person person1, final Person person2) { return X.equal(person1.firstName(), person2.firstName()) && X.equal(person1.lastName (), person2.lastName ()) ; } public static int hashCode(final Person person) { return Objects.hash( person.firstName(), person.lastName () ); } Default() { super(); } @Override public boolean equal(final Person person1, final Person person2) { return equals(person1, person2); } @Override public int hash(final Person person) { return hashCode(person); } } } And an optional Appendable: public interface PersonAppendable extends VarString.Appendable { public static String toString(final Person person) { return New(person).appendTo(VarString.New()).toString(); } public static PersonAppendable New(final Person person) { return new Default(person); } public static class Default implements PersonAppendable { private final Person person; Default(final Person person) { super(); this.person = person; } @Override public VarString appendTo(final VarString vs) { return vs.append(this.person.getClass().getSimpleName()) .append(\" [lastName = \") .append(this.person.lastName()) .append(\", firstName = \") .append(this.person.firstName()) .append(']'); } } }","title":"Layered Entities","component":"manual","version":"7.0","name":"index","url":"/manual/7.0/misc/layered-entities/index.html","titles":[]},"251":{"id":251,"text":"Another predefined logic layer is for logging purposes. Since there is a myriad of loggers out there, MicroStream doesn’t provide any special adapter, but a generic type which can be used to adapt to the logging framework of your choice. Just create a class and implement EntityLogger, and you are good to go. public class JulLogger implements EntityLogger { @Override public void afterUpdate( final Entity identity, final Entity data, final boolean successful) { Logger.getLogger(identity.getClass().getName()) .info(\"Entity updated\"); } } Additional to afterUpdate there are further hooks: entityCreated afterRead beforeUpdate Now just add the logger when creating entities: JulLogger logger = new JulLogger(); Person john = PersonCreator.New() .addLayer(logger) .firstName(\"John\") .lastName(\"Doe\") .create(); When you call PersonUpdater.setLastName(john, \"Smith\"); the logger’s output is Oct 15, 2019 11:17:53 AM JulLogger afterUpdate INFO: Entity updated","title":"Logging","component":"manual","version":"7.0","name":"logging","url":"/manual/7.0/misc/layered-entities/logging.html","titles":[]},"252":{"id":252,"text":"Entities can be created with an arbitrary amount of layers, so feel free to combine them as you like: EntityVersionContext versionContext = EntityVersionContext.AutoIncrementingLong(); JulLogger logger = new JulLogger(); Person john = PersonCreator.New() .addLayer(versionContext) .addLayer(logger) .firstName(\"John\") .lastName(\"Doe\") .create(); The example on GitHub makes use of all the described features.","title":"Multiple Layers","component":"manual","version":"7.0","name":"multiple-layers","url":"/manual/7.0/misc/layered-entities/multiple-layers.html","titles":[]},"253":{"id":253,"text":"The data layer is always immutable. In order to update the values we have to replace the data layer completely. This is done with the updater. The property setter methods can be chained, so it is easy to update multiple properties, for example: PersonUpdater.New(mike) .firstName(\"Jim\") .lastName(\"Hope\") .update(); If only one property needs to be updated, the updater class offers static convenience methods for that: PersonUpdater.setFirstName(mike, \"Jim\");","title":"Updating Entities","component":"manual","version":"7.0","name":"updating-entities","url":"/manual/7.0/misc/layered-entities/updating-entities.html","titles":[]},"254":{"id":254,"text":"An arbitrary amount of logic layers can be added to entities. Let’s use the predefined versioning layer. It will keep track of all changes. Technically every new data layer which is added by the updater, will create a new version entry. EntityVersionContext versionContext = EntityVersionContext.AutoIncrementingLong(); Person john = PersonCreator.New() .addLayer(versionContext) .firstName(\"John\") .lastName(\"Doe\") .create(); Let’s have a look at the debugger: Now the versioning layer is chained between the identity layer and the data layer. If we update the entity a few times, we will see how the versioning layer works. In this case we use an auto-incrementing Long as key. PersonUpdater.setLastName(john, \"Smith\"); PersonUpdater.setLastName(john, \"Archer\"); PersonUpdater.setLastName(john, \"Bennett\"); john.lastName() // now returns \"Bennett\" If you want to access older versions use the context: versionContext.versions(john).get(1L); // -> \"John Smith\" To limit the amount of preserved versions, a cleaner can be utilized: EntityVersionCleaner versionCleaner = EntityVersionCleaner.AmountPreserving(10); EntityVersionContext versionContext = EntityVersionContext.AutoIncrementingLong(cleaner); This will keep only the last ten versions of the person. Additionally to number keys, timestamps can be used as well. EntityVersionContext systemTimeContext = EntityVersionContext.AutoIncrementingSystemTimeMillis(); EntityVersionContext nanoTimeContext = EntityVersionContext.AutoIncrementingSystemNanoTime(); EntityVersionContext instantContext = EntityVersionContext.AutoIncrementingInstant(); They can be preserved for a specific time range: EntityVersionCleaner cleaner = EntityVersionCleaner.AgePreservingInstant(Duration.of(1, ChronoUnit.YEARS)); EntityVersionContext context = EntityVersionContext.AutoIncrementingInstant(cleaner); The version context can be used as a shared state object. So you can control versioning for multiple entities at once, or even for the hole entity graph. The auto-incrementing contexts take care of the key creation. If you need to control it by yourself, use the mutable context. But be aware that you have to set the version before updating any data, otherwise the current one will be overwritten. EntityVersionContext.Mutable versionContext = EntityVersionContext.Mutable(); versionContext.currentVersion(\"rev-1\"); Person john = PersonCreator.New() .addLayer(versionContext) .firstName(\"John\") .lastName(\"Doe\") .create(); versionContext.currentVersion(\"rev-2\"); PersonUpdater.setLastName(john, \"Smith\"); versionContext.currentVersion(\"rev-3\"); PersonUpdater.setLastName(john, \"Archer\"); versionContext.currentVersion(\"rev-4\"); PersonUpdater.setLastName(john, \"Bennett\");","title":"Versioning","component":"manual","version":"7.0","name":"versioning","url":"/manual/7.0/misc/layered-entities/versioning.html","titles":[]},"255":{"id":255,"text":"MicroStream logs against the simple logging facade SLF4J. Just add and configure the logging framework of your choice to see the logger’s output. Here’s a small example with logback. Add the logback dependency: pom.xml ch.qos.logback logback-classic ${logback.version} And the logback configuration: logback.xml %d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n","title":"Logging","component":"manual","version":"7.0","name":"index","url":"/manual/7.0/misc/logging/index.html","titles":[]},"256":{"id":256,"text":"The wrapper code generator is an annotation processor, provided by the base module. The maven configuration looks like this: pom.xml one.microstream microstream-base 07.01.00-MS-GA org.apache.maven.plugins maven-compiler-plugin 3.8.1 1.8 1.8 UTF-8 one.microstream.wrapping.codegen.WrapperProcessor -Amicrostream.wrapper.types=one.microstream.persistence.types.PersistenceStoring There are following ways to get the base wrapper types generated. If you want it for your own types, the best way is to use the GenerateWrapper annotation. @GenerateWrapper public interface MyInterface { public void doStuff(); public String getStuff(); } Or, if you want it for interfaces in libraries, like PersistenceStoring, you cannot add an annotation. That’s what the microstream.wrapper.types parameter is for. This is just a comma separated list of types. Alternatively you can use the GenerateWrapperFor annotation: @GenerateWrapperFor(\"one.microstream.persistence.types.PersistenceStoring\") public class WrapperGenerationDummy { } It accepts a list of type names. Plain strings have to be used instead of class literals, because it is read inside the compilation cycle which prohibits access to class elements.","title":"Configuration","component":"manual","version":"7.0","name":"configuration","url":"/manual/7.0/misc/wrapping/configuration.html","titles":[]},"257":{"id":257,"text":"MicroStream uses a strictly interface-based architecture. All types in the public API are, whenever possible, interfaces. This offers the best possibilities to extend or exchange parts of the engine. A good ways to enrich a type with features, is the wrapper (decorator) pattern. For example, let’s say we want to add logging to the PersistenceStoring's store(object) method. PersistenceStoring.java public interface PersistenceStoring { public long store(Object instance); public long[] storeAll(Object... instances); public void storeAll(Iterable instances); public void storeSelfStoring(SelfStoring storing); } Conventionally it would be done that way: A new type, implementing the original interface, would be handed over the wrapped instance, all interface methods have to be implemented and delegated. And in the single method, we wanted to add functionality; the actual implementation of the logging is done. public class PersistenceStoringWithLogging implements PersistenceStoring { private final PersistenceStoring wrapped; public PersistenceStoringWithLogging(final PersistenceStoring wrapped) { super(); this.wrapped = wrapped; } @Override public long store(final Object instance) { Logger.getLogger(PersistenceStoring.class.getName()) .info(\"Object stored: \" + instance); return this.wrapped.store(instance); } @Override public long[] storeAll(final Object... instances) { return this.wrapped.storeAll(instances); } @Override public void storeAll(final Iterable instances) { this.wrapped.storeAll(instances); } @Override public void storeSelfStoring(final SelfStoring storing) { this.wrapped.storeSelfStoring(storing); } } This produces a lot of overhead. In this case, three methods are just boilerplate code to delegate the calls to the wrapped instance. A common solution for that is to create an abstract base wrapper type for the designated interface, and to reuse it whenever needed. public abstract class BaseWrapperPersistenceStoring implements PersistenceStoring { private final PersistenceStoring wrapped; public BaseWrapperPersistenceStoring(final PersistenceStoring wrapped) { super(); this.wrapped = wrapped; } @Override public long store(final Object instance) { return this.wrapped.store(instance); } @Override public long[] storeAll(final Object... instances) { return this.wrapped.storeAll(instances); } @Override public void storeAll(final Iterable instances) { this.wrapped.storeAll(instances); } @Override public void storeSelfStoring(final SelfStoring storing) { this.wrapped.storeSelfStoring(storing); } } And then, based on that, the implementation of the logger type would look like this: public class PersistenceStoringWithLogging extends BaseWrapperPersistenceStoring { public PersistenceStoringWithLogging(PersistenceStoring wrapped) { super(wrapped); } @Override public long store(Object instance) { Logger.getLogger(PersistenceStoring.class.getName()) .info(\"Object stored: \" + instance); return super.store(instance); } } That’s better. No more boilerplate code. Just overwrite the methods you want to extend. The only work left is, to generate the base wrapper types. One way is to let your IDE generate the wrapper or delegation code. Disadvantage of that is, it has to be redone every time your interfaces change. A code generator, which does it automatically would be nice. And that’s what the base module brings along. Like the layered entity code generator, it is an annotation processor.","title":"Wrapping","component":"manual","version":"7.0","name":"index","url":"/manual/7.0/misc/wrapping/index.html","titles":[]},"258":{"id":258,"text":"MicroStream’s wrapper code generator generates following wrapper type for PersistenceStoring: public interface WrapperPersistenceStoring extends Wrapper, PersistenceStoring { @Override public default long store(final Object instance) { return this.wrapped().store(instance); } @Override public default long[] storeAll(final Object... instances) { return this.wrapped().storeAll(instances); } @Override public default void storeAll(final Iterable instances) { this.wrapped().storeAll(instances); } @Override public default void storeSelfStoring(final SelfStoring storing) { this.wrapped().storeSelfStoring(storing); } } It is not an abstract class, but an interface, which extends the Wrapper interface of the microstream-base module, and the wrapped type itself. This offers you the most flexible way to use it in your application. The Wrapper type is just a typed interface and an abstract implementation of itself. Wrapper.java public interface Wrapper { public W wrapped(); public abstract class Abstract implements Wrapper { private final W wrapped; protected Abstract(final W wrapped) { super(); this.wrapped = wrapped; } @Override public final W wrapped() { return this.wrapped; } } } You can either implement the Wrapper interface and provide the wrapped instance via the wrapped() method, or you can extend the abstract class and hand over the wrapped instance to the super constructor. Version with the abstract type: public class PersistenceStoringWithLogging extends Wrapper.Abstract implements WrapperPersistenceStoring { public PersistenceStoringWithLogging(final PersistenceStoring wrapped) { super(wrapped); } @Override public long store(Object instance) { Logger.getLogger(PersistenceStoring.class.getName()) .info(\"Object stored: \" + instance); return WrapperPersistenceStoring.super.store(instance); } } Or only the interface, then you have to provide the wrapped instance via wrapped(): public class PersistenceStoringWithLogging implements WrapperPersistenceStoring { private final PersistenceStoring wrapped; public PersistenceStoringWithLogging(final PersistenceStoring wrapped) { super(); this.wrapped = wrapped; } @Override public PersistenceStoring wrapped() { return this.wrapped; } @Override public long store(Object instance) { Logger.getLogger(PersistenceStoring.class.getName()) .info(\"Object stored: \" + instance); return WrapperPersistenceStoring.super.store(instance); } }","title":"Usage","component":"manual","version":"7.0","name":"usage","url":"/manual/7.0/misc/wrapping/usage.html","titles":[]},"259":{"id":259,"text":"Fix dynamodb table creation settings [599] [600] Integration for Quarkus 3 [564] Fixed Lazy Collections unloading [563] [568] Upgrade to Java 11 [359] Lazy Collections Quarkus integration [422] Update CDI integration to use Jakarta EE [509] [513] Support for Multiple StorageManagers within Spring Boot 2.x [490] Java 17 type handler improvement [462] Read-only mode [427] [436] Serializer with type information [376] Channel count migration tool [371] Helidon MP example update [444] More convenient API for import, export and CSV conversion [535] Built-in SBOM [460] Spring Boot 3.x fixes [504] Set appropriate ClassLoaderProvider in Spring Boot integrations [517] [518] Maven 4 build compliance [471] Helidon example build fix [463] Spring integration fixes [415] File deletion fix [408] Cache read through fix [369] Define service providers in module info [368] When you are still on an older Java version, remember to upgrade to Java 11 or above. Deprecated content was removed, see details here: [277] New public AFS connectors AWS S3 and DynamoDB Azure Storage Google Cloud Firestore Hazelcast Kafka Oracle Coherence, DB and Cloud Object Store Redis Hana DB Finalized storage garbage collector, activated by default [402] Improve CDI integration [377] CDI Integration: Allow customization of the EmbeddedStorageFoundation before StorageManager is created [388][398] Spring Boot integration: Add interceptor logic to store marked objects at end of method [384] Clarification around cache expiry when using StorageManager [387] Store reference inside Lazy when Lazy is marked (CDI integration) [386] Enable microstream cache [351] Validate Channel Folders to Channel Count [192] Remove @Store from CDI integration [397][394] Fix CDI integration cache configuration keys [395] Active the test in the CDI extension [354] CDI Extension Logging Serializer API Android Type Handlers Stop LazyrefenceManager automatically [343] Check for cache clear after loading storage entities [326] Reduce memory usage [323] Fixed storage stalls in case of errors during the housekeeping phase [303] Eliminate null in StorageConfiguration.toString() [205] Fixed exclusive file access conflicts when restarting storage [282] From version 6 no actions are necessary, for older versions see below. Bugfix release. Fixed various bugs in backup [194][272][273][278][280] Fixed storage restart error with same configuration instance [279] Fixed Javadoc warnings [281] Spring Boot Integration Specialized type handlers for Java 17 collection Deep-copy utility Examples included in reactor build Fixed swallowed exceptions in storage channels [265] Fixed failing import with multiple channels [254] Fixed zero byte blocks in storage [255] Fixed faulty loading behaviour in persisted cache [226] Fixed possible deadlock in persistence manager [240] Fixed bug in type handler for PriorityQueue [234] From version 5 no actions are necessary, for older versions see below. Bugfix release. Fixed buffer flush regression [225] Bugfix release. Fixed broken build for microstream-storage-restclient-app This release introduces some breaking changes. To fully support the Java Module System (Jigsaw) and to meet Maven’s naming standards, we had to rename some packages and our artifact’s IDs. But don’t worry. Just change the dependency configuration and organize some imports, and you are good to go. Existing storages are not affected and are fully compatible with this version. For detailed information, see the migration guide below. General purpose configuration layer on which the storage and cache configuration are now based on, with following key features: Tree like structure to support sub-configurations Input from various sources (ini, xml, yaml, …​) Typed getters for properties Extendable: custom property parsers and configuration loaders Adaptable: easy adaption to other framework’s configurations, like e.g. Spring Boot Storage configuration now supports different file systems for live storage and backup GraalVM support: MicroStream’s optimized memory adapter is now used automatically when running on GraalVM Restructured MicroStream’s module and package structure to fully support the Java Module System and adopt Maven naming standards, see Migration Guide Fixed sporadic index out of bounds exception when storage and backup had different storage targets with a channel count greater than one In order to fully support the Java Module System and adopt Maven naming standards we had to introduce some changes: These are the changed artifacts and their packages. Old (= 5) base microstream-base AFS and AFS/NIO were extracted from base module: base microstream-afs one.microstream.afs one.microstream.afs.types, one.microstream.afs.exceptions base microstream-afs-nio one.microstream.afs.nio one.microstream.afs.nio.types cache microstream-cache one.microstream.cache one.microstream.cache.types, one.microstream.cache.exceptions cache.hibernate microstream-cache-hibernate one.microstream.cache.hibernate one.microstream.cache.hibernate.types communication microstream-communication one.microstream.com one.microstream.communication.types communication.binary microstream-communication-binary one.microstream.com.binary one.microstream.communication.binary.types AWS was split into AWS-DynamoDB and AWS-S3: filesystem.aws microstream-enterprise-afs-aws-dynamodb one.microstream.afs.aws.dynamodb one.microstream.enterprise.afs.aws.dynamodb.types filesystem.aws microstream-enterprise-afs-aws-s3 one.microstream.afs.aws.s3 one.microstream.enterprise.afs.aws.s3.types filesystem.azure microstream-enterprise-afs-azure-storage one.microstream.afs.azure.storage one.microstream.enterprise.afs.azure.storage.types filesystem.blobstore microstream-enterprise-afs-blobstore one.microstream.afs.blobstore one.microstream.enterprise.afs.blobstore.types filesystem.coherence microstream-enterprise-afs-oracle-coherence one.microstream.afs.coherence one.microstream.enterprise.afs.oracle.coherence.types filesystem.hazelcast microstream-enterprise-afs-hazelcast one.microstream.afs.hazelcast one.microstream.enterprise.afs.hazelcast.types filesystem.jpa.hibernate microstream-enterprise-afs-hibernate one.microstream.afs.jpa.hibernate one.microstream.afs.hibernate.types filesystem.kafka microstream-enterprise-afs-kafka one.microstream.afs.kafka one.microstream.enterprise.afs.kafka.types filesystem.mongodb microstream-enterprise-afs-mongodb one.microstream.afs.mongodb one.microstream.enterprise.afs.mongodb.types filesystem.oraclecloud microstream-enterprise-afs-oraclecloud-objectstorage one.microstream.afs.oracle.cloud.objectstorage one.microstream.enterprise.afs.oraclecloud.objectstorage.types filesystem.oraclenosql microstream-enterprise-afs-oracle-nosql one.microstream.afs.oracle.nosql one.microstream.enterprise.afs.oracle.nosql.types filesystem.redis microstream-enterprise-afs-redis one.microstream.afs.redis one.microstream.enterprise.afs.redis.types SQL was split into SQL and Enterprise-SQL: filesystem.sql microstream-afs-sql on.microstream.afs.sql one.microstream.afs.sql.types filesystem.sql microstream-enterprise-afs-sql on.microstream.afs.sql one.microstream.enterprise.afs.sql.types persistence microstream-persistence persistence.binary microstream-persistence-binary one.microstream.collections one.microstream.persistence.binary.one.microstream.collections one.microstream.entity one.microstream.persistence.binary.one.microstream.entity one.microstream.persistence.types one.microstream.persistence.binary.one.microstream.persistence.types one.microstream.reference one.microstream.persistence.binary.one.microstream.reference one.microstream.util one.microstream.persistence.binary.one.microstream.util one.microstream.java.* one.microstream.persistence.binary.java.* persistence.binary.jdk8 microstream-persistence-binary-jdk8 one.microstream.jdk8.java.util one.microstream.persistence.binary.jdk8.java.util one.microstream.memory.sun one.microstream.persistence.binary.jdk8.types storage microstream-storage storage.embedded microstream-storage-embedded one.microstream.storage.types one.microstream.storage.embedded.types storage.embedded.configuration microstream-storage-embedded-configuration one.microstream.storage.configuration one.microstream.storage.embedded.configuration.types storage.restadapter microstream-storage-restadapter one.microstream.storage.restadapter one.microstream.storage.restadapter.types, one.microstream.storage.restadapter.exceptions storage.restclient microstream-storage-restclient one.microstream.storage.restclient one.microstream.storage.restclient.types, one.microstream.storage.restclient.exceptions storage.restclient.app microstream-storage-restclient-app one.microstream.storage.restclient.app one.microstream.storage.restclient.app.types storage.restclient.jersey microstream-storage-restclient-jersey one.microstream.storage.restclient.jersey one.microstream.storage.restclient.jersey.types storage.restservice microstream-storage-restservice one.microstream.storage.restservice one.microstream.storage.restservice.types, one.microstream.storage.restservice.exceptions storage.restservice.sparkjava microstream-storage-restservice-sparkjava one.microstream.storage.restservice.sparkjava one.microstream.storage.restservice.sparkjava.types, one.microstream.storage.restservice.sparkjava.exceptions The storage and cache configuration layers are now utilizing the newly introduced general purpose configuration layer. The configuration property names have changed from camelCase to the dash-notation. Old (= 5) keyType key-type valueType value-type storageConfigurationResourceName storage-configuration-resource-name cacheLoaderFactory cache-loader-factory cacheWriterFactory cache-writer-factory expiryPolicyFactory expiry-policy-factory evictionManagerFactory eviction-manager-factory readThrough read-through writeThrough write-through storeByValue store-by-value statisticsEnabled statistics-enabled managementEnabled management-enabled The old storage configuration API is deprecated and should be migrated to the new one. The configuration property names have changed from camelCase to the dash-notation. Old (= 5) baseDirectory storage-directory deletionDirectory deletion-directory truncationDirectory truncation-directory backupDirectory backup-directory channelCount channel-count channelDirectoryPrefix channel-directory-prefix dataFilePrefix data-file-prefix dataFileSuffix data-file-suffix transactionFilePrefix transaction-file-prefix transactionFileSuffix transaction-file-suffix typeDictionaryFilename type-dictionary-file-name rescuedFileSuffix rescued-file-suffix lockFileName lock-file-name houseKeepingIntervalMs housekeeping-interval housekeepingTimeBudgetNs housekeeping-time-budget entityCacheThreshold entity-cache-threshold entityCacheTimeoutMs entity-cache-timeout dataFileMinimumSize data-file-minimum-size dataFileMaximumSize data-file-maximum-size dataFileMinimumUseRatio data-file-minimum-use-ratio dataFileCleanupHeadFile data-file-cleanup-head-file API to create full backup additional to continuous backup Simplified usage of other NIO based file systems, e.g. in-memory file systems for unit testing OSGi Headers are added in released jar files and a p2 update site is available next to the maven repository Additional storage targets AWS S3 and DynamoDB Azure Storage Hazelcast Kafka MongoDB Redis Plain JDBC: SAP HANA, PostgreSQL, MariaDB Fixed type handler incompatibilities with JDK 11 Removed wrongfully initial values in configuration for deletion and truncation directories From 4.1 no actions are necessary, for older versions see below. File System Abstraction to support a variety of storage targets. Exporter API for storage configuration. Better error handling in housekeeping, to avoid storage channel thread interruptions. Fixed XML loading bug under Android. All configuration code, which includes file paths, may be rewritten to use the new Abstract File System. For example see Storage Files or Backup. Bugfix release for projects using an old non public version. Fixed bug in type dictionary parser for old legacy type handlers Added a convenience layer for defining custom type handlers Fully automatic lazy reference managing for clearing older Lazy references as free memory gets lower. Completed optimized persistence handling for remaining types in JDK that are reasonable to appear in entity graphs. E.g. Currency, Locale, URI, URL, Path Compatibility with projects using java modules (\"jigsaw\") Added JavaDoc for common types like StorageConnection, StorageManager, StorageController, etc. Auto-recognition for CSV separator character in configuration files (e.g. legacy type mapping) JSR-107 compatible JCache provider with additional Hibernate cache region factory Storage REST Service and Client are available to access the storage data via REST, a Java-Wrapper thereof and a Web-UI Fixed a potential race condition during loading Fixed a potential race condition and robustness issue during storing StorageConnectionFoundation instance is now properly created on demand. Removed unnecessary memory consumption exponential to channel count. Improved exception messages on invalid configuration values (file sizes etc.) Workarounded a JDK bug regarding file locking when importing files (JDK exception says another process is locking the file which is outright wrong) Fixed type resolving problems when different ClassLoaders are involved. Fixed a bug that caused loading of zero-length arrays to throw an exception despite everything being fine. Various smaller bugfixes for unnecessary exceptions in special cases and state robustness after exceptions. From 2.2 no actions are necessary, for older versions see below. Removed SelfStoring without replacement since it could not be used recursively and has no advantages over just creating a static storing utility method for a certain entity. Added state validation of value type objects (e.g. String, Integer, BigDecimal, etc.) upon loading. This is hardly relevant in practice, but not having it can lead to confusing hello-world-like test applications. EmbeddedStorageManager now implements java.lang.AutoClosable. Replaced all provisional RuntimeExceptions with either PersistenceException or StorageException, depending on the architectural level the corresponding source code it located. The two technically different root handling concepts (\"default\" and \"custom\") have been consolidated in a way that they are the same thing on the API level and interchangeable, meaning no more confusion with those root exception messages. All entity fields of type transient EmbeddedStorageManager now get a reference to the used EmbeddedStorageManager instance set upon loading/updating. The interfaces around storage managing have been enhanced so that it is now equally valid to just write StorageManager instead of EmbeddedStorageManager. (An EmbeddedStorageManager \"is a\" StorageManager) Slight technical consolidation of Lazy reference handling caused the type Lazy to be moved from the package one.microstream.persistence.lazy to one.microstream.reference. The reason is that the lazy handling has actually no inherent connection to persistence or storage. It’s actually just a generic concept that can be used by those layers. See Migration Guide below on how to adjust existing projects. Fixed an off-heap memory leak when restarting the storage multiple times in the same process. Fixed a bug where changing the fields of an entity type caused an exception. This was a regression bug from fixing a similar problem for another case in version 2.1. Now, both cases work correctly. All occurrences in user code of one.microstream.persistence.lazy.Lazy have to be refactored to one.microstream.reference.Lazy. Modern IDEs provide a functionality to \"auto-import\" missing types or automatically \"organize imports\", so this should be resolved with a proverbial push of a button. Android support MicroStream is now Java-wise fully compatible with Android. Replaced all usages of java.util.File with java.nio.file.Path to allow using custom file implementations. Improved skipping functionality of Storers (see EmbeddedStorageManager#createStorer and Storer#skip). The class Lazy is now an interface to allow custom implementations. See Migration guide below. Fixed a few minor bugs in the skipping functionality of Storers. Fixed a bug where files remained locked after the storage was shut down. Fixed a bug where files remained locked after an exception in storage initialization. Enums defining an abstract method are now handled correctly. By default, all threads created by MicroStream now start with the prefix \"MicroStream-\". This can be customized by the new interface StorageThreadNameProvider. Fixed a NullPointerException in import. Fixed a bug that caused enums with a certain field layout to be loaded inconsistently. java.util.Locale is now persisted and created using Locale’s #toLanguageTag and #forLanguageTag. In the directory of an existing storage, in the TypeDictionary file (default name \"PersistenceTypeDictionary.ptd\"), all occurrences of \"one.microstream.persistence.lazy.Lazy\" must be replaced with \"one.microstream.persistence.lazy.Lazy$Default\".","title":"Changelog","component":"manual","version":"master","name":"changelog","url":"/manual/intro/changelog.html","titles":[{"text":"8.1.1","hash":"_8_1_1","id":1},{"text":"Bugfixes","hash":"_bugfixes","id":2},{"text":"8.1","hash":"_8_1","id":3},{"text":"Features","hash":"_features","id":4},{"text":"Bugfixes","hash":"_bugfixes_2","id":5},{"text":"8.0","hash":"_8_0","id":6},{"text":"Features","hash":"_features_2","id":7},{"text":"Bugfixes","hash":"_bugfixes_3","id":8},{"text":"Migration guide","hash":"_migration_guide","id":9},{"text":"7.1","hash":"_7_1","id":10},{"text":"Features","hash":"_features_3","id":11},{"text":"Bugfixes","hash":"_bugfixes_4","id":12},{"text":"7.0","hash":"_7_0","id":13},{"text":"Features","hash":"_features_4","id":14},{"text":"Bugfixes","hash":"_bugfixes_5","id":15},{"text":"Migration guide","hash":"_migration_guide_2","id":16},{"text":"6.1","hash":"_6_1","id":17},{"text":"Bugfixes","hash":"_bugfixes_6","id":18},{"text":"6.0","hash":"_6_0","id":19},{"text":"Features","hash":"_features_5","id":20},{"text":"Bugfixes","hash":"_bugfixes_7","id":21},{"text":"Migration guide","hash":"_migration_guide_3","id":22},{"text":"5.0.2","hash":"_5_0_2","id":23},{"text":"Bugfixes","hash":"_bugfixes_8","id":24},{"text":"5.0.1","hash":"_5_0_1","id":25},{"text":"Bugfixes","hash":"_bugfixes_9","id":26},{"text":"5.0","hash":"_5_0","id":27},{"text":"Features","hash":"_features_6","id":28},{"text":"Bugfixes","hash":"_bugfixes_10","id":29},{"text":"Migration guide","hash":"5_0_migration-guide","id":30},{"text":"Artifacts and Packages","hash":"_artifacts_and_packages","id":31},{"text":"Configuration","hash":"_configuration","id":32},{"text":"Cache","hash":"_cache","id":33},{"text":"Storage","hash":"_storage","id":34},{"text":"4.1","hash":"_4_1","id":35},{"text":"Features","hash":"_features_7","id":36},{"text":"Bugfixes","hash":"_bugfixes_11","id":37},{"text":"Migration guide","hash":"4_1_migration-guide","id":38},{"text":"4.0","hash":"_4_0","id":39},{"text":"Features","hash":"_features_8","id":40},{"text":"Bugfixes","hash":"_bugfixes_12","id":41},{"text":"Migration guide","hash":"4_0_migration-guide","id":42},{"text":"3.0.1","hash":"_3_0_1","id":43},{"text":"Bugfixes","hash":"_bugfixes_13","id":44},{"text":"3.0","hash":"_3_0","id":45},{"text":"Features","hash":"_features_9","id":46},{"text":"Bugfixes","hash":"_bugfixes_14","id":47},{"text":"Migration guide","hash":"3_0_migration-guide","id":48},{"text":"2.2","hash":"_2_2","id":49},{"text":"Features","hash":"_features_10","id":50},{"text":"Bugfixes","hash":"_bugfixes_15","id":51},{"text":"Migration Guide","hash":"2_2_migration-guide","id":52},{"text":"2.1","hash":"_2_1","id":53},{"text":"Features","hash":"_features_11","id":54},{"text":"Bugfixes","hash":"_bugfixes_16","id":55},{"text":"Migration Guide","hash":"_migration_guide_4","id":56}]},"260":{"id":260,"text":"You can find the MicroStream libraries in the Maven Central repository. Maven [pom.xml] one.microstream microstream-storage-embedded 08.01.01-MS-GA Gradle (Groovy) [build.gradle] dependencies { implementation 'one.microstream:microstream-storage-embedded:08.01.01-MS-GA' } Gradle (Kotlin) [build.gradle.kts] dependencies { implementation(\"one.microstream:microstream-storage-embedded:08.01.01-MS-GA\") } Scala SBT [build.sbt] libraryDependencies += \"one.microstream\" % \"microstream-storage-embedded\" % \"08.01.01-MS-GA\" Apache Ivy [ivy.xml] Apache Buildr [Buildfile] define 'my-app' do compile.with 'one.microstream:microstream-storage-embedded:08.01.01-MS-GA' end Bazel [WORKSPACE] load(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\") RULES_JVM_EXTERNAL_TAG = \"2.8\" RULES_JVM_EXTERNAL_SHA = \"79c9850690d7614ecdb72d68394f994fef7534b292c4867ce5e7dec0aa7bdfad\" http_archive( name = \"rules_jvm_external\", strip_prefix = \"rules_jvm_external-%s\" % RULES_JVM_EXTERNAL_TAG, sha256 = RULES_JVM_EXTERNAL_SHA, url = \"https://github.com/bazelbuild/rules_jvm_external/archive/%s.zip\" % RULES_JVM_EXTERNAL_TAG, ) load(\"@rules_jvm_external//:defs.bzl\", \"maven_install\") maven_install( artifacts = [ \"one.microstream:microstream-storage-embedded:08.01.01-MS-GA\" ], ) Bazel [BUILD] maven_jar( name = \"microstream\", artifact = \"one.microstream:microstream-storage-embedded:08.01.01-MS-GA\" ) or in our P2 Update Site: https://repo.microstream.one/repository/update-site/08.01.01-MS-GA These are the different modules that make up MicroStream. ArtifactId Description microstream-base Collection of common utilities. Math, IO, Exceptions, Threads, String operations, and so on. microstream-cache JSR-107 JCache Provider microstream-cache-hibernate Hibernate region factory for jcache implementation microstream-communication Top-level framework for sending and receiving object graphs between Java applications. Only data is transferred, no program code (\"bytecode\"). The other application may be programmed in any language as long as it adheres to the transmitted communication protocol. Usable directly in the program code of a Java application to communicate with other applications or processes. The concrete form of persistence is left open and delivered via a specific implementation as a plugin. Examples of specific persistent forms are binary data, CSV, XML, Json. microstream-communication-binary Plugin framework for the top-level framework communication to convert the transferred object graphs to and from binary data. microstream-configuration General-purpose configuration layer. microstream-configuration-hocon Hocon extension for the configuration layer, which supports hocon, json and ini files. microstream-configuration-yaml Yaml extension for the configuration layer. microstream-afs Abstract file system (AFS) layer. microstream-afs-aws-dynamodb File system implementations for AWS DynamoDB. microstream-afs-aws-s3 File system implementations for AWS S3. microstream-afs-azure-storage File system implementations for Azure Cloud (Azure Storage). microstream-afs-blobstore Base for all blob store file system implementations. microstream-afs-hazelcast File system implementation for Hazelcast. microstream-afs-hibernate Generic file system implementation for JPA / Hibernate. microstream-afs-kafka File system implementation for Apache Kafka. microstream-afs-mongodb File system implementation for MongoDB. microstream-afs-nio File system implementation for the non-blocking IO implementation (java.nio.file) of the JDK. microstream-afs-oraclecloud-objectstorage File system implementation for Oracle Cloud Services (Object Storage). microstream-afs-oracle-coherence File system implementation for Oracle Coherence. microstream-afs-oracle-nosql File system implementation for Oracle NoSQL. microstream-afs-redis File system implementation for Redis. microstream-afs-sql File system implementation for SQL databases. microstream-persistence Base framework to convert a graph of java objects into a persistent form and back. Usable as a common, abstract base for all technologies implementing a specific persistent representation like binary data, CSV, XML or Json. From a technical point of view, storage as well as serialization is a process that puts a graph of Java instances into a persistent form. The only difference is that network communication serialization discards this persistent form while a database solution preserves it. microstream-persistence-binary Extension of the persistence base framework with a concrete implementation of the persistent form as binary data. This persistent form is superior to all text-based formats in storage and performance needs, making it the preferred method for storage and network serialization. microstream-persistence-binary-jdk8 Specialized type handlers for JDK 8 collection types. microstream-persistence-binary-jdk17 Specialized type handlers for immutable JDK 17 collection types. microstream-storage Basic framework to manage a graph of Java data persisted as binary data as a database. Can be used both to implement an embedded database solution (in the same process as the Java application) and a standalone or server-mode database solution (in a separate process). Other forms of persistence than binary data are deliberately not supported because they would not bring any noteworthy advantages but many disadvantages for the task. microstream-storage-embedded Top-level framework for use in a Java application that adds an embedded database solution to its object graphs. Can be used directly in the program code of a Java application to comfortably and efficiently persist its data. microstream-storage-embedded-configuration Layer with support for external configuration files (XML, INI) and convenience functionality to create foundations for the embedded storage. microstream-storage-restadapter Adapter for low-level storage data externalization. Used by the REST service to adapt to a MicroStream Storage. microstream-storage-restclient Abstract REST client interface, which serves as a Java wrapper for the REST API. microstream-storage-restclient-app Executable client app with web user interface, which connects to a REST service. microstream-storage-restclient-jersey REST client implementation which utilizes Jersey as a webservice framework. microstream-storage-restservice Abstract REST service interface, which uses the REST adapter to access low level storage data. microstream-storage-restservice-sparkjava REST service implementation which utilizes SparkJava and provides REST endpoints. microstream-integrations-cdi CDI Extension microstream-integrations-spring-boot Spring Boot Integration","title":"Installation","component":"manual","version":"master","name":"installation","url":"/manual/intro/installation.html","titles":[{"text":"Build Configuration","hash":"_build_configuration","id":1},{"text":"Modules","hash":"_modules","id":2}]},"261":{"id":261,"text":"Tested and officially supported JDKs: JDK Supported Versions Oracle JDK 11, 17, 18 OpenJDK Build by Oracle 11, 17, 18 Adoptium Temurin (HotSpot / OpenJ9) 11, 17, 18 Red Hat OpenJDK 11 Amazon Corretto 11, 17, 18 Azul Zulu 11, 17, 18 Bellsoft Liberica 11, 17, 18 SapMachine 11, 17, 18 ojdkbuild 11 MicroSoft OpenJDK 11, 17 Alibaba Dragonwell 11, 17 IBM Semeru 11, 17, 18 GraalVM 20.0+ Android SDK API level 26+ In theory MicroStream is compatible with all JDK distributions from Version 11 on. Every desktop or server operating system which the supported JVMs are available for Android 8+ MicroStream’s core itself doesn’t have any dependencies to other libraries whatsoever. So you don’t have to worry about potential conflicts in your environment. This was a matter of choice of ours to keep the life of the developers using MicroStream as simple as possible. On the other hand feel free to include any dependencies you need, MicroStream will play along well, e.g. a logging framework of your choice.","title":"System Requirements","component":"manual","version":"master","name":"system-requirements","url":"/manual/intro/system-requirements.html","titles":[{"text":"Supported JDKs","hash":"_supported_jdks","id":1},{"text":"Supported Operating Systems","hash":"_supported_operating_systems","id":2},{"text":"Third Party Libraries","hash":"_third_party_libraries","id":3}]},"262":{"id":262,"text":"Welcome to the MicroStream Reference Manual. This manual includes concepts, instructions and examples to guide you on how to use MicroStream Storage and Cache, version 8.1.1. You should be familiar with the Java programming language and you should have installed your preferred Integrated Development Environment (IDE). But since you are here we guess you got that covered. ;) See Changelog. The API documentation is available at https://docs.microstream.one/api/8.0/. For information on the commercial support for MicroStream see microstream.one. MicroStream is available under Eclipse Public License - v 2.0.","title":"Welcome","component":"manual","version":"master","name":"welcome","url":"/manual/intro/welcome.html","titles":[{"text":"What’s new in 8.1.1","hash":"_whats_new_in_8_1_1","id":1},{"text":"API Docs","hash":"_api_docs","id":2},{"text":"Support","hash":"_support","id":3},{"text":"License","hash":"_license","id":4}]},"263":{"id":263,"text":"Actually, a database is a passive collection of persisted data that can never be live on its own. But the managing thread accessing it can. When an EmbeddedStorageManager is \"started\" it is actually just setup with all kinds of default and user-defined settings and definitions. What is actually \"started\" are the database managing threads that process storing and loading requests. // Setup the database manager and start the managing threads EmbeddedStorageManager storageManager = EmbeddedStorage.start(); Of course, for every start() method, there needs to be something like a shutdown() method. So there is in MicroStream: // Stop accessing the database storageManager.shutdown(); But is it really necessary to call shutdown? Should it be? What if there’s an error and the process stops without calling shutdown()? Will that cause the database to become inconsistent, corrupted, maybe even destroyed? The answer is: It wouldn’t be much of a database solution if a crash could cause any problem in the persisted data. MicroStream data-store is carefully designed in such a fashion that the process it runs in can simply vanish at any point in time and the persisted data will never be corrupted. This is surprisingly simple and reliable to solve: Whenever a .store() call returns, it is guaranteed that the data stored by it has been physically written to the underlying storage layer, usually a file system. Before that, there is no guarantee regarding written data at all. In fact, should the process die before the last byte has been written and secured, the next StorageManager initialization will recognize that and truncate the last partially written store. Either way, all the data that was guaranteed to be written will be consistently available after the next .start(). As a consequence, this safety mechanism makes an explicit .shutdown() call pretty much unnecessary. It doesn’t hurt, but it is effectively more-less the same as just calling System.exit(0);. The only time when an explicit shutdown is really needed is, if the database managing threads shall be stopped but the application itself keeps running. For example, it is perfectly valid to start the StorageManager, work with the database, then stop it, maybe change some configuration or copy files or something like that and then start it up again to continue working. In any other case, the shutdown method can be ignored and the live database can happily just be \"killed\" while running. It is specifically designed to withstand such a treatment. Any live MicroStream database basically consists of three major parts: A place where the persisted data is located. Usually a file system directory. The managing threads accessing (read and write) the persisted data. The EmbeddedStorageManager instance to use and control the database in the application. Apart from a lot of internal components (configuration, processing logic, housekeeping state, etc.), that’s all there is. There is nothing special or \"magic\" about it, no static state, no global registration in the JVM process or something like that. The consequence of this is: If two EmbeddedStorageManager instances are started, each one with a different location for its persistend data, then the application has two live databases! If three or ten or 100 are started, then that’s the number of live databases the application has. There is no limit and no conflict between different databases inside the same application process. The only important thing is that no two running StorageManagers can access the same data location.","title":"Application Life-Cycle","component":"manual","version":"master","name":"application-life-cycle","url":"/manual/storage/application-life-cycle.html","titles":[{"text":"Stopping or Crashing a Live Database","hash":"_stopping_or_crashing_a_live_database","id":1},{"text":"Multiple Databases","hash":"_multiple_databases","id":2}]},"264":{"id":264,"text":"Deleting data does not require performing explicit deleting actions like DELETE FROM table WHERE…​. Instead you just need to clear any references to the object in your object-graph and store those changes. If a stored object is not reachable anymore its data will be deleted from the storage later. This behavior is comparable to Java’s garbage collector. root.MyArrayList.remove(0); storage.store(root.MyArrayList); Deleted data is not erased immediately from the storage files. The erasing from the storage files is done by the housekeeping process.","title":"Deleting Data","component":"manual","version":"master","name":"deleting-data","url":"/manual/storage/deleting-data.html","titles":[]},"265":{"id":265,"text":"pom.xml one.microstream microstream-storage-embedded 08.01.01-MS-GA // Initialize a storage manager (\"the database\") with purely defaults. final EmbeddedStorageManager storageManager = EmbeddedStorage.start(); // print the last loaded root instance, // replace it with a current version and store it System.out.println(storageManager.root()); storageManager.setRoot(\"Hello World! @ \" + new Date()); storageManager.storeRoot(); // shutdown storage storageManager.shutdown(); This simplest example will create a new storage if no existing storage is found, if a existing storage is found it will be loaded (this is all done at line 2 in the example above). In line 6 the current storage’s content is printed. Line 7 assigns some data to the storage, replacing existing data if there is some. In line 8 everything gets stored. When using MicroStream, your entire database is accessed starting at a root instance. This instance is the root object of an object graph that gets persisted by the MicroStream storage logic. While the root instance can be of any type (for example just a collection or an array), it is a good idea to define an explicit root type specific for the application. In this simple example, it is a class called DataRoot, which wraps a single String. public class DataRoot { private String content; public DataRoot() { super(); } public String getContent() { return this.content; } public void setContent(final String content) { this.content = content; } @Override public String toString() { return \"Root: \" + this.content; } } For further information, see root instances. The following code is all that is required to setup a an application backed by a MicroStream database. The application’s convenience root instance is defined and an EmbeddedStorageManager instance, linked to the root, is created (and its database managing threads are started). This is a fully operational Java database application. // Application-specific root instance final DataRoot root = new DataRoot(); // Initialize a storage manager (\"the database\") with the given directory. final EmbeddedStorageManager storageManager = EmbeddedStorage.start( root, // root object Paths.get(\"data\") // storage directory ); // Set content data to the root element, including the time to visualize // changes on the next execution. root.setContent(\"Hello World! @ \" + new Date()); // Store the modified root and its content. storageManager.storeRoot(); This call is all that is necessary to store data in the simplest case. storageManager.storeRoot() is a special case method that always stores the root object. If you want to store any other object than the root itself, just call storageManager.store(modifiedObject) Subsequent calls to storageManager.storeRoot() may not update the whole object graph! storageManager.storeRoot() uses the default lazy storing behavior. Best practice is to safely shutdown the storage manager by simply calling: storageManager.shutdown(); The full code for the Hello World example is on GitHub.","title":"Getting Started","component":"manual","version":"master","name":"getting-started","url":"/manual/storage/getting-started.html","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"Hello World","hash":"_hello_world","id":2},{"text":"The Root Instance","hash":"_the_root_instance","id":3},{"text":"Creating a Database","hash":"creating-a-database","id":4},{"text":"Storing Data","hash":"_storing_data","id":5},{"text":"Stopping a Live Database","hash":"_stopping_a_live_database","id":6}]},"266":{"id":266,"text":"Housekeeping is an internal background logic to optimize the database’s usage of memory and persistent storage space (typically disc space). It is comprised of mechanisms for cleaning up storage files, clearing unneeded cached data and recognizing deleted entities via garbage collection. Housekeeping is performed with a configurable time budget in configurable intervals to make sure it never interferes with the application’s work load too much (see housekeeping configuration). If new versions of an entity are stored or if entities become no longer reachable (meaning the become effectively deleted or \"garbage\" data), their older data is no longer needed. However, the byte sequences representing that old data still exist in the storage files. But since they will never be needed again, they become logical \"gaps\" in the storage files. Space that is occupied, but will never be read again. It might as well be all zeroes or not exist at all. Sadly, unwanted areas cannot simple by \"cut\" from files. Above all because that would ruin all file offsets coming after them. So with every newly stored version of an entity and every entity that is recognized as unreachable \"garbage\", a storage file consists more and more of useless \"gaps\" and less and less of actually used data. This makes the storage space less and less efficient. To prevent eventually ending up with a drive that is filled with useless bytes despite an actually not that big database, the files need to be \"cleaned up\" from time to time. To do this, the Housekeeping occasionally scans the storage files. If their \"payload\" ratio goes below the configured limit, the affected files will be retired: all data that belongs to still live entities is copied to a new file. Then the old file consists of 100% unneeded gap data and can safely be deleted. Which ratio value to set in the configuration is a matter of taste or, more precisely, depends on each individual application’s demands. A value of 1.0 (100%) means: only files with 100% payload, so no gaps at all, are acceptable. This means that for every store that contains at least one new version of an already existing entity, the corresponding storage file will contain the slightest gap, thus dropping below the demanded ratio of 100% and as a consequence, will be retired on the next occasion. This very aggressive cleanup strategy will keep the disc space usage at a perfect minimum, but at the cost of enormous amounts of copied data, since virtually every store will cause one or more storage files to be retired and their content be shifted into a new file. Respectively, a value of 0.0 (0%) means something like: \"Never care about gaps, just fill up the disc until it bursts.\" This keeps the disc write loads for the file cleanup at 0, but at the cost of rapidly eating up disc space. The best strategy most probably lies somewhere in between. Somewhere between 0.1 and 0.9 (10% and 90%). The default value is 0.75 (75%). So a storage file containing up to 25% of unused gap data is okay. Containing more gaps that 25% will cause a storage file to be retired. In addition to the payload ratio check, the file cleanup also retired files tha are too small or too big. For example: The application logic might commit a single store that is 100 MB in size. But the storage files are configured to be no larger than 10 MB (for example to keep a single file cleanup nice and fast). A single store is always written as a whole in the currently last storage file. The reason for this is to process the store as fast as possible and quickly return control to the application logic. When the housekeeping file cleanup scan encounters such an oversized file, it will retire it immediately by splitting it up across 10 smaller files and then deleting the oversized file. A similar logic applies to files that are too small. Upper and lower size bounds can be freely configured to arbitrary values. The defaults are 1 MB and 8 MB. To avoid repeated reads to storage files (which are incredibly expensive compared to just reading memory), data of once loaded entities is cached in memory. If an entity’s cached data is not requested again for a certain amount of time in relation to how much data is already cached, it is cleared from the cache to avoid unnecessarily consuming memory. The mechanism to constantly evaluate and clear cached data where applicable, is part of the housekeeping. The aggressiveness of this mechanism can be configured via the housekeeping configuration. In a reference-based (or graph-like) data paradigm, instances never have to be deleted explicitly. For example, there is no \"delete\" in the java language. There are only references. If those references are utilized correctly, deleting can be done fully automatically without any need for the developer to care about it. This is called \"garbage collection\". The concept is basically very simple: when the last reference to an instance is cut, that instance can never be accessed again. It becomes \"garbage\" that occupies memory with it data that is not needed any longer. To identify those garbage instances, all an algorithm (the \"garbage collector\") has to do is to follow every reference, starting at some defined root instance (or several) of a graph and mark every instance it encounters as \"reachable\". When it has no more unvisited instances in its queue, the marking is completed. Every instance that is not marked as reachable by then must be unreachable garbage and will be deleted from memory. Similar to the JVM’s garbage collection to optimize its memory consumption, MicroStream has a garbage collection of its own, but for the level of persistent storage space instead of memory space. Housekeeping can also be triggered manually from the StorageConnection . Related methods are: issueCacheCheck(nanoTimeBudgetBound) issueCacheCheck(nanoTimeBudgetBound, entityEvaluator) issueFileCheck(nanoTimeBudgetBound) issueFileCheck(nanoTimeBudgetBound, fileDissolvingEvaluator) issueFullCacheCheck() issueFullCacheCheck(entityEvaluator) issueFullFileCheck() issueFullFileCheck(fileDissolvingEvaluator) issueFullGarbageCollection() issueGarbageCollection(nanoTimeBudget) All Housekeeping methods can be given a defined time budget or can be run until full completion.","title":"Housekeeping","component":"manual","version":"master","name":"housekeeping","url":"/manual/storage/housekeeping.html","titles":[{"text":"File cleanup:","hash":"_file_cleanup","id":1},{"text":"Cache cleanup","hash":"_cache_cleanup","id":2},{"text":"Garbage collection","hash":"_garbage_collection","id":3},{"text":"Explicit Housekeeping","hash":"_explicit_housekeeping","id":4}]},"267":{"id":267,"text":"MicroStream provides an API to import and export persisted data of the storage. It is pretty much the same as writing and reading a backup. The records in the storage are distributed in lots of files and folders, depending on channel count and other settings. To get order in the chaos the export produces one file per type. This files are used again by the import to read the data into the storage. The created binary type data files contain only records of the according type, nevertheless they have the same format as the channel storage files. Export // Setup file system and storage, used in all examples below NioFileSystem fileSystem = NioFileSystem.New(); EmbeddedStorageManager storage = EmbeddedStorage.start( fileSystem.ensureDirectoryPath(\"storage\") ); StorageConnection connection = storage.createConnection(); StorageEntityTypeExportStatistics exportResult = connection.exportTypes( fileSystem.ensureDirectoryPath(\"export-dir\") ); Import connection.importFiles(exportResult.files()); It is also possible to convert the exported binary files to a human readable format, namely CSV. Why CSV? Contrary to XML or JSON, CSV is perfectly suited to represent records with the least possible overhead. There are a lot of tools, like spreadsheet editors, which can read and modify CSV files. The file’s size is at the possible minimum and the performance of the converter is significantly better than with the other formats. Binary to CSV StorageDataConverterTypeBinaryToCsv converter = StorageDataConverterTypeBinaryToCsv.New( fileSystem.ensureDirectoryPath(\"csv-dir\"), storage.typeDictionary() ); converter.convertDataFiles(exportResult.files()); CSV to Binary StorageDataConverterTypeCsvToBinary converter = StorageDataConverterTypeCsvToBinary.New( storage.typeDictionary(), fileSystem.ensureDirectoryPath(\"csv-dir\") ); converter.convertCsv(fileSystem.ensureFilePath(\"type1.csv\"));","title":"Import / Export","component":"manual","version":"master","name":"import-export","url":"/manual/storage/import-export.html","titles":[{"text":"Data Conversion","hash":"_data_conversion","id":1}]},"268":{"id":268,"text":"MicroStream Data-Store is a native Java object graph storage engine. From a technical point of view it serves one purpose only: To fully or partially persist and restore a Java object graph in the simplest way possible for the user. MicroStream Data-Store is a storage engine, but no database management system (DBMS). Many features that typical DBMS provide have been left out on purpose. The reason is that those features exist to make a DBMS something of a server application platform of an \"old kind\" on top of its data store functionality: A standalone process with user management, connection management, session handling, often even with a programming language of its own, a querying interface (SQL), etc. Today, all of those server application features are already and much better handled by dedicated server applications (the \"new kind\"), implemented in a modern language like Java. They have their built-in user, connection and session management, the querying interface to the outside world are typically web services instead of SQL, etc. But those modern server applications still lack one important thing: an easy to use and technically efficient way to store and restore their application’s data. So a \"new kind\" server often uses an \"old kind\" server just to do the data storing. This comes at the price of catching all the overhead and problems of redundant user, connection and session management AND the outdated concepts and limitations of the old querying interface (SQL). Isn’t that very weird and frustratingly complicated? Why not simply include a modern data storing library in the modern server and be done with it? A storing library that perfectly fits the modern technology and brings in no redundant overhead or complication of a secondary outdated wannabe server process. This is exactly what MicroStream Data-Store is and the reason why it is intentionally not a DBMS but \"only\" a storage engine. One might think the easiest way to store and load data in Java would be Java’s built-in serialization. However, it turned out long ago to be very limited, making it hard, if not impossible, to be used as a replacement for a DBMS: Only complete object graphs can be stored and restored, which is unacceptable for all but very small databases. It is very inefficient in terms of storage size and performance. It does not handle changing class structures very well, basically forbidding classes of persisted entities to ever change or introducing massive manual effort to compensate. It cannot handle third-party classes that do not implement Serializable but cannot be changed. In short: The Java Serialization is not an acceptable data store solution and hence no valid replacement for those outdated DBMS. MicroStream Data-store is such a solution: It can persist, load or update object graphs partially and on-demand. It is very efficient both size- and performance-wise. It handles changing class structures by mapping data in the old structure to the current structure during loading; implicitly via internal heuristics or explicitly via a user-defined mapping strategy. It can automatically handle any Java constructs, only excluding those that are technically or reasonably not persistable (e.g. lambdas, proxies or instances with ties to JVM-internals like threads, etc.). MicroStream is what the Java Serialization should have been and it is the first and only really fitting data storing solution for modern applications, completely removing the need to attach a wannabe secondary server DBMS just to store data.","title":"Storage","component":"manual","version":"master","name":"index","url":"/manual/storage/index.html","titles":[]},"269":{"id":269,"text":"The MicroStream engine takes care of persisting your object graph. When you do queries, they are not run on the data stored by MicroStream, queries run on your data in the local system memory. There is no need to use special query languages like SQL. All operations can be done with plain Java. MicroStream does not restrict you in the way you query your object graph. You are totally free to choose the best method fitting to your application. One possibility may be Streams if you use the standard Java collections. public List getUnAvailableArticles() { return shop.getArticles().stream() .filter(a -> !a.available()) .collect(Collectors.toList()) ; } Of course you must care about lazy loading if you use that feature.","title":"Queries","component":"manual","version":"master","name":"queries","url":"/manual/storage/queries.html","titles":[]},"270":{"id":270,"text":"Object instances can be stored as simple records. One value after another as a trivial byte stream. References between objects are mapped with unique numbers, called ObjectId, or short OID. + With both combined, byte streams and OIDs, an object graph can be stored in a simple and quick way, as well as loaded, as a whole or partially. But there is a small catch. Where does it start? What is the first instance or reference at startup? + Strictly speaking \"nothing\". That’s why at least one instance or a reference to an instance must be registered in a special way, so that the application has a starting point from where the object graph can be loaded. This is a \"Root Instance\". Same difference, another problem are instances which are references by constant fields in Java classes. These aren’t created when the records are loaded from the database, but by the JVM while loading the classes. Without special treatment, this would be a problem: The application, meaning the JVM or the JVM process, starts, the constant instances are created by the JVM, one or more of them are stored, then the application shuts down. The stored data of the constants are now stored with a certain OID in the database. The application starts again. The Constant instances are created again by the JVM. The data records are read by MicroStream. The problem is: How should the application know what values, which are stored with a certain OID, belong to which constant? The JVM created everything from scratch at startup and doesn’t know anything about OIDs. To resolve this, the constant instances must be registered, just like the entity graph’s root instance. Then MicroStream can associate the constant instances with the stored data via the OIDs. Constant instances can be thought of as JVM-created implicit root instances for the object graph. In both cases, root and constant instances, it is about registering special starting points for the object graph in order to load it correctly. For MicroStream, from a plain technical view, both cases don’t make a difference. In the most common cases, nothing at all. The default behavior is enough to get things going. By default, a single instance can be registered as the entity graph’s root, accessible via EmbeddedStorage.root(). + Therefore, this is already a fully fledged (although tiny) database application: // Start the database manager EmbeddedStorageManager storageManager = EmbeddedStorage.start(); // Set the entity (graph) as root storageManager.setRoot(\"Hello World\"); // Store root storageManager.storeRoot(); If you are working with Microstream technology in a multi-threaded environment, there are a few things you need to pay extra attention to. When using standard frameworks, you often work in a multi-threaded environment. If you are using the older JDBC approach, you create a copy of your data that you work with within a single thread, modify the data, and then save it back in a database trace. Microstream works with data directly, allowing it to achieve significantly better performance parameters. However, for developers, this means that any reading and writing to this shared object graph must be synchronized. To make it easier to use within your application, we have prepared a simple way for you to do so. XThreads.executeSynchronized(() -> { root.changeData(); storageManager.store(root); }); This approach will immediately provide you with several benefits: Any changes to your object graph will be synchronized, every other thread will see the current value. Avoid Deadlocks In principle, you prevent the object graph from being modified at the same time it is saved. The simple default approach has its limits when the application defines an explicit root instance that must be updated/filled from the database directly during database initialization. Something like this: // Empty application-specific root, to be filled during start() MyApplicationRoot root = new MyApplicationRoot(); // Start the database manager EmbeddedStorageManager storage = EmbeddedStorage.start(); // root must be filled at this point... but how? root.printAllMyEntities(); To solve this, a custom root instance can be directly registered at the database setup. In the simplest case, is just has to be passed to .start();: // Empty application-specific root, to be filled during start() MyApplicationRoot root = new MyApplicationRoot(); // Start the database manager with a reference to the application's root. EmbeddedStorageManager storageManager = EmbeddedStorage.start(root); // root is \"magically\" filled at this point. (Yay!) root.printAllMyEntities(); Internally, the two concepts (default root and custom root) and handled by different mechanisms. This can be seen from the two different methods storageManager.defaultRoot(); storageManager.customRoot(); The simplified method storageManager.root(); automatically chooses the variant that is used. Since neither of those three methods can know the concrete type of the root instance (and adding a type parameter just for that would have been a complication overkill), they all can only be typed to return Object. So, to avoid annoying and dangerous casts, it is best to keep a direct reference to a custom root instance as shown in the code snippet above. Likewise, storageManager.storeRoot(); works for both variants, so there is no need to worry about how to store which one. Subsequent calls to storageManager.storeRoot() may not update the whole object graph! storageManager.storeRoot() uses the default lazy storing behavior.","title":"Root Instances","component":"manual","version":"master","name":"root-instances","url":"/manual/storage/root-instances.html","titles":[{"text":"What Must Be Done in the Application?","hash":"_what_must_be_done_in_the_application","id":1},{"text":"Shared Mutable Data","hash":"_shared_mutable_data","id":2},{"text":"Synchronize access to shared mutable data","hash":"_synchronize_access_to_shared_mutable_data","id":3},{"text":"Custom Root Instances","hash":"_custom_root_instances","id":4}]},"271":{"id":271,"text":"MicroStream comes with a CDI extension which allows accessing the functionality of MicroStream through the usage of a few annotations. It is available within this artifact: pom.xml one.microstream microstream-integrations-cdi 08.01.01-MS-GA The integration requires the javax namespace and requires a CDI 2.0 implementation and an Eclipse MicroProfile Config 2.0 implementation. When you like to use in a Jakarta EE 9+ runtie, you can make use of the following artifact pom.xml one.microstream microstream-integrations-cdi3 08.01.01-MS-GA This version requires the jakarta namespace and requires a CDI 3.0 implementation or higher and an Eclipse MicroProfile Config 3.0 implementation or higher. This CDI extension makes use of the Extension interface and the BeanManager functionality, so it might not work in a strict Jakarta EE 10 Core Profile product that only supports the CDI Lite functionality. The configuration of the StorageManager can be done using key/value pairs that are provided by MicroProfile Config. The configuration keys must be prefixed by one.microstream one.microstream.storage-directory=/opt/data/microstream one.microstream.channel-count=2 Since the - character is not supported in some sources (like the environment variables), you can also define the configuration keys using the . character. one.microstream.storage.directory=/opt/data/microstream one.microstream.channel.count=2 Besides that, the regular MicroProfile Config rules about keys are applied (since we are using MicroProfile Config directly, see specification). The configured and started StorageManager is a CDI bean and thus can be injected or retrieved programmatically. @Inject private StorageManager storageManager; public void someMethod() { StorageManager storageManager = CDI.current().select(StorageManager.class).get(); } The StorageManager configuration can be customized by CDI beans that implement the interface one.microstream.integrations.cdi.types.config.EmbeddedStorageFoundationCustomizer. The customize method is called with an EmbeddedStorageFoundation which allows you to fully customize the StorageManager that will be created. You can for example, add the specific Type Handlers for JDK 8 as described on the documentation. After the StorageManager is created, the CDI beans that implement one.microstream.integrations.cdi.types.config.StorageManagerInitializer are called. You have the opportunity to perform actions on the StorageManager or root object. Following rules apply to the StorageManager that is passed to the initialize method of the interface. The StorageManager is already started unless you specified the configuration value one.microstream.autoStart=false. If you have used the @Storage annotation on a class, the StorageManager is already associated with an instance of that class as the Root object. There is a second option to configure and retrieve the StorageManager, and it makes use of the MicroStream functionality to read the configuration from any file. @Inject @ConfigProperty(name = \"one.microstream.ini\") private StorageManager storageManager; The above construct makes use of the MicroProfile Config functionality that you convert the value of the key one.microstream.ini and convert it into a StorageManager. The value of the key is expected to point to an existing file. The formats XML, INI, and properties are supported. The StorageManager is also fully configured and started just as you would use it when using the first option of configuration. If you define it multiple times, within different beans for example, you always receive the same instance of the StorageManager when you specify the same value for the name member of the @ConfigProperty annotation. This way, you can define and use multiple _StorageManager_s within your application. The customizer and initializer features described earlier as CDI beans implementing a specific interface,are also available when you use the MicroProfile Config annotation (@ConfigProperty). Since you can define multiple StorageManager_s this way, you can distinguish between them based on the _database name. The database name can be set by using the following property within the configuration file (example makes use of the properties format, but it is also supported in the other formats) database-name=theName If this property is not specified, the value of the MicroProfile config key (used within the name member of @ConfigProperty) is used. Within the customizer and initializer you can use this to perform the required actions based on the instance you receive. EmbeddedStorageFoundation.getDataBaseName(); StorageManager.databaseName(); The root object can be indicated by using the @Storage annotation on the class. This annotation converts the POJO into a CDI bean (there is no need to use any scope-defining annotation) with Application Scope. This is only supported when you inject the StorageManager without making use of the MicroProfile Config @ConfigProperty annotation. Besides converting it into a CDI bean, any field injection within this class is also resolved. The integration also defines the instance of the class that is created as the root object (StorageManager.setRoot()) and stores the initial value (StorageManager.storeRoot()) when storageManager does not have a root object assigned yet (this happens only the very first time when you start up your application and the storage doesn’t contain any data yet) The POJO must have a (default) no-argument constructor so that the integration can create an instance of it. You can only annotate 1 class with the @Storage annotation, if you have marked multiple, the deployment of your application will fail at the CDI validation phase.","title":"CDI Extension","component":"manual","version":"master","name":"cdi","url":"/manual/misc/integrations/cdi.html","titles":[{"text":"Configuration","hash":"_configuration","id":1},{"text":"Root object","hash":"_root_object","id":2}]},"272":{"id":272,"text":"The Helidon integration for MicroStream ships with the official Helidon releases, and is hosted at Oracle’s Github repository. For more information see the Helidon Github Repository. Official Helidon site: https://helidon.io","title":"Helidon Integration","component":"manual","version":"master","name":"helidon","url":"/manual/misc/integrations/helidon.html","titles":[]},"273":{"id":273,"text":"Various MicroStream integrations are currently available. Integrations created by MicroStream are Spring Boot Jakarta EE CDI Quarkus And MicroStream is also integrated by the following vendors Helidon Micronaut","title":"Integrations","component":"manual","version":"master","name":"index","url":"/manual/misc/integrations/index.html","titles":[]},"274":{"id":274,"text":"MicroStream comes with a Quarkus extension which allows accessing the functionality of MicroStream through the usage of a few annotations. MicroStream extension is not available on the Quarkus multiverse nor on the Quarkus code generator. It is available after adding the MicroStream Quarkus extension to your application. You can use the following Maven command for example: Add Quarkus extension mvn quarkus:add-extension -Dextensions=\"one.microstream:microstream-quarkus-extension:08.00.00-MS-GA\" The extension requires Quarkus 2.11.1 as a minimal version. If you are running Quarkus 3, use the following command in your project: Add Quarkus 3 extension mvn quarkus:add-extension -Dextensions=\"one.microstream:microstream-quarkus3-extension:09.00.00-MS-GA\" The migration from version 2 to 3 doesn’t require any code changes related to the MicroStream integration classes. The configuration of the StorageManager can be done using key/value pairs that are provided by Quarkus configuration. The configuration keys must be prefixed by one.microstream one.microstream.storage-directory=/opt/data/microstream one.microstream.channel-count=2 Since the - character is not supported in some sources (like the environment variables), you can also define the configuration keys using the . character. one.microstream.storage.directory=/opt/data/microstream one.microstream.channel.count=2 The configured and started StorageManager is a CDI bean and thus can be injected or retrieved programmatically. @Inject private StorageManager storageManager; public void someMethod() { StorageManager storageManager = CDI.current().select(StorageManager.class).get(); } public void someMethodWithArc() { StorageManager storageManager = Arc.container().select(StorageManager.class).get(); } The StorageManager configuration can be customized by CDI beans that implement the interface one.microstream.integrations.quarkus.types.config.EmbeddedStorageFoundationCustomizer. The customize method is called with an EmbeddedStorageFoundation which allows you to fully customize the StorageManager that will be created. You can for example, add the specific Type Handlers for JDK 8 as described on the documentation. After the StorageManager is created, the CDI beans that implement one.microstream.integrations.quarkus.types.config.StorageManagerInitializer are called. You have the opportunity to perform actions on the StorageManager or root object. Following rules apply to the StorageManager that is passed to the initialize method of the interface. The StorageManager is already started unless you specified the configuration value one.microstream.autoStart=false. If you have used the @Storage annotation on a class, the StorageManager is already associated with an instance of that class as the Root object. The root object can be indicated by using the @Storage annotation on the class. This annotation converts the POJO into a CDI bean (there is no need to use any scope-defining annotation) with Application Scope. Besides converting it into a CDI bean, any field injection within this class is also resolved. The integration also defines the instance of the class that is created as the root object (StorageManager.setRoot()) and stores the initial value (StorageManager.storeRoot()) when storageManager does not have a root object assigned yet (this happens only the very first time when you start up your application and the storage doesn’t contain any data yet) The POJO must have a (default) no-argument constructor so that the integration can create an instance of it. You can only annotate 1 class with the @Storage annotation, if you have marked multiple, the start of your application will fail with an Exception. You can activate debug logging to analyse the behaviour of the MicroStream core or the extension. Add the following entry to application.properties file: quarkus.log.category.\"one.microstream\".level=DEBUG This will set the debug level of all loggers related to MicroStream to the Debug level. quarkus.log.category.\"one.microstream.integrations.quarkus\".level=DEBUG The above setting only activate the debug level for the extension code.","title":"Quarkus Extension","component":"manual","version":"master","name":"quarkus","url":"/manual/misc/integrations/quarkus.html","titles":[{"text":"Configuration","hash":"_configuration","id":1},{"text":"Root object","hash":"_root_object","id":2},{"text":"Debug logging","hash":"_debug_logging","id":3}]},"275":{"id":275,"text":"MicroStream comes with a Spring Boot integration. It is available within this artifact: pom.xml one.microstream microstream-integrations-spring-boot 08.01.01-MS-GA Official Spring Boot site: https://spring.io/projects/spring-boot The integration requires Spring Boot 2.x (with version 2.1.0.RELEASE being the minimal supported one). If you are running Spring Boot 3, use the following dependency in your project: pom.xml one.microstream microstream-integrations-spring-boot3 08.01.01-MS-GA The migration from version 2 to 3 doesn’t require any code changes related to the MicroStream integration classes. Internally, the integration makes now use of the AutoConfiguration option (where the Spring Boot 2 integration code makes use of the Spring Factories config file) Since version 8.0.0, the StorageManager that is instantiated by the integration is also started where the previous version of the integration did not start the manager. You can have the old behaviour of a StorageManager that is not started by specifying the config value one.microstream.auto-start=false. The configuration of the StorageManager can be done using key/value pairs that are provided by Spring Boot external Configuration. The configuration keys must be prefixed by one.microstream one.microstream.storage-directory=/opt/data/microstream one.microstream.channel-count=2 The list of all MicroStream configuration properties and their meaning are listed on our documentation page. The configuration values are handled using the typesafe configuration approach, and you can read these values by accessing the MicrostreamConfigurationProperties Spring bean. You can either create a StorageManager yourself from an EmbeddedStorageFoundation Spring bean or access a fully configured one through the StorageManager Spring bean. Be aware that since both share the same configuration values, if you create and start a StorageManager from EmbeddedStorageFoundation, it will conflict with the one from the StorageManager Spring bean. When you use the EmbeddedStorageFoundation Spring bean, don’t access the StorageManager bean. The EmbeddedStorageFoundation one is ideal if your Spring application is performing one-of tasks like for example Batch processing. The other one is suited in most cases and the StorageManager can be customized and initialized before it is actually used. Also, note that when using the feature of having the Root object as Spring Bean already creates and initializes the StorageManager. The StorageManager configuration can be customized by Spring beans that implement the interface one.microstream.integrations.spring.boot.types.config.EmbeddedStorageFoundationCustomizer. The customize method is called with an EmbeddedStorageFoundation which allows you to fully customize the StorageManager that will be created. You can for example, add the specific Type Handlers for JDK 8 as described on the documentation. After the StorageManager is created, the Spring beans that implement one.microstream.integrations.spring.boot.types.config.StorageManagerInitializer are called. You have the opportunity to perform actions on the StorageManager or root object. Following rules apply to the StorageManager that is passed to the initialize method of the interface. The StorageManager is already started unless you specified the configuration value one.microstream.auto-start=false. If you have used the @Storage annotation on a class, the StorageManager is already associated with an instance of that class as the Root object. The root object can be indicated by using the @Storage annotation on the class. This annotation converts the POJO into a Spring bean (The annotation is a Spring Qualifier that makes the class also a Component). Besides converting it into a Spring bean, any field or setter injection within this class is also resolved. Please note that constructor injection is not supported and will result in an error indicating that the class has not a no-argument constructor. The integration also defines the instance of the class that is created as the root object (StorageManager.setRoot()) and stores the initial value (StorageManager.storeRoot()) when storageManager does not have a root object assigned yet (this happens only the very first time when you start up your application and the storage doesn’t contain any data yet) You can only annotate 1 class with the @Storage annotation, if you have marked multiple, the creation of the Storage Spring bean will fail with a BeansException. When using the @Storage functionality, you as a developer should not change the root object of the StorageManager yourself anymore as that will lead to conflicts and mismatches between the Spring bean created for the Root object and your newly set instance on the StorageManager. When using @Storage, the Root initialization when there is no data in the data storage yet, happens asynchronously from the StorageManager initialization. This means that your code that uses the StorageManager bean can retrieve/operate on a null root when initialization is still in progress. As of version 8.0.0, the integration support multiple StorageManagers. Within Spring (Boot) you can define multiple beans that implement the same interface by assigning it a certain label with the @Qualifier annotation. Using the same principle, you can define multiple StorageManagers. And in this case, also the Root object (through the @Storage annotation) and StorageManagerInitializer and EmbeddedStorageFoundationCustomizer concepts are supported. Since we cannot know which qualifier (label) you want to use for your different _StorageManager_s, the Spring Boot integration cannot create the beans without a little help/configuration from the developer. You can define the StorageManager you need and assign through the following Configuration Bean. @Configuration public class DefineStorageManagers { private final StorageManagerProvider provider; public DefineStorageManagers(StorageManagerProvider provider) { this.provider = provider; } @Bean @Qualifier(\"green\") public EmbeddedStorageManager getGreenManager() { return provider.get(DatabaseColor.GREEN.getName()); } @Bean @Qualifier(\"red\") public EmbeddedStorageManager getRedManager() { return provider.get(DatabaseColor.RED.getName()); } } The StorageManagerProvider is a helper bean from the Spring Boot integration that can fully initialise the StorageManager and the root by providing a qualifier label. The qualifier label is used as prefix to look for the appropriate configuration values. one.microstream.red.storage-directory=red-db one.microstream.red.channel-count=2 one.microstream.green.storage-directory=green-db one.microstream.green.channel-count=1 A StorageManagerInitializer`and `EmbeddedStorageFoundationCustomizer implementation can check which instance it received by looking at the database name property which reflects the Qualifier label that you used. @Override public void initialize(final StorageManager storageManager) { if (!\"red\".equals(storageManager.databaseName())) { // This customizer operates on the Red database only return; } /// Perform the required initialization. } Another option is that you annotate the class with @Qualifier and the Initializer or Customizer is only called for items with matching qualifier label in that case. Instead of 2 named StorageManager s through a Qualifier, you can also use one default (since we define a @Primary annotated StorageManager within the integration) and one that you define yourself as we have done above. In that case, the configuration keys that you need to use are one.microstream. and one.microstream. and the database name for the default one is Primary. By default, Spring creates all singleton beans at the start of the application. The Spring beans defined by the MicroStream integration, like StorageManager and Storage root bean, are singletons. So they are created at startup which means that for example when you are using a database as a storage target, the database must be available and accessible when the application starts up. When this is not desired, because the database might be only available when the user request arrives and not at application startup, you can use the Provider option. Add the Jakarta Inject dependency to your project jakarta.inject jakarta.inject-api 1.0 And use injection based on the Provider and not the actual class itself. private final Provider storageManagerProvider; public UserRepository(Provider storageManagerProvider) { this.storageManagerProvider = storageManagerProvider; } When you need to access the StorageManager Spring bean, you perform storageManagerProvider.get() statement, and only at that point the StorageManager is created as a Spring bean. This allows you to delay the creation until the first user request. MicroStream Spring module supports standard Spring logging, so you can add this into your config: logging.level.one.microstream=debug to obtain all MicroStream configuration keys: 2021-08-23 15:16:02.979 DEBUG 18469 --- [ main] o.m.spring.MicrostreamConfiguration : Microstream configuration items: 2021-08-23 15:16:02.979 DEBUG 18469 --- [ main] o.m.spring.MicrostreamConfiguration : storage-filesystem.sql.postgres.password : xxxxx 2021-08-23 15:16:02.994 DEBUG 18469 --- [ main] o.m.spring.MicrostreamConfiguration : storage-filesystem.sql.postgres.data-source-provider : one.microstream.test.spring.MyDataSourceProvider 2021-08-23 15:16:02.994 DEBUG 18469 --- [ main] o.m.spring.MicrostreamConfiguration : storage-directory : microstream_storage 2021-08-23 15:16:02.994 DEBUG 18469 --- [ main] o.m.spring.MicrostreamConfiguration : storage-filesystem.sql.postgres.user : postgres Key values containing \"password\" are replaced by \"xxxxx\".","title":"Spring Boot Integration","component":"manual","version":"master","name":"spring-boot","url":"/manual/misc/integrations/spring-boot.html","titles":[{"text":"Breaking changes","hash":"_breaking_changes","id":1},{"text":"Configuration","hash":"_configuration","id":2},{"text":"Root object","hash":"_root_object","id":3},{"text":"Multiple Managers","hash":"_multiple_managers","id":4},{"text":"Late initialization","hash":"_late_initialization","id":5},{"text":"Logging","hash":"_logging","id":6}]},"276":{"id":276,"text":"MicroStream supports a variety of storage targets. Through an abstracted file system (AFS), it is possible to connect to a lot of different back ends. The AFS allows to use folders and files, like in all common file systems, but with different connectors it is possible to use different solutions as the actual storage. To connect to the local file system use the Java Non-Blocking IO (NIO) connector, which is part of the base module, so no additional dependency is needed. EmbeddedStorage.start(Paths.get(\"path\", \"to\", \"storage\")); Internally this creates and uses a NioFileSystem and is a shortcut for: NioFileSystem fileSystem = NioFileSystem.New(); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"path\", \"to\", \"storage\")); The file system API is the same for all connectors, like for S3. This is part of another module. one.microstream microstream-afs-aws-s3 08.01.01-MS-GA // create S3 client S3Client client = ...; BlobStoreFileSystem fileSystem = BlobStoreFileSystem.New( // use caching connector S3Connector.Caching(client) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"path\", \"to\", \"storage\"));","title":"Storage Targets","component":"manual","version":"master","name":"index","url":"/manual/storage/storage-targets/index.html","titles":[]},"277":{"id":277,"text":"The NIO connector can access the local or mounted file systems, as well as different in-memory file systems. This is probably the easiest way to start, especially for prototyping and testing purposes. For productive use, the other file systems are preferred. NioFileSystem fileSystem = NioFileSystem.New(); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"path\", \"to\", \"storage\")); The local file system is the default setting. If you want to use external configuration, no further action is required.","title":"Local File System","component":"manual","version":"master","name":"local-file-system","url":"/manual/storage/storage-targets/local-file-system.html","titles":[{"text":"Configuration","hash":"_configuration","id":1}]},"278":{"id":278,"text":"one.microstream microstream-afs-aws-dynamodb 08.01.01-MS-GA DynamoDbClient client = ...; BlobStoreFileSystem fileSystem = BlobStoreFileSystem.New( DynamoDbConnector.Caching(client) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration AWS DynamoDB can be set as follows. microstream-storage.properties storage-filesystem.aws.dynamodb.credentials.type=static storage-filesystem.aws.dynamodb.credentials.access-key-id=my-access-key-id storage-filesystem.aws.dynamodb.credentials.secret-acces-key=my-secret-access-key storage-filesystem.aws.dynamodb.credentials.region=us-east-1 Property Description endpoint-override The endpoint with which the SDK should communicate. region Configure the region with which the SDK should communicate. If this is not specified, the SDK will attempt to identify the endpoint automatically using the following logic: Check the 'aws.region' system property for the region. Check the 'AWS_REGION' environment variable for the region. Check the {user.home}/.aws/credentials and {user.home}/.aws/config files for the region. If running in EC2, check the EC2 metadata service for the region. credentials.type The type of the credentials provider. Supported values are: \"environment-variables\" Credentials will be loaded from the AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY and AWS_SESSION_TOKEN environment variables. \"system-properties\" Credentials will be loaded from the aws.accessKeyId, aws.secretAccessKey and aws.sessionToken system properties. \"static\" Credentials will be loaded from the credentials.access-key-id and credentials.secret-access-key properties. \"default\" Credentials provider chain that looks for credentials in this order: Java System Properties - aws.accessKeyId and aws.secretKey Environment Variables - AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY Credential profiles file at the default location (~/.aws/credentials) shared by all AWS SDKs and the AWS CLI Credentials delivered through the Amazon EC2 container service if AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\" environment variable is set and security manager has permission to access the variable, Instance profile credentials delivered through the Amazon EC2 metadata service credentials.access-key-id The access key id, used when \"credentials.type\" is \"static\". credentials.secret-access-key The secret access key, used when \"credentials.type\" is \"static\". Depending on the amount of data and transactions, charges may apply depending on service usage. Please check with your service provider for details.","title":"AWS DynamoDB","component":"manual","version":"master","name":"aws-dynamodb","url":"/manual/storage/storage-targets/blob-stores/aws-dynamodb.html","titles":[{"text":"Configuration","hash":"_configuration","id":1},{"text":"Supported properties","hash":"_supported_properties","id":2}]},"279":{"id":279,"text":"one.microstream microstream-afs-aws-s3 08.01.01-MS-GA S3Client client = ...; BlobStoreFileSystem fileSystem = BlobStoreFileSystem.New( S3Connector.Caching(client) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration AWS S3 can be set as follows. microstream-storage.properties storage-filesystem.aws.s3.credentials.type=static storage-filesystem.aws.s3.credentials.access-key-id=my-access-key-id storage-filesystem.aws.s3.credentials.secret-acces-key=my-secret-access-key storage-filesystem.aws.s3.credentials.region=us-east-1 Property Description endpoint-override The endpoint with which the SDK should communicate. region Configure the region with which the SDK should communicate. If this is not specified, the SDK will attempt to identify the endpoint automatically using the following logic: Check the 'aws.region' system property for the region. Check the 'AWS_REGION' environment variable for the region. Check the {user.home}/.aws/credentials and {user.home}/.aws/config files for the region. If running in EC2, check the EC2 metadata service for the region. credentials.type The type of the credentials provider. Supported values are: \"environment-variables\" Credentials will be loaded from the AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY and AWS_SESSION_TOKEN environment variables. \"system-properties\" Credentials will be loaded from the aws.accessKeyId, aws.secretAccessKey and aws.sessionToken system properties. \"static\" Credentials will be loaded from the credentials.access-key-id and credentials.secret-access-key properties. \"default\" Credentials provider chain that looks for credentials in this order: Java System Properties - aws.accessKeyId and aws.secretKey Environment Variables - AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY Credential profiles file at the default location (~/.aws/credentials) shared by all AWS SDKs and the AWS CLI Credentials delivered through the Amazon EC2 container service if AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\" environment variable is set and security manager has permission to access the variable, Instance profile credentials delivered through the Amazon EC2 metadata service credentials.access-key-id The access key id, used when \"credentials.type\" is \"static\". credentials.secret-access-key The secret access key, used when \"credentials.type\" is \"static\". Depending on the amount of data and transactions, charges may apply depending on service usage. Please check with your service provider for details.","title":"AWS S3","component":"manual","version":"master","name":"aws-s3","url":"/manual/storage/storage-targets/blob-stores/aws-s3.html","titles":[{"text":"Configuration","hash":"_configuration","id":1},{"text":"Supported properties","hash":"_supported_properties","id":2}]},"280":{"id":280,"text":"one.microstream microstream-afs-azure-storage 08.01.01-MS-GA BlobServiceClient client = ...; BlobStoreFileSystem fileSystem = BlobStoreFileSystem.New( AzureStorageConnector.Caching(client) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration Azure Storage can be set as follows. microstream-storage.properties storage-filesystem.azure.storage.credentials.type=basic storage-filesystem.azure.storage.credentials.username=user storage-filesystem.azure.storage.credentials.password=secret Property Description endpoint Sets the blob service endpoint, additionally parses it for information (SAS token). connection-string Sets the connection string to connect to the service. encryption-scope Sets the encryption scope that is used to encrypt blob contents on the server. credentials.type The type of the credentials provider. Supported values are: \"basic\" Credentials will be loaded from the credentials.username and credentials.password properties. \"shared-key\" Credentials will be loaded from the credentials.account-name and credentials.account-key properties. credentials.username The username, used when \"credentials.type\" is \"basic\". credentials.password The password, used when \"credentials.type\" is \"basic\". credentials.account-name The account name, used when \"credentials.type\" is \"shared-key\". credentials.account-key The account key, used when \"credentials.type\" is \"shared-key\". Depending on the amount of data and transactions, charges may apply depending on service usage. Please check with your service provider for details.","title":"Azure Storage","component":"manual","version":"master","name":"azure-storage","url":"/manual/storage/storage-targets/blob-stores/azure-storage.html","titles":[{"text":"Configuration","hash":"_configuration","id":1},{"text":"Supported properties","hash":"_supported_properties","id":2}]},"281":{"id":281,"text":"one.microstream microstream-afs-googlecloud-firestore 08.01.01-MS-GA Firestore firestore = ... BlobStoreFileSystem fileSystem = BlobStoreFileSystem.New( GoogleCloudFirestoreConnector.Caching(client) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration Google Cloud Firestore can be set as follows. microstream-storage.properties storage-filesystem.googlecloud.firestore.credentials.type=default storage-filesystem.googlecloud.firestore.database-id=my-database-id storage-filesystem.googlecloud.firestore.project-id=my-project-id Property Description database-id The database ID to use with this Firestore client. emulator-host The emulator host to use with this Firestore client. host The service host. project-id The project ID. If no project ID is set, the project ID from the environment will be used. quota-project-id The project ID that specifies the project used for quota and billing purposes. credentials.type The type of the credentials provider. Supported values are: \"none\" No credentials are used. \"input-stream\" Path of a JSON file stream. The stream can contain a Service Account key file in JSON format from the Google DevelopersConsole or a stored user credential using the format supported by the Cloud SDK. \"default\" Returns the Application Default Credentials which are used to identify and authorize thewhole application. The following are searched (in order) to find the Application DefaultCredentials: Credentials file pointed to by the GOOGLE_APPLICATION_CREDENTIALS environment variable Credentials provided by the Google Cloud SDK. gcloud auth application-default login for user account credentials. gcloud auth application-default login --impersonate-service-account forimpersonated service account credentials. Google App Engine built-in credentials Google Cloud Shell built-in credentials Google Compute Engine built-in credentials Depending on the amount of data and transactions, charges may apply depending on service usage. Please check with your service provider for details.","title":"Google Cloud Firestore","component":"manual","version":"master","name":"google-cloud-firestore","url":"/manual/storage/storage-targets/blob-stores/google-cloud-firestore.html","titles":[{"text":"Configuration","hash":"_configuration","id":1},{"text":"Supported properties","hash":"_supported_properties","id":2}]},"282":{"id":282,"text":"one.microstream microstream-afs-hazelcast 08.01.01-MS-GA HazelcastInstance hazelcast = ...; BlobStoreFileSystem fileSystem = BlobStoreFileSystem.New( HazelcastConnector.Caching(cache) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration Hazelcast can be set as follows. microstream-storage.properties storage-filesystem.hazelcast.configuration=path-to-hazelcast-configuration-file Property Description hazelcast.configuration Supported values: \"default\" It tries to load Hazelcast configuration from a list of well-known locations, and then applies overrides found in environment variables/system properties. When no location contains Hazelcast configuration then it returns default. \"classpath:path-to-hazelcast-configuration-file\" When the \"classpath:\" prefix is used, the file is loaded from a classpath resource. a valid URL Creates new Config which is loaded from the given URL and uses the System.properties to replace variables. a file path Creates a Config based on a Hazelcast file and uses the System.properties to resolve variables. Depending on the amount of data and transactions, charges may apply depending on service usage. Please check with your service provider for details.","title":"Hazelcast","component":"manual","version":"master","name":"hazelcast","url":"/manual/storage/storage-targets/blob-stores/hazelcast.html","titles":[{"text":"Configuration","hash":"_configuration","id":1},{"text":"Supported properties","hash":"_supported_properties","id":2}]},"283":{"id":283,"text":"one.microstream microstream-afs-kafka 08.01.01-MS-GA Properties properties = new Properties(); properties.setProperty( CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9093\" ); BlobStoreFileSystem fileSystem = BlobStoreFileSystem.New( KafkaConnector.Caching(properties) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration Kafka can be set as follows. microstream-storage.properties storage-filesystem.kafka-properties.bootstrap.servers=localhost:9093 All supported properties of Kafka, see https://kafka.apache.org/documentation/ Depending on the amount of data and transactions, charges may apply depending on service usage. Please check with your service provider for details.","title":"Kafka","component":"manual","version":"master","name":"kafka","url":"/manual/storage/storage-targets/blob-stores/kafka.html","titles":[{"text":"Configuration","hash":"_configuration","id":1},{"text":"Supported properties","hash":"_supported_properties","id":2}]},"284":{"id":284,"text":"one.microstream microstream-afs-oraclecloud-objectstorage 08.01.01-MS-GA ObjectStorageClient client = ...; BlobStoreFileSystem fileSystem = BlobStoreFileSystem.New( OracleCloudObjectStorageConnector.Caching(client) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration Oracle Cloud Object Storage can be set as follows. microstream-storage.properties storage-filesystem.oraclecloud.object-storage.config-file.profile=production storage-filesystem.oraclecloud.object-storage.region=us-phoenix-1 Property Description config-file.path The path of the config file, if not set the default is used: \"~/.oci/config\" config-file.profile The configuration profile to use, if not set \"DEFAULT\" is used. config-file.charset The encoding of the config file. client.connection-timeout-millis The max time to wait for a connection, in millis. Default is 10000. client.read-timeout-millis The max time to wait for data, in millis. Default is 60000. client.max-async-threads The max number of async threads to use. Default is 50. region Sets the region to call (ex, 'us-phoenix-1'). endpoint Sets the endpoint to call (ex, https://www.example.com). Depending on the amount of data and transactions, charges may apply depending on service usage. Please check with your service provider for details.","title":"Oracle Cloud Object Storage","component":"manual","version":"master","name":"oracle-cloud-object-storage","url":"/manual/storage/storage-targets/blob-stores/oracle-cloud-object-storage.html","titles":[{"text":"Configuration","hash":"_configuration","id":1}]},"285":{"id":285,"text":"one.microstream microstream-afs-oracle-coherence 08.01.01-MS-GA NamedCache cache = CacheFactory.getCache(\"cache-name\"); BlobStoreFileSystem fileSystem = BlobStoreFileSystem.New( CoherenceConnector.Caching(cache) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration Coherence can be set as follows. microstream-storage.properties storage-filesystem.oracle.coherence.cache-name=my-cache Property Description cache-name The name of the cache which is used to retrieve the named cache from the cache factory. cache-config It is used to specify a custom cache configuration deployment descriptor to be used instead of the configured default cache configuration deployment descriptor. Depending on the amount of data and transactions, charges may apply depending on service usage. Please check with your service provider for details.","title":"Oracle Coherence","component":"manual","version":"master","name":"oracle-coherence","url":"/manual/storage/storage-targets/blob-stores/oracle-coherence.html","titles":[{"text":"Configuration","hash":"_configuration","id":1}]},"286":{"id":286,"text":"one.microstream microstream-afs-redis 08.01.01-MS-GA String redisUri = \"redis://localhost:6379/0\"; BlobStoreFileSystem fileSystem = BlobStoreFileSystem.New( RedisConnector.Caching(redisUri) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration Redis can be set as follows. microstream-storage.properties storage-filesystem.redis.uri=redis://localhost:6379/0 Property Description redis.uri The RedisURI contains the host/port and can carry authentication/database details. On a successful connect you get authenticated, and the database is selected afterward. This applies also after re-establishing a connection after a connection loss. Depending on the amount of data and transactions, charges may apply depending on service usage. Please check with your service provider for details.","title":"Redis","component":"manual","version":"master","name":"redis","url":"/manual/storage/storage-targets/blob-stores/redis.html","titles":[{"text":"Configuration","hash":"_configuration","id":1}]},"287":{"id":287,"text":"one.microstream microstream-afs-sql 08.01.01-MS-GA com.sap.cloud.db.jdbc ngdbc 2.14.7 HanaDataSource dataSource = new HanaDataSource(); dataSource.setURL(\"jdbc:sap://dummy_host:0/?KEY=USER1UserKey&encrypt=true&validateCertificate=false\"); dataSource.setUser(\"user\"); dataSource.setPassword(\"secret\"); SqlFileSystem fileSystem = SqlFileSystem.New( SqlConnector.Caching( SqlProviderHana.New(dataSource) ) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration Hana can be set as follows. Please note that you have to define a data source provider. microstream-storage.properties storage-filesystem.sql.hana.data-source-provider=com.sample.MyDataSourceProvider storage-filesystem.sql.hana.store-type=row|column storage-filesystem.sql.hana.catalog=mycatalog storage-filesystem.sql.hana.schema=myschema storage-filesystem.sql.hana.url=jdbc:sap://dummy_host:0/?KEY=USER1UserKey&encrypt=true&validateCertificate=false storage-filesystem.sql.hana.user=username storage-filesystem.sql.hana.password=secret MyDataSourceProvider.java package com.sample; import one.microstream.afs.sql.types.SqlDataSourceProvider public class MyDataSourceProvider implements SqlDataSourceProvider { public DataSource provideDataSource(Configuration configuration) { String url = configuration.get(\"url\"); String user = configuration.get(\"user\"); String password = configuration.get(\"password\"); // TODO: return data source of your choice, e.g. from a connection pool } } Depending on the amount of data and transactions, charges may apply depending on service usage. Please check with your service provider for details.","title":"Hana","component":"manual","version":"master","name":"hana","url":"/manual/storage/storage-targets/sql-databases/hana.html","titles":[{"text":"Configuration","hash":"_configuration","id":1}]},"288":{"id":288,"text":"one.microstream microstream-afs-sql 08.01.01-MS-GA org.mariadb.jdbc mariadb-java-client 2.7.1 MariaDbDataSource dataSource = new MariaDbDataSource(); dataSource.setUrl(\"jdbc:mysql://host:3306/mydb\"); dataSource.setUser(\"user\"); dataSource.setPassword(\"secret\"); SqlFileSystem fileSystem = SqlFileSystem.New( SqlConnector.Caching( SqlProviderMariaDb.New(dataSource) ) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration MariaDB can be set as follows. Please note that you have to define a data source provider. microstream-storage.properties storage-filesystem.sql.mariadb.data-source-provider=com.sample.MyDataSourceProvider storage-filesystem.sql.mariadb.catalog=mycatalog storage-filesystem.sql.mariadb.schema=myschema storage-filesystem.sql.mariadb.url=jdbc:mysql://host:3306/mydb storage-filesystem.sql.mariadb.user=username storage-filesystem.sql.mariadb.password=secret MyDataSourceProvider.java package com.sample; import one.microstream.afs.sql.types.SqlDataSourceProvider public class MyDataSourceProvider implements SqlDataSourceProvider { public DataSource provideDataSource(Configuration configuration) { String url = configuration.get(\"url\"); String user = configuration.get(\"user\"); String password = configuration.get(\"password\"); // TODO: return data source of your choice, e.g. from a connection pool } } Depending on the amount of data and transactions, charges may apply depending on service usage. Please check with your service provider for details.","title":"MariaDB","component":"manual","version":"master","name":"mariadb","url":"/manual/storage/storage-targets/sql-databases/mariadb.html","titles":[{"text":"Configuration","hash":"_configuration","id":1}]},"289":{"id":289,"text":"one.microstream microstream-afs-sql 08.01.01-MS-GA com.oracle.database.jdbc ojdbc8 19.7.0.0 OracleDataSource dataSource = new OracleDataSource(); dataSource.setURL(\"jdbc:oracle:thin:@localhost:1521/db\"); dataSource.setUser(\"user\"); dataSource.setPassword(\"secret\"); SqlFileSystem fileSystem = SqlFileSystem.New( SqlConnector.Caching( SqlProviderOracle.New(dataSource) ) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration Oracle can be set as follows. Please note that you have to define a data source provider. microstream-storage.properties storage-filesystem.sql.oracle.data-source-provider=com.sample.MyDataSourceProvider storage-filesystem.sql.oracle.catalog=mycatalog storage-filesystem.sql.oracle.schema=myschema storage-filesystem.sql.oracle.url=jdbc:oracle:thin:@localhost:1521/db storage-filesystem.sql.oracle.user=username storage-filesystem.sql.oracle.password=secret MyDataSourceProvider.java package com.sample; import one.microstream.afs.sql.types.SqlDataSourceProvider public class MyDataSourceProvider implements SqlDataSourceProvider { public DataSource provideDataSource(Configuration configuration) { String url = configuration.get(\"url\"); String user = configuration.get(\"user\"); String password = configuration.get(\"password\"); // TODO: return data source of your choice, e.g. from a connection pool } } Depending on the amount of data and transactions, charges may apply depending on service usage. Please check with your service provider for details.","title":"Oracle","component":"manual","version":"master","name":"oracle","url":"/manual/storage/storage-targets/sql-databases/oracle.html","titles":[{"text":"Configuration","hash":"_configuration","id":1}]},"290":{"id":290,"text":"one.microstream microstream-afs-sql 08.01.01-MS-GA org.postgresql postgresql 42.2.14 PGSimpleDataSource dataSource = new PGSimpleDataSource(); dataSource.setUrl(\"jdbc:postgresql://localhost:5432/mydb\"); dataSource.setUser(\"postgres\"); dataSource.setPassword(\"secret\"); SqlFileSystem fileSystem = SqlFileSystem.New( SqlConnector.Caching( SqlProviderPostgres.New(dataSource) ) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration PostgreSQL can be set as follows. Please note that you have to define a data source provider. microstream-storage.properties storage-filesystem.sql.postgres.data-source-provider=com.sample.MyDataSourceProvider storage-filesystem.sql.postgres.catalog=mycatalog storage-filesystem.sql.postgres.schema=myschema storage-filesystem.sql.postgres.url=jdbc:postgresql://localhost:5432/mydb storage-filesystem.sql.postgres.user=username storage-filesystem.sql.postgres.password=secret MyDataSourceProvider.java package com.sample; import one.microstream.afs.sql.types.SqlDataSourceProvider public class MyDataSourceProvider implements SqlDataSourceProvider { public DataSource provideDataSource(Configuration configuration) { String url = configuration.get(\"url\"); String user = configuration.get(\"user\"); String password = configuration.get(\"password\"); // TODO: return data source of your choice, e.g. from a connection pool } } Depending on the amount of data and transactions, charges may apply depending on service usage. Please check with your service provider for details.","title":"PostgreSQL","component":"manual","version":"master","name":"postgresql","url":"/manual/storage/storage-targets/sql-databases/postgresql.html","titles":[{"text":"Configuration","hash":"_configuration","id":1}]},"291":{"id":291,"text":"one.microstream microstream-afs-sql 08.01.01-MS-GA org.xerial sqlite-jdbc 3.32.3 SQLiteDataSource dataSource = new SQLiteDataSource(); dataSource.setUrl(\"jdbc:sqlite:microstreamdb\"); SqlFileSystem fileSystem = SqlFileSystem.New( SqlConnector.Caching( SqlProviderSqlite.New(dataSource) ) ); EmbeddedStorage.start(fileSystem.ensureDirectoryPath(\"microstream_storage\")); When using external configuration SQLite can be set as follows. Please note that you have to define a data source provider. microstream-storage.properties storage-filesystem.sql.sqlite.data-source-provider=com.sample.MyDataSourceProvider storage-filesystem.sql.sqlite.catalog=mycatalog storage-filesystem.sql.sqlite.schema=myschema storage-filesystem.sql.sqlite.url=jdbc:sqlite:microstreamdb MyDataSourceProvider.java package com.sample; import one.microstream.afs.sql.types.SqlDataSourceProvider public class MyDataSourceProvider implements SqlDataSourceProvider { public DataSource provideDataSource(Configuration configuration) { String url = configuration.get(\"url\"); // TODO: return data source of your choice, e.g. from a connection pool } } Depending on the amount of data and transactions, charges may apply depending on service usage. Please check with your service provider for details.","title":"SQLite","component":"manual","version":"master","name":"sqlite","url":"/manual/storage/storage-targets/sql-databases/sqlite.html","titles":[{"text":"Configuration","hash":"_configuration","id":1}]},"292":{"id":292,"text":"Loading data can be done in two ways, eager and Lazy. The basic, default way of loading is eager loading. This means that all objects of a stored object graph are loaded immediately. This is done during startup of the MicroStream database instance automatically if an already existing database is found. Contrary to lazy loading, eager loading has no requirements to your entity model. To load your data you just need to create an EmbeddedStorageManager instance: EmbeddedStorageManager storage = EmbeddedStorage.start(); After that just get the root instance of your object graph from the StorageManager by calling EmbeddedStorageManager.root() and check for null as this indicates a non-existing database final EmbeddedStorageManager storage = EmbeddedStorage.start(); if(storage.root() == null) { //No existing Database found } else { MyRoot root = (MyRoot) storage.root(); } The full code for the eager loading example is on GitHub.","title":"Loading Data","component":"manual","version":"master","name":"index","url":"/manual/storage/loading-data/index.html","titles":[]},"293":{"id":293,"text":"In some cases, it can be necessary to store modified encapsulated objects that cannot be a accessed from your code. public class ForeignObject { ... private HiddenObject hidden; ... } In the upper code snippet the \"hidden\" object cannot be accessed by store(myForeignObject.hidden) if no getter is available. To allow such hidden objects to be stored after they have been modified you have to options: Set the global storing strategy of the MicroStream instance to eager storing or Implement and set a custom PersistenceEagerStoringFieldEvaluator for this field. EmbeddedStorageManager storage = EmbeddedStorage.Foundation() .onConnectionFoundation( f -> f.setReferenceFieldEagerEvaluator( new CustomEagerStoringFieldEvaluator() ) ) .start(); To increase performance use immutable sub-graphs as often as possible. Storing those with the provided convenience storing methods or using a thread local storer to insert those sub-graphs concurrently can give a great performance boost.","title":"Best Practice","component":"manual","version":"master","name":"best-practice","url":"/manual/storage/storing-data/best-practice.html","titles":[{"text":"Storing Hidden Encapsulated Objects","hash":"_storing_hidden_encapsulated_objects","id":1},{"text":"Use Immutable data models","hash":"_use_immutable_data_models","id":2}]},"294":{"id":294,"text":"If the application works in MVC frameworks, the work is often done by getting some data from a data source, modifying it, and then store it back in a data store. This style of work application always works with a copy of the data. Which allows it to use mutable data only within a single thread. The developer doesn’t have to worry about data synchronization and then store this data in a database transaction. This way of working is very practical, it does not require developers to have knowledge of multi-threaded programming and thanks to this it is very widespread. Can similar technical work be used when working with MicroStream? Of course, elegantly, very simply and safely we can use the ObjectCopier utility to create a deep copy of our data, change it, and save it back. Very simple idea, just create a purchase of actual data to work within the application and at the end save that data back. Unfortunately, it’s not that simple. If the standard copy function is called over an object in Java, it creates a copy of that object, but the other object’s references remain the same. This doesn’t help so much. Because usually, an application contains a more complex data structure than a single object. This approach is called shallow copy. More here: https://en.wikipedia.org/wiki/Object_copying What is actually needed at this point is a deep copy. You need to create a complete copy of the complete subgraph from this object. MicroStream provides full support for a deep copy. It can be relatively easily called and a deep copy of the data will be created. ObjectCopier objectCopier = ObjectCopier.New(); Customer customer = root.getCustomer(id); Customer customerCopy = objectCopier.copy(customer); customerCopy.addPurchase(purchase); XThreads.executeSynchronized(() -> { root.setCustomer(id, customerCopy); storage.store(root.getcusomers()); } What are the parts of this code? Just create an instance of ObjectCopier class with factory method New(); Get the customer Make a deep copy of the customer object Modify this object graph In synchronized mode save this customer instead of the original customer and store it into a datastore This simple example written in pseudocode aims to demonstrate one of the many ways to solve working over a shared object graph in a multi-threaded environment. Make sure you close the copier after you have used it to clean up all the resources.","title":"Use Data Copy","component":"manual","version":"master","name":"deep-copy","url":"/manual/storage/storing-data/deep-copy.html","titles":[{"text":"Deep Copy vs Shallow Copy","hash":"_deep_copy_vs_shallow_copy","id":1},{"text":"Deep Copy Utility (ObjectCopier)","hash":"_deep_copy_utility_objectcopier","id":2}]},"295":{"id":295,"text":"MicroStream is designed to work with object graphs. Thus, storing data means to store an object graph. This includes the object’s value fields and references to other objects. Storing an object will also store all instances referenced by this objects that have not been stored before. While storing your data most of the work MicroStream performs for you. You only need to call the store method on the correct object. The rule is: \"The Object that has been modified has to be stored!\". Storing objects that are not part of an object graph is most likely pointless. See Getting Started how to create a database with a root instance. To store the registered root instance just call the storeRoot() method of a EmbeddedStorageManager instance. // Init storage manager final EmbeddedStorageManager storageManager = EmbeddedStorage.start(root); // Store the root object storageManager.storeRoot(); To store a newly created object, store the \"owner\" of the object. In the example below a new object is created and added to the myObjects list of the root object. Then the modified list gets stored. This will also store the new object. // Add a new data object to the list in root MyData dataItem = new MyData(\"Alice\"); root.myObjects.add(dataItem); // Store the modified list storageManager.store(root.myObjects); Before storing a modified object keep in your mind that the modified object needs to be stored. In case of a value types, like int, it is the object that has the int field as a member: // Modify a value type memeber and store it dataItem.setIntValue(100); storageManager.store(dataItem); Don’t forget immutable objects Immutable objects like String cannot be modified. Assigning a new value to a String does not modify the String object. Instead a new String instance is created and the reference is changed! // Change a string object and store it dataItem.setName(\"Bob\"); storageManager.store(dataItem); The full code for the example is on GitHub.","title":"Storing Data","component":"manual","version":"master","name":"index","url":"/manual/storage/storing-data/index.html","titles":[{"text":"Storing Root Instances","hash":"_storing_root_instances","id":1},{"text":"Storing New Objects","hash":"_storing_new_objects","id":2},{"text":"Storing Modified Objects","hash":"_storing_modified_objects","id":3}]},"296":{"id":296,"text":"The MicroStream engine supports two general storing strategies: lazy and eager storing. By default, MicroStream uses the lazy storing strategy. These storing strategies differ in the way how objects, referenced by the object to be stored are handled if those referenced objects had already been stored. Lazy storing is the default storing mode of the MicroStream engine. Referenced instances are stored only if they have not been stored yet. If a referenced instance has been stored previously it is not stored again even if it has been modified. That’s why modified objects must be stored explicitly. In eager storing mode referenced instances are stored even if they had been stored before. Contrary to Lazy storing this will also store modified child objects at the cost of performance. To use lazy or eager storing explicitly, get an instance of the required Storer and use it’s store methods: Storer storer = storage.createEagerStorer(); storer.store(myData); storer.commit(); Available Storers are: storage.createLazyStorer() storage.createEagerStorer() Standard storing: storage.createStorer() will provide corresponding Storer instances. Beside the 'global' lazy or eager storing strategies MicroStream allows to implement an individual handling for the storing behavior. See PersistenceEagerStoringFieldEvaluator for details.","title":"Lazy and Eager Storing","component":"manual","version":"master","name":"lazy-eager-full","url":"/manual/storage/storing-data/lazy-eager-full.html","titles":[{"text":"Lazy Storing","hash":"_lazy_storing","id":1},{"text":"Eager Storing","hash":"eager-storing","id":2},{"text":"Usage","hash":"_usage","id":3},{"text":"Custom Handling","hash":"_custom_handling","id":4}]},"297":{"id":297,"text":"New functionality since MicroStream v8.0 When you have already changed your object within memory, but not yet stored through the store() method of the StorageManager, you can re-load the data from the storage using the Reloader class. When using the \"Reloader\" on an instance that hasn’t yet been stored in MicroStream data storage through a call to .store(), there is no Exception thrown and instance is unaltered. So it only 'reverts' the content to the previous value if the instance was already stored. The Reloader class makes the functionality that was already available within the PersistenceLoader class easier accessible. After you have created an instance of a Reloader instance, you can reload an object with the reloadFlat() method, or the entire object graph of this instance with the reloadDeep(). The following snippet shows an example of reloading a List where it restores the items as it is stored in the data storage. final Reloader reloader = Reloader.New(persistenceManager); reloader.reloadFlat(root.getData());","title":"Reloading","component":"manual","version":"master","name":"reloader","url":"/manual/storage/storing-data/reloader.html","titles":[{"text":"Code","hash":"_code","id":1}]},"298":{"id":298,"text":"Beside long store(Object instance) MicroStream provides some convenience methods to store several objects at once: void storeAll(Iterable instances) Stores the passed instance in any case and all referenced instances of persistable references recursively, but stores referenced instances only if they are newly encountered (e.g. don’t have an id associated with them in the object registry, yet and are therefore required to be handled). This is useful for the common case of just storing an updated instance and potentially newly created instances along with it while skipping all existing (and normally unchanged) referenced instances. List subset = myCollection.getSubset(); subset.foreach(item -> item.modify()); storage.storeAll(subset); long[] storeAll(Object... instances) Convenience method to store multiple instances. The passed array (maybe implicitly created by the compiler) itself is NOT stored. storage.storeAll(itemA, iteamB, iteamC); MicroStream does not provide explicit transactions, every call to a store method is automatically a transaction. A store operation is an atomic all or nothing operation If the store call is successful all data is written to the storage. Otherwise no data is persisted. Partially persisted data will be reverted.","title":"Convenience Methods and Explicit Storing (Transactions)","component":"manual","version":"master","name":"transactions","url":"/manual/storage/storing-data/transactions.html","titles":[{"text":"Convenience Methods","hash":"_convenience_methods","id":1},{"text":"Transactions","hash":"_transactions","id":2}]},"299":{"id":299,"text":"The default MicroStream implementation fully supports the Java transient field modifier. Class members marked transient will not be persisted. public class User { private String username; //do not persist the users password private transient String password; } It is possible to override the default behavior by implementing a custom PersistenceFieldEvaluator. PersistenceFieldEvaluator fieldEvaluator = (clazz, field) -> !field.getName().startsWith(\"_\"); EmbeddedStorageManager storage = EmbeddedStorage.Foundation() .onConnectionFoundation( c -> c.setFieldEvaluatorPersistable(fieldEvaluator) ) .createEmbeddedStorageManager() .start();","title":"Transient Fields","component":"manual","version":"master","name":"transient-fields","url":"/manual/storage/storing-data/transient-fields.html","titles":[]},"300":{"id":300,"text":"Housekeeping interval and time budget is configured by setting up a StorageHousekeepingController. Available properties are: Property Description housekeeping-interval Interval the housekeeping is triggered in milliseconds, default once per every second housekeeping-time-budget Time budget for housekeeping in nanoseconds, default is 0.01 seconds EmbeddedStorageManager storage = EmbeddedStorage.Foundation( Storage.ConfigurationBuilder() .setHousekeepingController(Storage.HousekeepingController(1000, 10_000_000)) .createConfiguration()) .start(); The desired file min and max sizes and payload ratio is configured by the StorageDataFileEvaluator: available properties are: Property Description data-file-minimum-size Files smaller then minimum file size will be merged with other files if possible, default is 1 MB. data-file-maximum-size Files larger then maximum file size will be split in smaller ones, default is 8 MB. data-file-minimum-use-ratio Ratio of non-gap data contained in a storage file to prevent the file from being dissolved, default is 0.75 (75%). EmbeddedStorageManager storage = EmbeddedStorage.Foundation( Storage.ConfigurationBuilder() .setDataFileEvaluator(Storage.DataFileEvaluator(1024*1024, 1024*1024*8, 0.75)) .createConfiguration()) .start(); The lifetime of objects in the internal entity cache can be configured by the StorageEntityCacheEvaluator: Available properties are: Property Description entity-cache-threshold Abstract threshold value, roughly comparable to size in bytes with a time component, at which a cache must be cleared of some entities. Default is 1000000000. entity-cache-timeout Time in milliseconds after that an entity is considered to be old if not read meanwhile. Must be greater zero, default is 86400000ms (1 day). EmbeddedStorageManager storage = EmbeddedStorage.Foundation( Storage.ConfigurationBuilder() .setEntityCacheEvaluator(Storage.EntityCacheEvaluator( 86_400_000, 1_000_000_000)) .createConfiguration()) .start(); For external configuration see: Properties","title":"Housekeeping","component":"manual","version":"master","name":"housekeeping","url":"/manual/storage/configuration/housekeeping.html","titles":[{"text":"Intervall and Time Budget","hash":"_intervall_and_time_budget","id":1},{"text":"File Sizes and Payload","hash":"storage-data-file-evaluator","id":2},{"text":"Cache","hash":"_cache","id":3}]},"301":{"id":301,"text":"The EmbeddedStorageManager is mostly created with factory methods of EmbeddedStorage, where the most common settings, like database directory or the root instance, can be configured. EmbeddedStorageManager storageManager = EmbeddedStorage.start( myRoot, // root object of entity graph Paths.get(\"data-dir\") // storage data directory ); To achieve a more detailed customization, you can utilize the EmbeddedStorageFoundation factory type. It holds and creates on demand all the parts that form an EmbeddedStorageManager. NioFileSystem fileSystem = NioFileSystem.New(); EmbeddedStorageManager storageManager = EmbeddedStorageFoundation.New() .setConfiguration( StorageConfiguration.Builder() .setStorageFileProvider( Storage.FileProviderBuilder(fileSystem) .setDirectory(fileSystem.ensureDirectoryPath(\"storageDir\")) .createFileProvider() ) .setChannelCountProvider(StorageChannelCountProvider.New(4)) .setBackupSetup(StorageBackupSetup.New( fileSystem.ensureDirectoryPath(\"backupDir\") )) .createConfiguration() ) .createEmbeddedStorageManager(); The artifact microstream-storage-embedded-configuration provides a convenience layer for configuration purposes, as well as facilities to read external configuration. pom.xml one.microstream microstream-storage-embedded-configuration 08.01.01-MS-GA The EmbeddedStorageConfigurationBuilder type consolidates the most widely used parameters from the storage foundations in one place. It’s output is an EmbeddedStorageFoundation from which a EmbeddedStorageManager can be created. EmbeddedStorageManager storageManager = EmbeddedStorageConfiguration.Builder() .setStorageDirectoryInUserHome(\"data-dir\") .setBackupDirectory(\"backup-dir\") .setChannelCount(4) .createEmbeddedStorageFoundation() .createEmbeddedStorageManager(); To read an external configuration use ConfigurationLoader and ConfigurationParser or the load*() methods of EmbeddedStorageConfiguration. Out of the box, XML and INI files are supported. Java (XML) EmbeddedStorageManager storageManager = EmbeddedStorageConfiguration.load( \"/META-INF/microstream/storage.xml\" ) .createEmbeddedStorageFoundation() .createEmbeddedStorageManager(); XML Java (INI) EmbeddedStorageManager storageManager = EmbeddedStorageConfiguration.load( \"/META-INF/microstream/storage.ini\" ) .createEmbeddedStorageFoundation() .createEmbeddedStorageManager(); INI storage-directory = data channel-count = 4 If you just use EmbeddedStorageConfiguration.load() the default configuration file is used, which is either a file in the classpath root named microstream-storage.properties, or the path configured via the system property microstream.storage.configuration.path. The full example can be found on GitHub. The EmbeddedStorageConfigurationBuilder is based on the common configuration layer, newly introduced in MicroStream 5.0. The artifact configuration, which is a dependency of storage.embedded.configuration, contains support for XML and INI files. Other formats are available in different artifacts. Artifact Formats microstream-configuration-hocon hocon, json microstream-configuration-yaml yaml Java (Yaml) EmbeddedStorageManager storageManager = EmbeddedStorageConfiguration.load( ConfigurationLoader.New(\"/META-INF/microstream/storage.yaml\"), ConfigurationParserYaml.New() ) .createEmbeddedStorageFoundation() .createEmbeddedStorageManager(); Yaml storage-directory: \"data\" channel-count: 4 Java (Json) EmbeddedStorageManager storageManager = EmbeddedStorageConfiguration.load( ConfigurationLoader.New(\"/META-INF/microstream/storage.json\"), ConfigurationParserHocon.New() ) .createEmbeddedStorageFoundation() .createEmbeddedStorageManager(); Json { \"storage-directory\": \"data\", \"channel-count\": 4 }","title":"Configuration","component":"manual","version":"master","name":"index","url":"/manual/storage/configuration/index.html","titles":[{"text":"Foundations","hash":"_foundations","id":1},{"text":"External Configuration","hash":"external-configuration","id":2},{"text":"Additional Formats","hash":"_additional_formats","id":3}]},"302":{"id":302,"text":"By default, MicroStream uses the operation system’s standard file locking mechanism to prevent simultaneous access to the storage files. In the rare case that this is not sufficient to control the file access MicroStream provides a proprietary file lock implementation to ensure exclusive access to the storage files from different applications using MicroStream. Using this file lock may only be necessary if, while a MicroStream application is running, a second MicroStream application may try to access the same storage and the default file locks are not reliable. You don’t need to activate this feature if: Only one MicroStream application will access the storage, MicroStream applications that may access the same storage run on the same system, other applications that may access the storage files don’t use MicroStream to access them. To activate the internal file lock you need to setup StorageLockFileSetup: EmbeddedStorageManager storageManager = EmbeddedStorage .Foundation() .setLockFileSetupProvider(Storage.LockFileSetupProvider()) .start(); The default interval the locks are updated is 10 seconds, you can set a custom value in milliseconds with: Storage.LockFileSetupProvider( final long updateInterval ) To specify the charset used by the lock files use: Storage.LockFileSetupProvider( final Charset charset ) or, to customize both: LockFileSetupProvider( final Charset charset , final long updateInterval )","title":"Lock File","component":"manual","version":"master","name":"lock-file","url":"/manual/storage/configuration/lock-file.html","titles":[]},"303":{"id":303,"text":"These are the available properties of the EmbeddedStorageConfigurationBuilder type. The names are used accordingly in the external configuration files. They can be found as constants in EmbeddedStorageConfigurationPropertyNames. Property Short Description storage-directory The base directory of the storage in the file system. Default is \"storage\" in the working directory. storage-filesystem The live file system configuration. See storage targets configuration. deletion-directory If configured, the storage will not delete files. Instead of deleting a file it will be moved to this directory. truncation-directory If configured, files that will get truncated are copied into this directory. backup-directory The backup directory. backup-filesystem The backup file system configuration. See storage targets configuration. channel-count The number of threads and number of directories used by the storage engine. Every thread has exclusive access to its directory. Default is 1. channel-directory-prefix Name prefix of the subdirectories used by the channel threads. Default is \"channel_\". data-file-prefix Name prefix of the storage files. Default is \"channel_\". data-file-suffix Name suffix of the storage files. Default is \".dat\". transaction-file-prefix Name prefix of the storage transaction file. Default is \"transactions_\". transaction-file-suffix Name suffix of the storage transaction file. Default is \".sft\". type-dictionary-file-name The name of the dictionary file. Default is \"PersistenceTypeDictionary.ptd\". rescued-file-suffix Name suffix of the storage rescue files. Default is \".bak\". lock-file-name Name of the lock file. Default is \"used.lock\". housekeeping-interval Interval for the housekeeping. This is work like garbage collection or cache checking. In combination with houseKeepingNanoTimeBudget the maximum processor time for housekeeping work can be set. Default is 1 second. housekeeping-time-budget Number of nanoseconds used for each housekeeping cycle. Default is 10 milliseconds = 0.01 seconds. entity-cache-threshold Abstract threshold value for the lifetime of entities in the cache. Default is 1000000000. entity-cache-timeout Timeout in milliseconds for the entity cache evaluator. If an entity wasn’t accessed in this timespan it will be removed from the cache. Default is 1 day. data-file-minimum-size Minimum file size for a data file to avoid cleaning it up. Default is 1024^2 = 1 MiB. data-file-maximum-size Maximum file size for a data file to avoid cleaning it up. Default is 1024^2*8 = 8 MiB. data-file-minimum-use-ratio The ratio (value in ]0.0;1.0]) of non-gap data contained in a storage file to prevent the file from being dissolved. Default is 0.75 (75%). data-file-cleanup-head-file A flag defining whether the current head file (the only file actively written to) shall be subjected to file cleanups as well. Number of threads used by the storage engine. It depicts the numbers of subdirectories as well. Each thread manages one directory in which it writes to and reads from exclusively. The unity of thread, directory and the cached data therefore is called a \"Channel\". __________________________________________________ [RAM ]{ Code } | ( Filesystem ) ,- \"Channel 0\": [Data]{Thread} (Storage Subdirectory 0) /-- \"Channel 1\": [Data]{Thread} (Storage Subdirectory 1) StorageManager | \\-- \"Channel 2\": [Data]{Thread} (Storage Subdirectory 2) '- \"Channel 3\": [Data]{Thread} (Storage Subdirectory 3) _________________________________________________| For further information see Using Channels. Time for the house keeping interval. House keeping tasks are, among others: Garbage Collection Cache Check File Cleanup Check In combination with housekeeping-time-budget, it can be specified how many CPU time should be used for house keeping. E.g. interval=1000ms and budget=10000000ns means every second there’s 0.01 seconds time for house keeping, so max 1% CPU time used for house keeping. This CPU time window is only used if house keeping work is pending. If nothing has to be done, no time is wasted. Time used for each housekeeping cycle. However, no matter how low the number is, one item of work will always be completed. But if there is nothing to clean up, no processor time will be wasted. Default is 10000000 (10 million nanoseconds = 10 milliseconds = 0.01 seconds). + However, no matter how small the time is, one item is done at least. This is to avoid no-ops, if a too small time window is configured. + This time budget is a \"best effort\" threshold, meaning when at 1ns left, a huge file has to be cleaned or the references of a huge collection have to be marked for GC, then this budget can be exceeded considerably. For further information see Housekeeping. Minimum file size in bytes of a storage file to avoid merging with other files during housekeeping. + Must be greater than 1, maximum is 2GB. Maximum file size in bytes of a storage file to avoid splitting in more files during housekeeping. + Must be greater than 1, maximum is 2GB. Due to internal implementation details files larger than 2GB are not supported! The ratio (value in ]0.0;1.0]) of non-gap data contained in a storage file to prevent the file from being dissolved. \"Gap\" data is anything that is not the latest version of an entity’s data, including older versions of an entity and \"comment\" bytes (a sequence of bytes beginning with its length as a negative value length header). The closer this value is to 1.0 (100%), the less disk space is occupied by storage files, but the more file dissolving (data transfers to new files) is required and vice versa. This list shows which property configures which type, used by the foundation types, to create the storage manager. Property Used by storage-directory StorageLiveFileProvider storage-filesystem StorageLiveFileProvider deletion-directory StorageLiveFileProvider truncation-directory StorageLiveFileProvider backup-directory StorageBackupSetup backup-filesystem StorageBackupSetup channel-count StorageChannelCountProvider channel-directory-prefix StorageFileNameProvider data-file-prefix StorageFileNameProvider data-file-suffix StorageFileNameProvider transaction-file-prefix StorageFileNameProvider transaction-file-suffix StorageFileNameProvider type-dictionary-filename StorageFileNameProvider rescued-file-suffix StorageFileNameProvider lock-filename StorageFileNameProvider housekeeping-interval StorageHousekeepingController housekeeping-time-budget StorageHousekeepingController entity-cache-threshold StorageEntityCacheEvaluator entity-cache-timeout StorageEntityCacheEvaluator data-file-minimum-size StorageDataFileEvaluator data-file-maximum-size StorageDataFileEvaluator data-file-minimum-use-ratio StorageDataFileEvaluator data-file-cleanup-head-file StorageDataFileEvaluator","title":"Properties","component":"manual","version":"master","name":"properties","url":"/manual/storage/configuration/properties.html","titles":[{"text":"Detailed Description","hash":"_detailed_description","id":1},{"text":"channel-count","hash":"channel-count","id":2},{"text":"housekeeping-interval","hash":"housekeeping-interval","id":3},{"text":"housekeeping-time-budget","hash":"housekeeping-time-budget","id":4},{"text":"data-file-minimum-size","hash":"data-file-minimum-size","id":5},{"text":"data-file-maximum-size","hash":"data-file-maximum-size","id":6},{"text":"data-file-minimum-use-ratio","hash":"data-file-minimum-use-ratio","id":7},{"text":"Involved Types","hash":"_involved_types","id":8}]},"304":{"id":304,"text":"It is possible to have a Storage Manager which operates in a read-only mode. Since there is a limitation in the Open Source version of MicroStream that you can have only one manager that is connected to one data storage, you can bypass this restriction with this read-only mode. But there are limitations, such as: In read-only mode, you cannot write to a data storage. This means that calls to .store() and other methods which would result in a write, will throw an exception. In read-only mode, the housekeeping processes do not run since that would corrupt the data storage because two managers are operating on the same 'files'. In read-only mode, your data root is filled on startup of the manager as usual, and lazy references operate as normal. But there is no notification mechanism that the underlying data storage has changed and the Storage Manager only remembers the structure of the data storage as it was when it started. The last bullet point is important. It indicates that when another Storage Manager writes some new data, this new data never gets picked up by this read-only manager. And when the house-holding process of the other Storage Manager removes a file or reorganizes a file as cleanup, an exception will be thrown as the structure is changed but still expected by the read-only manager. So the read-only manager can only be used to read some data but should be closed 'soon' after starting and a new manager created if you need to read data later on. The following snippet shows how you can make a read-only Storage Manager. It actually wraps the StorageWriteController configured by the Foundation and can either block or pass through the normal behaviour. EmbeddedStorageFoundation foundation = ... final StorageWriteControllerReadOnlyMode storageWriteController = new StorageWriteControllerReadOnlyMode(foundation.getWriteController()); foundation.setWriteController(storageWriteController); With the .setReadOnly() method you can switch the read-only mode of the Storage Manager after it has started. But be careful with the method because you can’t have more than one manager that writes to the same data storage as that would corrupt the storage. storageWriteController.setReadOnly(false);","title":"Read-Only Storage Manager","component":"manual","version":"master","name":"readonly","url":"/manual/storage/configuration/readonly.html","titles":[{"text":"Configuration","hash":"_configuration","id":1}]},"305":{"id":305,"text":"Using a Storage Live File Provider (one.microstream.storage.types.StorageLiveFileProvider) allows to specify the location and naming rules for all storage related files. Available properties are: Property Description storage-directory The Microstream storages location base directory. Contains channel directories and type dictionary file. deletion-directory If configured, the storage will not delete files. Instead of deleting a file it will be moved to this directory. truncation-directory If configured, files that will get truncated are copied into this directory. channel-directory-prefix Channel directory prefix string storage-file-prefix Storage file prefix string storage-file-suffix storage file extension transactions-file-prefix transactions file prefix transactions-file-suffix transaction file extension type-dictionary-file-name filename of the type dictionary StorageFileNameProvider fileNameProvider = StorageFileNameProvider.Builder() .setChannelDirectoryPrefix(\"canal_\") .setDataFilePrefix (\"canal_\") .setDataFileSuffix (\".bin\") .setTransactionsFilePrefix(\"events_\") .setTransactionsFileSuffix(\".bin\") .setTypeDictionaryFileName(\"typeDictionary.txt\") .createFileNameProvider () ; NioFileSystem fileSystem = NioFileSystem.New(); StorageLiveFileProvider fileProvider = Storage .FileProviderBuilder (fileSystem) .setDirectory (fileSystem.ensureDirectoryPath(WORKINGDIR)) .setDeletionDirectory (fileSystem.ensureDirectoryPath(DELETIONDIR)) .setTruncationDirectory(fileSystem.ensureDirectoryPath(TRUNCATIONDIR)) .setFileNameProvider (fileNameProvider) .createFileProvider () ;","title":"Storage Files and Directories","component":"manual","version":"master","name":"storage-files-and-directories","url":"/manual/storage/configuration/storage-files-and-directories.html","titles":[]},"306":{"id":306,"text":"Channels are the IO threads used by the MicroStream storage engine. A single channel represents the unity of a thread, a storage directory and cached data. Increasing the number of channels means to run more IO threads. The channel count is an important configuration value that impacts to IO performance. For the channel configuration the following configuration properties are available: Property Description channel-count The number of channels that MicroStream will use. Must be 2^n channel-directory-prefix The channel directory will be prefix+channelNumber e.g. \"ch_0\" if prefix is \"ch_\" data-file-prefix Default is \"channel_\" data-file-suffix Default is \".dat\" Channel file size configuration is done by the the Storage Data File Evaluator. They can be set by microstream-storage-embedded-configuration API: Java EmbeddedStorageManager storageManager = EmbeddedStorageConfigurationBuilder.New() .setChannelCount(4) .setChannelDirectoryPrefix(\"channel_\") .setDataFilePrefix(\"channel_\") .setDataFileSuffix(\".bin\") .createEmbeddedStorageFoundation() .createEmbeddedStorageManager(); XML INI channel-count = 4 channel-directory-prefix = prefix data-file-prefix = channel_ data-file-suffix = .dat Or by setting a StorageFileProvider using the EmbeddedStorageFoundation factory NioFileSystem fileSystem = NioFileSystem.New(); EmbeddedStorageManager storage = EmbeddedStorage.Foundation( Storage.ConfigurationBuilder() .setChannelCountProvider(Storage.ChannelCountProvider(4)) .setStorageFileProvider( StorageLiveFileProvider.Builder() .setDirectory(fileSystem.ensureDirectoryPath(\"storage\")) .createFileProvider() ) .createConfiguration() ) .start(); See also: Configuration","title":"Using Channels","component":"manual","version":"master","name":"using-channels","url":"/manual/storage/configuration/using-channels.html","titles":[{"text":"Channel Usage","hash":"_channel_usage","id":1},{"text":"Channel Configuration","hash":"_channel_configuration","id":2}]},"307":{"id":307,"text":"Based on the REST API we provide a client, which serves a convenient web user interface to browse through the storage data. It is a runnable jar which starts a simple web server which then can be accessed by a browser of your choice. To download it use the following Maven command to download it into the current directory. CLI mvn dependency:get -Dartifact=one.microstream:microstream-storage-restclient-app:{maven-version}:jar -Dtransitive=false -Ddest=storage.restclient.app-{maven-version}.jar or this direct link: https://repo1.maven.org/maven2/one/microstream/microstream-storage-restclient-app/08.01.01-MS-GA/microstream-storage-restclient-app-08.01.01-MS-GA.jar Start the client. The port parameter is optional, default port is 8080. java -jar microstream-storage-restclient-app-08.01.01-MS-GA.jar --server.port=8888 Then just open http://localhost:8888 in your browser, select the base URL of the REST service and click connect. Now you can browse through the data of the storage: Or view the statistics:","title":"Client GUI","component":"manual","version":"master","name":"client-gui","url":"/manual/storage/rest-interface/client-gui.html","titles":[]},"308":{"id":308,"text":"The MicroStream Storage isn’t a typical database server with administrative tooling and stuff like that. It is just a Java library which runs embedded in your application. The storage data layer, per default the file system, contains the serialized and persisted data. But it is not really accessible, or more precise, human-readable. Nor do we provide a query language to access the storage data. The Java objects, which reside in memory, are easy to inspect and traverse, e.g. with a debugger. But for various purposes, like monitoring, the requirement to read the actual stored data has come up. Since version 3.0 a REST interface for the storage data is included. It enables you to access the data via REST calls or a convenient user interface. It is made up of the following modules: ArtifactId Description microstream-storage-restadapter Adapter for low-level storage data externalization. Used by the REST service to adapt to a MicroStream Storage. microstream-storage-restservice Abstract REST service interface, which uses the REST adapter to access low level storage data. microstream-storage-restclient Abstract REST client interface, which serves as a Java wrapper for the REST API. microstream-storage-restservice-sparkjava REST service implementation which utilizes SparkJava and provides REST endpoints. microstream-storage-restclient-jersey REST client implementation which utilizes Jersey as a webservice framework. microstream-storage-restclient-app microstream-Executable client app with web user interface, which connects to a REST service and provides a simple UI to navigate through the Object Graph from the root.","title":"REST Interface","component":"manual","version":"master","name":"index","url":"/manual/storage/rest-interface/index.html","titles":[]},"309":{"id":309,"text":"[instance-name]/root Returns the name and object id of the current storage root element. Response { \"name\": \"ROOT\", \"objectId\": \"1000000000000000028\" } [instance-name]/object/:objectid Returns description and values of a distinct object. Path parameters Parameter Type Description objectId long The requested object’s id Query parameters Parameter Type Description Default valueLength long Limit size of returned value elements, e.g. String values. unlimited fixedOffset long Fixed size members start offset. 0 fixedLength long Amount of returned fixed size members. unlimited variableOffset long Variable size members start offset. 0 variableLength long Amount of returned variable size members. unlimited references boolean Determines if top-level references of the object should be returned as well. false Response { \"objectId\": \"1000000000000000028\", \"typeId\": \"110\", \"length\": \"0\", \"variableLength\": [ \"3\" ], \"simplified\": false, \"data\": [ [ \"1000000000000000029\", \"1000000000000000030\", \"1000000000000000031\" ] ], \"references\": null } [instance-name]/dictionary Returns the type dictionary as plain text. Response [Type dictionary contents] [instance-name]/maintenance/filesStatistics Returns statistics of the used storage files and channels. Response { \"creationTime\": \"2020-04-15T13:32:26.003Z\", \"channelStatistics\": { \"0\": { \"channelIndex\": 0, \"files\": [ { \"fileNumber\": \"1\", \"file\": \"storage\\\\channel_0\\\\channel_0_1.dat\", \"fileCount\": \"1\", \"liveDataLength\": \"2898\", \"totalDataLength\": \"2930\" } ], \"fileCount\": \"1\", \"liveDataLength\": \"2898\", \"totalDataLength\": \"2930\" } }, \"fileCount\": \"1\", \"liveDataLength\": \"2898\", \"totalDataLength\": \"2930\" }","title":"REST API","component":"manual","version":"master","name":"rest-api","url":"/manual/storage/rest-interface/rest-api.html","titles":[{"text":"GET Root","hash":"_get_root","id":1},{"text":"GET Object","hash":"_get_object","id":2},{"text":"GET Type Dictionary","hash":"_get_type_dictionary","id":3},{"text":"GET Statistics","hash":"_get_statistics","id":4}]},"310":{"id":310,"text":"An application that will expose the REST endpoints needs one of the provided implementations by MicroStream or you need to implement the provided interfaces. In this example, we will use the Spark implementation that MicroStream provides. Just add the dependency to your project, the logger is optional. pom.xml one.microstream microstream-storage-restservice-sparkjava 08.01.01-MS-GA org.slf4j slf4j-simple 1.7.32 Now use the resolver to connect the REST service to the storage, start it, and you’re good to go. EmbeddedStorageManager storage = EmbeddedStorage.start(); if (storage.root() == null) { storage.setRoot(new Object[] { LocalDate.now(), X.List(\"a\", \"b\", \"c\"), 1337 }); storage.storeRoot(); } // create the REST service StorageRestService service = StorageRestServiceResolver.resolve(storage); // and start it service.start(); That’s all you have to do to open the REST endpoints to access the stored data. The base URL of the provided endpoints is per default: http://localhost:4567/microstream/ and you can find out all available endpoints on the root http://localhost:4567 If you want to change the default port (4567) or instance name (microstream) it can be done by using the rest service implementation directly, and not go through the _Resolver` as in the previous snippet. The Spark service can then be customized to your liking. StorageRestServiceSparkJava service = StorageRestServiceSparkJava.New(storage); service.setSparkService( Service.ignite().port(8888) ); service.setInstanceName(\"my-name\"); This will change the base URL to http://localhost/my-name/","title":"Setup","component":"manual","version":"master","name":"setup","url":"/manual/storage/rest-interface/setup.html","titles":[{"text":"REST Service","hash":"_rest_service","id":1},{"text":"Configuration","hash":"_configuration","id":2}]},"311":{"id":311,"text":"The layered entities code generator is an annotation processor, provided by the microstream-base module. The maven configuration looks like this: pom.xml one.microstream microstream-base 08.01.01-MS-GA org.apache.maven.plugins maven-compiler-plugin 3.8.1 1.8 1.8 UTF-8 one.microstream.entity.codegen.EntityProcessor -Amicrostream.entity.hashequalator=true -Amicrostream.entity.appendable=true If you don’t want the HashEqualator to be generated, just set the microstream.entity.hashequalator argument to false. You can leave it out otherwise, the default value is true. The same applies to the Appendable.","title":"Configuration","component":"manual","version":"master","name":"configuration","url":"/manual/misc/layered-entities/configuration.html","titles":[]},"312":{"id":312,"text":"Given is the following entity: public interface Person extends Entity { public String firstName(); public String lastName(); } So how is it done? Since the code generator provides a creator, we can use it to create a new Person. Person john = PersonCreator.New() .firstName(\"John\") .lastName(\"Doe\") .create(); Let’s see what the debugger displays if we run this code: There’s always an entity chain, with The identity (PersonEntity) as outer layer Then the logic layers, none here in our example And the inner most layer is always the data (PersonData), which holds the properties. The properties can be accessed like defined in the entity’s interface: String firstName = john.firstName(); // -> John String lastName = john.lastName(); // -> Doe The creator can also be used to create copies. Just hand over the existing one as template: Person mike = PersonCreator.New(john) // use John as template .firstName(\"Mike\") .create(); This will create a \"Mike Doe\".","title":"Creating Entities","component":"manual","version":"master","name":"creating-entities","url":"/manual/misc/layered-entities/creating-entities.html","titles":[]},"313":{"id":313,"text":"The entity types are just simple interfaces with value methods, which have following requirements: A return type, no void No parameters No type parameters No declared checked exceptions You are not limited otherwise. Use any types you want. Inheritance and generics are supported as well. Beeing.java public interface Beeing { public B partner(); } Named.java public interface Named { public String name(); } Animal.java public interface Animal extends Beeing, Entity { public String species(); } Pet.java public interface Pet extends Animal, Named { } Human.java public interface Human extends Beeing, Named, Entity { } There is one base type (Beeing), one feature interface (Named) and three entities (Animal, Pet, Human). The code generator takes care of the three entities, and its output looks like this: AnimalEntity.java public class AnimalEntity extends EntityLayerIdentity implements Animal { protected AnimalEntity() { super(); } @Override protected Animal entityData() { return (Animal)super.entityData(); } @Override public final String species() { return this.entityData().species(); } @Override public final Animal partner() { return this.entityData().partner(); } } AnimalData.java public class AnimalData extends EntityData implements Animal { private final String species; private final Animal partner; protected AnimalData(final Animal entity, final String species, final Animal partner) { super(entity); this.species = species; this.partner = partner; } @Override public String species() { return this.species; } @Override public Animal partner() { return this.partner; } } AnimalCreator.java public interface AnimalCreator extends Entity.Creator { public AnimalCreator species(String species); public AnimalCreator partner(Animal partner); public static AnimalCreator New() { return new Default(); } public static AnimalCreator New(final Animal other) { return new Default().copy(other); } public class Default extends Entity.Creator.Abstract implements AnimalCreator { private String species; private Animal partner; protected Default() { super(); } @Override public AnimalCreator species(final String species) { this.species = species; return this; } @Override public AnimalCreator partner(final Animal partner) { this.partner = partner; return this; } @Override protected EntityLayerIdentity createEntityInstance() { return new AnimalEntity(); } @Override public Animal createData(final Animal entityInstance) { return new AnimalData(entityInstance, this.species, this.partner); } @Override public AnimalCreator copy(final Animal other) { final Animal data = Entity.data(other); this.species = data.species(); this.partner = data.partner(); return this; } } } AnimalUpdater.java public interface AnimalUpdater extends Entity.Updater { public static boolean setSpecies(final Animal animal, final String species) { return New(animal).species(species).update(); } public static boolean setPartner(final Animal animal, final Animal partner) { return New(animal).partner(partner).update(); } public AnimalUpdater species(String species); public AnimalUpdater partner(Animal partner); public static AnimalUpdater New(final Animal animal) { return new Default(animal); } public class Default extends Entity.Updater.Abstract implements AnimalUpdater { private String species; private Animal partner; protected Default(final Animal animal) { super(animal); } @Override public AnimalUpdater species(final String species) { this.species = species; return this; } @Override public AnimalUpdater partner(final Animal partner) { this.partner = partner; return this; } @Override public Animal createData(final Animal entityInstance) { return new AnimalData(entityInstance, this.species, this.partner); } @Override public AnimalUpdater copy(final Animal other) { final Animal data = Entity.data(other); this.species = data.species(); this.partner = data.partner(); return this; } } } PetEntity.java public class PetEntity extends EntityLayerIdentity implements Pet { protected PetEntity() { super(); } @Override protected Pet entityData() { return (Pet)super.entityData(); } @Override public final String species() { return this.entityData().species(); } @Override public final Animal partner() { return this.entityData().partner(); } @Override public final String name() { return this.entityData().name(); } } PetData.java public class PetData extends EntityData implements Pet { private final String species; private final Animal partner; private final String name ; protected PetData(final Pet entity, final String species, final Animal partner, final String name ) { super(entity); this.species = species; this.partner = partner; this.name = name ; } @Override public String species() { return this.species; } @Override public Animal partner() { return this.partner; } @Override public String name() { return this.name; } } PetCreator.java public interface PetCreator extends Entity.Creator { public PetCreator species(String species); public PetCreator partner(Animal partner); public PetCreator name(String name); public static PetCreator New() { return new Default(); } public static PetCreator New(final Pet other) { return new Default().copy(other); } public class Default extends Entity.Creator.Abstract implements PetCreator { private String species; private Animal partner; private String name ; protected Default() { super(); } @Override public PetCreator species(final String species) { this.species = species; return this; } @Override public PetCreator partner(final Animal partner) { this.partner = partner; return this; } @Override public PetCreator name(final String name) { this.name = name; return this; } @Override protected EntityLayerIdentity createEntityInstance() { return new PetEntity(); } @Override public Pet createData(final Pet entityInstance) { return new PetData(entityInstance, this.species, this.partner, this.name ); } @Override public PetCreator copy(final Pet other) { final Pet data = Entity.data(other); this.species = data.species(); this.partner = data.partner(); this.name = data.name (); return this; } } } PetUpdater.java public interface PetUpdater extends Entity.Updater { public static boolean setSpecies(final Pet pet, final String species) { return New(pet).species(species).update(); } public static boolean setPartner(final Pet pet, final Animal partner) { return New(pet).partner(partner).update(); } public static boolean setName(final Pet pet, final String name) { return New(pet).name(name).update(); } public PetUpdater species(String species); public PetUpdater partner(Animal partner); public PetUpdater name(String name); public static PetUpdater New(final Pet pet) { return new Default(pet); } public class Default extends Entity.Updater.Abstract implements PetUpdater { private String species; private Animal partner; private String name ; protected Default(final Pet pet) { super(pet); } @Override public PetUpdater species(final String species) { this.species = species; return this; } @Override public PetUpdater partner(final Animal partner) { this.partner = partner; return this; } @Override public PetUpdater name(final String name) { this.name = name; return this; } @Override public Pet createData(final Pet entityInstance) { return new PetData(entityInstance, this.species, this.partner, this.name ); } @Override public PetUpdater copy(final Pet other) { final Pet data = Entity.data(other); this.species = data.species(); this.partner = data.partner(); this.name = data.name (); return this; } } } HumanEntity.java public class HumanEntity extends EntityLayerIdentity implements Human { protected HumanEntity() { super(); } @Override protected Human entityData() { return (Human)super.entityData(); } @Override public final Human partner() { return this.entityData().partner(); } @Override public final String name() { return this.entityData().name(); } }","title":"Defining Entities","component":"manual","version":"master","name":"defining-entities","url":"/manual/misc/layered-entities/defining-entities.html","titles":[{"text":"Entities","hash":"_entities","id":1},{"text":"Generated Code","hash":"_generated_code","id":2}]},"314":{"id":314,"text":"Concept to separate the basic aspects of what defines an entity into separate instances of different layers: Identity, a never to be replaced instance representing an entity in terms of references to it Logic, nestable in an arbitrary number of dynamically created logic layers, e.g. logging, locking, versioning, etc. Data, always immutable Entity graphs are constructed by strictly only referencing identity instances (the \"outer shell\" of an entity), while every inner layer instance is unshared. This also allows the actual data instance to be immutable, while at the same time leaving referential integrity of an entity graph intact. MicroStream provides ready-to-use logic layers for: Logging Versioning While the layers admittedly introduce considerable technical complexity and runtime overhead, this concept is a production ready solution for nearly all requirements regarding cross cutting concerns and aspects. To use this concept in your code, there need to be at least implementations for the entity’s identity and data. Let’s say the entity looks like this: public interface Person extends Entity { public String firstName(); public String lastName(); } There needs to be a identity class: public class PersonEntity extends EntityLayerIdentity implements Person { protected PersonEntity() { super(); } @Override protected Person entityData() { return (Person)super.entityData(); } @Override public final String firstName() { return this.entityData().firstName(); } @Override public final String lastName() { return this.entityData().lastName(); } } And a data class: public class PersonData extends EntityData implements Person { private final String firstName; private final String lastName ; protected PersonData(final Person entity, final String firstName, final String lastName ) { super(entity); this.firstName = firstName; this.lastName = lastName ; } @Override public String firstName() { return this.firstName; } @Override public String lastName() { return this.lastName; } } A lot of code to write to get an entity with two properties! But don’t worry, there is a code generator for that. An annotation processor to be precise. The only code you have to provide are the entity interfaces, all the other stuff will be generated. Just add the annotation processor type one.microstream.entity.codegen.EntityProcessor to your compiler configuration. That’s it. The generator also builds a creator: public interface PersonCreator extends Entity.Creator { public PersonCreator firstName(String firstName); public PersonCreator lastName(String lastName); public static PersonCreator New() { return new Default(); } public static PersonCreator New(final Person other) { return new Default().copy(other); } public class Default extends Entity.Creator.Abstract implements PersonCreator { private String firstName; private String lastName ; protected Default() { super(); } @Override public PersonCreator firstName(final String firstName) { this.firstName = firstName; return this; } @Override public PersonCreator lastName(final String lastName) { this.lastName = lastName; return this; } @Override protected EntityLayerIdentity createEntityInstance() { return new PersonEntity(); } @Override public Person createData(final Person entityInstance) { return new PersonData(entityInstance, this.firstName, this.lastName ); } @Override public PersonCreator copy(final Person other) { final Person data = Entity.data(other); this.firstName = data.firstName(); this.lastName = data.lastName (); return this; } } } An Updater: public interface PersonUpdater extends Entity.Updater { public static boolean setFirstName(final Person person, final String firstName) { return New(person).firstName(firstName).update(); } public static boolean setLastName(final Person person, final String lastName) { return New(person).lastName(lastName).update(); } public PersonUpdater firstName(String firstName); public PersonUpdater lastName(String lastName); public static PersonUpdater New(final Person person) { return new Default(person); } public class Default extends Entity.Updater.Abstract implements PersonUpdater { private String firstName; private String lastName ; protected Default(final Person person) { super(person); } @Override public PersonUpdater firstName(final String firstName) { this.firstName = firstName; return this; } @Override public PersonUpdater lastName(final String lastName) { this.lastName = lastName; return this; } @Override public Person createData(final Person entityInstance) { return new PersonData(entityInstance, this.firstName, this.lastName ); } @Override public PersonUpdater copy(final Person other) { final Person data = Entity.data(other); this.firstName = data.firstName(); this.lastName = data.lastName (); return this; } } } An optional equalator, with equals and hashCode methods: public interface PersonHashEqualator extends HashEqualator { public static PersonHashEqualator New() { return new Default(); } public final class Default implements PersonHashEqualator, Stateless { public static boolean equals(final Person person1, final Person person2) { return X.equal(person1.firstName(), person2.firstName()) && X.equal(person1.lastName (), person2.lastName ()) ; } public static int hashCode(final Person person) { return Objects.hash( person.firstName(), person.lastName () ); } Default() { super(); } @Override public boolean equal(final Person person1, final Person person2) { return equals(person1, person2); } @Override public int hash(final Person person) { return hashCode(person); } } } And an optional Appendable: public interface PersonAppendable extends VarString.Appendable { public static String toString(final Person person) { return New(person).appendTo(VarString.New()).toString(); } public static PersonAppendable New(final Person person) { return new Default(person); } public static class Default implements PersonAppendable { private final Person person; Default(final Person person) { super(); this.person = person; } @Override public VarString appendTo(final VarString vs) { return vs.append(this.person.getClass().getSimpleName()) .append(\" [lastName = \") .append(this.person.lastName()) .append(\", firstName = \") .append(this.person.firstName()) .append(']'); } } }","title":"Layered Entities","component":"manual","version":"master","name":"index","url":"/manual/misc/layered-entities/index.html","titles":[]},"315":{"id":315,"text":"Another predefined logic layer is for logging purposes. Since there is a myriad of loggers out there, MicroStream doesn’t provide any special adapter, but a generic type which can be used to adapt to the logging framework of your choice. Just create a class and implement EntityLogger, and you are good to go. public class JulLogger implements EntityLogger { @Override public void afterUpdate( final Entity identity, final Entity data, final boolean successful) { Logger.getLogger(identity.getClass().getName()) .info(\"Entity updated\"); } } Additional to afterUpdate there are further hooks: entityCreated afterRead beforeUpdate Now just add the logger when creating entities: JulLogger logger = new JulLogger(); Person john = PersonCreator.New() .addLayer(logger) .firstName(\"John\") .lastName(\"Doe\") .create(); When you call PersonUpdater.setLastName(john, \"Smith\"); the logger’s output is Oct 15, 2019 11:17:53 AM JulLogger afterUpdate INFO: Entity updated","title":"Logging","component":"manual","version":"master","name":"logging","url":"/manual/misc/layered-entities/logging.html","titles":[]},"316":{"id":316,"text":"Entities can be created with an arbitrary amount of layers, so feel free to combine them as you like: EntityVersionContext versionContext = EntityVersionContext.AutoIncrementingLong(); JulLogger logger = new JulLogger(); Person john = PersonCreator.New() .addLayer(versionContext) .addLayer(logger) .firstName(\"John\") .lastName(\"Doe\") .create(); The example on GitHub makes use of all the described features.","title":"Multiple Layers","component":"manual","version":"master","name":"multiple-layers","url":"/manual/misc/layered-entities/multiple-layers.html","titles":[]},"317":{"id":317,"text":"The data layer is always immutable. In order to update the values we have to replace the data layer completely. This is done with the updater. The property setter methods can be chained, so it is easy to update multiple properties, for example: PersonUpdater.New(mike) .firstName(\"Jim\") .lastName(\"Hope\") .update(); If only one property needs to be updated, the updater class offers static convenience methods for that: PersonUpdater.setFirstName(mike, \"Jim\");","title":"Updating Entities","component":"manual","version":"master","name":"updating-entities","url":"/manual/misc/layered-entities/updating-entities.html","titles":[]},"318":{"id":318,"text":"An arbitrary amount of logic layers can be added to entities. Let’s use the predefined versioning layer. It will keep track of all changes. Technically every new data layer which is added by the updater, will create a new version entry. EntityVersionContext versionContext = EntityVersionContext.AutoIncrementingLong(); Person john = PersonCreator.New() .addLayer(versionContext) .firstName(\"John\") .lastName(\"Doe\") .create(); Let’s have a look at the debugger: Now the versioning layer is chained between the identity layer and the data layer. If we update the entity a few times, we will see how the versioning layer works. In this case we use an auto-incrementing Long as key. PersonUpdater.setLastName(john, \"Smith\"); PersonUpdater.setLastName(john, \"Archer\"); PersonUpdater.setLastName(john, \"Bennett\"); john.lastName() // now returns \"Bennett\" If you want to access older versions use the context: versionContext.versions(john).get(1L); // -> \"John Smith\" To limit the amount of preserved versions, a cleaner can be utilized: EntityVersionCleaner versionCleaner = EntityVersionCleaner.AmountPreserving(10); EntityVersionContext versionContext = EntityVersionContext.AutoIncrementingLong(cleaner); This will keep only the last ten versions of the person. Additionally to number keys, timestamps can be used as well. EntityVersionContext systemTimeContext = EntityVersionContext.AutoIncrementingSystemTimeMillis(); EntityVersionContext nanoTimeContext = EntityVersionContext.AutoIncrementingSystemNanoTime(); EntityVersionContext instantContext = EntityVersionContext.AutoIncrementingInstant(); They can be preserved for a specific time range: EntityVersionCleaner cleaner = EntityVersionCleaner.AgePreservingInstant(Duration.of(1, ChronoUnit.YEARS)); EntityVersionContext context = EntityVersionContext.AutoIncrementingInstant(cleaner); The version context can be used as a shared state object. So you can control versioning for multiple entities at once, or even for the hole entity graph. The auto-incrementing contexts take care of the key creation. If you need to control it by yourself, use the mutable context. But be aware that you have to set the version before updating any data, otherwise the current one will be overwritten. EntityVersionContext.Mutable versionContext = EntityVersionContext.Mutable(); versionContext.currentVersion(\"rev-1\"); Person john = PersonCreator.New() .addLayer(versionContext) .firstName(\"John\") .lastName(\"Doe\") .create(); versionContext.currentVersion(\"rev-2\"); PersonUpdater.setLastName(john, \"Smith\"); versionContext.currentVersion(\"rev-3\"); PersonUpdater.setLastName(john, \"Archer\"); versionContext.currentVersion(\"rev-4\"); PersonUpdater.setLastName(john, \"Bennett\");","title":"Versioning","component":"manual","version":"master","name":"versioning","url":"/manual/misc/layered-entities/versioning.html","titles":[]},"319":{"id":319,"text":"MicroStream logs against the simple logging facade SLF4J. Just add and configure the logging framework of your choice to see the logger’s output. Here’s a small example with logback. Add the logback dependency: pom.xml ch.qos.logback logback-classic ${logback.version} And the logback configuration: logback.xml %d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n","title":"Logging","component":"manual","version":"master","name":"index","url":"/manual/misc/logging/index.html","titles":[]},"320":{"id":320,"text":"The wrapper code generator is an annotation processor, provided by the base module. The maven configuration looks like this: pom.xml one.microstream microstream-base 08.01.01-MS-GA org.apache.maven.plugins maven-compiler-plugin 3.8.1 1.8 1.8 UTF-8 one.microstream.wrapping.codegen.WrapperProcessor -Amicrostream.wrapper.types=one.microstream.persistence.types.PersistenceStoring There are following ways to get the base wrapper types generated. If you want it for your own types, the best way is to use the GenerateWrapper annotation. @GenerateWrapper public interface MyInterface { public void doStuff(); public String getStuff(); } Or, if you want it for interfaces in libraries, like PersistenceStoring, you cannot add an annotation. That’s what the microstream.wrapper.types parameter is for. This is just a comma separated list of types. Alternatively you can use the GenerateWrapperFor annotation: @GenerateWrapperFor(\"one.microstream.persistence.types.PersistenceStoring\") public class WrapperGenerationDummy { } It accepts a list of type names. Plain strings have to be used instead of class literals, because it is read inside the compilation cycle which prohibits access to class elements.","title":"Configuration","component":"manual","version":"master","name":"configuration","url":"/manual/misc/wrapping/configuration.html","titles":[]},"321":{"id":321,"text":"MicroStream uses a strictly interface-based architecture. All types in the public API are, whenever possible, interfaces. This offers the best possibilities to extend or exchange parts of the engine. A good ways to enrich a type with features, is the wrapper (decorator) pattern. For example, let’s say we want to add logging to the PersistenceStoring's store(object) method. PersistenceStoring.java public interface PersistenceStoring { public long store(Object instance); public long[] storeAll(Object... instances); public void storeAll(Iterable instances); public void storeSelfStoring(SelfStoring storing); } Conventionally it would be done that way: A new type, implementing the original interface, would be handed over the wrapped instance, all interface methods have to be implemented and delegated. And in the single method, we wanted to add functionality; the actual implementation of the logging is done. public class PersistenceStoringWithLogging implements PersistenceStoring { private final PersistenceStoring wrapped; public PersistenceStoringWithLogging(final PersistenceStoring wrapped) { super(); this.wrapped = wrapped; } @Override public long store(final Object instance) { Logger.getLogger(PersistenceStoring.class.getName()) .info(\"Object stored: \" + instance); return this.wrapped.store(instance); } @Override public long[] storeAll(final Object... instances) { return this.wrapped.storeAll(instances); } @Override public void storeAll(final Iterable instances) { this.wrapped.storeAll(instances); } @Override public void storeSelfStoring(final SelfStoring storing) { this.wrapped.storeSelfStoring(storing); } } This produces a lot of overhead. In this case, three methods are just boilerplate code to delegate the calls to the wrapped instance. A common solution for that is to create an abstract base wrapper type for the designated interface, and to reuse it whenever needed. public abstract class BaseWrapperPersistenceStoring implements PersistenceStoring { private final PersistenceStoring wrapped; public BaseWrapperPersistenceStoring(final PersistenceStoring wrapped) { super(); this.wrapped = wrapped; } @Override public long store(final Object instance) { return this.wrapped.store(instance); } @Override public long[] storeAll(final Object... instances) { return this.wrapped.storeAll(instances); } @Override public void storeAll(final Iterable instances) { this.wrapped.storeAll(instances); } @Override public void storeSelfStoring(final SelfStoring storing) { this.wrapped.storeSelfStoring(storing); } } And then, based on that, the implementation of the logger type would look like this: public class PersistenceStoringWithLogging extends BaseWrapperPersistenceStoring { public PersistenceStoringWithLogging(PersistenceStoring wrapped) { super(wrapped); } @Override public long store(Object instance) { Logger.getLogger(PersistenceStoring.class.getName()) .info(\"Object stored: \" + instance); return super.store(instance); } } That’s better. No more boilerplate code. Just overwrite the methods you want to extend. The only work left is, to generate the base wrapper types. One way is to let your IDE generate the wrapper or delegation code. Disadvantage of that is, it has to be redone every time your interfaces change. A code generator, which does it automatically would be nice. And that’s what the base module brings along. Like the layered entity code generator, it is an annotation processor.","title":"Wrapping","component":"manual","version":"master","name":"index","url":"/manual/misc/wrapping/index.html","titles":[]},"322":{"id":322,"text":"MicroStream’s wrapper code generator generates following wrapper type for PersistenceStoring: public interface WrapperPersistenceStoring extends Wrapper, PersistenceStoring { @Override public default long store(final Object instance) { return this.wrapped().store(instance); } @Override public default long[] storeAll(final Object... instances) { return this.wrapped().storeAll(instances); } @Override public default void storeAll(final Iterable instances) { this.wrapped().storeAll(instances); } @Override public default void storeSelfStoring(final SelfStoring storing) { this.wrapped().storeSelfStoring(storing); } } It is not an abstract class, but an interface, which extends the Wrapper interface of the microstream-base module, and the wrapped type itself. This offers you the most flexible way to use it in your application. The Wrapper type is just a typed interface and an abstract implementation of itself. Wrapper.java public interface Wrapper { public W wrapped(); public abstract class Abstract implements Wrapper { private final W wrapped; protected Abstract(final W wrapped) { super(); this.wrapped = wrapped; } @Override public final W wrapped() { return this.wrapped; } } } You can either implement the Wrapper interface and provide the wrapped instance via the wrapped() method, or you can extend the abstract class and hand over the wrapped instance to the super constructor. Version with the abstract type: public class PersistenceStoringWithLogging extends Wrapper.Abstract implements WrapperPersistenceStoring { public PersistenceStoringWithLogging(final PersistenceStoring wrapped) { super(wrapped); } @Override public long store(Object instance) { Logger.getLogger(PersistenceStoring.class.getName()) .info(\"Object stored: \" + instance); return WrapperPersistenceStoring.super.store(instance); } } Or only the interface, then you have to provide the wrapped instance via wrapped(): public class PersistenceStoringWithLogging implements WrapperPersistenceStoring { private final PersistenceStoring wrapped; public PersistenceStoringWithLogging(final PersistenceStoring wrapped) { super(); this.wrapped = wrapped; } @Override public PersistenceStoring wrapped() { return this.wrapped; } @Override public long store(Object instance) { Logger.getLogger(PersistenceStoring.class.getName()) .info(\"Object stored: \" + instance); return WrapperPersistenceStoring.super.store(instance); } }","title":"Usage","component":"manual","version":"master","name":"usage","url":"/manual/misc/wrapping/usage.html","titles":[]},"323":{"id":323,"text":"A collection of examples with different topics: https://github.com/microstream-one/microstream/tree/master/examples The BookStore Demo is a fully fledged sample application. It shows how to design an application with MicroStream from the ground up. https://github.com/microstream-one/bookstore-demo If you want to compare MicroStream with a database of your choice, it can be done with following project, which is based on the BookStore Demo. https://github.com/microstream-one/bookstore-demo-performance Combination of two great frameworks. https://github.com/microstream-one/example-spring-crud Further reading: https://medium.com/@microstream/microstream-with-spring-8265525fb3fc This example shows how to effectively use MicroStream storage with Android RecyclerView. https://github.com/microstream-one/example-android-recyclerview Further reading: https://medium.com/@microstream/android-recyclerview-with-microstream-da91641c0015","title":"Examples and Demo Projects","component":"manual","version":"master","name":"examples-and-demo-projects","url":"/manual/storage/addendum/examples-and-demo-projects.html","titles":[{"text":"Examples Collection","hash":"_examples_collection","id":1},{"text":"BookStore Demo","hash":"_bookstore_demo","id":2},{"text":"Spring Crud","hash":"_spring_crud","id":3},{"text":"Android RecyclerView","hash":"_android_recyclerview","id":4}]},"324":{"id":324,"text":"Although most types in the JDK or any other Java library will work with MicroStream, there is a bunch of specialized type handlers for the most commonly used types. They are optimized to reduce memory overhead and increase performance. The following list describes all types for which special type handlers are implemented. All other types are analyzed generically. Primitive Types All primitive Types and arrays thereof java.lang Byte Boolean Short Character Integer Float Long Double Void Object String StringBuffer StringBuilder java.math BigDecimal BigInteger java.util Date Currency Locale OptionalInt OptionalLong OptionalDouble java.util.regex Pattern java.io File java.nio.file Path java.net InetAddress Inet4Address Inet6Address InetSocketAddress URI URL java.util Vector Stack Hashtable Properties ArrayList HashSet HashMap LinkedHashSet LinkedHashMap WeakHashMap LinkedList TreeMap TreeSet IdentityHashMap PriorityQueue ArrayDeque java.util.concurrent ConcurrentHashMap ConcurrentSkipListMap ConcurrentSkipListSet ConcurrentLinkedQueue ConcurrentLinkedDeque CopyOnWriteArrayList Most collections above are handled in a generic way. If you want a more optimized version of JDK collection handlers, you can utilize the provided module microstream-persistence-binary-jdk8. pom.xml one.microstream microstream-persistence-binary-jdk8 08.01.01-MS-GA final EmbeddedStorageFoundation foundation = EmbeddedStorage.Foundation(); foundation.onConnectionFoundation(BinaryHandlersJDK8::registerJDK8TypeHandlers); pom.xml one.microstream microstream-persistence-binary-jdk17 08.01.01-MS-GA final EmbeddedStorageFoundation foundation = EmbeddedStorage.Foundation(); foundation.onConnectionFoundation(BinaryHandlersJDK17::registerJDK17TypeHandlers);","title":"Specialized Type Handlers","component":"manual","version":"master","name":"specialized-type-handlers","url":"/manual/storage/addendum/specialized-type-handlers.html","titles":[{"text":"Value Types","hash":"_value_types","id":1},{"text":"Collections","hash":"_collections","id":2},{"text":"Java 17 Immutable Set and List","hash":"jdk17","id":3}]},"325":{"id":325,"text":"Feature Supported Note Classes Classes without default constructor Abstract classes / Interfaces Perfectly handleable as types, but there can never be instances to be persisted in the first place. Inner classes Anonymous inner classes Primitives References Final fields Static fields Not supported since they are outside of an entity graph / a database, i.e. potentially shared by multiple graphs. Constant primitives No sense in persisting those. These are just plain trivial values outside of an entity graph / a database. Constant instances Must be registered for loading to update them instead of creating independent new instances. Primitive arrays Object arrays Multi dimensional arrays Technically the same as object arrays as every array is an object itself. JDK value types (String, Number types, Date, File, Locale, Optional, …​) Optimized handling via custom TypeHandlers. Collections Via generic handling logic (List, Set, Map, etc.). Optimal handling required tailored TypeHandler (e.g. correctly handling loadFactor in java.util.HashMap) Nested Collections JVM system-tied classes (Thread, ClassLoader, WeakReference, …​) Technically handleable, but handling system-instances could cause fatal problems (e.g. start a Thread just from loading data), so it is intentionally disabled. JVM external-tied classes (IO-Streams, FileChannel, …​) Technically handleable, but external dependencies could cause fatal problems (e.g. existence of a referenced file), so it is intentionally disabled. Feature Supported Note Enums Automatically handled as constant instances to maintain referential integrity / identity. Enums with mutable state Enums anonymous subclasses Feature Supported Note Lambdas Type-handleable in theory. But JVM is not able to resolve its own type definitions for lambdas. Feature Supported Note Records Records are mere syntax sugar for classes, see FAQ. Feature Supported Note Immutable Set Automatically handled until Java 14, for Java 15 and later use the microstream-persistence-binary-jdk17 module, see microstream-persistence-binary-jdk17 Immutable List Automatically handled until Java 14, for Java 15 and later use the microstream-persistence-binary-jdk17 module, see microstream-persistence-binary-jdk17","title":"Supported Java Features","component":"manual","version":"master","name":"supported-java-features","url":"/manual/storage/addendum/supported-java-features.html","titles":[{"text":"Java 5","hash":"_java_5","id":1},{"text":"Java 8","hash":"_java_8","id":2},{"text":"Java 14","hash":"_java_14","id":3},{"text":"Java 17","hash":"_java_17","id":4}]},"326":{"id":326,"text":"In certain environments or setups it is necessary to provide specific ClassLoader instances. This can be done by customizing the connection foundation. If a single ClassLoader is sufficient, just create a new provider by handing over the instance: EmbeddedStorageManager storage = EmbeddedStorage.Foundation(Paths.get(\"mydb\")) .onConnectionFoundation(cf -> cf.setClassLoaderProvider(ClassLoaderProvider.New(myClassLoader)) ) .start(); Or return a ClassLoader depending on the requested type: EmbeddedStorageManager storage = EmbeddedStorage.Foundation(Paths.get(\"mydb\")) .onConnectionFoundation(cf -> cf.setClassLoaderProvider(typeName -> { if(typeName.startsWith(\"com.company.module1.\")) { return module1ClassLoader; } if(typeName.startsWith(\"com.company.module2.\")) { return module2ClassLoader; } return ClassLoader.getSystemClassLoader(); }) ) .start(); Most application servers load the session’s classes with the context class loader. Just use the one of the current thread: EmbeddedStorageManager storage = EmbeddedStorage.Foundation(Paths.get(\"mydb\")) .onConnectionFoundation(cf -> cf.setClassLoaderProvider(ClassLoaderProvider.New( Thread.currentThread().getContextClassLoader() )) ) .start();","title":"Custom Class Loader","component":"manual","version":"master","name":"custom-class-loader","url":"/manual/storage/customizing/custom-class-loader.html","titles":[{"text":"Class Loader in Application Server","hash":"_class_loader_in_application_server","id":1}]},"327":{"id":327,"text":"In addition to the methods for legacy type mapping described in chapter Legacy Type Mapping there is also the possibility to implement custom legacy type handlers. Those handlers are the most flexible way to do the mapping from old to new types. The basic interface that has to be implemented is one.microstream.persistence.types.PersistenceLegacyTypeHandler. Fortunately the standard persistence implementation provides the abstract class one.microstream.persistence.binary.types.BinaryLegacyTypeHandler.AbstractCustom that should be sufficient to start with a custom implementation in most cases. See the example customLegacyTypeHandler on GitHub Please note the this example requires manual code modifications as described in it’s main class.","title":"Custom Legacy Type Handler","component":"manual","version":"master","name":"custom-legacy-type-handler","url":"/manual/storage/customizing/custom-legacy-type-handler.html","titles":[]},"328":{"id":328,"text":"Implementing the PersistenceEagerStoringFieldEvaluator interface allows you to handle the eager/lazy storing behavior of any known member. The default implementation of the MicroStream engine threads all fields as lazy storing. See Lazy and Eager Storing for details on lazy and eager storing. The PersistenceEagerStoringFieldEvaluator has only one method to be implemented: public boolean isEagerStoring(Class t, Field u) return true if the field has to be eager, otherwise return false. public class CustomEagerStoringFieldEvaluator implements PersistenceEagerStoringFieldEvaluator { @Override public boolean isEagerStoring(Class clazz, Field field) { if(clazz == MyClass.class && field.getName().equals(\"eagerField\") { return true; } return false; } } To register the customized PersistenceEagerStoringFieldEvaluator add it using the one.microstream.persistence.types.PersistenceFoundation.setReferenceFieldEagerEvaluator(PersistenceEagerStoringFieldEvaluator) method during the storage initialization. NioFileSystem fileSystem = NioFileSystem.New(); EmbeddedStorageManager storage = EmbeddedStorage .Foundation(fileSystem.ensureDirectoryPath(WORKINGDIR)) .onConnectionFoundation(f -> { f.setReferenceFieldEagerEvaluator(new CustomEagerStoringFieldEvaluator()); }) .start(ROOT) ; The full code for the example is on GitHub.","title":"Custom Storing Behavior","component":"manual","version":"master","name":"custom-storing-behavior","url":"/manual/storage/customizing/custom-storing-behavior.html","titles":[]},"329":{"id":329,"text":"Custom type handlers allow taking control over the storing and loading procedure of specific java types. This is useful to optimize the performance for storing complex objects or in the rare case that it is not possible to store a type with the default type handlers. There are two strategies for a simplified type handler implementation. Implementing a class that extends CustomBinaryHandler and defines a sequence of BinaryFields via the #Field~ static pseudo-constructor methods. Everything else like setting the name, calculating the binary offsets, etc. is then done implicitly via reflection. Example on GitHub This example implements a custom type handler for the java.awt.image.BufferedImage class. Instead of storing the rather complex object structure of that class the image is serialized as PNG image format using javax.imageio.ImageIO into a byte array. This byte array is then stored by MicroStream. The custom type handler must be registered in the CustomTypeHandlerRegistry to enable it: EmbeddedStorageManager storage = EmbeddedStorage .Foundation(WORKINGDIR) .onConnectionFoundation(f -> f.registerCustomTypeHandlers(new CustomBufferedImageHandler()) ) .start(ROOT); Implementing a class can be skipped altogether by using the method Binary#TypeHandler and passing the BinaryFields directly. Registering such a generically created TypeHandler is not required, either, since Version 3 of MicroStream brought a solution to just define a static method in the entity class that will be recognized and used by MicroStream. The following is a simple technical example on how a custom binary handler can be easily defined and technically leveraged to optimize storage behavior. E.g. imagine having millions of such objects that now only create 1 database record with a fraction of the required storage space instead of 4 records but hold the same information. public class Employee { /* * Fields with primitive data are (for whatever reason, e.g. project * design rules) all object types, but records should be stored as * efficient as possible, i.e. without overhead of references and value objects. * * MicroStream's generic type analysis does not know of this and hence cannot * do it. But defining a custom type handler can */ String id ; Double salary ; Date dateOfBirth; // constructor, getters, setters, etc /* * The entity class must just contain \"any\" method returning a suitable type * handler and MicroStream will recognize it and use the returned handler * automatically. * * Type type handler just needs to specify the entity class and define a list * of fields comprised of (name, getter, setter) in arbitrary order. */ static BinaryTypeHandler provideTypeHandler() { return Binary.TypeHandler( Employee.class, Binary.Field_long(\"id\", e -> Long.parseLong(e.id), (e, value) -> e.id = String.valueOf(value) ), Binary.Field_long(\"dateOfBirth\", e -> e.dateOfBirth.getTime(), (e, value) -> e.dateOfBirth = new Date(value) ), Binary.Field_double(\"salary\", e -> e.salary.longValue(), (e, value) -> e.salary = Double.valueOf(value) ) ); } } Full example is available on GitHub.","title":"Custom Type Handler","component":"manual","version":"master","name":"custom-type-handler","url":"/manual/storage/customizing/custom-type-handler.html","titles":[{"text":"Implementation","hash":"_implementation","id":1},{"text":"A Custom Binary Handler","hash":"_a_custom_binary_handler","id":2},{"text":"A Static Provider Method","hash":"_a_static_provider_method","id":3}]},"330":{"id":330,"text":"When a reference to the loading storage is needed in entities, e.g. usage of different tenants or to store its internal state in a tailored fashion, this can be done by this little trick. If an entity type contains one or more transient fields with field type compatible to Persister, the updating processing during loading will set the Persister instance (e.g. an EmbeddedStorageManager instance) used to load the entity instance to those fields. The fields must be transient to exclude them from the persistent form of the entity. Checking for transient fields is only the default implementation. The checking logic can be customized via PersistenceFoundation#setFieldEvaluatorPersistable. A more precise check for Persister fields can be customized via PersistenceFoundation#setFieldEvaluatorPersister. Note, however, that the check for compatibility with the Persister type is done in any case to avoid inconsistencies/crashes. If no applicable field is found, nothing happens and no additional meta data is kept in memory. This feature is completely optional. class MyEntity { String name ; int value; transient Persister persister; } Upon loading an instance of class MyEntity, a reference to the Persister used to load it is set to its field persister.","title":"Optional Storage Manager Reference in Entities","component":"manual","version":"master","name":"optional-storage-manager-reference-in-entities","url":"/manual/storage/customizing/optional-storage-manager-reference-in-entities.html","titles":[]},"331":{"id":331,"text":"MicroStream connects your application’s entity graph residing in memory to a physical form of data (i.e. persistent data) to/from which entity data is stored/loaded as required. MicroStream uses the common concept of Lazy Loading, allowing you to define which parts of your data (entity sub-graphs) are loaded only when required instead of eagerly at startup. A few well-placed lazy references in your entity model make your application load only a tiny bit of \"head\" entities at startup time and load everything else later on demand. This allows the handling of arbitrarily big databases with relatively small memory requirements.","title":"Data Management","component":"manual","version":"master","name":"data-management","url":"/manual/storage/faq/data-management.html","titles":[{"text":"Where is the data of my database located","hash":"_where_is_the_data_of_my_database_located","id":1},{"text":"What if my database is really big?","hash":"_what_if_my_database_is_really_big","id":2}]},"332":{"id":332,"text":"No. MicroStream allows you to store any Java object. Instances of any and all types can be handled, there are no special restrictions like having to implement an interface, using annotations or having a default constructor (see POJO). Only types bound to JVM-internals like Thread, IO-streams and the like are deliberately excluded from being persistable since they could not be properly recreated upon loading, but such instances should not be part of entity data models, anyway. During initialization, MicroStream automatically checks if your runtime entity classes are still matching the persistent data. Mismatches are automatically mapped when loading data based on predefined rules that you can extend and overwrite on a per-case basis if needed. For more information, see Legacy Type Mapping","title":"Data Model","component":"manual","version":"master","name":"data-model","url":"/manual/storage/faq/data-model.html","titles":[{"text":"Do I have to adapt my object-model to MicroStream?","hash":"_do_i_have_to_adapt_my_object_model_to_microstream","id":1},{"text":"What if I have to change my entity classes?","hash":"_what_if_i_have_to_change_my_entity_classes","id":2}]},"333":{"id":333,"text":"MicroStream stores persistent data in a physical form, typically in native file-system files. Yes, as many as you like. Each MicroStream instance represents one coherent entity graph of persistent data. Yes. This is already done automatically. The minimum and maximum size of every partial file can be configured, although this is a very technical detail that should not be relevant in most cases. At any given time, only one JVM process may directly access the files representing a unique set of data. Such a restriction is crucial for the correct execution of any application: changes to an application’s persistent data have to be guarded by the rules of the application’s business logic, i.e. the process that currently runs the application. Allowing another process to bypass these rules would eventually result in catastrophic consistency errors. The requirement to distribute an application over multiple processes must be solved by a clustering approach (e.g. by distributing logic AND persistent data over multiple processes or by having one process to serve as the data master for multiple worker processes).","title":"File Storage","component":"manual","version":"master","name":"file-storage","url":"/manual/storage/faq/file-storage.html","titles":[{"text":"Where does MicroStream store persistent data?","hash":"_where_does_microstream_store_persistent_data","id":1},{"text":"Can my application use more than one MicroStream instance?","hash":"_can_my_application_use_more_than_one_microstream_instance","id":2},{"text":"Is it possible to split the file-storage into many single files?","hash":"_is_it_possible_to_split_the_file_storage_into_many_single_files","id":3},{"text":"May multiple JVM processes access the same MicroStream database?","hash":"_may_multiple_jvm_processes_access_the_same_microstream_database","id":4}]},"334":{"id":334,"text":"Yes, all jars bring the necessary module-info class. Yes, but due to reflection restrictions of records introduced in Java 15 an export has to be added to the VM parameters: --add-exports java.base/jdk.internal.misc=ALL-UNNAMED","title":"Java Features","component":"manual","version":"master","name":"java-features","url":"/manual/storage/faq/java-features.html","titles":[{"text":"Does MicroStream work with the Java Module System (Jigsaw)?","hash":"_does_microstream_work_with_the_java_module_system_jigsaw","id":1},{"text":"Can MicroStream handle Records?","hash":"records","id":2}]},"335":{"id":335,"text":"Yes. In fact, every storing of data is executed as a transaction, an atomic all-or-nothing action. When one or more entities are stored, their data is collected into a continuous block of bytes and that block is written to the physical form (the \"files\") in one fell swoop. Any problem during the IO-operation causes the whole block to be deleted (rolled back). Yes. The storing and loading process can be parallelized by using multiple threads and thus be strongly accelerated. There is no limitation on how many threads can be used, apart from the mathematical constraint that the thread count must be a power of 2 (1, 2, 4, 8, 16, etc.). Yes. There are currently two options available to create backups: An on-the-fly backup that copies and validates stored entity data after it has been written and the possibility to export all database files to a target location (which is in fact just a low-level file copying, but executed in a concurrency-safe way). Yes. MicroStream provides a per-type export of binary data and a utility to convert its binary data into the CSV format. The other way around (convert CSV to binary an import binary files) is also possible. No, because it doesn’t need to. Such concerns are long covered by the application itself, with the DBMS usually being degraded to only being the application’s exclusive database. Thus, all that is needed for a modern business application is just an application-exclusive data storage solution, which is exactly what MicroStream is. Yes, if the data is structured in a format conforming to the entity classes and with references being represented in globally unique and bijective numbers. How hard that is for a given database depends on its specifics, but it can be as easy as executing one generically created SELECT per table. Yes, since Version 4.1 the released jar files contain the necessary OSGi Headers. Also a P2 Update Site distribution is available at: https://repo.microstream.one/repository/update-site/08.01.01-MS-GA","title":"Miscellaneous","component":"manual","version":"master","name":"miscellaneous","url":"/manual/storage/faq/miscellaneous.html","titles":[{"text":"Are transactions possible in MicroStream?","hash":"_are_transactions_possible_in_microstream","id":1},{"text":"Is MicroStream multi-threaded?","hash":"_is_microstream_multi_threaded","id":2},{"text":"Does MicroStream support a backup strategy?","hash":"_does_microstream_support_a_backup_strategy","id":3},{"text":"Does MicroStream provide data export/import functionality?","hash":"_does_microstream_provide_data_exportimport_functionality","id":4},{"text":"Does MicroStream provide a user management, authentication and authorization etc., like conventional DBMS ?","hash":"_does_microstream_provide_a_user_management_authentication_and_authorization_etc_like_conventional_dbms","id":5},{"text":"Is it possible to migrate an existing database to MicroStream?","hash":"_is_it_possible_to_migrate_an_existing_database_to_microstream","id":6},{"text":"Is MicroStream usable in an OSGi Environment?","hash":"_is_microstream_usable_in_an_osgi_environment","id":7}]},"336":{"id":336,"text":"If one or more fields in a class have changed, the data structure of this class doesn’t match anymore with the records in the database. This renders the application and the database incompatible. It’s like in an IDE. You change the structure of a class and the tooling takes care of the rest. Problem is, in a database, the \"rest\" can be, in some circumstances, several gigabytes or even more, that have to be refactored and written again. It’s one way to do it, but there are better alternatives. At best, the data is transformed when it’s accessed only. The old (legacy) type data is being mapped to the new type when it’s being loaded, hence: Legacy Type Mapping. Nothing needs to be rewritten. All records are, as they were saved, compatible with all other versions of their type. Simply by mapping while loading. What has to be done to achieve this? In the most common cases, nothing! The heuristic attempts to automatically detect which fields are new, have been removed, reordered or altered. Contact.java (old) public class Contact { String name ; String firstname; int age ; String email ; String note ; Object link ; } Contact.java (new) public class Contact { String firstname ; // moved String lastname ; // renamed String emailAddress ; // renamed String supportNode ; // renamed PostalAddress postalAddress; // new int age ; // moved } Console Output ---------- Legacy type mapping required for legacy type 1000055:Contact to current type 1000056:Contact Fields: java.lang.String Contact#firstname -1.000 ----> java.lang.String Contact#firstname java.lang.String Contact#name -0.750 ----> java.lang.String Contact#lastname java.lang.String Contact#email -0.708 ----> java.lang.String Contact#emailAddress java.lang.String Contact#note -0.636 ----> java.lang.String Contact#supportNode [***new***] PostalAddress Contact#postalAddress int Contact#age -1.000 ----> int Contact#age java.lang.Object Contact#link [discarded] --- Write 'y' to accept the mapping. The fields in the Contact entity class have been renamed, reordered, one was removed, one is new. What the heuristic is doing now is something like this: String firstname is equal in both classes, so it has to be the same, pretty much as int age. name and lastname is pretty similar, type is the same too. If there is nothing better for the two, they probably belong together. Same with the other two fields. In the end, the ominous link and postalAddress remain. The heuristic can not make sense of that, so it assumes that one thing falls away and the other one is added. In this particular example, that worked perfectly. Well done, heuristic. But: Just as people can make mistakes in estimating similarities (\"I would have thought …​\"), even programs can make mistakes as soon as they logically go on thin ice. There is nothing more with absolute correctness that you actually know from (bug-free) software. Such a similarity matching will be correct in the most cases, but sometimes it will also fall by the wayside. Example: perhaps only PostalAddress instances were referenced in the application under link and the two fields would actually be the same, only now properly typed and named. How should heuristics know that? Nobody could know that either, if he is not privy to the details of the concrete application. That’s why Legacy Type Mapping has two mechanisms that prevent things from going wrong: A callback interface is used to create the desired mapping result: PersistenceLegacyTypeMappingResultor Optionally, an explicit mapping can be specified, which is then preferred to the heuristic approach. If you do not want that, you can simply set another resultor. Like in this example each suspected mapping is submitted once to the user for control in the console. This is done with the InquiringLegacyTypeMappingResultor. Maybe even one, where the user can \"rewire\" the mapping itself, write out the mapping, and then return an appropriate result. EmbeddedStorageFoundation foundation = EmbeddedStorage.Foundation(myDataDir); foundation.getConnectionFoundation().setLegacyTypeMappingResultor( InquiringLegacyTypeMappingResultor.New( PersistenceLegacyTypeMappingResultor.New() ) ); EmbeddedStorageManager storageManager = foundation.createEmbeddedStorageManager(myRoot).start(); All you need is two columns of strings: from old to new. By default MicroStream uses a CSV file, but you can also write something else. In the end, a lot of string pairs for \"old → new\" mappings have to come into the program somewhere. The concept is simple: If there are two strings, this is interpreted as a mapping from an old thing to a new thing. If the second value is missing, it is interpreted as an old thing to be deleted. Missing the first value, then it’s as a new thing. Why call it \"thing\"? Because this applies to several structural elements: Constant identifier Class names Field names Example: count; articleCount means: the field named earlier count is called articleCount in the current version of the class. count; means: the early field count should be ignored during the mapping. More specifically, the values ​​of this field per record. ;articleCount means, this is a newly added field, DO NOT try to match it with anything else heuristically. You can also mix explicit mapping and heuristics. Only explicitly specify so many changes until the analysis gets the rest right by itself. That means you never have to specify the annoying trivial cases explicitly. Only the tricky ones. Usually, nothing should be necessary at all, or maybe a view indications at most to avoid mishaps. However, those who strictly prefer to make any change explicitly, instead of trusting a \"guessing\" software, can also do that. No problem. For class names, the three variants map, add and remove are somewhat tricky in meaning: Map is just old → new, same as with fields. To make an entry for a new class doesn’t make sense. It’s covered by the new class itself. You can do it, but it has no effect. Marking a removed class as deleted makes no sense either, except one special case. It is not required to specify the fields mapping of mapped classes if the mapping heuristic can do a correct field mapping. Especially if classes have been renamed only. Classes are simply referred to by their full qualified class name: com.my.app.entities.Order In some cases you need to specify the exact Version of the class, then the TypeId has to be prepended: 1012345:com.my.app.entities.Order Mapping from old to new: com.my.app.entities.Order;com.my.app.entities.OrderImplementation For fields it’s a bit more complex. To unambiguously refer a field, the full qualified name of its defining class has to be used. com.my.app.entities.Order#count;com.my.app.entities.Order#articleCount The # is based on official Java syntax, like e.g. in JavaDoc. If inheritance is involved, which must be uniquely resolved (each class in the hierarchy can have a field named \"count\"), you must also specify the declaring class. Like this: com.my.app.entities.Order#com.my.app.entities.ArticleHolder#count; ⤦ com.my.App.entities.Order#com.my.app.entities.ArticleHolder#articleCount A simple example: OldContact.java package com.my.app.entities; public class OldContact { String name ; String firstname; int age ; String email ; String note ; Object link ; // to be discarded } NewContact.java package com.my.app.entities; public class NewContact { String firstname ; // moved String lastname ; // renamed String emailAddress ; // renamed String supportNote ; // renamed PostalAddress postalAddress; // new int age ; // moved } refactorings.csv old current com.my.app.entities.OldContact com.my.app.entities.NewContact com.my.app.entities.OldContact#firstname com.my.app.entities.NewContact#firstname com.my.app.entities.OldContact#name com.my.app.entities.NewContact#lastname com.my.app.entities.OldContact#email com.my.app.entities.NewContact#emailAddress com.my.app.entities.OldContact#note com.my.app.entities.NewContact#supportNote com.my.app.entities.NewContact#postalAddress com.my.app.entities.OldContact#age com.my.app.entities.NewContact#age com.my.app.entities.OldContact#link EmbeddedStorageFoundation foundation = EmbeddedStorage.Foundation(dataDir); foundation.setRefactoringMappingProvider( Persistence.RefactoringMapping(Paths.get(\"refactorings.csv\")) ); EmbeddedStorageManager storageManager = foundation.createEmbeddedStorageManager(root).start(); So far so good, all classes and fields are getting mapped, automatically or manually. But what about the data? How are the values getting transformed from old to new? Technically speaking it’s done fully automatic. But there are some interesting questions: What if the primitive types changes? What if primitives change to references and vice versa? How fast is it? Let’s say int to float. Just to copy the four bytes would yield wrong results. It has to be converted, like float floatValue = (float)intValue; Can it be done? Yes, fully automatic. The class BinaryValueTranslators does the job for you, it has a converter function from each primitive to another. Currently MicroStream supports conversion between primitives and their wrapper types, and vice versa. When converting a wrapper to a primitive, null is converted to 0. If you need special conversions between object types, you can add custom BinaryValueSetter for that, see customizing. How fast is that? The type analysis happens only once during initialization. If no exception occurs, the Legacy Type Mapping is ready-configured for each necessary type and will then only be called if required. For normal entity classes that are parsed by reflection, legacy type mapping loading is just as fast as a normal load. An array of such value translator functions is put together once and they are run through each time they are loaded. With legacy mapping, only the order and the target offsets are different, but the principle is the same as with normal loading. For custom handlers an intermediate step is necessary: ​​First put all the old values ​​together in an order that the custom handler expects and then read the binary data normally, as if loading a record in the current format. That’s necessary because MicroStream can’t know what such a custom handler does internally. If someone ever uses such a custom handler, the small detour is not likely to be noticeable in terms of performance. And if it should be the case and it has a negative effect on the productive operation: No problem, because: Of course you can also write a custom legacy type handler. It would run at full speed even with tricky special cases. Of course there is the possibility, as always, of intervening in the machinery massively with customizing. If you need the highest possible performance for some cases, or for logging / debugging, or anyway: Register any value translator implementations. In the simplest case this is 1 line of code, so do not worry. Being able to specify refactoring mapping in a different way than a CSV file is another example. You can even customize (extend or replace) the strategy that is looked up in refactoring mapping. Furthermore, you can also replace the heuristic logic with your own. This is easier than it sounds. This is just a primitive little interface (PersistenceMemberSimilator) and the default implementation thereof calls e.g. just a Levenshtein algorithm for names. You can certainly do that 10 times more clever. Or \"more appropriate\" for a particular application or programming style. E.g. utilize annotations. The basic statement is: If there is a problem somewhere, whether with the heuristic or a special case request or performance problem loading a gazillion entities all at once, or if there is a need for debugging in depth or something like that: do not panic. Most likely, this is easily possible with a few lines of code. Customizing examples You can not just mark classes as deleted. As long as there are records of a certain type in the database, the corresponding class must also exist so that the instances from the database can be loaded into the application. If there are no more records, then that means that there are only a few bytes of orphaned description in the type dictionary, but nobody cares. Is it possible to delete it by hand (or rather not, there are good reasons against it) or you can just ignore it and leave it there forever. In both cases, you must not mark a class as deleted. Now the special case: In the entity graph (root instances and all recursively reachable instances from there) all references to instances of a certain type are filled in. It’s done by the application logic or possibly by a specially written script. That is, all instances of this type are unreachable. No instance is available, no instance can ever be reloaded. This means that the type is \"deleted\" from the database at the logical level. One does not have to register anywhere, that is implicitly just like that. You can actually delete the corresponding Java class from the application project because it will never be needed again during the loading process at runtime. So far so good. There is only one problem: even if the instances are never logically accessible again: the data records are still around in the database files. The initialization scans over all database files, registers all entities, collects all occurring TypeIds and ensures for every TypeId that there is a TypeHandler for it. If necessary, a LegacyTypeHandler with mapping, but still: there must be a TypeHandler for each TypeId. And a TypeHandler needs a runtime type. That is, ass-backwards, over records that are logically already deleted, but only physically still lying around, now it is again enforced that the erasable entity class must be present. Bummer. One can prevent this: there is a \"cleanup\" function in the database management logic, which cleans up all logical gaps in the database files (actually copies all non-gaps into a new file and thus deletes the old file altogether). You would have to call it, then all physical occurrences of the unreachable records disappear and you could easily delete the associated class. But that is annoying. That is why it makes sense for these cases - and only for them - to do the following: If you as a developer are absolutely sure that no single instance of a given class is ever reachable again, i.e. must be loaded, then you can mark a type as \"deleted\" (rather \"unreachable\") in the refactoring mapping. Then the Type Handling will create a dummy TypeHandler that does not need a runtime class. See PersistenceUnreachableTypeHandler. But be careful: if you are mistaken and an instance of such a type is still referenced somewhere and eventually loaded later at runtime, then the Unreachable handler will throw an exception. At some point during the runtime of the application, not even during initialization. The cleanup provides real security: remove all logical gaps and if then with a deleted class no more error in the initialization occurs, it is really superfluous. Any ideas, such as simply returning null in the dummy type handler instead of an instance, are a fire hazard: it may dissolve some annoying situations pleasantly, but it would also mean that existing datasets, potentially entire subgraphs, become hidden from the application. Nevertheless, the database would continue to drag them along, perhaps becoming inexplicably large, and any search for the reason would yield nothing, because the dummy type handler keeps the data records secret. Shortsighted great, but catastrophic in the long run. That’s not good. The only clean solution is: you have to know what to do with your data model. As long as there are still available instances, they must also be loadable. The annoying special case above can be defused without side effects. But it can not be more than that, otherwise it will get rid of the chaos, problems and lost confidence in the correctness of the database solution.","title":"Legacy Type Mapping","component":"manual","version":"master","name":"index","url":"/manual/storage/legacy-type-mapping/index.html","titles":[{"text":"Automatic Mapping","hash":"_automatic_mapping","id":1},{"text":"Explicit Mapping","hash":"_explicit_mapping","id":2},{"text":"Explicit Mapping of Classes","hash":"_explicit_mapping_of_classes","id":3},{"text":"Explicit Mapping Syntax","hash":"_explicit_mapping_syntax","id":4},{"text":"Value Conversion","hash":"_value_conversion","id":5},{"text":"Value Conversion of Primitives","hash":"value-conversion-of-primitives","id":6},{"text":"Value Conversion of References / Objects","hash":"value-conversion-of-references","id":7},{"text":"Performance","hash":"performance","id":8},{"text":"Customizing","hash":"customizing","id":9},{"text":"Special Case: Deleted Class","hash":"special-case-deleted-class","id":10}]},"337":{"id":337,"text":"Here is an overview of how to enable and configure different levels of user interaction for the Legacy Type Mapping. Somewhere you have a foundation instance, a foundation in where everything is configured, from which the StorageManager is created. EmbeddedStorageFoundation foundation = EmbeddedStorage.Foundation(); // or from somewhere else It itself contains a foundation for connections. To access the inner thing needs a little detour. Incidentally, that’s not a JDBC connection, but this is just one thing that creates helper instances like Storer and Loader. Because Legacy Type Mapping affects loading, it has to go in there. Either you access it directly, like this: EmbeddedStorageConnectionFoundation f = foundation.getConnectionFoundation(); Or like this, that’s better for method chaining. foundation.onConnectionFoundation(f -> { ... }); If you have that, the configuration for the Legacy Type Mapping callback logic is just a one liner: f.setLegacyTypeMappingResultor(...); Default PersistenceLegacyTypeMappingResultor.New() That’s just the necessary logic, without anything further. If you do not change anything, this is done by default. With Console Output PrintingLegacyTypeMappingResultor.New(PersistenceLegacyTypeMappingResultor.New()) That wraps a printer around the necessary logic. All these storage and persistence classes are nothing sacred or super-duper intertwined or anything. These are just interfaces and if you plug in another implementation then it will be used. Inquiry InquiringLegacyTypeMappingResultor.New(PersistenceLegacyTypeMappingResultor.New()) Resultor which asks the user to apply. More customization is possible, see below. And so on With the implementation of just one single interface method, you can build anything else you can imagine. For example, logging to a file instead of the console. Or in the personally preferred logging framework. Or write confirmed mappings into the refactorings file. Everything is possible. For the inquiring implementation (InquiringLegacyTypeMappingResultor) there are a few settings: When should he ask? Always or only if something is unclear. Never does not make any sense of course, then you shouldn’t use it, or alternatively the printing resultor. When is a mapping unclear? If at least one field mapping is not completely clear. A field mapping is clear if: If two fields are exactly the same (similarity 1.0 or 100%) Or if two fields are specified by the explicit mapping. So if all fields are clear according to the above rule, then there is no need to ask. And there is another special case: If a field is discarded that is not explicitly marked as discardable, then as a precaution an inquiry is always done. Although no data is lost, but the data would not be available in the application, so better ask. There are options to control this a bit finer. You can optionally specify a double as a threshold (from 0.0 to 1.0, otherwise Exception): The value determines how similar two matching fields automatically have to be so that they are not inquired. Example: The value is 0.9 (90%), but a match found is only 0.8 (80%) similar. This is according to the specification too little, there must be an inquiry as a precaution. If you specify 1.0, that means: always ask, everything is really perfectly clear. If you enter 0.0, this means: never ask or only for implicitly dropping fields. Looks like this: InquiringLegacyTypeMappingResultor.New( PersistenceLegacyTypeMappingResultor.New()) // implicitely 1.0 InquiringLegacyTypeMappingResultor.New( PersistenceLegacyTypeMappingResultor.New(), 0.7) // 0.7 threshold Here a small example with a Person class. int customerid ; // -> pin String firstname ; // -> firstName String surname ; // -> lastName String comment ; // discarded, NOT new commerceId It should be changed to: Integer pin ; // firstName surname -0,688----> lastName comment -0,750----> commerceId [***new***] address customerid [discarded] customerid and pin are too different to be automatically assigned to each other. Therefore, it is wrongly assumed that customerid is omitted and pin is new. comment and commerceId are surprisingly similar (75%) and are therefore assigned. But that’s not what we want. Incidentally, it would not matter here what is defined as a threshold: customerid would be eliminated by the implicit decision. This is too delicate not to inquire, so it is always necessary to ask. To get the mapping right, you have to specify two entries: customerid is now called pin and comment should be omitted Then the inquiry looks like this: customerid -[mapped]-> pin firstname -0,944----> firstName surname -0,688----> lastName [***new***] commerceId [***new***] address comment [discarded] Due to the explicit mapping from customerid to pin, the similarity does not matter, it is the mapping that matters. To indicate this, it says \"[mapped]\" instead of the similarity. The rest is as usual. Only comment is now \"[discarded]\", according to the mapping. The difference to the above is namely: This is an explicitly predetermined absence. That does not force inquiry. This clears the way for the threshold: If you enter 0.7 or more then you will be asked. As far as everything would be clear, but the mapping of surname to lastName is below the required \"minimum similarity\", so rather ask. If you enter 0.6 or less, you will no longer be asked. Because all assignments are either explicitly specified or they are according to \"minimum similarity\" similar enough to rely on it. A recommendation for a good value for the \"minimum similarity\" is difficult. As soon as one softens rules, there is always the danger of a mistake. See comment example above: is 75% similar to commerceId. Still wrong. Then prefer 80%? Or 90%? Of course it is better, but the danger is still there. If you want to be sure, just make 1.0 or omit the parameter, then by default 1.0 is taken. The most important is the explicit mapping anyway : if \"enough\" is given by the user, there is no need to ask.","title":"User Interaction","component":"manual","version":"master","name":"user-interaction","url":"/manual/storage/legacy-type-mapping/user-interaction.html","titles":[]},"338":{"id":338,"text":"The Lazy class has a .clear() method. When called, the reference held in the Lazy Reference is removed and only the ID is kept so that the instance can be reloaded when needed. Important background knowledge: However, such a clear does not mean that the referenced instance immediately disappears from memory. That’s the job of the garbage collector of the JVM. The reference is even registered in another place, namely in a global directory (Swizzle Registry), in which each known instance is registered with its ObjectId in a bijective manner. This means: if you clear such a reference, but shortly thereafter the Lazy Reference is queried again, probably nothing has to be loaded from the database, but simply the reference from the Swizzle Registry is restored. Nevertheless, the Swizzle Registry is not a memory leak, because it references the instances only via WeakReference. In short, if an instance is only referenced as \"weak,\" the JVM GC will still clean it up. So that the Lazy References do not have to be managed manually, but the whole goes automatically, there is the following mechanism: Each Lazy instance has a lastTouched timestamp. Each .get() call sets it to the current time. This will tell you how long a Lazy Reference has not been used, i.e. if it is needed at all. The LazyReferenceManager audits this. It is enabled by default, with a timeout of 1,000,000 milliseconds, which is about 15 minutes. A custom manager can be set easily, which should happen before a storage is started. LazyReferenceManager.set(LazyReferenceManager.New( Lazy.Checker( Duration.ofMinutes(30).toMillis(), // timeout of lazy access 0.75 // memory quota ) ); The timeout of lazy references is set to 30 minutes, meaning references which haven’t been touched for this time are cleared. In combination with a memory quota of 0.75.","title":"Clearing Lazy References","component":"manual","version":"master","name":"clearing-lazy-references","url":"/manual/storage/loading-data/lazy-loading/clearing-lazy-references.html","titles":[{"text":"Manually","hash":"_manually","id":1},{"text":"Automatically","hash":"automatically","id":2}]},"339":{"id":339,"text":"In this chapter it is explained how Lazy Loading is done with MicroStream. Of course, it’s not really about the technical implementation of procrastination, but about efficiency: why bloat the limited RAM with stuff before you even need it? Classic example: The application has self-contained data areas that contain a large amount of data. The data for an area is not loaded if the area is not worked at all. Instead, you only load a tiny amount of \"head data\" for each area (name or other for displaying purposes) and the actual data only when the application really needs it. E.g. fiscal years with hundreds of thousands or millions of sales. One million revenue records for 2010, one million for 2011, for 2012, etc. In 2019, most of the time only 2019 and 2018 will be needed. The previous few, and the year 2000 sales are not of great interest anymore. Therefore: load data only when needed. Super efficient. For example let’s say the app \"MyBusinessApp\" has a root instance class, looking like this: public class MyBusinessApp { // ... private HashMap businessYears = new HashMap<>(); // ... } The business year hold the turnovers: public class BusinessYear { // ... private ArrayList turnovers = new ArrayList<>(); // ... } This approach would be a problem: During initialization, the root instance would be loaded, from there its HashMap with all BusinessYear instances, each with its ArrayList and thus all conversions. For all years. 20 years of approximately 1 million sales makes 20 million entities, which are pumped directly into the RAM at the start. It does not matter if someone needs it or not. We don’t want it that way. It would be nice if you could simply add a \"lazy\" to the turnover list. And that’s exactly how it works: public class BusinessYear { // ... private Lazy> turnovers = ...; // we will get to that // ... } And bingo, the turnovers are now loaded lazily. Of course, this is no longer an ArrayList field, which is now magically loaded lazy, but this is now a Lazy field and the instances of this type are typed generically to ArrayList . Lazy is just a simple class whose instances internally hold an ID and a reference to the actual thing (here the ArrayList instance). If the internal reference is zero, the reserved ID is used to reload it. If it is not null, it is simply returned. So just a reference intermediate instance. Similar to the JDK’s WeakReference, just not JVM-weak, but storage-lazy. What do you have to do now to get the actual ArrayList instance? ArrayList turnovers = this.turnovers.get(); Just as with WeakReference, or simply as one would expect from a reference intermediate type in general: a simple get method. The .get() call reloads the data as needed. But you do not want to mess around with that yourself. No \"SELECT bla FROM turnovers WHERE ID =\" + this.turnovers.getId(). Since you want to program your application you don' t have to mess around with low-level database ID-loading stuff. That’s what the MicroStream Code does internally. You do not even need to access the ID, you just have to say \"get!\". That’s it. There are different strategies, what you write here. Analogous to the code example before it would be simply: private Lazy> turnovers = Lazy.Reference(new ArrayList<>()); So always a new ArrayList instance, wrapped in a Lazy instance. If the actual ArrayList reference should be null at first, it works the same way: private Lazy> turnovers = Lazy.Reference(null); The this.turnovers.get() also just always returns null. Completely transparent. But you could also do this: private Lazy> turnovers = null; If there is no list, then you do not make any intermediate reference instance for any list. A separate instance for null is indeed a bit …​ meh. But that has a nasty problem elsewhere: this.turnovers.get() does not work then. Because NullPointerException. Anytime you need to write this here, the readability of code is not exactly conducive: return this.turnovers == null ? null : this.turnovers.get(); But there is a simple solution: Just move this check into a static utility method. Just like that: return Lazy.get(this.turnovers); This is the same .get(), just with a static null-check around it. This always puts you on the safe side. For Lazy Loading, simply wrap Lazy<> around the actual field and then call .get() or maybe better Lazy.get(...). It’s as simple as that. The full example can be found on GitHub. Why do you have to replace your actual instance with a lazy loading intermediate instance and fiddle around with generics? Why is not something like this: @Lazy private ArrayList turnovers = new ArrayList<>(); Put simply: If it were just that it would be bare Java bytecode for accessing an ArrayList. There would be no way for a middleware library to get access and look it up and perhaps reload it. What’s written there is an ArrayList reference. There is no lazy anymore. Either, the instance is null, or it is not null. If you wanted to reach in there, you would have to start with bytecode manipulation. Technically possible, but something you really don’t want in your application. So there must always be some form of intermediary. Hibernate solves this through its own collection implementations that do lazy loading internally. Although the lazy loading is nicely hidden in some way (or not, if you need an annotation for that), it also comes with all sorts of limitations. You can only use interfaces instead of concrete classes for collections. At first, the instance is not the one you dictate, the code becomes non-transparent and difficult to debug, you have to use a collection, even if it’s just a single instance, and so on. You want to be able to write anything you want and you want full insight and control (debugability, etc.) over the code. All this can be done with the tiny Lazy Interim Reference class. No restrictions, no incomprehensible \"magic\" under the hood (proxy instances and stuff) and also usable for individual instances.","title":"Lazy Loading","component":"manual","version":"master","name":"index","url":"/manual/storage/loading-data/lazy-loading/index.html","titles":[{"text":"What about the \"…​\" ?","hash":"_what_about_the","id":1},{"text":"In Short","hash":"_in_short","id":2},{"text":"Side Note","hash":"_side_note","id":3}]},"340":{"id":340,"text":"New functionality since MicroStream v8.0 A List, Map, or Set is a single entity within MicroStream. So this means that all data are loaded at once into memory. This can be an issue if you have a very large collection, like a list with several millions of Customers. That is why we recommend splitting up large lists using an indexing strategy like a HashMap that contains a Lazy list of data as value. Or when more advanced functionality is required, you can make use of an Apache Lucene index that efficiently determines which data needs to be loaded. The Lazy collections that are added to the library can help you to maintain a larger block of data in a more memory-efficient way. The implementation might need to load and unload data (when there is not enough memory) so access time to the data might be slightly increased. No additional configuration is required to make use of these Lazy Collections. The Binary Handlers to correctly write and read the Lazy Collections to and from the data storage are already configured by default. When you need to instantiate an instance, you can just call the default constructor. The instance you receive implements the standard Java collection interface that you expect based on the name of the class. new LazyArrayList(); new LazyHashSet(); new LazyHashMap(); The default constructor takes a value of 1000 items in each segment. This is not a hard limit since various factors, like the hash collision with a Map, can result in the fact that more elements are maintained in a segment. You can specify the number of items that should be maintained by specifying this value as a constructor parameter. Note that small values, like smaller than 100, or large values like 1_000_000 and more might negatively impact the performance. As mentioned, the implementation stores the data in different segments which are lazily operated. Initially, at the startup of the StorageManager, the data is not yet loaded into memory and your object graph. When accessing the values, it loads the required segments to fulfill your request. Depending on how you access the data, it might be that all segments need to be loaded. Since they behave like Lazy objects, they can be unloaded by the Garbage collector if needed when the memory consumption of your Java application is high. Some aspects of the implementations The size property is cached, so calling for the amount of data in the collection doesn’t need to load the segments. Accessing the LazyHashMap by a key value will load at maximum log2(n) segments when the implementation uses n segments since the search is implemented as btree.","title":"Lazy collections","component":"manual","version":"master","name":"lazy-collections","url":"/manual/storage/loading-data/lazy-loading/lazy-collections.html","titles":[{"text":"Background","hash":"background","id":1},{"text":"Configuration","hash":"config","id":2},{"text":"Using","hash":"use","id":3},{"text":"Internals","hash":"_internals","id":4}]},"341":{"id":341,"text":"For convenience MicroStream provides Null-safe static access methods for lazy references. Method Description Lazy.get(Lazy) Gets the lazy referenced object, loads it if required. return value: null if the lazy reference itself is null otherwise the referenced object Lazy.peek(Lazy) Get the lazy referenced object if it is loaded, no lazy loading is done. If the object has been unloaded before peek will return null. return value: null if the lazy reference itself is null otherwise the current reference without on-demand loading Lazy.clear(Lazy) Clears the lazy reference if it is not null. All lazy references track the time of their last access (creation or querying) as a timestamp in milliseconds. If an instance is deemed timed out by a LazyReferenzManager its subject gets cleared. The timestamp is currently not public accessible.","title":"Touched Timestamp, Null-Safe Variant","component":"manual","version":"master","name":"touched-timestamp-null-safe-variant","url":"/manual/storage/loading-data/lazy-loading/touched-timestamp-null-safe-variant.html","titles":[{"text":"Null-safe Lazy Reference Access","hash":"_null_safe_lazy_reference_access","id":1},{"text":"Touched Timestamp","hash":"_touched_timestamp","id":2}]},"342":{"id":342,"text":"By default, the continuous backup is disabled. If enabled the MicroStream instance will clone all changes to another directory. The backup is identical to the primary MicroStream storage. To enable the continuous backup just set the backup directory: With microstream-storage-embedded-configuration API: Java EmbeddedStorageManager storageManager = EmbeddedStorageConfigurationBuilder.New() .setBackupDirectory(\"A safe place\") .createEmbeddedStorageFoundation() .createEmbeddedStorageManager(); XML ... INI backupDirectory = backupDir With MicroStream foundation classes: Java NioFileSystem fileSystem = NioFileSystem.New(); StorageBackupSetup backupSetup = StorageBackupSetup.New( Sorage.BackupFileProviderBuilder(fileSystem) .setDirectory(fileSystem.ensureDirectoryPath(BACKUPDIR)) .setTruncationDirectory(fileSystem.ensureDirectoryPath(TRUNCATIONDIR)) .setDeletionDirectory(fileSystem.ensureDirectoryPath(DELETIONDIR)) .createFileProvider() ); StorageConfiguration configuration = StorageConfiguration.Builder() .setBackupSetup(backupSetup) .setStorageFileProvider(StorageLiveFileProvider.New( fileSystem.ensureDirectoryPath(WORKINGDIR) )) .createConfiguration() ;","title":"Continuous Backup","component":"manual","version":"master","name":"continuous-backup","url":"/manual/storage/configuration/backup/continuous-backup.html","titles":[]},"343":{"id":343,"text":"To issue a full backup of the whole storage to be executed, the EmbeddedStorageManager provides two methods named issueFullBackup. Keep in mind that this could result in a very long running operation, depending on the storage size. Although the full backup may be a valid solution in some circumstances, the continuous backup should be preferred, since it is by far more efficient. EmbeddedStorageManager storage = ...; storage.issueFullBackup( NioFileSystem.New().ensureDirectoryPath(\"full\", \"backup\", \"dir\") ); The backup can be written to any available storage target, not just the local file system.","title":"Full Backup","component":"manual","version":"master","name":"full-backup","url":"/manual/storage/configuration/backup/full-backup.html","titles":[]},"344":{"id":344,"text":"pom.xml one.microstream microstream-cache 08.01.01-MS-GA The above dependency adds the JCache API and MicroStream Embedded storage as transient dependencies to your project. CachingProvider provider = Caching.getCachingProvider(); CacheManager cacheManager = provider.getCacheManager(); MutableConfiguration configuration = new MutableConfiguration() .setStoreByValue(false) .setExpiryPolicyFactory(CreatedExpiryPolicy.factoryOf(Duration.ONE_MINUTE)); Cache cache = cacheManager.createCache(\"jCache\", configuration); cache.put(1, \"Hello World\"); String value = cache.get(1); Get the default CachingProvider implementation from the application’s classpath. This method will work if and only if there is only one JCache implementation available in the classpath. If there are multiple providers then use the fully qualified name + Caching.getCachingProvider(\"one.microstream.cache.types.CachingProvider\") instead. Get the default CacheManager instance using the provider. Create a cache configuration using MutableConfiguration with key type and value type as Integer and String respectively configured to store the cache entries by reference (not by value) and with an expiry time of one minute defined for entries from the moment they are created. Using the cache manager, create a cache named jCache with the configuration created in step 3. Put some data into the cache And retrieve it. The same can be done using MicroSteam’s CacheConfiguration API. This time we use a EmbeddedStorageManager as a backing store for the cache. EmbeddedStorageManager storageManager = EmbeddedStorage.start(); CachingProvider provider = Caching.getCachingProvider(); CacheManager cacheManager = provider.getCacheManager(); CacheConfiguration configuration = CacheConfiguration .Builder(Integer.class, String.class, \"jCache\", storageManager) .expiryPolicyFactory(CreatedExpiryPolicy.factoryOf(Duration.ONE_HOUR)) .build(); Cache cache = cacheManager.createCache(\"jCache\", configuration); cache.put(1, \"one\"); String value = cache.get(1);","title":"Getting Started","component":"manual","version":"master","name":"getting-started","url":"/manual/cache/getting-started.html","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"Hello World","hash":"_hello_world","id":2}]},"345":{"id":345,"text":"Since version 3 MicroStream provides a JCache (JSR-107) implementation, which is optionally backed by a MicroStream Storage. JCache standardizes caching for the Java platform. It provides a common mechanism to cache values in a map-like structure. It expedites the mainstream adoption of in-memory computing by giving all Java developers an easy way to access memory from within Java. Businesses can change providers without rewriting their applications or maintaining a proprietary cache abstraction layer. This caching standard is used in a wide variety of environments. The most common use cases are: Second-level cache in JPA (e.g. Hibernate) Spring Cache Abstraction and many more Why another JCache implementation, you may wonder. There is already a myriad of providers out there. MicroStream’s very own serialization and storage can be utilized to get the best out of caches. For example, you are not limited to java.io.Serializable types, when storing a value. That means every key-value pair gets copied every time you put and get entries in and out of a cache. And if a cache is used with a backing store, MicroStream’s storage can be used to get the best possible performance. And now, MicroStream being a JCache provider, you can use it as a drop-in replacement in your existing application. The caching provider represents the implementation of JCache that you are using. You can use more than one JCache implementation in your project if you wish, and CachingProvider is how you access the different providers that are in use. It is responsible for managing and providing access to many named caches. The cache holds the different values being cached. You can have several caches, each of which may be holding data for a different purpose. Each one can have a different configuration; for example, different caches may evict old data using different techniques. Each item of data in a cache is an entry, which is a key-value pair. The key is a unique value used to store and look up the data. The value is the actual data you wish to cache. Caches have some different properties than Maps, but the calls that you would use to store and lookup data is very similar.","title":"Cache","component":"manual","version":"master","name":"index","url":"/manual/cache/index.html","titles":[{"text":"Motivation","hash":"_motivation","id":1},{"text":"Basic Concepts of JCache","hash":"_basic_concepts_of_jcache","id":2},{"text":"CachingProvider","hash":"_cachingprovider","id":3},{"text":"CacheManager","hash":"_cachemanager","id":4},{"text":"Cache","hash":"_cache","id":5},{"text":"Entry","hash":"_entry","id":6}]},"346":{"id":346,"text":"Since version 7 Microstream provides a module for simple object based network communication over TCP connections. This module utilizes the Microstream engine to serialize and deserialize java objects and provides additional APIs to setup the required TCP connections. If using Maven just add module microstream-communication-binary into your pom.xml dependencies. pom.xml one.microstream microstream-communication-binary 08.01.01-MS-GA The Hello World example consists out of two applications. The Host and the Client application. The Host will open a network port and listen for incoming connections of the client. If a client connects successfully it awaits data from the client that will be send back to the client. The basic example won’t do any configuration so the connection is not secured and the client and host use the local system address at port 1099. public class EchoServer { public static void main(final String[] args) { final ComHost host = ComBinaryDynamic.Foundation() .setHostChannelAcceptor(channel -> { final Object received = channel.receive(); System.out.println(\"received: \" + received); channel.send(received); }) .createHost(); // run the host, making it constantly listen for new connections and relaying them to the logic host.run(); } } public class EchoClient { public static void main(final String[] args) { //create the client final ComClient client = ComBinaryDynamic.Foundation() .createClient(); //connect to the host and communicate try(final ComChannel channel = client.connect()) { channel.send(\"Hello Host\"); final Object received = channel.receive(); System.out.println(\"received: \" + received); } } } Configuration of host and client is done using the ComFoundation.Default implementation of the ComFoundation interface. To get a preconfigured foundation instance the classes ComBinaryDynamic and ComBinary provide the convenient method Foundation(). The Object communication of Microstream is available in two flavors: Dynamic and non dynamic. They differ in the way classes that should be serialized and transfered are handled: The non dynamic version requires all classes that should be transfered to be registered at initialization time. This can be done with the registerEntityType methods of the ComFoundation. If a transfered object graph references any unregistered class an exception will occur! The dynamic implementation automatically registers all classes that are part of the communication at runtime. It will also do a type-mapping if classes with the same name have different implementations on client and host. host binding address The host’s IP address is configured with ComFoundation.setHostBindingAddress(InetSocketAddress). client target address The address the client connects to is configured by ComFoundation.setClientTargetAddress(InetSocketAddress). port only If no host or client target address is configured it is possible to use ComFoundation.setPort(int) to set a port that is used together with the default ip addresses for host and client. registering entity types to register entity types at startup use ComFoundation.registerEntityTypes(Class…​) for example. In order to use TLS encrypted communication you need to setup a ComTLSConnectionHandler and supply it using ComFoundation.setConnectionHandler(ComConnectionHandler). The default implementation of the ComTLSConnectionHandler uses the java SSLEngine . The required configuration elements have to be provided using either the provided implementations of the TLSKeyManagerProvider , TLSTrustManagerProvider , TLSParametersProvider and SecureRandomProvider interfaces or by custom implementations. public class EchoServerTLS { public static void main(final String[] args) { Path serverKeyStore = Paths.get(args[0]); Path serverTrustStore = Paths.get(args[1]); char[] serverKeyStorePassword = args[2].toCharArray(); char[] serverTrustStorePassword = args[2].toCharArray(); final ComHost host = ComBinaryDynamic.Foundation() .setConnectionHandler(ComTLSConnectionHandler.New( new TLSKeyManagerProvider.PKCS12( serverKeyStore, serverKeyStorePassword), new TLSTrustManagerProvider.PKCS12( serverTrustStore, serverTrustStorePassword), new TLSParametersProvider.Default(), new SecureRandomProvider.Default() )) .setHostChannelAcceptor(channel -> { final Object received = channel.receive(); System.out.println(\"received: \" + received); channel.send(received); }) .createHost(); // run the host, making it constantly listen for new connections and relaying them to the logic host.run(); } } The provided implementations are: one.microstream.communication.tls.TLSKeyManagerProvider.Default provides no javax.net.ssl.KeyManagers, so the SSLEngine uses the systems’s default KeyManager. one.microstream.communication.tls.TLSKeyManagerProvider.PKCS12 Creates a SunX509 javax.net.ssl.KeyManagers by loading a PKCS12 key store from the file system. one.microstream.communication.tls.TLSTrustManagerProvider.Default provides no javax.net.ssl.TrustManager, so the SSLEngine uses the systems’s default TrustManager. one.microstream.communication.tls.TLSTrustManagerProvider.PKCS12 Creates a SunX509 javax.net.ssl.TrustManager by loading a PKCS12 key store from the file system. one.microstream.communication.tls.TLSParametersProvider.Default - provides javax.net.ssl.SSLParameters with client authentication enabled - protocol string is TLSv1.2 - timeout of 1000ms for the TLS handshake one.microstream.communication.tls.SecureRandomProvider.Default provides a null java.security.SecureRandom to let the SLLengine use the system default SecureRandom","title":"Communication","component":"manual","version":"master","name":"index","url":"/manual/communication/index.html","titles":[{"text":"Getting Started","hash":"_getting_started","id":1},{"text":"Prerequisites","hash":"_prerequisites","id":2},{"text":"Hello World","hash":"_hello_world","id":3},{"text":"Host","hash":"_host","id":4},{"text":"Client","hash":"_client","id":5},{"text":"Configuration","hash":"_configuration","id":6},{"text":"ComBinaryDynamic and ComBinary","hash":"_combinarydynamic_and_combinary","id":7},{"text":"Common configuration values","hash":"_common_configuration_values","id":8},{"text":"TLS","hash":"_tls","id":9}]},"347":{"id":347,"text":"MicroStream’s serialization engine, which is used by the storage and the cache, can be used standalone as well. It is usable as a replacement for the default Java serialization to convert objects to a binary format and vice versa. This API is part of the persistence-binary module: pom.xml one.microstream microstream-persistence-binary 08.01.01-MS-GA You can use any medium type, but for most purposes the byte array version should be sufficient, to transfer the serialized form over the transport layer of your choice. Simply create a serializer instance, optionally based on a foundation, and call the serialize and deserialize methods. final SerializerFoundation foundation = SerializerFoundation.New() .registerEntityTypes(Customer.class); final Serializer serializer = Serializer.Bytes(foundation); byte[] data = serializer.serialize(customer); Customer restored = serializer.deserialize(data); The serializer uses the MicroStream type handling system. This includes registration of new types on demand during serialization and legacy type mapping when deserializing. The SerializerFoundation provides an API like the MicroStream storage to configure the type handling behavior. The default Serializer implementation does not include type information in the serialized output! If you want to deserialize that with another serializer instance you must register all classes using the SerializerFoundation before you create the serializer or use a TypedSerializer! The TypedSerializer implementation includes type information into the serialized output. By default the complete set of type information is included in all serialized output. final Serializer serializer = TypedSerializer.Bytes(foundation); byte[] data = serializer.serialize(customer); Customer restored = serializer.deserialize(data); To reduce the serialized data it is possible to configure the included type information by suppling a SerializerTypeInfoStrategyCreator to the SerializerFoundation. final SerializerFoundation foundation = SerializerFoundation.New() .setSerializerTypeInfoStrategyCreator( new SerializerTypeInfoStrategyCreator.IncrementalDiff(false)); return TypedSerializer.Bytes(foundation); Property Description TypeDictionary Includes type information for all types currently known to the serializer including those registered during the setup. Diff Includes type information for all types currently known to the serializer including those registered during the setup. IncrementalDiff Includes only type information for types added to the serializers type registry in the current serialization. Types that are registered during the serializers setup are never included. All three serializer type handling strategies allow to specify that the type information gets included only once if it has not changed by setting the parameter includeTypeInfoOnce = true. If so, the type information is only included if there where new types registered during the current serialization.","title":"Serializer","component":"manual","version":"master","name":"index","url":"/manual/serializer/index.html","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"Usage","hash":"_usage","id":2},{"text":"Type handling","hash":"_type_handling","id":3},{"text":"TypedSerializer","hash":"_typedserializer","id":4},{"text":"Configuring the included type information","hash":"_configuring_the_included_type_information","id":5},{"text":"Available options are:","hash":"_available_options_are","id":6},{"text":"The includeTypeInfoOnce parameter:","hash":"_the_includetypeinfoonce_parameter","id":7}]},"348":{"id":348,"text":"The default way to configure a JCache provider is to use the class javax.cache.configuration.MutableConfiguration. This is mostly used to avoid provider specific code. If you want to use all of MicroStream’s Cache features, you can use our configuration implementation: one.microstream.cache.types.CacheConfiguration CachingProvider provider = Caching.getCachingProvider(); CacheManager cacheManager = provider.getCacheManager(); CacheConfiguration configuration = CacheConfiguration .Builder(Integer.class, String.class) .storeByValue() .expiryPolicyFactory(CreatedExpiryPolicy.factoryOf(Duration.ONE_MINUTE)) .build(); Cache cache = cacheManager.createCache(\"jCache\", configuration); cache.put(1, \"Hello World\"); String value = cache.get(1); To read an external configuration use CacheConfigurationLoader and CacheConfigurationParser or the load*() methods of CacheConfiguration. CacheConfiguration configuration = CacheConfiguration .load(\"cache-config.properties\", Integer.class, String.class); If you just use CacheConfiguration.load() the default configuration file is used, which is either a file in the classpath root named microstream-cache.properties, or the path configured via the system property microstream.cache.configuration.path.","title":"Configuration","component":"manual","version":"master","name":"index","url":"/manual/cache/configuration/index.html","titles":[]},"349":{"id":349,"text":"These are the available properties of the CacheConfiguration type. The property names are used in the external configuration files. They can be found as constants in CacheConfigurationPropertyNames. Property Type Description key-type Fully Qualified Class Name Determines the required type of keys for the Cache. value-type Fully Qualified Class Name Determines the required type of values for the Cache. storage-configuration-resource-name absolute or relative file name Path for the storage configuration for the backing store. cache-loader-factory Fully Qualified Class Name of JCache factory implementation for a javax.cache.integration.CacheLoader A CacheLoader should be configured for \"Read Through\" caches to load values when a cache miss occurs. cache-writer-factory Fully Qualified Class Name of JCache factory implementation for a javax.cache.integration.CacheWriter A CacheWriter is used for write-through to an external resource. expiry-policy-factory Fully Qualified Class Name of JCache factory implementation for a javax.cache.expiry.ExpiryPolicy Determines when cache entries will expire based on creation, access and modification operations. eviction-manager-factory Fully Qualified Class Name of JCache factory implementation for a one.microstream.cache.types.EvictionManager Clears cache entries using a policy. Works interval-based or on entry creation. read-through boolean parsed according to the java.lang.Boolean.parseBoolean() rules When in \"read-through\" mode, cache misses that occur due to cache entries not existing as a result of performing a \"get\" will appropriately cause the configured CacheLoader to be invoked. write-through boolean parsed according to the java.lang.Boolean.parseBoolean() rules When in \"write-through\" mode, cache updates that occur as a result of performing \"put\" operations will appropriately cause the configured CacheWriter to be invoked. store-by-value boolean parsed according to the java.lang.Boolean.parseBoolean() rules When a cache is storeByValue, any mutation to the key or value does not affect the key of value stored in the cache. statistics-enabled boolean parsed according to the java.lang.Boolean.parseBoolean() rules Checks whether statistics collection is enabled in this cache. management-enabled boolean parsed according to the java.lang.Boolean.parseBoolean() rules Checks whether management is enabled on this cache.","title":"Properties","component":"manual","version":"master","name":"properties","url":"/manual/cache/configuration/properties.html","titles":[]},"350":{"id":350,"text":"MicroStream’s storage can be used as a backing store for the cache. It functions as a CacheWriter as well as a CacheReader, depending on the writeThrough and readThrough configuration. Per default it is used for both. EmbeddedStorageManager storageManager = EmbeddedStorage.start(); CachingProvider provider = Caching.getCachingProvider(); CacheManager cacheManager = provider.getCacheManager(); CacheConfiguration configuration = CacheConfiguration .Builder(Integer.class, String.class, \"my-cache\", storageManager) .build(); Cache cache = cacheManager.createCache(\"jCache\", configuration); If you prefer an external configuration, you can link the storage configuration: cache-config.properties key-type = java.lang.Integer value-type = java.lang.String read-through = true write-through = true storage-configuration-resource-name = microstream-storage.properties microstream-storage.properties storage-directory = ~/cache-data channel-count = 4 Or you can embed the storage configuration within the cache configuration using the storage. prefix: cache-config.properties key-type = java.lang.Integer value-type = java.lang.String read-through = true write-through = true storage.storage-directory = ~/cache-data storage.channel-count = 4 Since the validity of a Cache entry is only determined when the value is retrieved, the expiry durations are not always respected when using the StorageManager when the application is restarted. An example makes this clear. Suppose we have defined a cache where the ExpiryPolicy is set to 1 Minute. When we create an entry in this cache and we did not request the cache entry after the 1-minute expiry before we do shut down the application. When we start up the application again, When we request the cache entry, it is loaded from the MicroStream Storage Manager and 'created' with a new expiry of 1 minute. This means that even if the entry was already created more than 1 minute ago (even when we only take into consideration the application uptime), the entry is still returned to the calling code. application.properties spring.jpa.properties.hibernate.cache.microstream.missing_cache_strategy = create spring.jpa.properties.hibernate.cache.microstream.readThrough = true spring.jpa.properties.hibernate.cache.microstreamwriteThrough = true spring.jpa.properties.hibernate.cache.microstream.storage.baseDirectory = ~/cache-data spring.jpa.properties.hibernate.cache.microstream.storage.channelCount = 4 spring.jpa.properties.hibernate.cache.region.factory_class = one.microstream.cache.hibernate.types.CacheRegionFactory spring.jpa.properties.hibernate.cache.use_query_cache = true spring.jpa.properties.hibernate.cache.use_second_level_cache = true application.yml spring: jpa: properties: hibernate: cache: microstream: missing_cache_strategy: create readThrough: true writeThrough: true storage: baseDirectory: ~/cache-data channelCount: 4 region: factory_class: one.microstream.cache.hibernate.types.CacheRegionFactory use_query_cache: true use_second_level_cache: true","title":"Storage","component":"manual","version":"master","name":"storage","url":"/manual/cache/configuration/storage.html","titles":[{"text":"Cache expiry and StorageManager","hash":"_cache_expiry_and_storagemanager","id":1},{"text":"Spring example","hash":"_spring_example","id":2}]},"351":{"id":351,"text":"MicroStream offers a Hibernate cache region factory, which can be found in the cache.hibernate module. pom.xml one.microstream microstream-cache-hibernate 08.01.01-MS-GA The region factory’s class name is one.microstream.cache.hibernate.types.CacheRegionFactory. It is configured via the property hibernate.cache.region.factory_class. Depending on your environment it can be configured in different ways. If you use a good old persistence.xml, set the property there: persistence.xml org.hibernate.jpa.HibernatePersistenceProvider ... ... ... application.properties spring.jpa.properties.hibernate.cache.microstream.missing_cache_strategy=create spring.jpa.properties.hibernate.cache.region.factory_class=one.microstream.cache.hibernate.types.CacheRegionFactory spring.jpa.properties.hibernate.cache.use_query_cache=true spring.jpa.properties.hibernate.cache.use_second_level_cache=true spring.jpa.properties.javax.persistence.sharedCache.mode=ALL application.yml spring: jpa: properties: hibernate: cache: microstream: missing_cache_strategy: create region: factory_class: one.microstream.cache.hibernate.types.CacheRegionFactory use_query_cache: true use_second_level_cache: true javax: persistence: sharedCache: mode: ALL","title":"Hibernate Second Level Cache","component":"manual","version":"master","name":"hibernate-second-level-cache","url":"/manual/cache/use-cases/hibernate-second-level-cache.html","titles":[{"text":"Spring Example","hash":"_spring_example","id":1}]},"352":{"id":352,"text":"First of all add the MicroStream Cache dependency: pom.xml one.microstream microstream-cache 08.01.01-MS-GA The core caching abstraction provided by Spring comes in the spring-context module. org.springframework spring-context ... If you use Spring Boot, then add the spring-boot-starter-cache package to add the caching dependencies: org.springframework.boot spring-boot-starter-cache To enable caching, Spring makes good use of annotations, much like enabling any other configuration level feature in the framework. The caching feature can be enabled by simply providing a cache setup component. @SpringBootApplication @EnableCaching public class MyApplication @Component public class CachingSetup implements JCacheManagerCustomizer { @Override public void customize(CacheManager cacheManager) { cacheManager.createCache(\"my_cache\", new MutableConfiguration<>() .setExpiryPolicyFactory(CreatedExpiryPolicy.factoryOf(new Duration(SECONDS, 10000))) .setStoreByValue(true) .setStatisticsEnabled(true)); } } More information about the Spring Cache Abstraction: https://docs.spring.io/spring/docs/current/spring-framework-reference/integration.html#cache","title":"Spring Cache","component":"manual","version":"master","name":"spring-cache","url":"/manual/cache/use-cases/spring-cache.html","titles":[]}},"components":{},"componentVersions":{"manual/master":{"displayVersion":"8.0","title":"MicroStream Reference Manual","version":"master","name":"manual","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"MicroStream Reference Manual","site-url":"https://docs.microstream.one/","page-pagination":"","source-language":"asciidoc@","display-version":"8.1.1","api-version":"8.0","maven-version":"08.01.01-MS-GA"},"sourcemap":false},"url":"/manual/intro/welcome.html","navigation":[{"items":[{"content":"Welcome","url":"/manual/intro/welcome.html","urlType":"internal"},{"content":"System Requirements","url":"/manual/intro/system-requirements.html","urlType":"internal"},{"content":"Changelog","url":"/manual/intro/changelog.html","urlType":"internal"},{"content":"Installation","url":"/manual/intro/installation.html","urlType":"internal"},{"content":"Storage","url":"/manual/storage/index.html","urlType":"internal","items":[{"content":"Getting Started","url":"/manual/storage/getting-started.html","urlType":"internal"},{"content":"Root Instances","url":"/manual/storage/root-instances.html","urlType":"internal"},{"content":"Configuration","url":"/manual/storage/configuration/index.html","urlType":"internal","items":[{"content":"Properties","url":"/manual/storage/configuration/properties.html","urlType":"internal"},{"content":"Storage Files and Directories","url":"/manual/storage/configuration/storage-files-and-directories.html","urlType":"internal"},{"content":"Using Channels","url":"/manual/storage/configuration/using-channels.html","urlType":"internal"},{"content":"Houskeeping","url":"/manual/storage/configuration/housekeeping.html","urlType":"internal"},{"content":"Read-only Manager","url":"/manual/storage/configuration/readonly.html","urlType":"internal"},{"content":"Backup","items":[{"content":"Continous Backup","url":"/manual/storage/configuration/backup/continuous-backup.html","urlType":"internal"},{"content":"Full Backup","url":"/manual/storage/configuration/backup/full-backup.html","urlType":"internal"}]},{"content":"Lock File","url":"/manual/storage/configuration/lock-file.html","urlType":"internal"}]},{"content":"Storage Targets","url":"/manual/storage/storage-targets/index.html","urlType":"internal","items":[{"content":"Local File System","url":"/manual/storage/storage-targets/local-file-system.html","urlType":"internal"},{"content":"SQL Databases","items":[{"content":"Hana","url":"/manual/storage/storage-targets/sql-databases/hana.html","urlType":"internal"},{"content":"MariaDB","url":"/manual/storage/storage-targets/sql-databases/mariadb.html","urlType":"internal"},{"content":"Oracle","url":"/manual/storage/storage-targets/sql-databases/oracle.html","urlType":"internal"},{"content":"Postgres","url":"/manual/storage/storage-targets/sql-databases/postgresql.html","urlType":"internal"},{"content":"Sqlite","url":"/manual/storage/storage-targets/sql-databases/sqlite.html","urlType":"internal"}]},{"content":"Blob Stores","items":[{"content":"AWS","items":[{"content":"DynamoDB","url":"/manual/storage/storage-targets/blob-stores/aws-dynamodb.html","urlType":"internal"},{"content":"S3","url":"/manual/storage/storage-targets/blob-stores/aws-s3.html","urlType":"internal"}]},{"content":"Azure Storage","url":"/manual/storage/storage-targets/blob-stores/azure-storage.html","urlType":"internal"},{"content":"Google Cloud Firestore","url":"/manual/storage/storage-targets/blob-stores/google-cloud-firestore.html","urlType":"internal"},{"content":"Hazelcast","url":"/manual/storage/storage-targets/blob-stores/hazelcast.html","urlType":"internal"},{"content":"Kafka","url":"/manual/storage/storage-targets/blob-stores/kafka.html","urlType":"internal"},{"content":"Oracle Cloud Object Storage","url":"/manual/storage/storage-targets/blob-stores/oracle-cloud-object-storage.html","urlType":"internal"},{"content":"Oracle Coherence","url":"/manual/storage/storage-targets/blob-stores/oracle-coherence.html","urlType":"internal"},{"content":"Redis","url":"/manual/storage/storage-targets/blob-stores/redis.html","urlType":"internal"}]}]},{"content":"Storing Data","url":"/manual/storage/storing-data/index.html","urlType":"internal","items":[{"content":"Convenience Methods and Explicit Storing (Transactions)","url":"/manual/storage/storing-data/transactions.html","urlType":"internal"},{"content":"Lazy and Eager Storing","url":"/manual/storage/storing-data/lazy-eager-full.html","urlType":"internal"},{"content":"Transient Fields","url":"/manual/storage/storing-data/transient-fields.html","urlType":"internal"},{"content":"Best Practice","url":"/manual/storage/storing-data/best-practice.html","urlType":"internal"},{"content":"Deep Copy Utility","url":"/manual/storage/storing-data/deep-copy.html","urlType":"internal"},{"content":"Reloading","url":"/manual/storage/storing-data/reloader.html","urlType":"internal"}]},{"content":"Loading Data","url":"/manual/storage/loading-data/index.html","urlType":"internal","items":[{"content":"Lazy Loading","url":"/manual/storage/loading-data/lazy-loading/index.html","urlType":"internal"},{"content":"Lazy Collections","url":"/manual/storage/loading-data/lazy-loading/lazy-collections.html","urlType":"internal"},{"content":"Touched Timestamp, Null-Safe Variant","url":"/manual/storage/loading-data/lazy-loading/touched-timestamp-null-safe-variant.html","urlType":"internal"},{"content":"Clearing Lazy References","url":"/manual/storage/loading-data/lazy-loading/clearing-lazy-references.html","urlType":"internal"}]},{"content":"Deleting Data","url":"/manual/storage/deleting-data.html","urlType":"internal"},{"content":"Queries","url":"/manual/storage/queries.html","urlType":"internal"},{"content":"Application Life-Cycle","url":"/manual/storage/application-life-cycle.html","urlType":"internal"},{"content":"Legacy Type Mapping","url":"/manual/storage/legacy-type-mapping/index.html","urlType":"internal","items":[{"content":"User Interaction","url":"/manual/storage/legacy-type-mapping/user-interaction.html","urlType":"internal"}]},{"content":"Import / Export","url":"/manual/storage/import-export.html","urlType":"internal"},{"content":"Housekeeping","url":"/manual/storage/housekeeping.html","urlType":"internal"},{"content":"Customizing","items":[{"content":"Custom Type Handler","url":"/manual/storage/customizing/custom-type-handler.html","urlType":"internal"},{"content":"Custom Legacy Type Handler","url":"/manual/storage/customizing/custom-legacy-type-handler.html","urlType":"internal"},{"content":"Custom Class Loader","url":"/manual/storage/customizing/custom-class-loader.html","urlType":"internal"},{"content":"Custom Storing Behavior","url":"/manual/storage/customizing/custom-storing-behavior.html","urlType":"internal"},{"content":"Optional Storage Manager Reference in Entities","url":"/manual/storage/customizing/optional-storage-manager-reference-in-entities.html","urlType":"internal"}]},{"content":"REST Interface","url":"/manual/storage/rest-interface/index.html","urlType":"internal","items":[{"content":"Setup","url":"/manual/storage/rest-interface/setup.html","urlType":"internal"},{"content":"REST API","url":"/manual/storage/rest-interface/rest-api.html","urlType":"internal"},{"content":"Client GUI","url":"/manual/storage/rest-interface/client-gui.html","urlType":"internal"}]},{"content":"FAQ","items":[{"content":"Data Model","url":"/manual/storage/faq/data-model.html","urlType":"internal"},{"content":"Data Management","url":"/manual/storage/faq/data-management.html","urlType":"internal"},{"content":"File Storage","url":"/manual/storage/faq/file-storage.html","urlType":"internal"},{"content":"Java Features","url":"/manual/storage/faq/java-features.html","urlType":"internal"},{"content":"Miscellaneous","url":"/manual/storage/faq/miscellaneous.html","urlType":"internal"}]},{"content":"Addendum","items":[{"content":"Supported Java Features","url":"/manual/storage/addendum/supported-java-features.html","urlType":"internal"},{"content":"Specialized Type Handlers","url":"/manual/storage/addendum/specialized-type-handlers.html","urlType":"internal"},{"content":"Examples and Demo Projects","url":"/manual/storage/addendum/examples-and-demo-projects.html","urlType":"internal"}]}]},{"content":"Serializer","url":"/manual/serializer/index.html","urlType":"internal"},{"content":"Cache","url":"/manual/cache/index.html","urlType":"internal","items":[{"content":"Getting Started","url":"/manual/cache/getting-started.html","urlType":"internal"},{"content":"Configuration","url":"/manual/cache/configuration/index.html","urlType":"internal","items":[{"content":"Properties","url":"/manual/cache/configuration/properties.html","urlType":"internal"},{"content":"Storage","url":"/manual/cache/configuration/storage.html","urlType":"internal"}]},{"content":"Use Cases","items":[{"content":"Hibernate Second Level Cache","url":"/manual/cache/use-cases/hibernate-second-level-cache.html","urlType":"internal"},{"content":"Spring Cache","url":"/manual/cache/use-cases/spring-cache.html","urlType":"internal"}]}]},{"content":"Communication","url":"/manual/communication/index.html","urlType":"internal"},{"content":"Miscellaneous","items":[{"content":"Logging","url":"/manual/misc/logging/index.html","urlType":"internal"},{"content":"Integrations","url":"/manual/misc/integrations/index.html","urlType":"internal","items":[{"content":"Helidon","url":"/manual/misc/integrations/helidon.html","urlType":"internal"},{"content":"Spring-Boot","url":"/manual/misc/integrations/spring-boot.html","urlType":"internal"},{"content":"CDI","url":"/manual/misc/integrations/cdi.html","urlType":"internal"},{"content":"Quarkus","url":"/manual/misc/integrations/quarkus.html","urlType":"internal"}]},{"content":"Layered Entities","url":"/manual/misc/layered-entities/index.html","urlType":"internal","items":[{"content":"Configuration","url":"/manual/misc/layered-entities/configuration.html","urlType":"internal"},{"content":"Defining Entities","url":"/manual/misc/layered-entities/defining-entities.html","urlType":"internal"},{"content":"Creating Entities","url":"/manual/misc/layered-entities/creating-entities.html","urlType":"internal"},{"content":"Updating Entities","url":"/manual/misc/layered-entities/updating-entities.html","urlType":"internal"},{"content":"Versioning","url":"/manual/misc/layered-entities/versioning.html","urlType":"internal"},{"content":"Logging","url":"/manual/misc/layered-entities/logging.html","urlType":"internal"},{"content":"Multiple Layers","url":"/manual/misc/layered-entities/multiple-layers.html","urlType":"internal"}]},{"content":"Wrapping","url":"/manual/misc/wrapping/index.html","urlType":"internal","items":[{"content":"Configuration","url":"/manual/misc/wrapping/configuration.html","urlType":"internal"},{"content":"Usage","url":"/manual/misc/wrapping/usage.html","urlType":"internal"}]}]}],"root":true,"order":0}]},"manual/7.0":{"displayVersion":"7.0","title":"MicroStream Reference Manual","version":"7.0","name":"manual","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"MicroStream Reference Manual","site-url":"https://docs.microstream.one/","page-pagination":"","source-language":"asciidoc@","display-version":"7.1","api-version":"7.0","maven-version":"07.01.00-MS-GA"},"sourcemap":false},"url":"/manual/7.0/intro/welcome.html","navigation":[{"items":[{"content":"Welcome","url":"/manual/7.0/intro/welcome.html","urlType":"internal"},{"content":"System Requirements","url":"/manual/7.0/intro/system-requirements.html","urlType":"internal"},{"content":"Changelog","url":"/manual/7.0/intro/changelog.html","urlType":"internal"},{"content":"Installation","url":"/manual/7.0/intro/installation.html","urlType":"internal"},{"content":"Storage","url":"/manual/7.0/storage/index.html","urlType":"internal","items":[{"content":"Getting Started","url":"/manual/7.0/storage/getting-started.html","urlType":"internal"},{"content":"Root Instances","url":"/manual/7.0/storage/root-instances.html","urlType":"internal"},{"content":"Configuration","url":"/manual/7.0/storage/configuration/index.html","urlType":"internal","items":[{"content":"Properties","url":"/manual/7.0/storage/configuration/properties.html","urlType":"internal"},{"content":"Storage Files and Directories","url":"/manual/7.0/storage/configuration/storage-files-and-directories.html","urlType":"internal"},{"content":"Using Channels","url":"/manual/7.0/storage/configuration/using-channels.html","urlType":"internal"},{"content":"Houskeeping","url":"/manual/7.0/storage/configuration/housekeeping.html","urlType":"internal"},{"content":"Backup","items":[{"content":"Continous Backup","url":"/manual/7.0/storage/configuration/backup/continuous-backup.html","urlType":"internal"},{"content":"Full Backup","url":"/manual/7.0/storage/configuration/backup/full-backup.html","urlType":"internal"}]},{"content":"Lock File","url":"/manual/7.0/storage/configuration/lock-file.html","urlType":"internal"}]},{"content":"Storage Targets","url":"/manual/7.0/storage/storage-targets/index.html","urlType":"internal","items":[{"content":"Local File System","url":"/manual/7.0/storage/storage-targets/local-file-system.html","urlType":"internal"},{"content":"SQL Databases","items":[{"content":"MariaDB","url":"/manual/7.0/storage/storage-targets/sql-databases/mariadb.html","urlType":"internal"},{"content":"Oracle","url":"/manual/7.0/storage/storage-targets/sql-databases/oracle.html","urlType":"internal"},{"content":"Postgres","url":"/manual/7.0/storage/storage-targets/sql-databases/postgresql.html","urlType":"internal"},{"content":"Sqlite","url":"/manual/7.0/storage/storage-targets/sql-databases/sqlite.html","urlType":"internal"}]},{"content":"Blob Stores","items":[{"content":"AWS","items":[{"content":"DynamoDB","url":"/manual/7.0/storage/storage-targets/blob-stores/aws-dynamodb.html","urlType":"internal"},{"content":"S3","url":"/manual/7.0/storage/storage-targets/blob-stores/aws-s3.html","urlType":"internal"}]},{"content":"Azure Storage","url":"/manual/7.0/storage/storage-targets/blob-stores/azure-storage.html","urlType":"internal"},{"content":"Hazelcast","url":"/manual/7.0/storage/storage-targets/blob-stores/hazelcast.html","urlType":"internal"},{"content":"Kafka","url":"/manual/7.0/storage/storage-targets/blob-stores/kafka.html","urlType":"internal"},{"content":"Oracle Cloud Object Storage","url":"/manual/7.0/storage/storage-targets/blob-stores/oracle-cloud-object-storage.html","urlType":"internal"},{"content":"Oracle Coherence","url":"/manual/7.0/storage/storage-targets/blob-stores/oracle-coherence.html","urlType":"internal"},{"content":"Redis","url":"/manual/7.0/storage/storage-targets/blob-stores/redis.html","urlType":"internal"}]}]},{"content":"Storing Data","url":"/manual/7.0/storage/storing-data/index.html","urlType":"internal","items":[{"content":"Convenience Methods and Explicit Storing (Transactions)","url":"/manual/7.0/storage/storing-data/transactions.html","urlType":"internal"},{"content":"Lazy and Eager Storing","url":"/manual/7.0/storage/storing-data/lazy-eager-full.html","urlType":"internal"},{"content":"Transient Fields","url":"/manual/7.0/storage/storing-data/transient-fields.html","urlType":"internal"},{"content":"Best Practice","url":"/manual/7.0/storage/storing-data/best-practice.html","urlType":"internal"},{"content":"Deep Copy Utility","url":"/manual/7.0/storage/storing-data/deep-copy.html","urlType":"internal"}]},{"content":"Loading Data","url":"/manual/7.0/storage/loading-data/index.html","urlType":"internal","items":[{"content":"Lazy Loading","url":"/manual/7.0/storage/loading-data/lazy-loading/index.html","urlType":"internal"},{"content":"Touched Timestamp, Null-Safe Variant","url":"/manual/7.0/storage/loading-data/lazy-loading/touched-timestamp-null-safe-variant.html","urlType":"internal"},{"content":"Clearing Lazy References","url":"/manual/7.0/storage/loading-data/lazy-loading/clearing-lazy-references.html","urlType":"internal"}]},{"content":"Deleting Data","url":"/manual/7.0/storage/deleting-data.html","urlType":"internal"},{"content":"Queries","url":"/manual/7.0/storage/queries.html","urlType":"internal"},{"content":"Application Life-Cycle","url":"/manual/7.0/storage/application-life-cycle.html","urlType":"internal"},{"content":"Legacy Type Mapping","url":"/manual/7.0/storage/legacy-type-mapping/index.html","urlType":"internal","items":[{"content":"User Interaction","url":"/manual/7.0/storage/legacy-type-mapping/user-interaction.html","urlType":"internal"}]},{"content":"Import / Export","url":"/manual/7.0/storage/import-export.html","urlType":"internal"},{"content":"Housekeeping","url":"/manual/7.0/storage/housekeeping.html","urlType":"internal"},{"content":"Customizing","items":[{"content":"Custom Type Handler","url":"/manual/7.0/storage/customizing/custom-type-handler.html","urlType":"internal"},{"content":"Custom Legacy Type Handler","url":"/manual/7.0/storage/customizing/custom-legacy-type-handler.html","urlType":"internal"},{"content":"Custom Class Loader","url":"/manual/7.0/storage/customizing/custom-class-loader.html","urlType":"internal"},{"content":"Custom Storing Behavior","url":"/manual/7.0/storage/customizing/custom-storing-behavior.html","urlType":"internal"},{"content":"Optional Storage Manager Reference in Entities","url":"/manual/7.0/storage/customizing/optional-storage-manager-reference-in-entities.html","urlType":"internal"}]},{"content":"REST Interface","url":"/manual/7.0/storage/rest-interface/index.html","urlType":"internal","items":[{"content":"Setup","url":"/manual/7.0/storage/rest-interface/setup.html","urlType":"internal"},{"content":"REST API","url":"/manual/7.0/storage/rest-interface/rest-api.html","urlType":"internal"},{"content":"Client GUI","url":"/manual/7.0/storage/rest-interface/client-gui.html","urlType":"internal"}]},{"content":"FAQ","items":[{"content":"Data Model","url":"/manual/7.0/storage/faq/data-model.html","urlType":"internal"},{"content":"Data Management","url":"/manual/7.0/storage/faq/data-management.html","urlType":"internal"},{"content":"File Storage","url":"/manual/7.0/storage/faq/file-storage.html","urlType":"internal"},{"content":"Java Features","url":"/manual/7.0/storage/faq/java-features.html","urlType":"internal"},{"content":"Miscellaneous","url":"/manual/7.0/storage/faq/miscellaneous.html","urlType":"internal"}]},{"content":"Addendum","items":[{"content":"Supported Java Features","url":"/manual/7.0/storage/addendum/supported-java-features.html","urlType":"internal"},{"content":"Specialized Type Handlers","url":"/manual/7.0/storage/addendum/specialized-type-handlers.html","urlType":"internal"},{"content":"Examples and Demo Projects","url":"/manual/7.0/storage/addendum/examples-and-demo-projects.html","urlType":"internal"}]}]},{"content":"Serializer","url":"/manual/7.0/serializer/index.html","urlType":"internal"},{"content":"Cache","url":"/manual/7.0/cache/index.html","urlType":"internal","items":[{"content":"Getting Started","url":"/manual/7.0/cache/getting-started.html","urlType":"internal"},{"content":"Configuration","url":"/manual/7.0/cache/configuration/index.html","urlType":"internal","items":[{"content":"Properties","url":"/manual/7.0/cache/configuration/properties.html","urlType":"internal"},{"content":"Storage","url":"/manual/7.0/cache/configuration/storage.html","urlType":"internal"}]},{"content":"Use Cases","items":[{"content":"Hibernate Second Level Cache","url":"/manual/7.0/cache/use-cases/hibernate-second-level-cache.html","urlType":"internal"},{"content":"Spring Cache","url":"/manual/7.0/cache/use-cases/spring-cache.html","urlType":"internal"}]}]},{"content":"Communication","url":"/manual/7.0/communication/index.html","urlType":"internal"},{"content":"Miscellaneous","items":[{"content":"Logging","url":"/manual/7.0/misc/logging/index.html","urlType":"internal"},{"content":"Integrations","url":"/manual/7.0/misc/integrations/index.html","urlType":"internal","items":[{"content":"Helidon","url":"/manual/7.0/misc/integrations/helidon.html","urlType":"internal"},{"content":"Spring-Boot","url":"/manual/7.0/misc/integrations/spring-boot.html","urlType":"internal"},{"content":"CDI","url":"/manual/7.0/misc/integrations/cdi.html","urlType":"internal"}]},{"content":"Layered Entities","url":"/manual/7.0/misc/layered-entities/index.html","urlType":"internal","items":[{"content":"Configuration","url":"/manual/7.0/misc/layered-entities/configuration.html","urlType":"internal"},{"content":"Defining Entities","url":"/manual/7.0/misc/layered-entities/defining-entities.html","urlType":"internal"},{"content":"Creating Entities","url":"/manual/7.0/misc/layered-entities/creating-entities.html","urlType":"internal"},{"content":"Updating Entities","url":"/manual/7.0/misc/layered-entities/updating-entities.html","urlType":"internal"},{"content":"Versioning","url":"/manual/7.0/misc/layered-entities/versioning.html","urlType":"internal"},{"content":"Logging","url":"/manual/7.0/misc/layered-entities/logging.html","urlType":"internal"},{"content":"Multiple Layers","url":"/manual/7.0/misc/layered-entities/multiple-layers.html","urlType":"internal"}]},{"content":"Wrapping","url":"/manual/7.0/misc/wrapping/index.html","urlType":"internal","items":[{"content":"Configuration","url":"/manual/7.0/misc/wrapping/configuration.html","urlType":"internal"},{"content":"Usage","url":"/manual/7.0/misc/wrapping/usage.html","urlType":"internal"}]}]}],"root":true,"order":0}]},"manual/6.0":{"displayVersion":"6.0","title":"MicroStream Reference Manual","version":"6.0","name":"manual","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"MicroStream Reference Manual","site-url":"https://docs.microstream.one/","page-pagination":"","source-language":"asciidoc@","display-version":"6.1","api-version":"6.0","maven-version":"06.01.00-MS-GA"},"sourcemap":false},"url":"/manual/6.0/intro/welcome.html","navigation":[{"items":[{"content":"Welcome","url":"/manual/6.0/intro/welcome.html","urlType":"internal"},{"content":"System Requirements","url":"/manual/6.0/intro/system-requirements.html","urlType":"internal"},{"content":"Changelog","url":"/manual/6.0/intro/changelog.html","urlType":"internal"},{"content":"Installation","url":"/manual/6.0/intro/installation.html","urlType":"internal"},{"content":"Storage","url":"/manual/6.0/storage/index.html","urlType":"internal","items":[{"content":"Getting Started","url":"/manual/6.0/storage/getting-started.html","urlType":"internal"},{"content":"Root Instances","url":"/manual/6.0/storage/root-instances.html","urlType":"internal"},{"content":"Configuration","url":"/manual/6.0/storage/configuration/index.html","urlType":"internal","items":[{"content":"Properties","url":"/manual/6.0/storage/configuration/properties.html","urlType":"internal"},{"content":"Storage Files and Directories","url":"/manual/6.0/storage/configuration/storage-files-and-directories.html","urlType":"internal"},{"content":"Using Channels","url":"/manual/6.0/storage/configuration/using-channels.html","urlType":"internal"},{"content":"Houskeeping","url":"/manual/6.0/storage/configuration/housekeeping.html","urlType":"internal"},{"content":"Backup","items":[{"content":"Continous Backup","url":"/manual/6.0/storage/configuration/backup/continuous-backup.html","urlType":"internal"},{"content":"Full Backup","url":"/manual/6.0/storage/configuration/backup/full-backup.html","urlType":"internal"}]},{"content":"Lock File","url":"/manual/6.0/storage/configuration/lock-file.html","urlType":"internal"}]},{"content":"Storage Targets","url":"/manual/6.0/storage/storage-targets/index.html","urlType":"internal","items":[{"content":"Local File System","url":"/manual/6.0/storage/storage-targets/local-file-system.html","urlType":"internal"},{"content":"SQL Databases","items":[{"content":"MariaDB","url":"/manual/6.0/storage/storage-targets/sql-databases/mariadb.html","urlType":"internal"},{"content":"MySQL","url":"/manual/6.0/storage/storage-targets/sql-databases/mysql.html","urlType":"internal"},{"content":"Oracle","url":"/manual/6.0/storage/storage-targets/sql-databases/oracle.html","urlType":"internal"},{"content":"Postgres","url":"/manual/6.0/storage/storage-targets/sql-databases/postgresql.html","urlType":"internal"},{"content":"Sqlite","url":"/manual/6.0/storage/storage-targets/sql-databases/sqlite.html","urlType":"internal"}]},{"content":"Blob Stores","items":[{"content":"AWS","items":[{"content":"DynamoDB","url":"/manual/6.0/storage/storage-targets/blob-stores/aws-dynamodb.html","urlType":"internal"},{"content":"S3","url":"/manual/6.0/storage/storage-targets/blob-stores/aws-s3.html","urlType":"internal"}]},{"content":"Azure Storage","url":"/manual/6.0/storage/storage-targets/blob-stores/azure-storage.html","urlType":"internal"},{"content":"Hazelcast","url":"/manual/6.0/storage/storage-targets/blob-stores/hazelcast.html","urlType":"internal"},{"content":"Kafka","url":"/manual/6.0/storage/storage-targets/blob-stores/kafka.html","urlType":"internal"},{"content":"MongoDB","url":"/manual/6.0/storage/storage-targets/blob-stores/mongodb.html","urlType":"internal"},{"content":"Oracle Cloud Object Storage","url":"/manual/6.0/storage/storage-targets/blob-stores/oracle-cloud-object-storage.html","urlType":"internal"},{"content":"Oracle Coherence","url":"/manual/6.0/storage/storage-targets/blob-stores/oracle-coherence.html","urlType":"internal"},{"content":"Oracle NoSQL","url":"/manual/6.0/storage/storage-targets/blob-stores/oracle-nosql.html","urlType":"internal"},{"content":"Redis","url":"/manual/6.0/storage/storage-targets/blob-stores/redis.html","urlType":"internal"}]}]},{"content":"Storing Data","url":"/manual/6.0/storage/storing-data/index.html","urlType":"internal","items":[{"content":"Convenience Methods and Explicit Storing (Transactions)","url":"/manual/6.0/storage/storing-data/transactions.html","urlType":"internal"},{"content":"Lazy and Eager Storing","url":"/manual/6.0/storage/storing-data/lazy-eager-full.html","urlType":"internal"},{"content":"Transient Fields","url":"/manual/6.0/storage/storing-data/transient-fields.html","urlType":"internal"},{"content":"Best Practice","url":"/manual/6.0/storage/storing-data/best-practice.html","urlType":"internal"},{"content":"Deep Copy Utility","url":"/manual/6.0/storage/storing-data/deep-copy.html","urlType":"internal"}]},{"content":"Loading Data","url":"/manual/6.0/storage/loading-data/index.html","urlType":"internal","items":[{"content":"Lazy Loading","url":"/manual/6.0/storage/loading-data/lazy-loading/index.html","urlType":"internal"},{"content":"Touched Timestamp, Null-Safe Variant","url":"/manual/6.0/storage/loading-data/lazy-loading/touched-timestamp-null-safe-variant.html","urlType":"internal"},{"content":"Clearing Lazy References","url":"/manual/6.0/storage/loading-data/lazy-loading/clearing-lazy-references.html","urlType":"internal"}]},{"content":"Deleting Data","url":"/manual/6.0/storage/deleting-data.html","urlType":"internal"},{"content":"Queries","url":"/manual/6.0/storage/queries.html","urlType":"internal"},{"content":"Application Life-Cycle","url":"/manual/6.0/storage/application-life-cycle.html","urlType":"internal"},{"content":"Legacy Type Mapping","url":"/manual/6.0/storage/legacy-type-mapping/index.html","urlType":"internal","items":[{"content":"User Interaction","url":"/manual/6.0/storage/legacy-type-mapping/user-interaction.html","urlType":"internal"}]},{"content":"Import / Export","url":"/manual/6.0/storage/import-export.html","urlType":"internal"},{"content":"Housekeeping","url":"/manual/6.0/storage/housekeeping.html","urlType":"internal"},{"content":"Customizing","items":[{"content":"Custom Type Handler","url":"/manual/6.0/storage/customizing/custom-type-handler.html","urlType":"internal"},{"content":"Custom Legacy Type Handler","url":"/manual/6.0/storage/customizing/custom-legacy-type-handler.html","urlType":"internal"},{"content":"Custom Class Loader","url":"/manual/6.0/storage/customizing/custom-class-loader.html","urlType":"internal"},{"content":"Custom Storing Behavior","url":"/manual/6.0/storage/customizing/custom-storing-behavior.html","urlType":"internal"},{"content":"Optional Storage Manager Reference in Entities","url":"/manual/6.0/storage/customizing/optional-storage-manager-reference-in-entities.html","urlType":"internal"}]},{"content":"REST Interface","url":"/manual/6.0/storage/rest-interface/index.html","urlType":"internal","items":[{"content":"Setup","url":"/manual/6.0/storage/rest-interface/setup.html","urlType":"internal"},{"content":"REST API","url":"/manual/6.0/storage/rest-interface/rest-api.html","urlType":"internal"},{"content":"Client GUI","url":"/manual/6.0/storage/rest-interface/client-gui.html","urlType":"internal"}]},{"content":"FAQ","items":[{"content":"Data Model","url":"/manual/6.0/storage/faq/data-model.html","urlType":"internal"},{"content":"Data Management","url":"/manual/6.0/storage/faq/data-management.html","urlType":"internal"},{"content":"File Storage","url":"/manual/6.0/storage/faq/file-storage.html","urlType":"internal"},{"content":"Java Features","url":"/manual/6.0/storage/faq/java-features.html","urlType":"internal"},{"content":"Miscellaneous","url":"/manual/6.0/storage/faq/miscellaneous.html","urlType":"internal"}]},{"content":"Addendum","items":[{"content":"Supported Java Features","url":"/manual/6.0/storage/addendum/supported-java-features.html","urlType":"internal"},{"content":"Specialized Type Handlers","url":"/manual/6.0/storage/addendum/specialized-type-handlers.html","urlType":"internal"},{"content":"Examples and Demo Projects","url":"/manual/6.0/storage/addendum/examples-and-demo-projects.html","urlType":"internal"}]}]},{"content":"Cache","url":"/manual/6.0/cache/index.html","urlType":"internal","items":[{"content":"Getting Started","url":"/manual/6.0/cache/getting-started.html","urlType":"internal"},{"content":"Configuration","url":"/manual/6.0/cache/configuration/index.html","urlType":"internal","items":[{"content":"Properties","url":"/manual/6.0/cache/configuration/properties.html","urlType":"internal"},{"content":"Storage","url":"/manual/6.0/cache/configuration/storage.html","urlType":"internal"}]},{"content":"Use Cases","items":[{"content":"Hibernate Second Level Cache","url":"/manual/6.0/cache/use-cases/hibernate-second-level-cache.html","urlType":"internal"},{"content":"Spring Cache","url":"/manual/6.0/cache/use-cases/spring-cache.html","urlType":"internal"}]}]},{"content":"Miscellaneous","items":[{"content":"Integrations","url":"/manual/6.0/misc/integrations/index.html","urlType":"internal","items":[{"content":"Helidon","url":"/manual/6.0/misc/integrations/helidon.html","urlType":"internal"},{"content":"Spring-Boot","url":"/manual/6.0/misc/integrations/spring-boot.html","urlType":"internal"}]},{"content":"Layered Entities","url":"/manual/6.0/misc/layered-entities/index.html","urlType":"internal","items":[{"content":"Configuration","url":"/manual/6.0/misc/layered-entities/configuration.html","urlType":"internal"},{"content":"Defining Entities","url":"/manual/6.0/misc/layered-entities/defining-entities.html","urlType":"internal"},{"content":"Creating Entities","url":"/manual/6.0/misc/layered-entities/creating-entities.html","urlType":"internal"},{"content":"Updating Entities","url":"/manual/6.0/misc/layered-entities/updating-entities.html","urlType":"internal"},{"content":"Versioning","url":"/manual/6.0/misc/layered-entities/versioning.html","urlType":"internal"},{"content":"Logging","url":"/manual/6.0/misc/layered-entities/logging.html","urlType":"internal"},{"content":"Multiple Layers","url":"/manual/6.0/misc/layered-entities/multiple-layers.html","urlType":"internal"}]},{"content":"Wrapping","url":"/manual/6.0/misc/wrapping/index.html","urlType":"internal","items":[{"content":"Configuration","url":"/manual/6.0/misc/wrapping/configuration.html","urlType":"internal"},{"content":"Usage","url":"/manual/6.0/misc/wrapping/usage.html","urlType":"internal"}]}]}],"root":true,"order":0}]},"manual/5.0":{"displayVersion":"5.0","title":"MicroStream Reference Manual","version":"5.0","name":"manual","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"MicroStream Reference Manual","site-url":"https://docs.microstream.one/","page-pagination":"","source-language":"asciidoc@","display-version":"5.0","api-version":"5.0","maven-version":"05.00.02-MS-GA"},"sourcemap":false},"url":"/manual/5.0/intro/welcome.html","navigation":[{"items":[{"content":"Welcome","url":"/manual/5.0/intro/welcome.html","urlType":"internal"},{"content":"System Requirements","url":"/manual/5.0/intro/system-requirements.html","urlType":"internal"},{"content":"Changelog","url":"/manual/5.0/intro/changelog.html","urlType":"internal"},{"content":"Installation","url":"/manual/5.0/intro/installation.html","urlType":"internal"},{"content":"Storage","url":"/manual/5.0/storage/index.html","urlType":"internal","items":[{"content":"Getting Started","url":"/manual/5.0/storage/getting-started.html","urlType":"internal"},{"content":"Root Instances","url":"/manual/5.0/storage/root-instances.html","urlType":"internal"},{"content":"Configuration","url":"/manual/5.0/storage/configuration/index.html","urlType":"internal","items":[{"content":"Properties","url":"/manual/5.0/storage/configuration/properties.html","urlType":"internal"},{"content":"Storage Files and Directories","url":"/manual/5.0/storage/configuration/storage-files-and-directories.html","urlType":"internal"},{"content":"Using Channels","url":"/manual/5.0/storage/configuration/using-channels.html","urlType":"internal"},{"content":"Houskeeping","url":"/manual/5.0/storage/configuration/housekeeping.html","urlType":"internal"},{"content":"Backup","items":[{"content":"Continous Backup","url":"/manual/5.0/storage/configuration/backup/continuous-backup.html","urlType":"internal"},{"content":"Full Backup","url":"/manual/5.0/storage/configuration/backup/full-backup.html","urlType":"internal"}]},{"content":"Lock File","url":"/manual/5.0/storage/configuration/lock-file.html","urlType":"internal"}]},{"content":"Storage Targets","url":"/manual/5.0/storage/storage-targets/index.html","urlType":"internal","items":[{"content":"Local File System","url":"/manual/5.0/storage/storage-targets/local-file-system.html","urlType":"internal"},{"content":"SQL Databases","items":[{"content":"MariaDB","url":"/manual/5.0/storage/storage-targets/sql-databases/mariadb.html","urlType":"internal"},{"content":"MySQL","url":"/manual/5.0/storage/storage-targets/sql-databases/mysql.html","urlType":"internal"},{"content":"Oracle","url":"/manual/5.0/storage/storage-targets/sql-databases/oracle.html","urlType":"internal"},{"content":"Postgres","url":"/manual/5.0/storage/storage-targets/sql-databases/postgresql.html","urlType":"internal"},{"content":"Sqlite","url":"/manual/5.0/storage/storage-targets/sql-databases/sqlite.html","urlType":"internal"}]},{"content":"Blob Stores","items":[{"content":"AWS","items":[{"content":"DynamoDB","url":"/manual/5.0/storage/storage-targets/blob-stores/aws-dynamodb.html","urlType":"internal"},{"content":"S3","url":"/manual/5.0/storage/storage-targets/blob-stores/aws-s3.html","urlType":"internal"}]},{"content":"Azure Storage","url":"/manual/5.0/storage/storage-targets/blob-stores/azure-storage.html","urlType":"internal"},{"content":"Hazelcast","url":"/manual/5.0/storage/storage-targets/blob-stores/hazelcast.html","urlType":"internal"},{"content":"Kafka","url":"/manual/5.0/storage/storage-targets/blob-stores/kafka.html","urlType":"internal"},{"content":"MongoDB","url":"/manual/5.0/storage/storage-targets/blob-stores/mongodb.html","urlType":"internal"},{"content":"Oracle Cloud Object Storage","url":"/manual/5.0/storage/storage-targets/blob-stores/oracle-cloud-object-storage.html","urlType":"internal"},{"content":"Oracle Coherence","url":"/manual/5.0/storage/storage-targets/blob-stores/oracle-coherence.html","urlType":"internal"},{"content":"Oracle NoSQL","url":"/manual/5.0/storage/storage-targets/blob-stores/oracle-nosql.html","urlType":"internal"},{"content":"Redis","url":"/manual/5.0/storage/storage-targets/blob-stores/redis.html","urlType":"internal"}]}]},{"content":"Storing Data","url":"/manual/5.0/storage/storing-data/index.html","urlType":"internal","items":[{"content":"Convenience Methods and Explicit Storing (Transactions)","url":"/manual/5.0/storage/storing-data/transactions.html","urlType":"internal"},{"content":"Lazy and Eager Storing","url":"/manual/5.0/storage/storing-data/lazy-eager-full.html","urlType":"internal"},{"content":"Transient Fields","url":"/manual/5.0/storage/storing-data/transient-fields.html","urlType":"internal"},{"content":"Best Practice","url":"/manual/5.0/storage/storing-data/best-practice.html","urlType":"internal"}]},{"content":"Loading Data","url":"/manual/5.0/storage/loading-data/index.html","urlType":"internal","items":[{"content":"Lazy Loading","url":"/manual/5.0/storage/loading-data/lazy-loading/index.html","urlType":"internal"},{"content":"Touched Timestamp, Null-Safe Variant","url":"/manual/5.0/storage/loading-data/lazy-loading/touched-timestamp-null-safe-variant.html","urlType":"internal"},{"content":"Clearing Lazy References","url":"/manual/5.0/storage/loading-data/lazy-loading/clearing-lazy-references.html","urlType":"internal"}]},{"content":"Deleting Data","url":"/manual/5.0/storage/deleting-data.html","urlType":"internal"},{"content":"Queries","url":"/manual/5.0/storage/queries.html","urlType":"internal"},{"content":"Application Life-Cycle","url":"/manual/5.0/storage/application-life-cycle.html","urlType":"internal"},{"content":"Legacy Type Mapping","url":"/manual/5.0/storage/legacy-type-mapping/index.html","urlType":"internal","items":[{"content":"User Interaction","url":"/manual/5.0/storage/legacy-type-mapping/user-interaction.html","urlType":"internal"}]},{"content":"Import / Export","url":"/manual/5.0/storage/import-export.html","urlType":"internal"},{"content":"Housekeeping","url":"/manual/5.0/storage/housekeeping.html","urlType":"internal"},{"content":"Customizing","items":[{"content":"Custom Type Handler","url":"/manual/5.0/storage/customizing/custom-type-handler.html","urlType":"internal"},{"content":"Custom Legacy Type Handler","url":"/manual/5.0/storage/customizing/custom-legacy-type-handler.html","urlType":"internal"},{"content":"Custom Class Loader","url":"/manual/5.0/storage/customizing/custom-class-loader.html","urlType":"internal"},{"content":"Custom Storing Behavior","url":"/manual/5.0/storage/customizing/custom-storing-behavior.html","urlType":"internal"},{"content":"Optional Storage Manager Reference in Entities","url":"/manual/5.0/storage/customizing/optional-storage-manager-reference-in-entities.html","urlType":"internal"}]},{"content":"REST Interface","url":"/manual/5.0/storage/rest-interface/index.html","urlType":"internal","items":[{"content":"Setup","url":"/manual/5.0/storage/rest-interface/setup.html","urlType":"internal"},{"content":"REST API","url":"/manual/5.0/storage/rest-interface/rest-api.html","urlType":"internal"},{"content":"Client GUI","url":"/manual/5.0/storage/rest-interface/client-gui.html","urlType":"internal"}]},{"content":"FAQ","items":[{"content":"Data Model","url":"/manual/5.0/storage/faq/data-model.html","urlType":"internal"},{"content":"Data Management","url":"/manual/5.0/storage/faq/data-management.html","urlType":"internal"},{"content":"File Storage","url":"/manual/5.0/storage/faq/file-storage.html","urlType":"internal"},{"content":"Java Features","url":"/manual/5.0/storage/faq/java-features.html","urlType":"internal"},{"content":"Miscellaneous","url":"/manual/5.0/storage/faq/miscellaneous.html","urlType":"internal"}]},{"content":"Addendum","items":[{"content":"Supported Java Features","url":"/manual/5.0/storage/addendum/supported-java-features.html","urlType":"internal"},{"content":"Specialized Type Handlers","url":"/manual/5.0/storage/addendum/specialized-type-handlers.html","urlType":"internal"},{"content":"Examples and Demo Projects","url":"/manual/5.0/storage/addendum/examples-and-demo-projects.html","urlType":"internal"}]}]},{"content":"Cache","url":"/manual/5.0/cache/index.html","urlType":"internal","items":[{"content":"Getting Started","url":"/manual/5.0/cache/getting-started.html","urlType":"internal"},{"content":"Configuration","url":"/manual/5.0/cache/configuration/index.html","urlType":"internal","items":[{"content":"Properties","url":"/manual/5.0/cache/configuration/properties.html","urlType":"internal"},{"content":"Storage","url":"/manual/5.0/cache/configuration/storage.html","urlType":"internal"}]},{"content":"Use Cases","items":[{"content":"Hibernate Second Level Cache","url":"/manual/5.0/cache/use-cases/hibernate-second-level-cache.html","urlType":"internal"},{"content":"Spring Cache","url":"/manual/5.0/cache/use-cases/spring-cache.html","urlType":"internal"}]}]},{"content":"Miscellaneous","items":[{"content":"Layered Entities","url":"/manual/5.0/misc/layered-entities/index.html","urlType":"internal","items":[{"content":"Configuration","url":"/manual/5.0/misc/layered-entities/configuration.html","urlType":"internal"},{"content":"Defining Entities","url":"/manual/5.0/misc/layered-entities/defining-entities.html","urlType":"internal"},{"content":"Creating Entities","url":"/manual/5.0/misc/layered-entities/creating-entities.html","urlType":"internal"},{"content":"Updating Entities","url":"/manual/5.0/misc/layered-entities/updating-entities.html","urlType":"internal"},{"content":"Versioning","url":"/manual/5.0/misc/layered-entities/versioning.html","urlType":"internal"},{"content":"Logging","url":"/manual/5.0/misc/layered-entities/logging.html","urlType":"internal"},{"content":"Multiple Layers","url":"/manual/5.0/misc/layered-entities/multiple-layers.html","urlType":"internal"}]},{"content":"Wrapping","url":"/manual/5.0/misc/wrapping/index.html","urlType":"internal","items":[{"content":"Configuration","url":"/manual/5.0/misc/wrapping/configuration.html","urlType":"internal"},{"content":"Usage","url":"/manual/5.0/misc/wrapping/usage.html","urlType":"internal"}]}]}],"root":true,"order":0}]}}}})